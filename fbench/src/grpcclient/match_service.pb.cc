// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thirdparty/googleapis/match_service.proto

#include "thirdparty/googleapis/match_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace cloud {
namespace aiplatform {
namespace container {
namespace v1beta1 {
constexpr MatchRequest::MatchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : float_val_()
  , restricts_()
  , deployed_index_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_neighbors_(0)
  , per_crowding_attribute_num_neighbors_(0)
  , approx_num_neighbors_(0)
  , leaf_nodes_to_search_percent_override_(0){}
struct MatchRequestDefaultTypeInternal {
  constexpr MatchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchRequestDefaultTypeInternal() {}
  union {
    MatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchRequestDefaultTypeInternal _MatchRequest_default_instance_;
constexpr MatchResponse_Neighbor::MatchResponse_Neighbor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distance_(0){}
struct MatchResponse_NeighborDefaultTypeInternal {
  constexpr MatchResponse_NeighborDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchResponse_NeighborDefaultTypeInternal() {}
  union {
    MatchResponse_Neighbor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchResponse_NeighborDefaultTypeInternal _MatchResponse_Neighbor_default_instance_;
constexpr MatchResponse::MatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neighbor_(){}
struct MatchResponseDefaultTypeInternal {
  constexpr MatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchResponseDefaultTypeInternal() {}
  union {
    MatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchResponseDefaultTypeInternal _MatchResponse_default_instance_;
constexpr BatchMatchRequest_BatchMatchRequestPerIndex::BatchMatchRequest_BatchMatchRequestPerIndex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_()
  , deployed_index_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , low_level_batch_size_(0){}
struct BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal {
  constexpr BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal() {}
  union {
    BatchMatchRequest_BatchMatchRequestPerIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal _BatchMatchRequest_BatchMatchRequestPerIndex_default_instance_;
constexpr BatchMatchRequest::BatchMatchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_(){}
struct BatchMatchRequestDefaultTypeInternal {
  constexpr BatchMatchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchMatchRequestDefaultTypeInternal() {}
  union {
    BatchMatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchMatchRequestDefaultTypeInternal _BatchMatchRequest_default_instance_;
constexpr BatchMatchResponse_BatchMatchResponsePerIndex::BatchMatchResponse_BatchMatchResponsePerIndex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_()
  , deployed_index_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr){}
struct BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal {
  constexpr BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal() {}
  union {
    BatchMatchResponse_BatchMatchResponsePerIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal _BatchMatchResponse_BatchMatchResponsePerIndex_default_instance_;
constexpr BatchMatchResponse::BatchMatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responses_(){}
struct BatchMatchResponseDefaultTypeInternal {
  constexpr BatchMatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchMatchResponseDefaultTypeInternal() {}
  union {
    BatchMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchMatchResponseDefaultTypeInternal _BatchMatchResponse_default_instance_;
constexpr Namespace::Namespace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allow_tokens_()
  , deny_tokens_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NamespaceDefaultTypeInternal {
  constexpr NamespaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamespaceDefaultTypeInternal() {}
  union {
    Namespace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamespaceDefaultTypeInternal _Namespace_default_instance_;
}  // namespace v1beta1
}  // namespace container
}  // namespace aiplatform
}  // namespace cloud
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, deployed_index_id_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, float_val_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, num_neighbors_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, restricts_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, per_crowding_attribute_num_neighbors_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, approx_num_neighbors_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchRequest, leaf_nodes_to_search_percent_override_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor, id_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::MatchResponse, neighbor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex, deployed_index_id_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex, requests_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex, low_level_batch_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex, deployed_index_id_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex, responses_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::Namespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::Namespace, name_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::Namespace, allow_tokens_),
  PROTOBUF_FIELD_OFFSET(::google::cloud::aiplatform::container::v1beta1::Namespace, deny_tokens_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::MatchRequest)},
  { 12, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor)},
  { 19, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::MatchResponse)},
  { 25, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex)},
  { 33, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest)},
  { 39, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex)},
  { 47, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse)},
  { 53, -1, sizeof(::google::cloud::aiplatform::container::v1beta1::Namespace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_MatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_MatchResponse_Neighbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_MatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_BatchMatchRequest_BatchMatchRequestPerIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_BatchMatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_BatchMatchResponse_BatchMatchResponsePerIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_BatchMatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::cloud::aiplatform::container::v1beta1::_Namespace_default_instance_),
};

const char descriptor_table_protodef_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)thirdparty/googleapis/match_service.pr"
  "oto\022)google.cloud.aiplatform.container.v"
  "1beta1\032\027google/rpc/status.proto\"\227\002\n\014Matc"
  "hRequest\022\031\n\021deployed_index_id\030\001 \001(\t\022\021\n\tf"
  "loat_val\030\002 \003(\002\022\025\n\rnum_neighbors\030\003 \001(\005\022G\n"
  "\trestricts\030\004 \003(\01324.google.cloud.aiplatfo"
  "rm.container.v1beta1.Namespace\022,\n$per_cr"
  "owding_attribute_num_neighbors\030\005 \001(\005\022\034\n\024"
  "approx_num_neighbors\030\006 \001(\005\022-\n%leaf_nodes"
  "_to_search_percent_override\030\007 \001(\005\"\216\001\n\rMa"
  "tchResponse\022S\n\010neighbor\030\001 \003(\0132A.google.c"
  "loud.aiplatform.container.v1beta1.MatchR"
  "esponse.Neighbor\032(\n\010Neighbor\022\n\n\002id\030\001 \001(\t"
  "\022\020\n\010distance\030\002 \001(\001\"\237\002\n\021BatchMatchRequest"
  "\022h\n\010requests\030\001 \003(\0132V.google.cloud.aiplat"
  "form.container.v1beta1.BatchMatchRequest"
  ".BatchMatchRequestPerIndex\032\237\001\n\031BatchMatc"
  "hRequestPerIndex\022\031\n\021deployed_index_id\030\001 "
  "\001(\t\022I\n\010requests\030\002 \003(\01327.google.cloud.aip"
  "latform.container.v1beta1.MatchRequest\022\034"
  "\n\024low_level_batch_size\030\003 \001(\005\"\254\002\n\022BatchMa"
  "tchResponse\022k\n\tresponses\030\001 \003(\0132X.google."
  "cloud.aiplatform.container.v1beta1.Batch"
  "MatchResponse.BatchMatchResponsePerIndex"
  "\032\250\001\n\032BatchMatchResponsePerIndex\022\031\n\021deplo"
  "yed_index_id\030\001 \001(\t\022K\n\tresponses\030\002 \003(\01328."
  "google.cloud.aiplatform.container.v1beta"
  "1.MatchResponse\022\"\n\006status\030\003 \001(\0132\022.google"
  ".rpc.Status\"D\n\tNamespace\022\014\n\004name\030\001 \001(\t\022\024"
  "\n\014allow_tokens\030\002 \003(\t\022\023\n\013deny_tokens\030\003 \003("
  "\t2\232\002\n\014MatchService\022|\n\005Match\0227.google.clo"
  "ud.aiplatform.container.v1beta1.MatchReq"
  "uest\0328.google.cloud.aiplatform.container"
  ".v1beta1.MatchResponse\"\000\022\213\001\n\nBatchMatch\022"
  "<.google.cloud.aiplatform.container.v1be"
  "ta1.BatchMatchRequest\032=.google.cloud.aip"
  "latform.container.v1beta1.BatchMatchResp"
  "onse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_deps[1] = {
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto = {
  false, false, 1494, descriptor_table_protodef_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto, "thirdparty/googleapis/match_service.proto", 
  &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once, descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto::offsets,
  file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto, file_level_enum_descriptors_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto, file_level_service_descriptors_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter() {
  return &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto(&descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto);
namespace google {
namespace cloud {
namespace aiplatform {
namespace container {
namespace v1beta1 {

// ===================================================================

class MatchRequest::_Internal {
 public:
};

MatchRequest::MatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  float_val_(arena),
  restricts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.MatchRequest)
}
MatchRequest::MatchRequest(const MatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      float_val_(from.float_val_),
      restricts_(from.restricts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deployed_index_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deployed_index_id().empty()) {
    deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deployed_index_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&num_neighbors_, &from.num_neighbors_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaf_nodes_to_search_percent_override_) -
    reinterpret_cast<char*>(&num_neighbors_)) + sizeof(leaf_nodes_to_search_percent_override_));
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.MatchRequest)
}

inline void MatchRequest::SharedCtor() {
deployed_index_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_neighbors_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leaf_nodes_to_search_percent_override_) -
    reinterpret_cast<char*>(&num_neighbors_)) + sizeof(leaf_nodes_to_search_percent_override_));
}

MatchRequest::~MatchRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.MatchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deployed_index_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchRequest::ArenaDtor(void* object) {
  MatchRequest* _this = reinterpret_cast< MatchRequest* >(object);
  (void)_this;
}
void MatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.MatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_val_.Clear();
  restricts_.Clear();
  deployed_index_id_.ClearToEmpty();
  ::memset(&num_neighbors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaf_nodes_to_search_percent_override_) -
      reinterpret_cast<char*>(&num_neighbors_)) + sizeof(leaf_nodes_to_search_percent_override_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deployed_index_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deployed_index_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 num_neighbors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restricts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 per_crowding_attribute_num_neighbors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          per_crowding_attribute_num_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 approx_num_neighbors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          approx_num_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leaf_nodes_to_search_percent_override = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          leaf_nodes_to_search_percent_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.MatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deployed_index_id = 1;
  if (!this->_internal_deployed_index_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deployed_index_id().data(), static_cast<int>(this->_internal_deployed_index_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deployed_index_id(), target);
  }

  // repeated float float_val = 2;
  if (this->_internal_float_val_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_float_val(), target);
  }

  // int32 num_neighbors = 3;
  if (this->_internal_num_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_neighbors(), target);
  }

  // repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_restricts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_restricts(i), target, stream);
  }

  // int32 per_crowding_attribute_num_neighbors = 5;
  if (this->_internal_per_crowding_attribute_num_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_per_crowding_attribute_num_neighbors(), target);
  }

  // int32 approx_num_neighbors = 6;
  if (this->_internal_approx_num_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_approx_num_neighbors(), target);
  }

  // int32 leaf_nodes_to_search_percent_override = 7;
  if (this->_internal_leaf_nodes_to_search_percent_override() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_leaf_nodes_to_search_percent_override(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.MatchRequest)
  return target;
}

size_t MatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.MatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_val = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;
  total_size += 1UL * this->_internal_restricts_size();
  for (const auto& msg : this->restricts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string deployed_index_id = 1;
  if (!this->_internal_deployed_index_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deployed_index_id());
  }

  // int32 num_neighbors = 3;
  if (this->_internal_num_neighbors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_neighbors());
  }

  // int32 per_crowding_attribute_num_neighbors = 5;
  if (this->_internal_per_crowding_attribute_num_neighbors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_per_crowding_attribute_num_neighbors());
  }

  // int32 approx_num_neighbors = 6;
  if (this->_internal_approx_num_neighbors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_approx_num_neighbors());
  }

  // int32 leaf_nodes_to_search_percent_override = 7;
  if (this->_internal_leaf_nodes_to_search_percent_override() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leaf_nodes_to_search_percent_override());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchRequest::GetClassData() const { return &_class_data_; }

void MatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MatchRequest *>(to)->MergeFrom(
      static_cast<const MatchRequest &>(from));
}


void MatchRequest::MergeFrom(const MatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.MatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_val_.MergeFrom(from.float_val_);
  restricts_.MergeFrom(from.restricts_);
  if (!from._internal_deployed_index_id().empty()) {
    _internal_set_deployed_index_id(from._internal_deployed_index_id());
  }
  if (from._internal_num_neighbors() != 0) {
    _internal_set_num_neighbors(from._internal_num_neighbors());
  }
  if (from._internal_per_crowding_attribute_num_neighbors() != 0) {
    _internal_set_per_crowding_attribute_num_neighbors(from._internal_per_crowding_attribute_num_neighbors());
  }
  if (from._internal_approx_num_neighbors() != 0) {
    _internal_set_approx_num_neighbors(from._internal_approx_num_neighbors());
  }
  if (from._internal_leaf_nodes_to_search_percent_override() != 0) {
    _internal_set_leaf_nodes_to_search_percent_override(from._internal_leaf_nodes_to_search_percent_override());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchRequest::CopyFrom(const MatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.MatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRequest::IsInitialized() const {
  return true;
}

void MatchRequest::InternalSwap(MatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  float_val_.InternalSwap(&other->float_val_);
  restricts_.InternalSwap(&other->restricts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deployed_index_id_, GetArenaForAllocation(),
      &other->deployed_index_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchRequest, leaf_nodes_to_search_percent_override_)
      + sizeof(MatchRequest::leaf_nodes_to_search_percent_override_)
      - PROTOBUF_FIELD_OFFSET(MatchRequest, num_neighbors_)>(
          reinterpret_cast<char*>(&num_neighbors_),
          reinterpret_cast<char*>(&other->num_neighbors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[0]);
}

// ===================================================================

class MatchResponse_Neighbor::_Internal {
 public:
};

MatchResponse_Neighbor::MatchResponse_Neighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
}
MatchResponse_Neighbor::MatchResponse_Neighbor(const MatchResponse_Neighbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
}

inline void MatchResponse_Neighbor::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
distance_ = 0;
}

MatchResponse_Neighbor::~MatchResponse_Neighbor() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchResponse_Neighbor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchResponse_Neighbor::ArenaDtor(void* object) {
  MatchResponse_Neighbor* _this = reinterpret_cast< MatchResponse_Neighbor* >(object);
  (void)_this;
}
void MatchResponse_Neighbor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchResponse_Neighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchResponse_Neighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchResponse_Neighbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchResponse_Neighbor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // double distance = 2;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
  return target;
}

size_t MatchResponse_Neighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // double distance = 2;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchResponse_Neighbor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchResponse_Neighbor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchResponse_Neighbor::GetClassData() const { return &_class_data_; }

void MatchResponse_Neighbor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MatchResponse_Neighbor *>(to)->MergeFrom(
      static_cast<const MatchResponse_Neighbor &>(from));
}


void MatchResponse_Neighbor::MergeFrom(const MatchResponse_Neighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!(from._internal_distance() <= 0 && from._internal_distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchResponse_Neighbor::CopyFrom(const MatchResponse_Neighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchResponse_Neighbor::IsInitialized() const {
  return true;
}

void MatchResponse_Neighbor::InternalSwap(MatchResponse_Neighbor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchResponse_Neighbor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[1]);
}

// ===================================================================

class MatchResponse::_Internal {
 public:
};

MatchResponse::MatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  neighbor_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.MatchResponse)
}
MatchResponse::MatchResponse(const MatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neighbor_(from.neighbor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.MatchResponse)
}

inline void MatchResponse::SharedCtor() {
}

MatchResponse::~MatchResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.MatchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatchResponse::ArenaDtor(void* object) {
  MatchResponse* _this = reinterpret_cast< MatchResponse* >(object);
  (void)_this;
}
void MatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.MatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor neighbor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neighbor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.MatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor neighbor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neighbor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_neighbor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.MatchResponse)
  return target;
}

size_t MatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.MatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor neighbor = 1;
  total_size += 1UL * this->_internal_neighbor_size();
  for (const auto& msg : this->neighbor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchResponse::GetClassData() const { return &_class_data_; }

void MatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MatchResponse *>(to)->MergeFrom(
      static_cast<const MatchResponse &>(from));
}


void MatchResponse::MergeFrom(const MatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.MatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbor_.MergeFrom(from.neighbor_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchResponse::CopyFrom(const MatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.MatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchResponse::IsInitialized() const {
  return true;
}

void MatchResponse::InternalSwap(MatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  neighbor_.InternalSwap(&other->neighbor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[2]);
}

// ===================================================================

class BatchMatchRequest_BatchMatchRequestPerIndex::_Internal {
 public:
};

BatchMatchRequest_BatchMatchRequestPerIndex::BatchMatchRequest_BatchMatchRequestPerIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
}
BatchMatchRequest_BatchMatchRequestPerIndex::BatchMatchRequest_BatchMatchRequestPerIndex(const BatchMatchRequest_BatchMatchRequestPerIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deployed_index_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deployed_index_id().empty()) {
    deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deployed_index_id(), 
      GetArenaForAllocation());
  }
  low_level_batch_size_ = from.low_level_batch_size_;
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
}

inline void BatchMatchRequest_BatchMatchRequestPerIndex::SharedCtor() {
deployed_index_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
low_level_batch_size_ = 0;
}

BatchMatchRequest_BatchMatchRequestPerIndex::~BatchMatchRequest_BatchMatchRequestPerIndex() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchMatchRequest_BatchMatchRequestPerIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deployed_index_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatchMatchRequest_BatchMatchRequestPerIndex::ArenaDtor(void* object) {
  BatchMatchRequest_BatchMatchRequestPerIndex* _this = reinterpret_cast< BatchMatchRequest_BatchMatchRequestPerIndex* >(object);
  (void)_this;
}
void BatchMatchRequest_BatchMatchRequestPerIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchMatchRequest_BatchMatchRequestPerIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchMatchRequest_BatchMatchRequestPerIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  deployed_index_id_.ClearToEmpty();
  low_level_batch_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchMatchRequest_BatchMatchRequestPerIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deployed_index_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deployed_index_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.aiplatform.container.v1beta1.MatchRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 low_level_batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          low_level_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchMatchRequest_BatchMatchRequestPerIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deployed_index_id = 1;
  if (!this->_internal_deployed_index_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deployed_index_id().data(), static_cast<int>(this->_internal_deployed_index_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deployed_index_id(), target);
  }

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  // int32 low_level_batch_size = 3;
  if (this->_internal_low_level_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_low_level_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
  return target;
}

size_t BatchMatchRequest_BatchMatchRequestPerIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string deployed_index_id = 1;
  if (!this->_internal_deployed_index_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deployed_index_id());
  }

  // int32 low_level_batch_size = 3;
  if (this->_internal_low_level_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_low_level_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchMatchRequest_BatchMatchRequestPerIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchMatchRequest_BatchMatchRequestPerIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchMatchRequest_BatchMatchRequestPerIndex::GetClassData() const { return &_class_data_; }

void BatchMatchRequest_BatchMatchRequestPerIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchMatchRequest_BatchMatchRequestPerIndex *>(to)->MergeFrom(
      static_cast<const BatchMatchRequest_BatchMatchRequestPerIndex &>(from));
}


void BatchMatchRequest_BatchMatchRequestPerIndex::MergeFrom(const BatchMatchRequest_BatchMatchRequestPerIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (!from._internal_deployed_index_id().empty()) {
    _internal_set_deployed_index_id(from._internal_deployed_index_id());
  }
  if (from._internal_low_level_batch_size() != 0) {
    _internal_set_low_level_batch_size(from._internal_low_level_batch_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchMatchRequest_BatchMatchRequestPerIndex::CopyFrom(const BatchMatchRequest_BatchMatchRequestPerIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchMatchRequest_BatchMatchRequestPerIndex::IsInitialized() const {
  return true;
}

void BatchMatchRequest_BatchMatchRequestPerIndex::InternalSwap(BatchMatchRequest_BatchMatchRequestPerIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deployed_index_id_, GetArenaForAllocation(),
      &other->deployed_index_id_, other->GetArenaForAllocation()
  );
  swap(low_level_batch_size_, other->low_level_batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchMatchRequest_BatchMatchRequestPerIndex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[3]);
}

// ===================================================================

class BatchMatchRequest::_Internal {
 public:
};

BatchMatchRequest::BatchMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
}
BatchMatchRequest::BatchMatchRequest(const BatchMatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
}

inline void BatchMatchRequest::SharedCtor() {
}

BatchMatchRequest::~BatchMatchRequest() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchMatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchMatchRequest::ArenaDtor(void* object) {
  BatchMatchRequest* _this = reinterpret_cast< BatchMatchRequest* >(object);
  (void)_this;
}
void BatchMatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchMatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchMatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchMatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
  return target;
}

size_t BatchMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchMatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchMatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchMatchRequest::GetClassData() const { return &_class_data_; }

void BatchMatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchMatchRequest *>(to)->MergeFrom(
      static_cast<const BatchMatchRequest &>(from));
}


void BatchMatchRequest::MergeFrom(const BatchMatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchMatchRequest::CopyFrom(const BatchMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchMatchRequest::IsInitialized() const {
  return true;
}

void BatchMatchRequest::InternalSwap(BatchMatchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchMatchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[4]);
}

// ===================================================================

class BatchMatchResponse_BatchMatchResponsePerIndex::_Internal {
 public:
  static const ::google::rpc::Status& status(const BatchMatchResponse_BatchMatchResponsePerIndex* msg);
};

const ::google::rpc::Status&
BatchMatchResponse_BatchMatchResponsePerIndex::_Internal::status(const BatchMatchResponse_BatchMatchResponsePerIndex* msg) {
  return *msg->status_;
}
void BatchMatchResponse_BatchMatchResponsePerIndex::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
BatchMatchResponse_BatchMatchResponsePerIndex::BatchMatchResponse_BatchMatchResponsePerIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
}
BatchMatchResponse_BatchMatchResponsePerIndex::BatchMatchResponse_BatchMatchResponsePerIndex(const BatchMatchResponse_BatchMatchResponsePerIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deployed_index_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deployed_index_id().empty()) {
    deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deployed_index_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
}

inline void BatchMatchResponse_BatchMatchResponsePerIndex::SharedCtor() {
deployed_index_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = nullptr;
}

BatchMatchResponse_BatchMatchResponsePerIndex::~BatchMatchResponse_BatchMatchResponsePerIndex() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchMatchResponse_BatchMatchResponsePerIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  deployed_index_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void BatchMatchResponse_BatchMatchResponsePerIndex::ArenaDtor(void* object) {
  BatchMatchResponse_BatchMatchResponsePerIndex* _this = reinterpret_cast< BatchMatchResponse_BatchMatchResponsePerIndex* >(object);
  (void)_this;
}
void BatchMatchResponse_BatchMatchResponsePerIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchMatchResponse_BatchMatchResponsePerIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchMatchResponse_BatchMatchResponsePerIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  deployed_index_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchMatchResponse_BatchMatchResponsePerIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deployed_index_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deployed_index_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.rpc.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchMatchResponse_BatchMatchResponsePerIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deployed_index_id = 1;
  if (!this->_internal_deployed_index_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deployed_index_id().data(), static_cast<int>(this->_internal_deployed_index_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deployed_index_id(), target);
  }

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_responses(i), target, stream);
  }

  // .google.rpc.Status status = 3;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
  return target;
}

size_t BatchMatchResponse_BatchMatchResponsePerIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse responses = 2;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string deployed_index_id = 1;
  if (!this->_internal_deployed_index_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deployed_index_id());
  }

  // .google.rpc.Status status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchMatchResponse_BatchMatchResponsePerIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchMatchResponse_BatchMatchResponsePerIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchMatchResponse_BatchMatchResponsePerIndex::GetClassData() const { return &_class_data_; }

void BatchMatchResponse_BatchMatchResponsePerIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchMatchResponse_BatchMatchResponsePerIndex *>(to)->MergeFrom(
      static_cast<const BatchMatchResponse_BatchMatchResponsePerIndex &>(from));
}


void BatchMatchResponse_BatchMatchResponsePerIndex::MergeFrom(const BatchMatchResponse_BatchMatchResponsePerIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (!from._internal_deployed_index_id().empty()) {
    _internal_set_deployed_index_id(from._internal_deployed_index_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::google::rpc::Status::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchMatchResponse_BatchMatchResponsePerIndex::CopyFrom(const BatchMatchResponse_BatchMatchResponsePerIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchMatchResponse_BatchMatchResponsePerIndex::IsInitialized() const {
  return true;
}

void BatchMatchResponse_BatchMatchResponsePerIndex::InternalSwap(BatchMatchResponse_BatchMatchResponsePerIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deployed_index_id_, GetArenaForAllocation(),
      &other->deployed_index_id_, other->GetArenaForAllocation()
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchMatchResponse_BatchMatchResponsePerIndex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[5]);
}

// ===================================================================

class BatchMatchResponse::_Internal {
 public:
};

BatchMatchResponse::BatchMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
}
BatchMatchResponse::BatchMatchResponse(const BatchMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
}

inline void BatchMatchResponse::SharedCtor() {
}

BatchMatchResponse::~BatchMatchResponse() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchMatchResponse::ArenaDtor(void* object) {
  BatchMatchResponse* _this = reinterpret_cast< BatchMatchResponse* >(object);
  (void)_this;
}
void BatchMatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchMatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchMatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchMatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex responses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
  return target;
}

size_t BatchMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex responses = 1;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchMatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchMatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchMatchResponse::GetClassData() const { return &_class_data_; }

void BatchMatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BatchMatchResponse *>(to)->MergeFrom(
      static_cast<const BatchMatchResponse &>(from));
}


void BatchMatchResponse::MergeFrom(const BatchMatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchMatchResponse::CopyFrom(const BatchMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchMatchResponse::IsInitialized() const {
  return true;
}

void BatchMatchResponse::InternalSwap(BatchMatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchMatchResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[6]);
}

// ===================================================================

class Namespace::_Internal {
 public:
};

Namespace::Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  allow_tokens_(arena),
  deny_tokens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.cloud.aiplatform.container.v1beta1.Namespace)
}
Namespace::Namespace(const Namespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allow_tokens_(from.allow_tokens_),
      deny_tokens_(from.deny_tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.cloud.aiplatform.container.v1beta1.Namespace)
}

inline void Namespace::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Namespace::~Namespace() {
  // @@protoc_insertion_point(destructor:google.cloud.aiplatform.container.v1beta1.Namespace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Namespace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Namespace::ArenaDtor(void* object) {
  Namespace* _this = reinterpret_cast< Namespace* >(object);
  (void)_this;
}
void Namespace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Namespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Namespace::Clear() {
// @@protoc_insertion_point(message_clear_start:google.cloud.aiplatform.container.v1beta1.Namespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_tokens_.Clear();
  deny_tokens_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Namespace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.aiplatform.container.v1beta1.Namespace.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string allow_tokens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allow_tokens();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deny_tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deny_tokens();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Namespace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.cloud.aiplatform.container.v1beta1.Namespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.aiplatform.container.v1beta1.Namespace.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string allow_tokens = 2;
  for (int i = 0, n = this->_internal_allow_tokens_size(); i < n; i++) {
    const auto& s = this->_internal_allow_tokens(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens");
    target = stream->WriteString(2, s, target);
  }

  // repeated string deny_tokens = 3;
  for (int i = 0, n = this->_internal_deny_tokens_size(); i < n; i++) {
    const auto& s = this->_internal_deny_tokens(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.cloud.aiplatform.container.v1beta1.Namespace)
  return target;
}

size_t Namespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.cloud.aiplatform.container.v1beta1.Namespace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allow_tokens = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(allow_tokens_.size());
  for (int i = 0, n = allow_tokens_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      allow_tokens_.Get(i));
  }

  // repeated string deny_tokens = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deny_tokens_.size());
  for (int i = 0, n = deny_tokens_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deny_tokens_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Namespace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Namespace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Namespace::GetClassData() const { return &_class_data_; }

void Namespace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Namespace *>(to)->MergeFrom(
      static_cast<const Namespace &>(from));
}


void Namespace::MergeFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.cloud.aiplatform.container.v1beta1.Namespace)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_tokens_.MergeFrom(from.allow_tokens_);
  deny_tokens_.MergeFrom(from.deny_tokens_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Namespace::CopyFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.cloud.aiplatform.container.v1beta1.Namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Namespace::IsInitialized() const {
  return true;
}

void Namespace::InternalSwap(Namespace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  allow_tokens_.InternalSwap(&other->allow_tokens_);
  deny_tokens_.InternalSwap(&other->deny_tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Namespace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_getter, &descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto_once,
      file_level_metadata_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace container
}  // namespace aiplatform
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::MatchRequest* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::MatchResponse* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::cloud::aiplatform::container::v1beta1::Namespace* Arena::CreateMaybeMessage< ::google::cloud::aiplatform::container::v1beta1::Namespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::cloud::aiplatform::container::v1beta1::Namespace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
