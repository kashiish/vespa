// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/analytics/data/v1beta/data.proto

#include "google/analytics/data/v1beta/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CohortReportSettings_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CohortsRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Filter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Filter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QuotaStatus_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Cohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Filter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Filter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Filter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
namespace google {
namespace analytics {
namespace data {
namespace v1beta {
class DateRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateRange> _instance;
} _DateRange_default_instance_;
class DimensionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dimension> _instance;
} _Dimension_default_instance_;
class DimensionExpression_CaseExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionExpression_CaseExpression> _instance;
} _DimensionExpression_CaseExpression_default_instance_;
class DimensionExpression_ConcatenateExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionExpression_ConcatenateExpression> _instance;
} _DimensionExpression_ConcatenateExpression_default_instance_;
class DimensionExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionExpression> _instance;
  const ::google::analytics::data::v1beta::DimensionExpression_CaseExpression* lower_case_;
  const ::google::analytics::data::v1beta::DimensionExpression_CaseExpression* upper_case_;
  const ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression* concatenate_;
} _DimensionExpression_default_instance_;
class MetricDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Metric> _instance;
} _Metric_default_instance_;
class FilterExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterExpression> _instance;
  const ::google::analytics::data::v1beta::FilterExpressionList* and_group_;
  const ::google::analytics::data::v1beta::FilterExpressionList* or_group_;
  const ::google::analytics::data::v1beta::FilterExpression* not_expression_;
  const ::google::analytics::data::v1beta::Filter* filter_;
} _FilterExpression_default_instance_;
class FilterExpressionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterExpressionList> _instance;
} _FilterExpressionList_default_instance_;
class Filter_StringFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Filter_StringFilter> _instance;
} _Filter_StringFilter_default_instance_;
class Filter_InListFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Filter_InListFilter> _instance;
} _Filter_InListFilter_default_instance_;
class Filter_NumericFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Filter_NumericFilter> _instance;
} _Filter_NumericFilter_default_instance_;
class Filter_BetweenFilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Filter_BetweenFilter> _instance;
} _Filter_BetweenFilter_default_instance_;
class FilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Filter> _instance;
  const ::google::analytics::data::v1beta::Filter_StringFilter* string_filter_;
  const ::google::analytics::data::v1beta::Filter_InListFilter* in_list_filter_;
  const ::google::analytics::data::v1beta::Filter_NumericFilter* numeric_filter_;
  const ::google::analytics::data::v1beta::Filter_BetweenFilter* between_filter_;
} _Filter_default_instance_;
class OrderBy_MetricOrderByDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderBy_MetricOrderBy> _instance;
} _OrderBy_MetricOrderBy_default_instance_;
class OrderBy_DimensionOrderByDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderBy_DimensionOrderBy> _instance;
} _OrderBy_DimensionOrderBy_default_instance_;
class OrderBy_PivotOrderBy_PivotSelectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderBy_PivotOrderBy_PivotSelection> _instance;
} _OrderBy_PivotOrderBy_PivotSelection_default_instance_;
class OrderBy_PivotOrderByDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderBy_PivotOrderBy> _instance;
} _OrderBy_PivotOrderBy_default_instance_;
class OrderByDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderBy> _instance;
  const ::google::analytics::data::v1beta::OrderBy_MetricOrderBy* metric_;
  const ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy* dimension_;
  const ::google::analytics::data::v1beta::OrderBy_PivotOrderBy* pivot_;
} _OrderBy_default_instance_;
class PivotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pivot> _instance;
} _Pivot_default_instance_;
class CohortSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CohortSpec> _instance;
} _CohortSpec_default_instance_;
class CohortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cohort> _instance;
} _Cohort_default_instance_;
class CohortsRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CohortsRange> _instance;
} _CohortsRange_default_instance_;
class CohortReportSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CohortReportSettings> _instance;
} _CohortReportSettings_default_instance_;
class ResponseMetaDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseMetaData> _instance;
} _ResponseMetaData_default_instance_;
class DimensionHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionHeader> _instance;
} _DimensionHeader_default_instance_;
class MetricHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetricHeader> _instance;
} _MetricHeader_default_instance_;
class PivotHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PivotHeader> _instance;
} _PivotHeader_default_instance_;
class PivotDimensionHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PivotDimensionHeader> _instance;
} _PivotDimensionHeader_default_instance_;
class RowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Row> _instance;
} _Row_default_instance_;
class DimensionValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionValue> _instance;
  ::google::protobuf::internal::ArenaStringPtr value_;
} _DimensionValue_default_instance_;
class MetricValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetricValue> _instance;
  ::google::protobuf::internal::ArenaStringPtr value_;
} _MetricValue_default_instance_;
class NumericValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NumericValue> _instance;
  ::google::protobuf::int64 int64_value_;
  double double_value_;
} _NumericValue_default_instance_;
class PropertyQuotaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PropertyQuota> _instance;
} _PropertyQuota_default_instance_;
class QuotaStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuotaStatus> _instance;
} _QuotaStatus_default_instance_;
class DimensionMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DimensionMetadata> _instance;
} _DimensionMetadata_default_instance_;
class MetricMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetricMetadata> _instance;
} _MetricMetadata_default_instance_;
}  // namespace v1beta
}  // namespace data
}  // namespace analytics
}  // namespace google
static void InitDefaultsDateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_DateRange_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::DateRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::DateRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsDimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Dimension_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Dimension();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Dimension::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_DimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsDimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_DimensionExpression_CaseExpression_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::DimensionExpression_CaseExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::DimensionExpression_CaseExpression::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsDimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_DimensionExpression_ConcatenateExpression_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsDimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_DimensionExpression_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::DimensionExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::DimensionExpression::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_DimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_DimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsMetric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Metric_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Metric();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Metric::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsFilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_FilterExpression_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::FilterExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::analytics::data::v1beta::_FilterExpressionList_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::FilterExpressionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::FilterExpression::InitAsDefaultInstance();
  ::google::analytics::data::v1beta::FilterExpressionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_Filter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsFilter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Filter_StringFilter_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Filter_StringFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Filter_StringFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Filter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFilter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsFilter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Filter_InListFilter_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Filter_InListFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Filter_InListFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Filter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFilter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsFilter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Filter_NumericFilter_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Filter_NumericFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Filter_NumericFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Filter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFilter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_NumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsFilter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Filter_BetweenFilter_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Filter_BetweenFilter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Filter_BetweenFilter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Filter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFilter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_NumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Filter_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Filter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Filter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Filter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_Filter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Filter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Filter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Filter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsOrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_OrderBy_MetricOrderBy_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::OrderBy_MetricOrderBy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::OrderBy_MetricOrderBy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsOrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_OrderBy_DimensionOrderBy_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsOrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_OrderBy_PivotOrderBy_PivotSelection_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsOrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_OrderBy_PivotOrderBy_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::OrderBy_PivotOrderBy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::OrderBy_PivotOrderBy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_OrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_OrderBy_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::OrderBy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::OrderBy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_OrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_OrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_OrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsPivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Pivot_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Pivot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Pivot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Pivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsCohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_CohortSpec_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::CohortSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::CohortSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_Cohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_CohortsRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_CohortReportSettings_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsCohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Cohort_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Cohort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Cohort::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Cohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsCohortsRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_CohortsRange_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::CohortsRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::CohortsRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CohortsRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCohortsRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsCohortReportSettings_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_CohortReportSettings_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::CohortReportSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::CohortReportSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CohortReportSettings_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCohortReportSettings_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_ResponseMetaData_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::ResponseMetaData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::ResponseMetaData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_DimensionHeader_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::DimensionHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::DimensionHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsMetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_MetricHeader_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::MetricHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::MetricHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsPivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_PivotHeader_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::PivotHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::PivotHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_PivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsPivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_PivotDimensionHeader_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::PivotDimensionHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::PivotDimensionHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_DimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsRow_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Row_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Row();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Row::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRow_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_DimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_MetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsDimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_DimensionValue_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::DimensionValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::DimensionValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsMetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_MetricValue_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::MetricValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::MetricValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsNumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_NumericValue_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::NumericValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::NumericValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsPropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_PropertyQuota_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::PropertyQuota();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::PropertyQuota::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {
      &scc_info_QuotaStatus_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsQuotaStatus_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_QuotaStatus_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::QuotaStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::QuotaStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QuotaStatus_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuotaStatus_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsDimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_DimensionMetadata_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::DimensionMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::DimensionMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

static void InitDefaultsMetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_MetricMetadata_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::MetricMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::MetricMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto}, {}};

void InitDefaults_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Filter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Filter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Filter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Filter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Filter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CohortsRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CohortReportSettings_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuotaStatus_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[36];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[6];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DateRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DateRange, start_date_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DateRange, end_date_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DateRange, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Dimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Dimension, name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Dimension, dimension_expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression_CaseExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression_CaseExpression, dimension_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression, dimension_names_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression, delimiter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::analytics::data::v1beta::DimensionExpressionDefaultTypeInternal, lower_case_),
  offsetof(::google::analytics::data::v1beta::DimensionExpressionDefaultTypeInternal, upper_case_),
  offsetof(::google::analytics::data::v1beta::DimensionExpressionDefaultTypeInternal, concatenate_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionExpression, one_expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metric, name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metric, expression_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metric, invisible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::FilterExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::FilterExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::analytics::data::v1beta::FilterExpressionDefaultTypeInternal, and_group_),
  offsetof(::google::analytics::data::v1beta::FilterExpressionDefaultTypeInternal, or_group_),
  offsetof(::google::analytics::data::v1beta::FilterExpressionDefaultTypeInternal, not_expression_),
  offsetof(::google::analytics::data::v1beta::FilterExpressionDefaultTypeInternal, filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::FilterExpression, expr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::FilterExpressionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::FilterExpressionList, expressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_StringFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_StringFilter, match_type_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_StringFilter, value_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_StringFilter, case_sensitive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_InListFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_InListFilter, values_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_InListFilter, case_sensitive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_NumericFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_NumericFilter, operation_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_NumericFilter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_BetweenFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_BetweenFilter, from_value_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter_BetweenFilter, to_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter, field_name_),
  offsetof(::google::analytics::data::v1beta::FilterDefaultTypeInternal, string_filter_),
  offsetof(::google::analytics::data::v1beta::FilterDefaultTypeInternal, in_list_filter_),
  offsetof(::google::analytics::data::v1beta::FilterDefaultTypeInternal, numeric_filter_),
  offsetof(::google::analytics::data::v1beta::FilterDefaultTypeInternal, between_filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Filter, one_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_MetricOrderBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_MetricOrderBy, metric_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_DimensionOrderBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_DimensionOrderBy, dimension_name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_DimensionOrderBy, order_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection, dimension_name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection, dimension_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_PivotOrderBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_PivotOrderBy, metric_name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy_PivotOrderBy, pivot_selections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::analytics::data::v1beta::OrderByDefaultTypeInternal, metric_),
  offsetof(::google::analytics::data::v1beta::OrderByDefaultTypeInternal, dimension_),
  offsetof(::google::analytics::data::v1beta::OrderByDefaultTypeInternal, pivot_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy, desc_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::OrderBy, one_order_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Pivot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Pivot, field_names_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Pivot, order_bys_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Pivot, offset_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Pivot, limit_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Pivot, metric_aggregations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortSpec, cohorts_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortSpec, cohorts_range_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortSpec, cohort_report_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Cohort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Cohort, name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Cohort, dimension_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Cohort, date_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortsRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortsRange, granularity_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortsRange, start_offset_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortsRange, end_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortReportSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::CohortReportSettings, accumulate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::ResponseMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::ResponseMetaData, data_loss_from_other_row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionHeader, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricHeader, name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricHeader, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PivotHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PivotHeader, pivot_dimension_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PivotHeader, row_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PivotDimensionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PivotDimensionHeader, dimension_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Row, dimension_values_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Row, metric_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::analytics::data::v1beta::DimensionValueDefaultTypeInternal, value_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionValue, one_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::analytics::data::v1beta::MetricValueDefaultTypeInternal, value_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricValue, one_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::NumericValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::NumericValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::analytics::data::v1beta::NumericValueDefaultTypeInternal, int64_value_),
  offsetof(::google::analytics::data::v1beta::NumericValueDefaultTypeInternal, double_value_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::NumericValue, one_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PropertyQuota, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PropertyQuota, tokens_per_day_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PropertyQuota, tokens_per_hour_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PropertyQuota, concurrent_requests_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PropertyQuota, server_errors_per_project_per_hour_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::PropertyQuota, potentially_thresholded_requests_per_hour_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::QuotaStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::QuotaStatus, consumed_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::QuotaStatus, remaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionMetadata, api_name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionMetadata, ui_name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionMetadata, description_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionMetadata, deprecated_api_names_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::DimensionMetadata, custom_definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, api_name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, ui_name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, description_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, deprecated_api_names_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, type_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, expression_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::MetricMetadata, custom_definition_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::analytics::data::v1beta::DateRange)},
  { 8, -1, sizeof(::google::analytics::data::v1beta::Dimension)},
  { 15, -1, sizeof(::google::analytics::data::v1beta::DimensionExpression_CaseExpression)},
  { 21, -1, sizeof(::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression)},
  { 28, -1, sizeof(::google::analytics::data::v1beta::DimensionExpression)},
  { 37, -1, sizeof(::google::analytics::data::v1beta::Metric)},
  { 45, -1, sizeof(::google::analytics::data::v1beta::FilterExpression)},
  { 55, -1, sizeof(::google::analytics::data::v1beta::FilterExpressionList)},
  { 61, -1, sizeof(::google::analytics::data::v1beta::Filter_StringFilter)},
  { 69, -1, sizeof(::google::analytics::data::v1beta::Filter_InListFilter)},
  { 76, -1, sizeof(::google::analytics::data::v1beta::Filter_NumericFilter)},
  { 83, -1, sizeof(::google::analytics::data::v1beta::Filter_BetweenFilter)},
  { 90, -1, sizeof(::google::analytics::data::v1beta::Filter)},
  { 101, -1, sizeof(::google::analytics::data::v1beta::OrderBy_MetricOrderBy)},
  { 107, -1, sizeof(::google::analytics::data::v1beta::OrderBy_DimensionOrderBy)},
  { 114, -1, sizeof(::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection)},
  { 121, -1, sizeof(::google::analytics::data::v1beta::OrderBy_PivotOrderBy)},
  { 128, -1, sizeof(::google::analytics::data::v1beta::OrderBy)},
  { 138, -1, sizeof(::google::analytics::data::v1beta::Pivot)},
  { 148, -1, sizeof(::google::analytics::data::v1beta::CohortSpec)},
  { 156, -1, sizeof(::google::analytics::data::v1beta::Cohort)},
  { 164, -1, sizeof(::google::analytics::data::v1beta::CohortsRange)},
  { 172, -1, sizeof(::google::analytics::data::v1beta::CohortReportSettings)},
  { 178, -1, sizeof(::google::analytics::data::v1beta::ResponseMetaData)},
  { 184, -1, sizeof(::google::analytics::data::v1beta::DimensionHeader)},
  { 190, -1, sizeof(::google::analytics::data::v1beta::MetricHeader)},
  { 197, -1, sizeof(::google::analytics::data::v1beta::PivotHeader)},
  { 204, -1, sizeof(::google::analytics::data::v1beta::PivotDimensionHeader)},
  { 210, -1, sizeof(::google::analytics::data::v1beta::Row)},
  { 217, -1, sizeof(::google::analytics::data::v1beta::DimensionValue)},
  { 224, -1, sizeof(::google::analytics::data::v1beta::MetricValue)},
  { 231, -1, sizeof(::google::analytics::data::v1beta::NumericValue)},
  { 239, -1, sizeof(::google::analytics::data::v1beta::PropertyQuota)},
  { 249, -1, sizeof(::google::analytics::data::v1beta::QuotaStatus)},
  { 256, -1, sizeof(::google::analytics::data::v1beta::DimensionMetadata)},
  { 266, -1, sizeof(::google::analytics::data::v1beta::MetricMetadata)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_DateRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Dimension_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_DimensionExpression_CaseExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_DimensionExpression_ConcatenateExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_DimensionExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Metric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_FilterExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_FilterExpressionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Filter_StringFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Filter_InListFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Filter_NumericFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Filter_BetweenFilter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Filter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_OrderBy_MetricOrderBy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_OrderBy_DimensionOrderBy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_OrderBy_PivotOrderBy_PivotSelection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_OrderBy_PivotOrderBy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_OrderBy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Pivot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_CohortSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Cohort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_CohortsRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_CohortReportSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_ResponseMetaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_DimensionHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_MetricHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_PivotHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_PivotDimensionHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_DimensionValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_MetricValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_NumericValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_PropertyQuota_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_QuotaStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_DimensionMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_MetricMetadata_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto = {
  {}, AddDescriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto, "google/analytics/data/v1beta/data.proto", schemas,
  file_default_instances, TableStruct_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto::offsets,
  file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto, 36, file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto, file_level_service_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto,
};

const char descriptor_table_protodef_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[] =
  "\n\'google/analytics/data/v1beta/data.prot"
  "o\022\034google.analytics.data.v1beta\"\?\n\tDateR"
  "ange\022\022\n\nstart_date\030\001 \001(\t\022\020\n\010end_date\030\002 \001"
  "(\t\022\014\n\004name\030\003 \001(\t\"j\n\tDimension\022\014\n\004name\030\001 "
  "\001(\t\022O\n\024dimension_expression\030\002 \001(\01321.goog"
  "le.analytics.data.v1beta.DimensionExpres"
  "sion\"\246\003\n\023DimensionExpression\022V\n\nlower_ca"
  "se\030\004 \001(\0132@.google.analytics.data.v1beta."
  "DimensionExpression.CaseExpressionH\000\022V\n\n"
  "upper_case\030\005 \001(\0132@.google.analytics.data"
  ".v1beta.DimensionExpression.CaseExpressi"
  "onH\000\022^\n\013concatenate\030\006 \001(\0132G.google.analy"
  "tics.data.v1beta.DimensionExpression.Con"
  "catenateExpressionH\000\032(\n\016CaseExpression\022\026"
  "\n\016dimension_name\030\001 \001(\t\032C\n\025ConcatenateExp"
  "ression\022\027\n\017dimension_names\030\001 \003(\t\022\021\n\tdeli"
  "miter\030\002 \001(\tB\020\n\016one_expression\"=\n\006Metric\022"
  "\014\n\004name\030\001 \001(\t\022\022\n\nexpression\030\002 \001(\t\022\021\n\tinv"
  "isible\030\003 \001(\010\"\255\002\n\020FilterExpression\022G\n\tand"
  "_group\030\001 \001(\01322.google.analytics.data.v1b"
  "eta.FilterExpressionListH\000\022F\n\010or_group\030\002"
  " \001(\01322.google.analytics.data.v1beta.Filt"
  "erExpressionListH\000\022H\n\016not_expression\030\003 \001"
  "(\0132..google.analytics.data.v1beta.Filter"
  "ExpressionH\000\0226\n\006filter\030\004 \001(\0132$.google.an"
  "alytics.data.v1beta.FilterH\000B\006\n\004expr\"[\n\024"
  "FilterExpressionList\022C\n\013expressions\030\001 \003("
  "\0132..google.analytics.data.v1beta.FilterE"
  "xpression\"\336\010\n\006Filter\022\022\n\nfield_name\030\001 \001(\t"
  "\022J\n\rstring_filter\030\003 \001(\01321.google.analyti"
  "cs.data.v1beta.Filter.StringFilterH\000\022K\n\016"
  "in_list_filter\030\004 \001(\01321.google.analytics."
  "data.v1beta.Filter.InListFilterH\000\022L\n\016num"
  "eric_filter\030\005 \001(\01322.google.analytics.dat"
  "a.v1beta.Filter.NumericFilterH\000\022L\n\016betwe"
  "en_filter\030\006 \001(\01322.google.analytics.data."
  "v1beta.Filter.BetweenFilterH\000\032\216\002\n\014String"
  "Filter\022O\n\nmatch_type\030\001 \001(\0162;.google.anal"
  "ytics.data.v1beta.Filter.StringFilter.Ma"
  "tchType\022\r\n\005value\030\002 \001(\t\022\026\n\016case_sensitive"
  "\030\003 \001(\010\"\205\001\n\tMatchType\022\032\n\026MATCH_TYPE_UNSPE"
  "CIFIED\020\000\022\t\n\005EXACT\020\001\022\017\n\013BEGINS_WITH\020\002\022\r\n\t"
  "ENDS_WITH\020\003\022\014\n\010CONTAINS\020\004\022\017\n\013FULL_REGEXP"
  "\020\005\022\022\n\016PARTIAL_REGEXP\020\006\0326\n\014InListFilter\022\016"
  "\n\006values\030\001 \003(\t\022\026\n\016case_sensitive\030\002 \001(\010\032\243"
  "\002\n\rNumericFilter\022O\n\toperation\030\001 \001(\0162<.go"
  "ogle.analytics.data.v1beta.Filter.Numeri"
  "cFilter.Operation\0229\n\005value\030\002 \001(\0132*.googl"
  "e.analytics.data.v1beta.NumericValue\"\205\001\n"
  "\tOperation\022\031\n\025OPERATION_UNSPECIFIED\020\000\022\t\n"
  "\005EQUAL\020\001\022\r\n\tLESS_THAN\020\002\022\026\n\022LESS_THAN_OR_"
  "EQUAL\020\003\022\020\n\014GREATER_THAN\020\004\022\031\n\025GREATER_THA"
  "N_OR_EQUAL\020\005\032\215\001\n\rBetweenFilter\022>\n\nfrom_v"
  "alue\030\001 \001(\0132*.google.analytics.data.v1bet"
  "a.NumericValue\022<\n\010to_value\030\002 \001(\0132*.googl"
  "e.analytics.data.v1beta.NumericValueB\014\n\n"
  "one_filter\"\332\005\n\007OrderBy\022E\n\006metric\030\001 \001(\01323"
  ".google.analytics.data.v1beta.OrderBy.Me"
  "tricOrderByH\000\022K\n\tdimension\030\002 \001(\01326.googl"
  "e.analytics.data.v1beta.OrderBy.Dimensio"
  "nOrderByH\000\022C\n\005pivot\030\003 \001(\01322.google.analy"
  "tics.data.v1beta.OrderBy.PivotOrderByH\000\022"
  "\014\n\004desc\030\004 \001(\010\032$\n\rMetricOrderBy\022\023\n\013metric"
  "_name\030\001 \001(\t\032\353\001\n\020DimensionOrderBy\022\026\n\016dime"
  "nsion_name\030\001 \001(\t\022T\n\norder_type\030\002 \001(\0162@.g"
  "oogle.analytics.data.v1beta.OrderBy.Dime"
  "nsionOrderBy.OrderType\"i\n\tOrderType\022\032\n\026O"
  "RDER_TYPE_UNSPECIFIED\020\000\022\020\n\014ALPHANUMERIC\020"
  "\001\022!\n\035CASE_INSENSITIVE_ALPHANUMERIC\020\002\022\013\n\007"
  "NUMERIC\020\003\032\303\001\n\014PivotOrderBy\022\023\n\013metric_nam"
  "e\030\001 \001(\t\022[\n\020pivot_selections\030\002 \003(\0132A.goog"
  "le.analytics.data.v1beta.OrderBy.PivotOr"
  "derBy.PivotSelection\032A\n\016PivotSelection\022\026"
  "\n\016dimension_name\030\001 \001(\t\022\027\n\017dimension_valu"
  "e\030\002 \001(\tB\016\n\014one_order_by\"\303\001\n\005Pivot\022\023\n\013fie"
  "ld_names\030\001 \003(\t\0228\n\torder_bys\030\002 \003(\0132%.goog"
  "le.analytics.data.v1beta.OrderBy\022\016\n\006offs"
  "et\030\003 \001(\003\022\r\n\005limit\030\004 \001(\003\022L\n\023metric_aggreg"
  "ations\030\005 \003(\0162/.google.analytics.data.v1b"
  "eta.MetricAggregation\"\332\001\n\nCohortSpec\0225\n\007"
  "cohorts\030\001 \003(\0132$.google.analytics.data.v1"
  "beta.Cohort\022A\n\rcohorts_range\030\002 \001(\0132*.goo"
  "gle.analytics.data.v1beta.CohortsRange\022R"
  "\n\026cohort_report_settings\030\003 \001(\01322.google."
  "analytics.data.v1beta.CohortReportSettin"
  "gs\"f\n\006Cohort\022\014\n\004name\030\001 \001(\t\022\021\n\tdimension\030"
  "\002 \001(\t\022;\n\ndate_range\030\003 \001(\0132\'.google.analy"
  "tics.data.v1beta.DateRange\"\325\001\n\014CohortsRa"
  "nge\022K\n\013granularity\030\001 \001(\01626.google.analyt"
  "ics.data.v1beta.CohortsRange.Granularity"
  "\022\024\n\014start_offset\030\002 \001(\005\022\022\n\nend_offset\030\003 \001"
  "(\005\"N\n\013Granularity\022\033\n\027GRANULARITY_UNSPECI"
  "FIED\020\000\022\t\n\005DAILY\020\001\022\n\n\006WEEKLY\020\002\022\013\n\007MONTHLY"
  "\020\003\"*\n\024CohortReportSettings\022\022\n\naccumulate"
  "\030\001 \001(\010\"4\n\020ResponseMetaData\022 \n\030data_loss_"
  "from_other_row\030\003 \001(\010\"\037\n\017DimensionHeader\022"
  "\014\n\004name\030\001 \001(\t\"T\n\014MetricHeader\022\014\n\004name\030\001 "
  "\001(\t\0226\n\004type\030\002 \001(\0162(.google.analytics.dat"
  "a.v1beta.MetricType\"u\n\013PivotHeader\022S\n\027pi"
  "vot_dimension_headers\030\001 \003(\01322.google.ana"
  "lytics.data.v1beta.PivotDimensionHeader\022"
  "\021\n\trow_count\030\002 \001(\005\"^\n\024PivotDimensionHead"
  "er\022F\n\020dimension_values\030\001 \003(\0132,.google.an"
  "alytics.data.v1beta.DimensionValue\"\217\001\n\003R"
  "ow\022F\n\020dimension_values\030\001 \003(\0132,.google.an"
  "alytics.data.v1beta.DimensionValue\022@\n\rme"
  "tric_values\030\002 \003(\0132).google.analytics.dat"
  "a.v1beta.MetricValue\".\n\016DimensionValue\022\017"
  "\n\005value\030\001 \001(\tH\000B\013\n\tone_value\"+\n\013MetricVa"
  "lue\022\017\n\005value\030\004 \001(\tH\000B\013\n\tone_value\"J\n\014Num"
  "ericValue\022\025\n\013int64_value\030\001 \001(\003H\000\022\026\n\014doub"
  "le_value\030\002 \001(\001H\000B\013\n\tone_value\"\223\003\n\rProper"
  "tyQuota\022A\n\016tokens_per_day\030\001 \001(\0132).google"
  ".analytics.data.v1beta.QuotaStatus\022B\n\017to"
  "kens_per_hour\030\002 \001(\0132).google.analytics.d"
  "ata.v1beta.QuotaStatus\022F\n\023concurrent_req"
  "uests\030\003 \001(\0132).google.analytics.data.v1be"
  "ta.QuotaStatus\022U\n\"server_errors_per_proj"
  "ect_per_hour\030\004 \001(\0132).google.analytics.da"
  "ta.v1beta.QuotaStatus\022\\\n)potentially_thr"
  "esholded_requests_per_hour\030\005 \001(\0132).googl"
  "e.analytics.data.v1beta.QuotaStatus\"2\n\013Q"
  "uotaStatus\022\020\n\010consumed\030\001 \001(\005\022\021\n\tremainin"
  "g\030\002 \001(\005\"\204\001\n\021DimensionMetadata\022\020\n\010api_nam"
  "e\030\001 \001(\t\022\017\n\007ui_name\030\002 \001(\t\022\023\n\013description\030"
  "\003 \001(\t\022\034\n\024deprecated_api_names\030\004 \003(\t\022\031\n\021c"
  "ustom_definition\030\005 \001(\010\"\315\001\n\016MetricMetadat"
  "a\022\020\n\010api_name\030\001 \001(\t\022\017\n\007ui_name\030\002 \001(\t\022\023\n\013"
  "description\030\003 \001(\t\022\034\n\024deprecated_api_name"
  "s\030\004 \003(\t\0226\n\004type\030\005 \001(\0162(.google.analytics"
  ".data.v1beta.MetricType\022\022\n\nexpression\030\006 "
  "\001(\t\022\031\n\021custom_definition\030\007 \001(\010*g\n\021Metric"
  "Aggregation\022\"\n\036METRIC_AGGREGATION_UNSPEC"
  "IFIED\020\000\022\t\n\005TOTAL\020\001\022\013\n\007MINIMUM\020\005\022\013\n\007MAXIM"
  "UM\020\006\022\t\n\005COUNT\020\004*\201\002\n\nMetricType\022\033\n\027METRIC"
  "_TYPE_UNSPECIFIED\020\000\022\020\n\014TYPE_INTEGER\020\001\022\016\n"
  "\nTYPE_FLOAT\020\002\022\020\n\014TYPE_SECONDS\020\004\022\025\n\021TYPE_"
  "MILLISECONDS\020\005\022\020\n\014TYPE_MINUTES\020\006\022\016\n\nTYPE"
  "_HOURS\020\007\022\021\n\rTYPE_STANDARD\020\010\022\021\n\rTYPE_CURR"
  "ENCY\020\t\022\r\n\tTYPE_FEET\020\n\022\016\n\nTYPE_MILES\020\013\022\017\n"
  "\013TYPE_METERS\020\014\022\023\n\017TYPE_KILOMETERS\020\rBy\n c"
  "om.google.analytics.data.v1betaB\021Reporti"
  "ngApiProtoP\001Z@google.golang.org/genproto"
  "/googleapis/analytics/data/v1beta;datab\006"
  "proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto = {
  false, InitDefaults_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto, 
  descriptor_table_protodef_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto,
  "google/analytics/data/v1beta/data.proto", &assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto, 5766,
};

void AddDescriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto = []() { AddDescriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto(); return true; }();
namespace google {
namespace analytics {
namespace data {
namespace v1beta {
const ::google::protobuf::EnumDescriptor* Filter_StringFilter_MatchType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[0];
}
bool Filter_StringFilter_MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Filter_StringFilter_MatchType Filter_StringFilter::MATCH_TYPE_UNSPECIFIED;
const Filter_StringFilter_MatchType Filter_StringFilter::EXACT;
const Filter_StringFilter_MatchType Filter_StringFilter::BEGINS_WITH;
const Filter_StringFilter_MatchType Filter_StringFilter::ENDS_WITH;
const Filter_StringFilter_MatchType Filter_StringFilter::CONTAINS;
const Filter_StringFilter_MatchType Filter_StringFilter::FULL_REGEXP;
const Filter_StringFilter_MatchType Filter_StringFilter::PARTIAL_REGEXP;
const Filter_StringFilter_MatchType Filter_StringFilter::MatchType_MIN;
const Filter_StringFilter_MatchType Filter_StringFilter::MatchType_MAX;
const int Filter_StringFilter::MatchType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Filter_NumericFilter_Operation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[1];
}
bool Filter_NumericFilter_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Filter_NumericFilter_Operation Filter_NumericFilter::OPERATION_UNSPECIFIED;
const Filter_NumericFilter_Operation Filter_NumericFilter::EQUAL;
const Filter_NumericFilter_Operation Filter_NumericFilter::LESS_THAN;
const Filter_NumericFilter_Operation Filter_NumericFilter::LESS_THAN_OR_EQUAL;
const Filter_NumericFilter_Operation Filter_NumericFilter::GREATER_THAN;
const Filter_NumericFilter_Operation Filter_NumericFilter::GREATER_THAN_OR_EQUAL;
const Filter_NumericFilter_Operation Filter_NumericFilter::Operation_MIN;
const Filter_NumericFilter_Operation Filter_NumericFilter::Operation_MAX;
const int Filter_NumericFilter::Operation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OrderBy_DimensionOrderBy_OrderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[2];
}
bool OrderBy_DimensionOrderBy_OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy::ORDER_TYPE_UNSPECIFIED;
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy::ALPHANUMERIC;
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy::CASE_INSENSITIVE_ALPHANUMERIC;
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy::NUMERIC;
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy::OrderType_MIN;
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy::OrderType_MAX;
const int OrderBy_DimensionOrderBy::OrderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CohortsRange_Granularity_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[3];
}
bool CohortsRange_Granularity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CohortsRange_Granularity CohortsRange::GRANULARITY_UNSPECIFIED;
const CohortsRange_Granularity CohortsRange::DAILY;
const CohortsRange_Granularity CohortsRange::WEEKLY;
const CohortsRange_Granularity CohortsRange::MONTHLY;
const CohortsRange_Granularity CohortsRange::Granularity_MIN;
const CohortsRange_Granularity CohortsRange::Granularity_MAX;
const int CohortsRange::Granularity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MetricAggregation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[4];
}
bool MetricAggregation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MetricType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[5];
}
bool MetricType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DateRange::InitAsDefaultInstance() {
}
class DateRange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateRange::kStartDateFieldNumber;
const int DateRange::kEndDateFieldNumber;
const int DateRange::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateRange::DateRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.DateRange)
}
DateRange::DateRange(const DateRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_date().size() > 0) {
    start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  end_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_date().size() > 0) {
    end_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.DateRange)
}

void DateRange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  start_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DateRange::~DateRange() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.DateRange)
  SharedDtor();
}

void DateRange::SharedDtor() {
  start_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DateRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateRange& DateRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DateRange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.DateRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string start_date = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DateRange.start_date");
        object = msg->mutable_start_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string end_date = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DateRange.end_date");
        object = msg->mutable_end_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DateRange.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.DateRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string start_date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_date().data(), static_cast<int>(this->start_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DateRange.start_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_date().data(), static_cast<int>(this->end_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DateRange.end_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DateRange.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.DateRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.DateRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.DateRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DateRange.start_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->start_date(), output);
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_date().data(), static_cast<int>(this->end_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DateRange.end_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->end_date(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DateRange.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.DateRange)
}

::google::protobuf::uint8* DateRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.DateRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_date().data(), static_cast<int>(this->start_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DateRange.start_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_date(), target);
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_date().data(), static_cast<int>(this->end_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DateRange.end_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->end_date(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DateRange.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.DateRange)
  return target;
}

size_t DateRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.DateRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start_date = 1;
  if (this->start_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_date());
  }

  // string end_date = 2;
  if (this->end_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_date());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.DateRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DateRange* source =
      ::google::protobuf::DynamicCastToGenerated<DateRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.DateRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.DateRange)
    MergeFrom(*source);
  }
}

void DateRange::MergeFrom(const DateRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.DateRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_date().size() > 0) {

    start_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_date_);
  }
  if (from.end_date().size() > 0) {

    end_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_date_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DateRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.DateRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateRange::CopyFrom(const DateRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.DateRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateRange::IsInitialized() const {
  return true;
}

void DateRange::Swap(DateRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateRange::InternalSwap(DateRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_date_.Swap(&other->start_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_date_.Swap(&other->end_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DateRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Dimension::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_Dimension_default_instance_._instance.get_mutable()->dimension_expression_ = const_cast< ::google::analytics::data::v1beta::DimensionExpression*>(
      ::google::analytics::data::v1beta::DimensionExpression::internal_default_instance());
}
class Dimension::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::DimensionExpression& dimension_expression(const Dimension* msg);
};

const ::google::analytics::data::v1beta::DimensionExpression&
Dimension::HasBitSetters::dimension_expression(const Dimension* msg) {
  return *msg->dimension_expression_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dimension::kNameFieldNumber;
const int Dimension::kDimensionExpressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dimension::Dimension()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Dimension)
}
Dimension::Dimension(const Dimension& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_dimension_expression()) {
    dimension_expression_ = new ::google::analytics::data::v1beta::DimensionExpression(*from.dimension_expression_);
  } else {
    dimension_expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Dimension)
}

void Dimension::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_expression_ = nullptr;
}

Dimension::~Dimension() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Dimension)
  SharedDtor();
}

void Dimension::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dimension_expression_;
}

void Dimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dimension& Dimension::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Dimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dimension_expression_ != nullptr) {
    delete dimension_expression_;
  }
  dimension_expression_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Dimension::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Dimension*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Dimension.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.analytics.data.v1beta.DimensionExpression dimension_expression = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::DimensionExpression::_InternalParse;
        object = msg->mutable_dimension_expression();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Dimension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Dimension)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Dimension.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.DimensionExpression dimension_expression = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dimension_expression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Dimension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Dimension)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Dimension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Dimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Dimension.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.analytics.data.v1beta.DimensionExpression dimension_expression = 2;
  if (this->has_dimension_expression()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::dimension_expression(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Dimension)
}

::google::protobuf::uint8* Dimension::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Dimension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Dimension.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.analytics.data.v1beta.DimensionExpression dimension_expression = 2;
  if (this->has_dimension_expression()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::dimension_expression(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Dimension)
  return target;
}

size_t Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Dimension)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.analytics.data.v1beta.DimensionExpression dimension_expression = 2;
  if (this->has_dimension_expression()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dimension_expression_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dimension::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  const Dimension* source =
      ::google::protobuf::DynamicCastToGenerated<Dimension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Dimension)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Dimension)
    MergeFrom(*source);
  }
}

void Dimension::MergeFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Dimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_dimension_expression()) {
    mutable_dimension_expression()->::google::analytics::data::v1beta::DimensionExpression::MergeFrom(from.dimension_expression());
  }
}

void Dimension::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dimension::CopyFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension::IsInitialized() const {
  return true;
}

void Dimension::Swap(Dimension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dimension::InternalSwap(Dimension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dimension_expression_, other->dimension_expression_);
}

::google::protobuf::Metadata Dimension::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DimensionExpression_CaseExpression::InitAsDefaultInstance() {
}
class DimensionExpression_CaseExpression::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionExpression_CaseExpression::kDimensionNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionExpression_CaseExpression::DimensionExpression_CaseExpression()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
}
DimensionExpression_CaseExpression::DimensionExpression_CaseExpression(const DimensionExpression_CaseExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dimension_name().size() > 0) {
    dimension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
}

void DimensionExpression_CaseExpression::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  dimension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DimensionExpression_CaseExpression::~DimensionExpression_CaseExpression() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  SharedDtor();
}

void DimensionExpression_CaseExpression::SharedDtor() {
  dimension_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DimensionExpression_CaseExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionExpression_CaseExpression& DimensionExpression_CaseExpression::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DimensionExpression_CaseExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DimensionExpression_CaseExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DimensionExpression_CaseExpression::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DimensionExpression_CaseExpression*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string dimension_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionExpression.CaseExpression.dimension_name");
        object = msg->mutable_dimension_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DimensionExpression_CaseExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dimension_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dimension_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionExpression.CaseExpression.dimension_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DimensionExpression_CaseExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionExpression.CaseExpression.dimension_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dimension_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
}

::google::protobuf::uint8* DimensionExpression_CaseExpression::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionExpression.CaseExpression.dimension_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dimension_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  return target;
}

size_t DimensionExpression_CaseExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dimension_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionExpression_CaseExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionExpression_CaseExpression* source =
      ::google::protobuf::DynamicCastToGenerated<DimensionExpression_CaseExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
    MergeFrom(*source);
  }
}

void DimensionExpression_CaseExpression::MergeFrom(const DimensionExpression_CaseExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension_name().size() > 0) {

    dimension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_name_);
  }
}

void DimensionExpression_CaseExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionExpression_CaseExpression::CopyFrom(const DimensionExpression_CaseExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.DimensionExpression.CaseExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionExpression_CaseExpression::IsInitialized() const {
  return true;
}

void DimensionExpression_CaseExpression::Swap(DimensionExpression_CaseExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionExpression_CaseExpression::InternalSwap(DimensionExpression_CaseExpression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimension_name_.Swap(&other->dimension_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DimensionExpression_CaseExpression::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DimensionExpression_ConcatenateExpression::InitAsDefaultInstance() {
}
class DimensionExpression_ConcatenateExpression::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionExpression_ConcatenateExpression::kDimensionNamesFieldNumber;
const int DimensionExpression_ConcatenateExpression::kDelimiterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionExpression_ConcatenateExpression::DimensionExpression_ConcatenateExpression()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
}
DimensionExpression_ConcatenateExpression::DimensionExpression_ConcatenateExpression(const DimensionExpression_ConcatenateExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimension_names_(from.dimension_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delimiter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.delimiter().size() > 0) {
    delimiter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delimiter_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
}

void DimensionExpression_ConcatenateExpression::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  delimiter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DimensionExpression_ConcatenateExpression::~DimensionExpression_ConcatenateExpression() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  SharedDtor();
}

void DimensionExpression_ConcatenateExpression::SharedDtor() {
  delimiter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DimensionExpression_ConcatenateExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionExpression_ConcatenateExpression& DimensionExpression_ConcatenateExpression::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DimensionExpression_ConcatenateExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DimensionExpression_ConcatenateExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_names_.Clear();
  delimiter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DimensionExpression_ConcatenateExpression::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DimensionExpression_ConcatenateExpression*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string dimension_names = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.dimension_names");
          object = msg->add_dimension_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string delimiter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.delimiter");
        object = msg->mutable_delimiter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DimensionExpression_ConcatenateExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dimension_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dimension_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dimension_names(this->dimension_names_size() - 1).data(),
            static_cast<int>(this->dimension_names(this->dimension_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.dimension_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string delimiter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delimiter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delimiter().data(), static_cast<int>(this->delimiter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.delimiter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DimensionExpression_ConcatenateExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimension_names = 1;
  for (int i = 0, n = this->dimension_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_names(i).data(), static_cast<int>(this->dimension_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.dimension_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dimension_names(i), output);
  }

  // string delimiter = 2;
  if (this->delimiter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delimiter().data(), static_cast<int>(this->delimiter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.delimiter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->delimiter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
}

::google::protobuf::uint8* DimensionExpression_ConcatenateExpression::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dimension_names = 1;
  for (int i = 0, n = this->dimension_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_names(i).data(), static_cast<int>(this->dimension_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.dimension_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dimension_names(i), target);
  }

  // string delimiter = 2;
  if (this->delimiter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delimiter().data(), static_cast<int>(this->delimiter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.delimiter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->delimiter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  return target;
}

size_t DimensionExpression_ConcatenateExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dimension_names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dimension_names_size());
  for (int i = 0, n = this->dimension_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dimension_names(i));
  }

  // string delimiter = 2;
  if (this->delimiter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delimiter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionExpression_ConcatenateExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionExpression_ConcatenateExpression* source =
      ::google::protobuf::DynamicCastToGenerated<DimensionExpression_ConcatenateExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
    MergeFrom(*source);
  }
}

void DimensionExpression_ConcatenateExpression::MergeFrom(const DimensionExpression_ConcatenateExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_names_.MergeFrom(from.dimension_names_);
  if (from.delimiter().size() > 0) {

    delimiter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delimiter_);
  }
}

void DimensionExpression_ConcatenateExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionExpression_ConcatenateExpression::CopyFrom(const DimensionExpression_ConcatenateExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionExpression_ConcatenateExpression::IsInitialized() const {
  return true;
}

void DimensionExpression_ConcatenateExpression::Swap(DimensionExpression_ConcatenateExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionExpression_ConcatenateExpression::InternalSwap(DimensionExpression_ConcatenateExpression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimension_names_.InternalSwap(CastToBase(&other->dimension_names_));
  delimiter_.Swap(&other->delimiter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DimensionExpression_ConcatenateExpression::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DimensionExpression::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_DimensionExpression_default_instance_.lower_case_ = const_cast< ::google::analytics::data::v1beta::DimensionExpression_CaseExpression*>(
      ::google::analytics::data::v1beta::DimensionExpression_CaseExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_DimensionExpression_default_instance_.upper_case_ = const_cast< ::google::analytics::data::v1beta::DimensionExpression_CaseExpression*>(
      ::google::analytics::data::v1beta::DimensionExpression_CaseExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_DimensionExpression_default_instance_.concatenate_ = const_cast< ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression*>(
      ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression::internal_default_instance());
}
class DimensionExpression::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::DimensionExpression_CaseExpression& lower_case(const DimensionExpression* msg);
  static const ::google::analytics::data::v1beta::DimensionExpression_CaseExpression& upper_case(const DimensionExpression* msg);
  static const ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression& concatenate(const DimensionExpression* msg);
};

const ::google::analytics::data::v1beta::DimensionExpression_CaseExpression&
DimensionExpression::HasBitSetters::lower_case(const DimensionExpression* msg) {
  return *msg->one_expression_.lower_case_;
}
const ::google::analytics::data::v1beta::DimensionExpression_CaseExpression&
DimensionExpression::HasBitSetters::upper_case(const DimensionExpression* msg) {
  return *msg->one_expression_.upper_case_;
}
const ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression&
DimensionExpression::HasBitSetters::concatenate(const DimensionExpression* msg) {
  return *msg->one_expression_.concatenate_;
}
void DimensionExpression::set_allocated_lower_case(::google::analytics::data::v1beta::DimensionExpression_CaseExpression* lower_case) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_expression();
  if (lower_case) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lower_case = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_case, submessage_arena);
    }
    set_has_lower_case();
    one_expression_.lower_case_ = lower_case;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.DimensionExpression.lower_case)
}
void DimensionExpression::set_allocated_upper_case(::google::analytics::data::v1beta::DimensionExpression_CaseExpression* upper_case) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_expression();
  if (upper_case) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upper_case = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_case, submessage_arena);
    }
    set_has_upper_case();
    one_expression_.upper_case_ = upper_case;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.DimensionExpression.upper_case)
}
void DimensionExpression::set_allocated_concatenate(::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression* concatenate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_expression();
  if (concatenate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concatenate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, concatenate, submessage_arena);
    }
    set_has_concatenate();
    one_expression_.concatenate_ = concatenate;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.DimensionExpression.concatenate)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionExpression::kLowerCaseFieldNumber;
const int DimensionExpression::kUpperCaseFieldNumber;
const int DimensionExpression::kConcatenateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionExpression::DimensionExpression()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.DimensionExpression)
}
DimensionExpression::DimensionExpression(const DimensionExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_one_expression();
  switch (from.one_expression_case()) {
    case kLowerCase: {
      mutable_lower_case()->::google::analytics::data::v1beta::DimensionExpression_CaseExpression::MergeFrom(from.lower_case());
      break;
    }
    case kUpperCase: {
      mutable_upper_case()->::google::analytics::data::v1beta::DimensionExpression_CaseExpression::MergeFrom(from.upper_case());
      break;
    }
    case kConcatenate: {
      mutable_concatenate()->::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression::MergeFrom(from.concatenate());
      break;
    }
    case ONE_EXPRESSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.DimensionExpression)
}

void DimensionExpression::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  clear_has_one_expression();
}

DimensionExpression::~DimensionExpression() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.DimensionExpression)
  SharedDtor();
}

void DimensionExpression::SharedDtor() {
  if (has_one_expression()) {
    clear_one_expression();
  }
}

void DimensionExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionExpression& DimensionExpression::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DimensionExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DimensionExpression::clear_one_expression() {
// @@protoc_insertion_point(one_of_clear_start:google.analytics.data.v1beta.DimensionExpression)
  switch (one_expression_case()) {
    case kLowerCase: {
      delete one_expression_.lower_case_;
      break;
    }
    case kUpperCase: {
      delete one_expression_.upper_case_;
      break;
    }
    case kConcatenate: {
      delete one_expression_.concatenate_;
      break;
    }
    case ONE_EXPRESSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_EXPRESSION_NOT_SET;
}


void DimensionExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.DimensionExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_one_expression();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DimensionExpression::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DimensionExpression*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.DimensionExpression.CaseExpression lower_case = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::DimensionExpression_CaseExpression::_InternalParse;
        object = msg->mutable_lower_case();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.DimensionExpression.CaseExpression upper_case = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::DimensionExpression_CaseExpression::_InternalParse;
        object = msg->mutable_upper_case();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression concatenate = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression::_InternalParse;
        object = msg->mutable_concatenate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DimensionExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.DimensionExpression)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.DimensionExpression.CaseExpression lower_case = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.DimensionExpression.CaseExpression upper_case = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_case()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression concatenate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_concatenate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.DimensionExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.DimensionExpression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DimensionExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.DimensionExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.DimensionExpression.CaseExpression lower_case = 4;
  if (has_lower_case()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::lower_case(this), output);
  }

  // .google.analytics.data.v1beta.DimensionExpression.CaseExpression upper_case = 5;
  if (has_upper_case()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::upper_case(this), output);
  }

  // .google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression concatenate = 6;
  if (has_concatenate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::concatenate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.DimensionExpression)
}

::google::protobuf::uint8* DimensionExpression::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.DimensionExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.DimensionExpression.CaseExpression lower_case = 4;
  if (has_lower_case()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::lower_case(this), target);
  }

  // .google.analytics.data.v1beta.DimensionExpression.CaseExpression upper_case = 5;
  if (has_upper_case()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::upper_case(this), target);
  }

  // .google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression concatenate = 6;
  if (has_concatenate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::concatenate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.DimensionExpression)
  return target;
}

size_t DimensionExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.DimensionExpression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (one_expression_case()) {
    // .google.analytics.data.v1beta.DimensionExpression.CaseExpression lower_case = 4;
    case kLowerCase: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_expression_.lower_case_);
      break;
    }
    // .google.analytics.data.v1beta.DimensionExpression.CaseExpression upper_case = 5;
    case kUpperCase: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_expression_.upper_case_);
      break;
    }
    // .google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression concatenate = 6;
    case kConcatenate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_expression_.concatenate_);
      break;
    }
    case ONE_EXPRESSION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.DimensionExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionExpression* source =
      ::google::protobuf::DynamicCastToGenerated<DimensionExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.DimensionExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.DimensionExpression)
    MergeFrom(*source);
  }
}

void DimensionExpression::MergeFrom(const DimensionExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.DimensionExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.one_expression_case()) {
    case kLowerCase: {
      mutable_lower_case()->::google::analytics::data::v1beta::DimensionExpression_CaseExpression::MergeFrom(from.lower_case());
      break;
    }
    case kUpperCase: {
      mutable_upper_case()->::google::analytics::data::v1beta::DimensionExpression_CaseExpression::MergeFrom(from.upper_case());
      break;
    }
    case kConcatenate: {
      mutable_concatenate()->::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression::MergeFrom(from.concatenate());
      break;
    }
    case ONE_EXPRESSION_NOT_SET: {
      break;
    }
  }
}

void DimensionExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.DimensionExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionExpression::CopyFrom(const DimensionExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.DimensionExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionExpression::IsInitialized() const {
  return true;
}

void DimensionExpression::Swap(DimensionExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionExpression::InternalSwap(DimensionExpression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(one_expression_, other->one_expression_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DimensionExpression::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Metric::InitAsDefaultInstance() {
}
class Metric::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metric::kNameFieldNumber;
const int Metric::kExpressionFieldNumber;
const int Metric::kInvisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metric::Metric()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Metric)
}
Metric::Metric(const Metric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expression().size() > 0) {
    expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  invisible_ = from.invisible_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Metric)
}

void Metric::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invisible_ = false;
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Metric)
  SharedDtor();
}

void Metric::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metric& Metric::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invisible_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Metric::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Metric*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Metric.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string expression = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Metric.expression");
        object = msg->mutable_expression();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool invisible = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_invisible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Metric)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Metric.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expression = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expression()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expression().data(), static_cast<int>(this->expression().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Metric.expression"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool invisible = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invisible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Metric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Metric.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string expression = 2;
  if (this->expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Metric.expression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->expression(), output);
  }

  // bool invisible = 3;
  if (this->invisible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->invisible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Metric)
}

::google::protobuf::uint8* Metric::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Metric.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string expression = 2;
  if (this->expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Metric.expression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->expression(), target);
  }

  // bool invisible = 3;
  if (this->invisible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->invisible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Metric)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string expression = 2;
  if (this->expression().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expression());
  }

  // bool invisible = 3;
  if (this->invisible() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::google::protobuf::DynamicCastToGenerated<Metric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.expression().size() > 0) {

    expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  if (from.invisible() != 0) {
    set_invisible(from.invisible());
  }
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::Swap(Metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expression_.Swap(&other->expression_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(invisible_, other->invisible_);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FilterExpression::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_FilterExpression_default_instance_.and_group_ = const_cast< ::google::analytics::data::v1beta::FilterExpressionList*>(
      ::google::analytics::data::v1beta::FilterExpressionList::internal_default_instance());
  ::google::analytics::data::v1beta::_FilterExpression_default_instance_.or_group_ = const_cast< ::google::analytics::data::v1beta::FilterExpressionList*>(
      ::google::analytics::data::v1beta::FilterExpressionList::internal_default_instance());
  ::google::analytics::data::v1beta::_FilterExpression_default_instance_.not_expression_ = const_cast< ::google::analytics::data::v1beta::FilterExpression*>(
      ::google::analytics::data::v1beta::FilterExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_FilterExpression_default_instance_.filter_ = const_cast< ::google::analytics::data::v1beta::Filter*>(
      ::google::analytics::data::v1beta::Filter::internal_default_instance());
}
class FilterExpression::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::FilterExpressionList& and_group(const FilterExpression* msg);
  static const ::google::analytics::data::v1beta::FilterExpressionList& or_group(const FilterExpression* msg);
  static const ::google::analytics::data::v1beta::FilterExpression& not_expression(const FilterExpression* msg);
  static const ::google::analytics::data::v1beta::Filter& filter(const FilterExpression* msg);
};

const ::google::analytics::data::v1beta::FilterExpressionList&
FilterExpression::HasBitSetters::and_group(const FilterExpression* msg) {
  return *msg->expr_.and_group_;
}
const ::google::analytics::data::v1beta::FilterExpressionList&
FilterExpression::HasBitSetters::or_group(const FilterExpression* msg) {
  return *msg->expr_.or_group_;
}
const ::google::analytics::data::v1beta::FilterExpression&
FilterExpression::HasBitSetters::not_expression(const FilterExpression* msg) {
  return *msg->expr_.not_expression_;
}
const ::google::analytics::data::v1beta::Filter&
FilterExpression::HasBitSetters::filter(const FilterExpression* msg) {
  return *msg->expr_.filter_;
}
void FilterExpression::set_allocated_and_group(::google::analytics::data::v1beta::FilterExpressionList* and_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_expr();
  if (and_group) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      and_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, and_group, submessage_arena);
    }
    set_has_and_group();
    expr_.and_group_ = and_group;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.FilterExpression.and_group)
}
void FilterExpression::set_allocated_or_group(::google::analytics::data::v1beta::FilterExpressionList* or_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_expr();
  if (or_group) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      or_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, or_group, submessage_arena);
    }
    set_has_or_group();
    expr_.or_group_ = or_group;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.FilterExpression.or_group)
}
void FilterExpression::set_allocated_not_expression(::google::analytics::data::v1beta::FilterExpression* not_expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_expr();
  if (not_expression) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      not_expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, not_expression, submessage_arena);
    }
    set_has_not_expression();
    expr_.not_expression_ = not_expression;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.FilterExpression.not_expression)
}
void FilterExpression::set_allocated_filter(::google::analytics::data::v1beta::Filter* filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_expr();
  if (filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    expr_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.FilterExpression.filter)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterExpression::kAndGroupFieldNumber;
const int FilterExpression::kOrGroupFieldNumber;
const int FilterExpression::kNotExpressionFieldNumber;
const int FilterExpression::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterExpression::FilterExpression()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.FilterExpression)
}
FilterExpression::FilterExpression(const FilterExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_expr();
  switch (from.expr_case()) {
    case kAndGroup: {
      mutable_and_group()->::google::analytics::data::v1beta::FilterExpressionList::MergeFrom(from.and_group());
      break;
    }
    case kOrGroup: {
      mutable_or_group()->::google::analytics::data::v1beta::FilterExpressionList::MergeFrom(from.or_group());
      break;
    }
    case kNotExpression: {
      mutable_not_expression()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.not_expression());
      break;
    }
    case kFilter: {
      mutable_filter()->::google::analytics::data::v1beta::Filter::MergeFrom(from.filter());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.FilterExpression)
}

void FilterExpression::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  clear_has_expr();
}

FilterExpression::~FilterExpression() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.FilterExpression)
  SharedDtor();
}

void FilterExpression::SharedDtor() {
  if (has_expr()) {
    clear_expr();
  }
}

void FilterExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterExpression& FilterExpression::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void FilterExpression::clear_expr() {
// @@protoc_insertion_point(one_of_clear_start:google.analytics.data.v1beta.FilterExpression)
  switch (expr_case()) {
    case kAndGroup: {
      delete expr_.and_group_;
      break;
    }
    case kOrGroup: {
      delete expr_.or_group_;
      break;
    }
    case kNotExpression: {
      delete expr_.not_expression_;
      break;
    }
    case kFilter: {
      delete expr_.filter_;
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPR_NOT_SET;
}


void FilterExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.FilterExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_expr();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterExpression::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FilterExpression*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.FilterExpressionList and_group = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpressionList::_InternalParse;
        object = msg->mutable_and_group();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpressionList or_group = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpressionList::_InternalParse;
        object = msg->mutable_or_group();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpression not_expression = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
        object = msg->mutable_not_expression();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.Filter filter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::Filter::_InternalParse;
        object = msg->mutable_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.FilterExpression)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.FilterExpressionList and_group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_and_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpressionList or_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_or_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpression not_expression = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_not_expression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.Filter filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.FilterExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.FilterExpression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.FilterExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.FilterExpressionList and_group = 1;
  if (has_and_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::and_group(this), output);
  }

  // .google.analytics.data.v1beta.FilterExpressionList or_group = 2;
  if (has_or_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::or_group(this), output);
  }

  // .google.analytics.data.v1beta.FilterExpression not_expression = 3;
  if (has_not_expression()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::not_expression(this), output);
  }

  // .google.analytics.data.v1beta.Filter filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.FilterExpression)
}

::google::protobuf::uint8* FilterExpression::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.FilterExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.FilterExpressionList and_group = 1;
  if (has_and_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::and_group(this), target);
  }

  // .google.analytics.data.v1beta.FilterExpressionList or_group = 2;
  if (has_or_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::or_group(this), target);
  }

  // .google.analytics.data.v1beta.FilterExpression not_expression = 3;
  if (has_not_expression()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::not_expression(this), target);
  }

  // .google.analytics.data.v1beta.Filter filter = 4;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.FilterExpression)
  return target;
}

size_t FilterExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.FilterExpression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (expr_case()) {
    // .google.analytics.data.v1beta.FilterExpressionList and_group = 1;
    case kAndGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *expr_.and_group_);
      break;
    }
    // .google.analytics.data.v1beta.FilterExpressionList or_group = 2;
    case kOrGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *expr_.or_group_);
      break;
    }
    // .google.analytics.data.v1beta.FilterExpression not_expression = 3;
    case kNotExpression: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *expr_.not_expression_);
      break;
    }
    // .google.analytics.data.v1beta.Filter filter = 4;
    case kFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *expr_.filter_);
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.FilterExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterExpression* source =
      ::google::protobuf::DynamicCastToGenerated<FilterExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.FilterExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.FilterExpression)
    MergeFrom(*source);
  }
}

void FilterExpression::MergeFrom(const FilterExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.FilterExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.expr_case()) {
    case kAndGroup: {
      mutable_and_group()->::google::analytics::data::v1beta::FilterExpressionList::MergeFrom(from.and_group());
      break;
    }
    case kOrGroup: {
      mutable_or_group()->::google::analytics::data::v1beta::FilterExpressionList::MergeFrom(from.or_group());
      break;
    }
    case kNotExpression: {
      mutable_not_expression()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.not_expression());
      break;
    }
    case kFilter: {
      mutable_filter()->::google::analytics::data::v1beta::Filter::MergeFrom(from.filter());
      break;
    }
    case EXPR_NOT_SET: {
      break;
    }
  }
}

void FilterExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.FilterExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterExpression::CopyFrom(const FilterExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.FilterExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterExpression::IsInitialized() const {
  return true;
}

void FilterExpression::Swap(FilterExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterExpression::InternalSwap(FilterExpression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expr_, other->expr_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FilterExpression::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FilterExpressionList::InitAsDefaultInstance() {
}
class FilterExpressionList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterExpressionList::kExpressionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterExpressionList::FilterExpressionList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.FilterExpressionList)
}
FilterExpressionList::FilterExpressionList(const FilterExpressionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      expressions_(from.expressions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.FilterExpressionList)
}

void FilterExpressionList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
}

FilterExpressionList::~FilterExpressionList() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.FilterExpressionList)
  SharedDtor();
}

void FilterExpressionList::SharedDtor() {
}

void FilterExpressionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterExpressionList& FilterExpressionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void FilterExpressionList::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.FilterExpressionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expressions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FilterExpressionList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FilterExpressionList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.FilterExpression expressions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
          object = msg->add_expressions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FilterExpressionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.FilterExpressionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.FilterExpression expressions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_expressions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.FilterExpressionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.FilterExpressionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FilterExpressionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.FilterExpressionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.FilterExpression expressions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expressions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->expressions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.FilterExpressionList)
}

::google::protobuf::uint8* FilterExpressionList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.FilterExpressionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.FilterExpression expressions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expressions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->expressions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.FilterExpressionList)
  return target;
}

size_t FilterExpressionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.FilterExpressionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.FilterExpression expressions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->expressions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->expressions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterExpressionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.FilterExpressionList)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterExpressionList* source =
      ::google::protobuf::DynamicCastToGenerated<FilterExpressionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.FilterExpressionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.FilterExpressionList)
    MergeFrom(*source);
  }
}

void FilterExpressionList::MergeFrom(const FilterExpressionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.FilterExpressionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expressions_.MergeFrom(from.expressions_);
}

void FilterExpressionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.FilterExpressionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterExpressionList::CopyFrom(const FilterExpressionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.FilterExpressionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterExpressionList::IsInitialized() const {
  return true;
}

void FilterExpressionList::Swap(FilterExpressionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterExpressionList::InternalSwap(FilterExpressionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&expressions_)->InternalSwap(CastToBase(&other->expressions_));
}

::google::protobuf::Metadata FilterExpressionList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Filter_StringFilter::InitAsDefaultInstance() {
}
class Filter_StringFilter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filter_StringFilter::kMatchTypeFieldNumber;
const int Filter_StringFilter::kValueFieldNumber;
const int Filter_StringFilter::kCaseSensitiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filter_StringFilter::Filter_StringFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Filter.StringFilter)
}
Filter_StringFilter::Filter_StringFilter(const Filter_StringFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&match_type_, &from.match_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&case_sensitive_) -
    reinterpret_cast<char*>(&match_type_)) + sizeof(case_sensitive_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Filter.StringFilter)
}

void Filter_StringFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Filter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case_sensitive_) -
      reinterpret_cast<char*>(&match_type_)) + sizeof(case_sensitive_));
}

Filter_StringFilter::~Filter_StringFilter() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Filter.StringFilter)
  SharedDtor();
}

void Filter_StringFilter::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Filter_StringFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter_StringFilter& Filter_StringFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Filter_StringFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Filter_StringFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Filter.StringFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&case_sensitive_) -
      reinterpret_cast<char*>(&match_type_)) + sizeof(case_sensitive_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Filter_StringFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Filter_StringFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.Filter.StringFilter.MatchType match_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_match_type(static_cast<::google::analytics::data::v1beta::Filter_StringFilter_MatchType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Filter.StringFilter.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool case_sensitive = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_case_sensitive(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Filter_StringFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Filter.StringFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.Filter.StringFilter.MatchType match_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_match_type(static_cast< ::google::analytics::data::v1beta::Filter_StringFilter_MatchType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Filter.StringFilter.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool case_sensitive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &case_sensitive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Filter.StringFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Filter.StringFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Filter_StringFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Filter.StringFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.Filter.StringFilter.MatchType match_type = 1;
  if (this->match_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->match_type(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Filter.StringFilter.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // bool case_sensitive = 3;
  if (this->case_sensitive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->case_sensitive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Filter.StringFilter)
}

::google::protobuf::uint8* Filter_StringFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Filter.StringFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.Filter.StringFilter.MatchType match_type = 1;
  if (this->match_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->match_type(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Filter.StringFilter.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // bool case_sensitive = 3;
  if (this->case_sensitive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->case_sensitive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Filter.StringFilter)
  return target;
}

size_t Filter_StringFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Filter.StringFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .google.analytics.data.v1beta.Filter.StringFilter.MatchType match_type = 1;
  if (this->match_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
  }

  // bool case_sensitive = 3;
  if (this->case_sensitive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter_StringFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Filter.StringFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter_StringFilter* source =
      ::google::protobuf::DynamicCastToGenerated<Filter_StringFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Filter.StringFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Filter.StringFilter)
    MergeFrom(*source);
  }
}

void Filter_StringFilter::MergeFrom(const Filter_StringFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Filter.StringFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.match_type() != 0) {
    set_match_type(from.match_type());
  }
  if (from.case_sensitive() != 0) {
    set_case_sensitive(from.case_sensitive());
  }
}

void Filter_StringFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Filter.StringFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter_StringFilter::CopyFrom(const Filter_StringFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Filter.StringFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter_StringFilter::IsInitialized() const {
  return true;
}

void Filter_StringFilter::Swap(Filter_StringFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filter_StringFilter::InternalSwap(Filter_StringFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_type_, other->match_type_);
  swap(case_sensitive_, other->case_sensitive_);
}

::google::protobuf::Metadata Filter_StringFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Filter_InListFilter::InitAsDefaultInstance() {
}
class Filter_InListFilter::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filter_InListFilter::kValuesFieldNumber;
const int Filter_InListFilter::kCaseSensitiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filter_InListFilter::Filter_InListFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Filter.InListFilter)
}
Filter_InListFilter::Filter_InListFilter(const Filter_InListFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  case_sensitive_ = from.case_sensitive_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Filter.InListFilter)
}

void Filter_InListFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Filter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  case_sensitive_ = false;
}

Filter_InListFilter::~Filter_InListFilter() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Filter.InListFilter)
  SharedDtor();
}

void Filter_InListFilter::SharedDtor() {
}

void Filter_InListFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter_InListFilter& Filter_InListFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Filter_InListFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Filter_InListFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Filter.InListFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  case_sensitive_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Filter_InListFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Filter_InListFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Filter.InListFilter.values");
          object = msg->add_values();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bool case_sensitive = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_case_sensitive(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Filter_InListFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Filter.InListFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            static_cast<int>(this->values(this->values_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Filter.InListFilter.values"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool case_sensitive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &case_sensitive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Filter.InListFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Filter.InListFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Filter_InListFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Filter.InListFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Filter.InListFilter.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }

  // bool case_sensitive = 2;
  if (this->case_sensitive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->case_sensitive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Filter.InListFilter)
}

::google::protobuf::uint8* Filter_InListFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Filter.InListFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Filter.InListFilter.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }

  // bool case_sensitive = 2;
  if (this->case_sensitive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->case_sensitive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Filter.InListFilter)
  return target;
}

size_t Filter_InListFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Filter.InListFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  // bool case_sensitive = 2;
  if (this->case_sensitive() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter_InListFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Filter.InListFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter_InListFilter* source =
      ::google::protobuf::DynamicCastToGenerated<Filter_InListFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Filter.InListFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Filter.InListFilter)
    MergeFrom(*source);
  }
}

void Filter_InListFilter::MergeFrom(const Filter_InListFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Filter.InListFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.case_sensitive() != 0) {
    set_case_sensitive(from.case_sensitive());
  }
}

void Filter_InListFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Filter.InListFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter_InListFilter::CopyFrom(const Filter_InListFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Filter.InListFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter_InListFilter::IsInitialized() const {
  return true;
}

void Filter_InListFilter::Swap(Filter_InListFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filter_InListFilter::InternalSwap(Filter_InListFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(CastToBase(&other->values_));
  swap(case_sensitive_, other->case_sensitive_);
}

::google::protobuf::Metadata Filter_InListFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Filter_NumericFilter::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_Filter_NumericFilter_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::analytics::data::v1beta::NumericValue*>(
      ::google::analytics::data::v1beta::NumericValue::internal_default_instance());
}
class Filter_NumericFilter::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::NumericValue& value(const Filter_NumericFilter* msg);
};

const ::google::analytics::data::v1beta::NumericValue&
Filter_NumericFilter::HasBitSetters::value(const Filter_NumericFilter* msg) {
  return *msg->value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filter_NumericFilter::kOperationFieldNumber;
const int Filter_NumericFilter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filter_NumericFilter::Filter_NumericFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Filter.NumericFilter)
}
Filter_NumericFilter::Filter_NumericFilter(const Filter_NumericFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::google::analytics::data::v1beta::NumericValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Filter.NumericFilter)
}

void Filter_NumericFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Filter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&value_)) + sizeof(operation_));
}

Filter_NumericFilter::~Filter_NumericFilter() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Filter.NumericFilter)
  SharedDtor();
}

void Filter_NumericFilter::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void Filter_NumericFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter_NumericFilter& Filter_NumericFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Filter_NumericFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Filter_NumericFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Filter.NumericFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Filter_NumericFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Filter_NumericFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.Filter.NumericFilter.Operation operation = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_operation(static_cast<::google::analytics::data::v1beta::Filter_NumericFilter_Operation>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.analytics.data.v1beta.NumericValue value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::NumericValue::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Filter_NumericFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Filter.NumericFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.Filter.NumericFilter.Operation operation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::google::analytics::data::v1beta::Filter_NumericFilter_Operation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.NumericValue value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Filter.NumericFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Filter.NumericFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Filter_NumericFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Filter.NumericFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.Filter.NumericFilter.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // .google.analytics.data.v1beta.NumericValue value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Filter.NumericFilter)
}

::google::protobuf::uint8* Filter_NumericFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Filter.NumericFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.Filter.NumericFilter.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // .google.analytics.data.v1beta.NumericValue value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Filter.NumericFilter)
  return target;
}

size_t Filter_NumericFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Filter.NumericFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.NumericValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .google.analytics.data.v1beta.Filter.NumericFilter.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter_NumericFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Filter.NumericFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter_NumericFilter* source =
      ::google::protobuf::DynamicCastToGenerated<Filter_NumericFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Filter.NumericFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Filter.NumericFilter)
    MergeFrom(*source);
  }
}

void Filter_NumericFilter::MergeFrom(const Filter_NumericFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Filter.NumericFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::google::analytics::data::v1beta::NumericValue::MergeFrom(from.value());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
}

void Filter_NumericFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Filter.NumericFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter_NumericFilter::CopyFrom(const Filter_NumericFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Filter.NumericFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter_NumericFilter::IsInitialized() const {
  return true;
}

void Filter_NumericFilter::Swap(Filter_NumericFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filter_NumericFilter::InternalSwap(Filter_NumericFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(operation_, other->operation_);
}

::google::protobuf::Metadata Filter_NumericFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Filter_BetweenFilter::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_Filter_BetweenFilter_default_instance_._instance.get_mutable()->from_value_ = const_cast< ::google::analytics::data::v1beta::NumericValue*>(
      ::google::analytics::data::v1beta::NumericValue::internal_default_instance());
  ::google::analytics::data::v1beta::_Filter_BetweenFilter_default_instance_._instance.get_mutable()->to_value_ = const_cast< ::google::analytics::data::v1beta::NumericValue*>(
      ::google::analytics::data::v1beta::NumericValue::internal_default_instance());
}
class Filter_BetweenFilter::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::NumericValue& from_value(const Filter_BetweenFilter* msg);
  static const ::google::analytics::data::v1beta::NumericValue& to_value(const Filter_BetweenFilter* msg);
};

const ::google::analytics::data::v1beta::NumericValue&
Filter_BetweenFilter::HasBitSetters::from_value(const Filter_BetweenFilter* msg) {
  return *msg->from_value_;
}
const ::google::analytics::data::v1beta::NumericValue&
Filter_BetweenFilter::HasBitSetters::to_value(const Filter_BetweenFilter* msg) {
  return *msg->to_value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filter_BetweenFilter::kFromValueFieldNumber;
const int Filter_BetweenFilter::kToValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filter_BetweenFilter::Filter_BetweenFilter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Filter.BetweenFilter)
}
Filter_BetweenFilter::Filter_BetweenFilter(const Filter_BetweenFilter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from_value()) {
    from_value_ = new ::google::analytics::data::v1beta::NumericValue(*from.from_value_);
  } else {
    from_value_ = nullptr;
  }
  if (from.has_to_value()) {
    to_value_ = new ::google::analytics::data::v1beta::NumericValue(*from.to_value_);
  } else {
    to_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Filter.BetweenFilter)
}

void Filter_BetweenFilter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Filter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::memset(&from_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_value_) -
      reinterpret_cast<char*>(&from_value_)) + sizeof(to_value_));
}

Filter_BetweenFilter::~Filter_BetweenFilter() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Filter.BetweenFilter)
  SharedDtor();
}

void Filter_BetweenFilter::SharedDtor() {
  if (this != internal_default_instance()) delete from_value_;
  if (this != internal_default_instance()) delete to_value_;
}

void Filter_BetweenFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter_BetweenFilter& Filter_BetweenFilter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Filter_BetweenFilter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Filter_BetweenFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && from_value_ != nullptr) {
    delete from_value_;
  }
  from_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && to_value_ != nullptr) {
    delete to_value_;
  }
  to_value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Filter_BetweenFilter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Filter_BetweenFilter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.NumericValue from_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::NumericValue::_InternalParse;
        object = msg->mutable_from_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.NumericValue to_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::NumericValue::_InternalParse;
        object = msg->mutable_to_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Filter_BetweenFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.NumericValue from_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.NumericValue to_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Filter.BetweenFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Filter.BetweenFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Filter_BetweenFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.NumericValue from_value = 1;
  if (this->has_from_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::from_value(this), output);
  }

  // .google.analytics.data.v1beta.NumericValue to_value = 2;
  if (this->has_to_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::to_value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Filter.BetweenFilter)
}

::google::protobuf::uint8* Filter_BetweenFilter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.NumericValue from_value = 1;
  if (this->has_from_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::from_value(this), target);
  }

  // .google.analytics.data.v1beta.NumericValue to_value = 2;
  if (this->has_to_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::to_value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Filter.BetweenFilter)
  return target;
}

size_t Filter_BetweenFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.NumericValue from_value = 1;
  if (this->has_from_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *from_value_);
  }

  // .google.analytics.data.v1beta.NumericValue to_value = 2;
  if (this->has_to_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *to_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter_BetweenFilter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter_BetweenFilter* source =
      ::google::protobuf::DynamicCastToGenerated<Filter_BetweenFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Filter.BetweenFilter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Filter.BetweenFilter)
    MergeFrom(*source);
  }
}

void Filter_BetweenFilter::MergeFrom(const Filter_BetweenFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from_value()) {
    mutable_from_value()->::google::analytics::data::v1beta::NumericValue::MergeFrom(from.from_value());
  }
  if (from.has_to_value()) {
    mutable_to_value()->::google::analytics::data::v1beta::NumericValue::MergeFrom(from.to_value());
  }
}

void Filter_BetweenFilter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter_BetweenFilter::CopyFrom(const Filter_BetweenFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Filter.BetweenFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter_BetweenFilter::IsInitialized() const {
  return true;
}

void Filter_BetweenFilter::Swap(Filter_BetweenFilter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filter_BetweenFilter::InternalSwap(Filter_BetweenFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_value_, other->from_value_);
  swap(to_value_, other->to_value_);
}

::google::protobuf::Metadata Filter_BetweenFilter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Filter::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_Filter_default_instance_.string_filter_ = const_cast< ::google::analytics::data::v1beta::Filter_StringFilter*>(
      ::google::analytics::data::v1beta::Filter_StringFilter::internal_default_instance());
  ::google::analytics::data::v1beta::_Filter_default_instance_.in_list_filter_ = const_cast< ::google::analytics::data::v1beta::Filter_InListFilter*>(
      ::google::analytics::data::v1beta::Filter_InListFilter::internal_default_instance());
  ::google::analytics::data::v1beta::_Filter_default_instance_.numeric_filter_ = const_cast< ::google::analytics::data::v1beta::Filter_NumericFilter*>(
      ::google::analytics::data::v1beta::Filter_NumericFilter::internal_default_instance());
  ::google::analytics::data::v1beta::_Filter_default_instance_.between_filter_ = const_cast< ::google::analytics::data::v1beta::Filter_BetweenFilter*>(
      ::google::analytics::data::v1beta::Filter_BetweenFilter::internal_default_instance());
}
class Filter::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::Filter_StringFilter& string_filter(const Filter* msg);
  static const ::google::analytics::data::v1beta::Filter_InListFilter& in_list_filter(const Filter* msg);
  static const ::google::analytics::data::v1beta::Filter_NumericFilter& numeric_filter(const Filter* msg);
  static const ::google::analytics::data::v1beta::Filter_BetweenFilter& between_filter(const Filter* msg);
};

const ::google::analytics::data::v1beta::Filter_StringFilter&
Filter::HasBitSetters::string_filter(const Filter* msg) {
  return *msg->one_filter_.string_filter_;
}
const ::google::analytics::data::v1beta::Filter_InListFilter&
Filter::HasBitSetters::in_list_filter(const Filter* msg) {
  return *msg->one_filter_.in_list_filter_;
}
const ::google::analytics::data::v1beta::Filter_NumericFilter&
Filter::HasBitSetters::numeric_filter(const Filter* msg) {
  return *msg->one_filter_.numeric_filter_;
}
const ::google::analytics::data::v1beta::Filter_BetweenFilter&
Filter::HasBitSetters::between_filter(const Filter* msg) {
  return *msg->one_filter_.between_filter_;
}
void Filter::set_allocated_string_filter(::google::analytics::data::v1beta::Filter_StringFilter* string_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_filter();
  if (string_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      string_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_filter, submessage_arena);
    }
    set_has_string_filter();
    one_filter_.string_filter_ = string_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.Filter.string_filter)
}
void Filter::set_allocated_in_list_filter(::google::analytics::data::v1beta::Filter_InListFilter* in_list_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_filter();
  if (in_list_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      in_list_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, in_list_filter, submessage_arena);
    }
    set_has_in_list_filter();
    one_filter_.in_list_filter_ = in_list_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.Filter.in_list_filter)
}
void Filter::set_allocated_numeric_filter(::google::analytics::data::v1beta::Filter_NumericFilter* numeric_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_filter();
  if (numeric_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      numeric_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, numeric_filter, submessage_arena);
    }
    set_has_numeric_filter();
    one_filter_.numeric_filter_ = numeric_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.Filter.numeric_filter)
}
void Filter::set_allocated_between_filter(::google::analytics::data::v1beta::Filter_BetweenFilter* between_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_filter();
  if (between_filter) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      between_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, between_filter, submessage_arena);
    }
    set_has_between_filter();
    one_filter_.between_filter_ = between_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.Filter.between_filter)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filter::kFieldNameFieldNumber;
const int Filter::kStringFilterFieldNumber;
const int Filter::kInListFilterFieldNumber;
const int Filter::kNumericFilterFieldNumber;
const int Filter::kBetweenFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filter::Filter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Filter)
}
Filter::Filter(const Filter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field_name().size() > 0) {
    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  clear_has_one_filter();
  switch (from.one_filter_case()) {
    case kStringFilter: {
      mutable_string_filter()->::google::analytics::data::v1beta::Filter_StringFilter::MergeFrom(from.string_filter());
      break;
    }
    case kInListFilter: {
      mutable_in_list_filter()->::google::analytics::data::v1beta::Filter_InListFilter::MergeFrom(from.in_list_filter());
      break;
    }
    case kNumericFilter: {
      mutable_numeric_filter()->::google::analytics::data::v1beta::Filter_NumericFilter::MergeFrom(from.numeric_filter());
      break;
    }
    case kBetweenFilter: {
      mutable_between_filter()->::google::analytics::data::v1beta::Filter_BetweenFilter::MergeFrom(from.between_filter());
      break;
    }
    case ONE_FILTER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Filter)
}

void Filter::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Filter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  field_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_one_filter();
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Filter)
  SharedDtor();
}

void Filter::SharedDtor() {
  field_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_one_filter()) {
    clear_one_filter();
  }
}

void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter& Filter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Filter_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Filter::clear_one_filter() {
// @@protoc_insertion_point(one_of_clear_start:google.analytics.data.v1beta.Filter)
  switch (one_filter_case()) {
    case kStringFilter: {
      delete one_filter_.string_filter_;
      break;
    }
    case kInListFilter: {
      delete one_filter_.in_list_filter_;
      break;
    }
    case kNumericFilter: {
      delete one_filter_.numeric_filter_;
      break;
    }
    case kBetweenFilter: {
      delete one_filter_.between_filter_;
      break;
    }
    case ONE_FILTER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_FILTER_NOT_SET;
}


void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_one_filter();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Filter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Filter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string field_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Filter.field_name");
        object = msg->mutable_field_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.analytics.data.v1beta.Filter.StringFilter string_filter = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::Filter_StringFilter::_InternalParse;
        object = msg->mutable_string_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.Filter.InListFilter in_list_filter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::Filter_InListFilter::_InternalParse;
        object = msg->mutable_in_list_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.Filter.NumericFilter numeric_filter = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::Filter_NumericFilter::_InternalParse;
        object = msg->mutable_numeric_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.Filter.BetweenFilter between_filter = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::Filter_BetweenFilter::_InternalParse;
        object = msg->mutable_between_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Filter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string field_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field_name().data(), static_cast<int>(this->field_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Filter.field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.Filter.StringFilter string_filter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.Filter.InListFilter in_list_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_in_list_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.Filter.NumericFilter numeric_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_numeric_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.Filter.BetweenFilter between_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_between_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Filter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Filter.field_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->field_name(), output);
  }

  // .google.analytics.data.v1beta.Filter.StringFilter string_filter = 3;
  if (has_string_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::string_filter(this), output);
  }

  // .google.analytics.data.v1beta.Filter.InListFilter in_list_filter = 4;
  if (has_in_list_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::in_list_filter(this), output);
  }

  // .google.analytics.data.v1beta.Filter.NumericFilter numeric_filter = 5;
  if (has_numeric_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::numeric_filter(this), output);
  }

  // .google.analytics.data.v1beta.Filter.BetweenFilter between_filter = 6;
  if (has_between_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::between_filter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Filter)
}

::google::protobuf::uint8* Filter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_name().data(), static_cast<int>(this->field_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Filter.field_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->field_name(), target);
  }

  // .google.analytics.data.v1beta.Filter.StringFilter string_filter = 3;
  if (has_string_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::string_filter(this), target);
  }

  // .google.analytics.data.v1beta.Filter.InListFilter in_list_filter = 4;
  if (has_in_list_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::in_list_filter(this), target);
  }

  // .google.analytics.data.v1beta.Filter.NumericFilter numeric_filter = 5;
  if (has_numeric_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::numeric_filter(this), target);
  }

  // .google.analytics.data.v1beta.Filter.BetweenFilter between_filter = 6;
  if (has_between_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::between_filter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Filter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field_name = 1;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field_name());
  }

  switch (one_filter_case()) {
    // .google.analytics.data.v1beta.Filter.StringFilter string_filter = 3;
    case kStringFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_filter_.string_filter_);
      break;
    }
    // .google.analytics.data.v1beta.Filter.InListFilter in_list_filter = 4;
    case kInListFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_filter_.in_list_filter_);
      break;
    }
    // .google.analytics.data.v1beta.Filter.NumericFilter numeric_filter = 5;
    case kNumericFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_filter_.numeric_filter_);
      break;
    }
    // .google.analytics.data.v1beta.Filter.BetweenFilter between_filter = 6;
    case kBetweenFilter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_filter_.between_filter_);
      break;
    }
    case ONE_FILTER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::google::protobuf::DynamicCastToGenerated<Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Filter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  switch (from.one_filter_case()) {
    case kStringFilter: {
      mutable_string_filter()->::google::analytics::data::v1beta::Filter_StringFilter::MergeFrom(from.string_filter());
      break;
    }
    case kInListFilter: {
      mutable_in_list_filter()->::google::analytics::data::v1beta::Filter_InListFilter::MergeFrom(from.in_list_filter());
      break;
    }
    case kNumericFilter: {
      mutable_numeric_filter()->::google::analytics::data::v1beta::Filter_NumericFilter::MergeFrom(from.numeric_filter());
      break;
    }
    case kBetweenFilter: {
      mutable_between_filter()->::google::analytics::data::v1beta::Filter_BetweenFilter::MergeFrom(from.between_filter());
      break;
    }
    case ONE_FILTER_NOT_SET: {
      break;
    }
  }
}

void Filter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::Swap(Filter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_name_.Swap(&other->field_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(one_filter_, other->one_filter_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Filter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderBy_MetricOrderBy::InitAsDefaultInstance() {
}
class OrderBy_MetricOrderBy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBy_MetricOrderBy::kMetricNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBy_MetricOrderBy::OrderBy_MetricOrderBy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
}
OrderBy_MetricOrderBy::OrderBy_MetricOrderBy(const OrderBy_MetricOrderBy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metric_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metric_name().size() > 0) {
    metric_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
}

void OrderBy_MetricOrderBy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  metric_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrderBy_MetricOrderBy::~OrderBy_MetricOrderBy() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  SharedDtor();
}

void OrderBy_MetricOrderBy::SharedDtor() {
  metric_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderBy_MetricOrderBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderBy_MetricOrderBy& OrderBy_MetricOrderBy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderBy_MetricOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void OrderBy_MetricOrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderBy_MetricOrderBy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderBy_MetricOrderBy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string metric_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.OrderBy.MetricOrderBy.metric_name");
        object = msg->mutable_metric_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderBy_MetricOrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string metric_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric_name().data(), static_cast<int>(this->metric_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.OrderBy.MetricOrderBy.metric_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderBy_MetricOrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (this->metric_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric_name().data(), static_cast<int>(this->metric_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.MetricOrderBy.metric_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metric_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
}

::google::protobuf::uint8* OrderBy_MetricOrderBy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (this->metric_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric_name().data(), static_cast<int>(this->metric_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.MetricOrderBy.metric_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metric_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  return target;
}

size_t OrderBy_MetricOrderBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string metric_name = 1;
  if (this->metric_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metric_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBy_MetricOrderBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBy_MetricOrderBy* source =
      ::google::protobuf::DynamicCastToGenerated<OrderBy_MetricOrderBy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
    MergeFrom(*source);
  }
}

void OrderBy_MetricOrderBy::MergeFrom(const OrderBy_MetricOrderBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.metric_name().size() > 0) {

    metric_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_name_);
  }
}

void OrderBy_MetricOrderBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy_MetricOrderBy::CopyFrom(const OrderBy_MetricOrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.OrderBy.MetricOrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy_MetricOrderBy::IsInitialized() const {
  return true;
}

void OrderBy_MetricOrderBy::Swap(OrderBy_MetricOrderBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBy_MetricOrderBy::InternalSwap(OrderBy_MetricOrderBy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metric_name_.Swap(&other->metric_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrderBy_MetricOrderBy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderBy_DimensionOrderBy::InitAsDefaultInstance() {
}
class OrderBy_DimensionOrderBy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBy_DimensionOrderBy::kDimensionNameFieldNumber;
const int OrderBy_DimensionOrderBy::kOrderTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBy_DimensionOrderBy::OrderBy_DimensionOrderBy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
}
OrderBy_DimensionOrderBy::OrderBy_DimensionOrderBy(const OrderBy_DimensionOrderBy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dimension_name().size() > 0) {
    dimension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_name_);
  }
  order_type_ = from.order_type_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
}

void OrderBy_DimensionOrderBy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  dimension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_ = 0;
}

OrderBy_DimensionOrderBy::~OrderBy_DimensionOrderBy() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  SharedDtor();
}

void OrderBy_DimensionOrderBy::SharedDtor() {
  dimension_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderBy_DimensionOrderBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderBy_DimensionOrderBy& OrderBy_DimensionOrderBy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderBy_DimensionOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void OrderBy_DimensionOrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderBy_DimensionOrderBy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderBy_DimensionOrderBy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string dimension_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.OrderBy.DimensionOrderBy.dimension_name");
        object = msg->mutable_dimension_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType order_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_order_type(static_cast<::google::analytics::data::v1beta::OrderBy_DimensionOrderBy_OrderType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderBy_DimensionOrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dimension_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dimension_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.OrderBy.DimensionOrderBy.dimension_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType order_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_type(static_cast< ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy_OrderType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderBy_DimensionOrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.DimensionOrderBy.dimension_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dimension_name(), output);
  }

  // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType order_type = 2;
  if (this->order_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->order_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
}

::google::protobuf::uint8* OrderBy_DimensionOrderBy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.DimensionOrderBy.dimension_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dimension_name(), target);
  }

  // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType order_type = 2;
  if (this->order_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->order_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  return target;
}

size_t OrderBy_DimensionOrderBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dimension_name());
  }

  // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType order_type = 2;
  if (this->order_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBy_DimensionOrderBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBy_DimensionOrderBy* source =
      ::google::protobuf::DynamicCastToGenerated<OrderBy_DimensionOrderBy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
    MergeFrom(*source);
  }
}

void OrderBy_DimensionOrderBy::MergeFrom(const OrderBy_DimensionOrderBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension_name().size() > 0) {

    dimension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_name_);
  }
  if (from.order_type() != 0) {
    set_order_type(from.order_type());
  }
}

void OrderBy_DimensionOrderBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy_DimensionOrderBy::CopyFrom(const OrderBy_DimensionOrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.OrderBy.DimensionOrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy_DimensionOrderBy::IsInitialized() const {
  return true;
}

void OrderBy_DimensionOrderBy::Swap(OrderBy_DimensionOrderBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBy_DimensionOrderBy::InternalSwap(OrderBy_DimensionOrderBy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimension_name_.Swap(&other->dimension_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_type_, other->order_type_);
}

::google::protobuf::Metadata OrderBy_DimensionOrderBy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderBy_PivotOrderBy_PivotSelection::InitAsDefaultInstance() {
}
class OrderBy_PivotOrderBy_PivotSelection::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBy_PivotOrderBy_PivotSelection::kDimensionNameFieldNumber;
const int OrderBy_PivotOrderBy_PivotSelection::kDimensionValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBy_PivotOrderBy_PivotSelection::OrderBy_PivotOrderBy_PivotSelection()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
}
OrderBy_PivotOrderBy_PivotSelection::OrderBy_PivotOrderBy_PivotSelection(const OrderBy_PivotOrderBy_PivotSelection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dimension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dimension_name().size() > 0) {
    dimension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_name_);
  }
  dimension_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dimension_value().size() > 0) {
    dimension_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_value_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
}

void OrderBy_PivotOrderBy_PivotSelection::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  dimension_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrderBy_PivotOrderBy_PivotSelection::~OrderBy_PivotOrderBy_PivotSelection() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  SharedDtor();
}

void OrderBy_PivotOrderBy_PivotSelection::SharedDtor() {
  dimension_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderBy_PivotOrderBy_PivotSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderBy_PivotOrderBy_PivotSelection& OrderBy_PivotOrderBy_PivotSelection::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderBy_PivotOrderBy_PivotSelection_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void OrderBy_PivotOrderBy_PivotSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderBy_PivotOrderBy_PivotSelection::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderBy_PivotOrderBy_PivotSelection*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string dimension_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_name");
        object = msg->mutable_dimension_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string dimension_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_value");
        object = msg->mutable_dimension_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderBy_PivotOrderBy_PivotSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dimension_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dimension_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dimension_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dimension_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dimension_value().data(), static_cast<int>(this->dimension_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderBy_PivotOrderBy_PivotSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dimension_name(), output);
  }

  // string dimension_value = 2;
  if (this->dimension_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_value().data(), static_cast<int>(this->dimension_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dimension_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
}

::google::protobuf::uint8* OrderBy_PivotOrderBy_PivotSelection::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_name().data(), static_cast<int>(this->dimension_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dimension_name(), target);
  }

  // string dimension_value = 2;
  if (this->dimension_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension_value().data(), static_cast<int>(this->dimension_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.dimension_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dimension_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  return target;
}

size_t OrderBy_PivotOrderBy_PivotSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dimension_name = 1;
  if (this->dimension_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dimension_name());
  }

  // string dimension_value = 2;
  if (this->dimension_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dimension_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBy_PivotOrderBy_PivotSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBy_PivotOrderBy_PivotSelection* source =
      ::google::protobuf::DynamicCastToGenerated<OrderBy_PivotOrderBy_PivotSelection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
    MergeFrom(*source);
  }
}

void OrderBy_PivotOrderBy_PivotSelection::MergeFrom(const OrderBy_PivotOrderBy_PivotSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension_name().size() > 0) {

    dimension_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_name_);
  }
  if (from.dimension_value().size() > 0) {

    dimension_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_value_);
  }
}

void OrderBy_PivotOrderBy_PivotSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy_PivotOrderBy_PivotSelection::CopyFrom(const OrderBy_PivotOrderBy_PivotSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy_PivotOrderBy_PivotSelection::IsInitialized() const {
  return true;
}

void OrderBy_PivotOrderBy_PivotSelection::Swap(OrderBy_PivotOrderBy_PivotSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBy_PivotOrderBy_PivotSelection::InternalSwap(OrderBy_PivotOrderBy_PivotSelection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimension_name_.Swap(&other->dimension_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dimension_value_.Swap(&other->dimension_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrderBy_PivotOrderBy_PivotSelection::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderBy_PivotOrderBy::InitAsDefaultInstance() {
}
class OrderBy_PivotOrderBy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBy_PivotOrderBy::kMetricNameFieldNumber;
const int OrderBy_PivotOrderBy::kPivotSelectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBy_PivotOrderBy::OrderBy_PivotOrderBy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
}
OrderBy_PivotOrderBy::OrderBy_PivotOrderBy(const OrderBy_PivotOrderBy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pivot_selections_(from.pivot_selections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metric_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.metric_name().size() > 0) {
    metric_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
}

void OrderBy_PivotOrderBy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  metric_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OrderBy_PivotOrderBy::~OrderBy_PivotOrderBy() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  SharedDtor();
}

void OrderBy_PivotOrderBy::SharedDtor() {
  metric_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderBy_PivotOrderBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderBy_PivotOrderBy& OrderBy_PivotOrderBy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderBy_PivotOrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void OrderBy_PivotOrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pivot_selections_.Clear();
  metric_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderBy_PivotOrderBy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderBy_PivotOrderBy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string metric_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.OrderBy.PivotOrderBy.metric_name");
        object = msg->mutable_metric_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection::_InternalParse;
          object = msg->add_pivot_selections();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderBy_PivotOrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string metric_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metric_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric_name().data(), static_cast<int>(this->metric_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.OrderBy.PivotOrderBy.metric_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pivot_selections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderBy_PivotOrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (this->metric_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric_name().data(), static_cast<int>(this->metric_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.PivotOrderBy.metric_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metric_name(), output);
  }

  // repeated .google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_selections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pivot_selections(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
}

::google::protobuf::uint8* OrderBy_PivotOrderBy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string metric_name = 1;
  if (this->metric_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric_name().data(), static_cast<int>(this->metric_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.OrderBy.PivotOrderBy.metric_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metric_name(), target);
  }

  // repeated .google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_selections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pivot_selections(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  return target;
}

size_t OrderBy_PivotOrderBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pivot_selections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pivot_selections(static_cast<int>(i)));
    }
  }

  // string metric_name = 1;
  if (this->metric_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metric_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBy_PivotOrderBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBy_PivotOrderBy* source =
      ::google::protobuf::DynamicCastToGenerated<OrderBy_PivotOrderBy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
    MergeFrom(*source);
  }
}

void OrderBy_PivotOrderBy::MergeFrom(const OrderBy_PivotOrderBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pivot_selections_.MergeFrom(from.pivot_selections_);
  if (from.metric_name().size() > 0) {

    metric_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metric_name_);
  }
}

void OrderBy_PivotOrderBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy_PivotOrderBy::CopyFrom(const OrderBy_PivotOrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.OrderBy.PivotOrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy_PivotOrderBy::IsInitialized() const {
  return true;
}

void OrderBy_PivotOrderBy::Swap(OrderBy_PivotOrderBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBy_PivotOrderBy::InternalSwap(OrderBy_PivotOrderBy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pivot_selections_)->InternalSwap(CastToBase(&other->pivot_selections_));
  metric_name_.Swap(&other->metric_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata OrderBy_PivotOrderBy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderBy::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_OrderBy_default_instance_.metric_ = const_cast< ::google::analytics::data::v1beta::OrderBy_MetricOrderBy*>(
      ::google::analytics::data::v1beta::OrderBy_MetricOrderBy::internal_default_instance());
  ::google::analytics::data::v1beta::_OrderBy_default_instance_.dimension_ = const_cast< ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy*>(
      ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy::internal_default_instance());
  ::google::analytics::data::v1beta::_OrderBy_default_instance_.pivot_ = const_cast< ::google::analytics::data::v1beta::OrderBy_PivotOrderBy*>(
      ::google::analytics::data::v1beta::OrderBy_PivotOrderBy::internal_default_instance());
}
class OrderBy::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::OrderBy_MetricOrderBy& metric(const OrderBy* msg);
  static const ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy& dimension(const OrderBy* msg);
  static const ::google::analytics::data::v1beta::OrderBy_PivotOrderBy& pivot(const OrderBy* msg);
};

const ::google::analytics::data::v1beta::OrderBy_MetricOrderBy&
OrderBy::HasBitSetters::metric(const OrderBy* msg) {
  return *msg->one_order_by_.metric_;
}
const ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy&
OrderBy::HasBitSetters::dimension(const OrderBy* msg) {
  return *msg->one_order_by_.dimension_;
}
const ::google::analytics::data::v1beta::OrderBy_PivotOrderBy&
OrderBy::HasBitSetters::pivot(const OrderBy* msg) {
  return *msg->one_order_by_.pivot_;
}
void OrderBy::set_allocated_metric(::google::analytics::data::v1beta::OrderBy_MetricOrderBy* metric) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_order_by();
  if (metric) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metric = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric, submessage_arena);
    }
    set_has_metric();
    one_order_by_.metric_ = metric;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.OrderBy.metric)
}
void OrderBy::set_allocated_dimension(::google::analytics::data::v1beta::OrderBy_DimensionOrderBy* dimension) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_order_by();
  if (dimension) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimension = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dimension, submessage_arena);
    }
    set_has_dimension();
    one_order_by_.dimension_ = dimension;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.OrderBy.dimension)
}
void OrderBy::set_allocated_pivot(::google::analytics::data::v1beta::OrderBy_PivotOrderBy* pivot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_one_order_by();
  if (pivot) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pivot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pivot, submessage_arena);
    }
    set_has_pivot();
    one_order_by_.pivot_ = pivot;
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1beta.OrderBy.pivot)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderBy::kMetricFieldNumber;
const int OrderBy::kDimensionFieldNumber;
const int OrderBy::kPivotFieldNumber;
const int OrderBy::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderBy::OrderBy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.OrderBy)
}
OrderBy::OrderBy(const OrderBy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  desc_ = from.desc_;
  clear_has_one_order_by();
  switch (from.one_order_by_case()) {
    case kMetric: {
      mutable_metric()->::google::analytics::data::v1beta::OrderBy_MetricOrderBy::MergeFrom(from.metric());
      break;
    }
    case kDimension: {
      mutable_dimension()->::google::analytics::data::v1beta::OrderBy_DimensionOrderBy::MergeFrom(from.dimension());
      break;
    }
    case kPivot: {
      mutable_pivot()->::google::analytics::data::v1beta::OrderBy_PivotOrderBy::MergeFrom(from.pivot());
      break;
    }
    case ONE_ORDER_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.OrderBy)
}

void OrderBy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  desc_ = false;
  clear_has_one_order_by();
}

OrderBy::~OrderBy() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.OrderBy)
  SharedDtor();
}

void OrderBy::SharedDtor() {
  if (has_one_order_by()) {
    clear_one_order_by();
  }
}

void OrderBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderBy& OrderBy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void OrderBy::clear_one_order_by() {
// @@protoc_insertion_point(one_of_clear_start:google.analytics.data.v1beta.OrderBy)
  switch (one_order_by_case()) {
    case kMetric: {
      delete one_order_by_.metric_;
      break;
    }
    case kDimension: {
      delete one_order_by_.dimension_;
      break;
    }
    case kPivot: {
      delete one_order_by_.pivot_;
      break;
    }
    case ONE_ORDER_BY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_ORDER_BY_NOT_SET;
}


void OrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.OrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  desc_ = false;
  clear_one_order_by();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderBy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderBy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.OrderBy.MetricOrderBy metric = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::OrderBy_MetricOrderBy::_InternalParse;
        object = msg->mutable_metric();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy dimension = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy::_InternalParse;
        object = msg->mutable_dimension();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.OrderBy.PivotOrderBy pivot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::OrderBy_PivotOrderBy::_InternalParse;
        object = msg->mutable_pivot();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool desc = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_desc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.OrderBy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.OrderBy.MetricOrderBy metric = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy dimension = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dimension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.OrderBy.PivotOrderBy pivot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pivot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool desc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &desc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.OrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.OrderBy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.OrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.OrderBy.MetricOrderBy metric = 1;
  if (has_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::metric(this), output);
  }

  // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy dimension = 2;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::dimension(this), output);
  }

  // .google.analytics.data.v1beta.OrderBy.PivotOrderBy pivot = 3;
  if (has_pivot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pivot(this), output);
  }

  // bool desc = 4;
  if (this->desc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.OrderBy)
}

::google::protobuf::uint8* OrderBy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.OrderBy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.OrderBy.MetricOrderBy metric = 1;
  if (has_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::metric(this), target);
  }

  // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy dimension = 2;
  if (has_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::dimension(this), target);
  }

  // .google.analytics.data.v1beta.OrderBy.PivotOrderBy pivot = 3;
  if (has_pivot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pivot(this), target);
  }

  // bool desc = 4;
  if (this->desc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.OrderBy)
  return target;
}

size_t OrderBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.OrderBy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool desc = 4;
  if (this->desc() != 0) {
    total_size += 1 + 1;
  }

  switch (one_order_by_case()) {
    // .google.analytics.data.v1beta.OrderBy.MetricOrderBy metric = 1;
    case kMetric: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_order_by_.metric_);
      break;
    }
    // .google.analytics.data.v1beta.OrderBy.DimensionOrderBy dimension = 2;
    case kDimension: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_order_by_.dimension_);
      break;
    }
    // .google.analytics.data.v1beta.OrderBy.PivotOrderBy pivot = 3;
    case kPivot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *one_order_by_.pivot_);
      break;
    }
    case ONE_ORDER_BY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.OrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderBy* source =
      ::google::protobuf::DynamicCastToGenerated<OrderBy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.OrderBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.OrderBy)
    MergeFrom(*source);
  }
}

void OrderBy::MergeFrom(const OrderBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.OrderBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.desc() != 0) {
    set_desc(from.desc());
  }
  switch (from.one_order_by_case()) {
    case kMetric: {
      mutable_metric()->::google::analytics::data::v1beta::OrderBy_MetricOrderBy::MergeFrom(from.metric());
      break;
    }
    case kDimension: {
      mutable_dimension()->::google::analytics::data::v1beta::OrderBy_DimensionOrderBy::MergeFrom(from.dimension());
      break;
    }
    case kPivot: {
      mutable_pivot()->::google::analytics::data::v1beta::OrderBy_PivotOrderBy::MergeFrom(from.pivot());
      break;
    }
    case ONE_ORDER_BY_NOT_SET: {
      break;
    }
  }
}

void OrderBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy::CopyFrom(const OrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy::IsInitialized() const {
  return true;
}

void OrderBy::Swap(OrderBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderBy::InternalSwap(OrderBy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(desc_, other->desc_);
  swap(one_order_by_, other->one_order_by_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata OrderBy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Pivot::InitAsDefaultInstance() {
}
class Pivot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pivot::kFieldNamesFieldNumber;
const int Pivot::kOrderBysFieldNumber;
const int Pivot::kOffsetFieldNumber;
const int Pivot::kLimitFieldNumber;
const int Pivot::kMetricAggregationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pivot::Pivot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Pivot)
}
Pivot::Pivot(const Pivot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      field_names_(from.field_names_),
      order_bys_(from.order_bys_),
      metric_aggregations_(from.metric_aggregations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Pivot)
}

void Pivot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Pivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
}

Pivot::~Pivot() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Pivot)
  SharedDtor();
}

void Pivot::SharedDtor() {
}

void Pivot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pivot& Pivot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Pivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Pivot::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Pivot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_names_.Clear();
  order_bys_.Clear();
  metric_aggregations_.Clear();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Pivot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Pivot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string field_names = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Pivot.field_names");
          object = msg->add_field_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.OrderBy order_bys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::OrderBy::_InternalParse;
          object = msg->add_order_bys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // int64 offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 limit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_metric_aggregations();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_metric_aggregations(static_cast<::google::analytics::data::v1beta::MetricAggregation>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Pivot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Pivot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string field_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field_names(this->field_names_size() - 1).data(),
            static_cast<int>(this->field_names(this->field_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Pivot.field_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.OrderBy order_bys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_bys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_metric_aggregations(static_cast< ::google::analytics::data::v1beta::MetricAggregation >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_metric_aggregations(static_cast< ::google::analytics::data::v1beta::MetricAggregation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Pivot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Pivot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Pivot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Pivot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string field_names = 1;
  for (int i = 0, n = this->field_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_names(i).data(), static_cast<int>(this->field_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Pivot.field_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field_names(i), output);
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_bys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->order_bys(static_cast<int>(i)),
      output);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offset(), output);
  }

  // int64 limit = 4;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->limit(), output);
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 5;
  if (this->metric_aggregations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_metric_aggregations_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->metric_aggregations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->metric_aggregations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Pivot)
}

::google::protobuf::uint8* Pivot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Pivot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string field_names = 1;
  for (int i = 0, n = this->field_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field_names(i).data(), static_cast<int>(this->field_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Pivot.field_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->field_names(i), target);
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_bys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->order_bys(static_cast<int>(i)), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offset(), target);
  }

  // int64 limit = 4;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->limit(), target);
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 5;
  if (this->metric_aggregations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _metric_aggregations_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->metric_aggregations_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Pivot)
  return target;
}

size_t Pivot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Pivot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_names = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_names_size());
  for (int i = 0, n = this->field_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_names(i));
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->order_bys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_bys(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->metric_aggregations_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->metric_aggregations(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _metric_aggregations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int64 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pivot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Pivot)
  GOOGLE_DCHECK_NE(&from, this);
  const Pivot* source =
      ::google::protobuf::DynamicCastToGenerated<Pivot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Pivot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Pivot)
    MergeFrom(*source);
  }
}

void Pivot::MergeFrom(const Pivot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Pivot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_names_.MergeFrom(from.field_names_);
  order_bys_.MergeFrom(from.order_bys_);
  metric_aggregations_.MergeFrom(from.metric_aggregations_);
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void Pivot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Pivot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pivot::CopyFrom(const Pivot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Pivot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pivot::IsInitialized() const {
  return true;
}

void Pivot::Swap(Pivot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pivot::InternalSwap(Pivot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_names_.InternalSwap(CastToBase(&other->field_names_));
  CastToBase(&order_bys_)->InternalSwap(CastToBase(&other->order_bys_));
  metric_aggregations_.InternalSwap(&other->metric_aggregations_);
  swap(offset_, other->offset_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata Pivot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CohortSpec::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_CohortSpec_default_instance_._instance.get_mutable()->cohorts_range_ = const_cast< ::google::analytics::data::v1beta::CohortsRange*>(
      ::google::analytics::data::v1beta::CohortsRange::internal_default_instance());
  ::google::analytics::data::v1beta::_CohortSpec_default_instance_._instance.get_mutable()->cohort_report_settings_ = const_cast< ::google::analytics::data::v1beta::CohortReportSettings*>(
      ::google::analytics::data::v1beta::CohortReportSettings::internal_default_instance());
}
class CohortSpec::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::CohortsRange& cohorts_range(const CohortSpec* msg);
  static const ::google::analytics::data::v1beta::CohortReportSettings& cohort_report_settings(const CohortSpec* msg);
};

const ::google::analytics::data::v1beta::CohortsRange&
CohortSpec::HasBitSetters::cohorts_range(const CohortSpec* msg) {
  return *msg->cohorts_range_;
}
const ::google::analytics::data::v1beta::CohortReportSettings&
CohortSpec::HasBitSetters::cohort_report_settings(const CohortSpec* msg) {
  return *msg->cohort_report_settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CohortSpec::kCohortsFieldNumber;
const int CohortSpec::kCohortsRangeFieldNumber;
const int CohortSpec::kCohortReportSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CohortSpec::CohortSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.CohortSpec)
}
CohortSpec::CohortSpec(const CohortSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      cohorts_(from.cohorts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cohorts_range()) {
    cohorts_range_ = new ::google::analytics::data::v1beta::CohortsRange(*from.cohorts_range_);
  } else {
    cohorts_range_ = nullptr;
  }
  if (from.has_cohort_report_settings()) {
    cohort_report_settings_ = new ::google::analytics::data::v1beta::CohortReportSettings(*from.cohort_report_settings_);
  } else {
    cohort_report_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.CohortSpec)
}

void CohortSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::memset(&cohorts_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cohort_report_settings_) -
      reinterpret_cast<char*>(&cohorts_range_)) + sizeof(cohort_report_settings_));
}

CohortSpec::~CohortSpec() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.CohortSpec)
  SharedDtor();
}

void CohortSpec::SharedDtor() {
  if (this != internal_default_instance()) delete cohorts_range_;
  if (this != internal_default_instance()) delete cohort_report_settings_;
}

void CohortSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CohortSpec& CohortSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void CohortSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.CohortSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cohorts_.Clear();
  if (GetArenaNoVirtual() == nullptr && cohorts_range_ != nullptr) {
    delete cohorts_range_;
  }
  cohorts_range_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cohort_report_settings_ != nullptr) {
    delete cohort_report_settings_;
  }
  cohort_report_settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CohortSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CohortSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.Cohort cohorts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Cohort::_InternalParse;
          object = msg->add_cohorts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.analytics.data.v1beta.CohortsRange cohorts_range = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::CohortsRange::_InternalParse;
        object = msg->mutable_cohorts_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.CohortReportSettings cohort_report_settings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::CohortReportSettings::_InternalParse;
        object = msg->mutable_cohort_report_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CohortSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.CohortSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.Cohort cohorts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cohorts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.CohortsRange cohorts_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cohorts_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.CohortReportSettings cohort_report_settings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cohort_report_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.CohortSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.CohortSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CohortSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.CohortSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.Cohort cohorts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cohorts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cohorts(static_cast<int>(i)),
      output);
  }

  // .google.analytics.data.v1beta.CohortsRange cohorts_range = 2;
  if (this->has_cohorts_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cohorts_range(this), output);
  }

  // .google.analytics.data.v1beta.CohortReportSettings cohort_report_settings = 3;
  if (this->has_cohort_report_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cohort_report_settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.CohortSpec)
}

::google::protobuf::uint8* CohortSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.CohortSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.Cohort cohorts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cohorts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cohorts(static_cast<int>(i)), target);
  }

  // .google.analytics.data.v1beta.CohortsRange cohorts_range = 2;
  if (this->has_cohorts_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cohorts_range(this), target);
  }

  // .google.analytics.data.v1beta.CohortReportSettings cohort_report_settings = 3;
  if (this->has_cohort_report_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cohort_report_settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.CohortSpec)
  return target;
}

size_t CohortSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.CohortSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.Cohort cohorts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cohorts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cohorts(static_cast<int>(i)));
    }
  }

  // .google.analytics.data.v1beta.CohortsRange cohorts_range = 2;
  if (this->has_cohorts_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cohorts_range_);
  }

  // .google.analytics.data.v1beta.CohortReportSettings cohort_report_settings = 3;
  if (this->has_cohort_report_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cohort_report_settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CohortSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.CohortSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const CohortSpec* source =
      ::google::protobuf::DynamicCastToGenerated<CohortSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.CohortSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.CohortSpec)
    MergeFrom(*source);
  }
}

void CohortSpec::MergeFrom(const CohortSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.CohortSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cohorts_.MergeFrom(from.cohorts_);
  if (from.has_cohorts_range()) {
    mutable_cohorts_range()->::google::analytics::data::v1beta::CohortsRange::MergeFrom(from.cohorts_range());
  }
  if (from.has_cohort_report_settings()) {
    mutable_cohort_report_settings()->::google::analytics::data::v1beta::CohortReportSettings::MergeFrom(from.cohort_report_settings());
  }
}

void CohortSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.CohortSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CohortSpec::CopyFrom(const CohortSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.CohortSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CohortSpec::IsInitialized() const {
  return true;
}

void CohortSpec::Swap(CohortSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CohortSpec::InternalSwap(CohortSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cohorts_)->InternalSwap(CastToBase(&other->cohorts_));
  swap(cohorts_range_, other->cohorts_range_);
  swap(cohort_report_settings_, other->cohort_report_settings_);
}

::google::protobuf::Metadata CohortSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Cohort::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_Cohort_default_instance_._instance.get_mutable()->date_range_ = const_cast< ::google::analytics::data::v1beta::DateRange*>(
      ::google::analytics::data::v1beta::DateRange::internal_default_instance());
}
class Cohort::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::DateRange& date_range(const Cohort* msg);
};

const ::google::analytics::data::v1beta::DateRange&
Cohort::HasBitSetters::date_range(const Cohort* msg) {
  return *msg->date_range_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cohort::kNameFieldNumber;
const int Cohort::kDimensionFieldNumber;
const int Cohort::kDateRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cohort::Cohort()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Cohort)
}
Cohort::Cohort(const Cohort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  dimension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dimension().size() > 0) {
    dimension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_);
  }
  if (from.has_date_range()) {
    date_range_ = new ::google::analytics::data::v1beta::DateRange(*from.date_range_);
  } else {
    date_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Cohort)
}

void Cohort::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Cohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_range_ = nullptr;
}

Cohort::~Cohort() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Cohort)
  SharedDtor();
}

void Cohort::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete date_range_;
}

void Cohort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cohort& Cohort::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Cohort_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Cohort::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Cohort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && date_range_ != nullptr) {
    delete date_range_;
  }
  date_range_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Cohort::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Cohort*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Cohort.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string dimension = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Cohort.dimension");
        object = msg->mutable_dimension();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.analytics.data.v1beta.DateRange date_range = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::DateRange::_InternalParse;
        object = msg->mutable_date_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Cohort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Cohort)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Cohort.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dimension = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dimension()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dimension().data(), static_cast<int>(this->dimension().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Cohort.dimension"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.DateRange date_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Cohort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Cohort)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Cohort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Cohort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Cohort.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string dimension = 2;
  if (this->dimension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension().data(), static_cast<int>(this->dimension().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Cohort.dimension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dimension(), output);
  }

  // .google.analytics.data.v1beta.DateRange date_range = 3;
  if (this->has_date_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::date_range(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Cohort)
}

::google::protobuf::uint8* Cohort::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Cohort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Cohort.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string dimension = 2;
  if (this->dimension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dimension().data(), static_cast<int>(this->dimension().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Cohort.dimension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dimension(), target);
  }

  // .google.analytics.data.v1beta.DateRange date_range = 3;
  if (this->has_date_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::date_range(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Cohort)
  return target;
}

size_t Cohort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Cohort)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string dimension = 2;
  if (this->dimension().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dimension());
  }

  // .google.analytics.data.v1beta.DateRange date_range = 3;
  if (this->has_date_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *date_range_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cohort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Cohort)
  GOOGLE_DCHECK_NE(&from, this);
  const Cohort* source =
      ::google::protobuf::DynamicCastToGenerated<Cohort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Cohort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Cohort)
    MergeFrom(*source);
  }
}

void Cohort::MergeFrom(const Cohort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Cohort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dimension().size() > 0) {

    dimension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dimension_);
  }
  if (from.has_date_range()) {
    mutable_date_range()->::google::analytics::data::v1beta::DateRange::MergeFrom(from.date_range());
  }
}

void Cohort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Cohort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cohort::CopyFrom(const Cohort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Cohort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cohort::IsInitialized() const {
  return true;
}

void Cohort::Swap(Cohort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cohort::InternalSwap(Cohort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dimension_.Swap(&other->dimension_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(date_range_, other->date_range_);
}

::google::protobuf::Metadata Cohort::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CohortsRange::InitAsDefaultInstance() {
}
class CohortsRange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CohortsRange::kGranularityFieldNumber;
const int CohortsRange::kStartOffsetFieldNumber;
const int CohortsRange::kEndOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CohortsRange::CohortsRange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.CohortsRange)
}
CohortsRange::CohortsRange(const CohortsRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&granularity_, &from.granularity_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_offset_) -
    reinterpret_cast<char*>(&granularity_)) + sizeof(end_offset_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.CohortsRange)
}

void CohortsRange::SharedCtor() {
  ::memset(&granularity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&granularity_)) + sizeof(end_offset_));
}

CohortsRange::~CohortsRange() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.CohortsRange)
  SharedDtor();
}

void CohortsRange::SharedDtor() {
}

void CohortsRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CohortsRange& CohortsRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CohortsRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void CohortsRange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.CohortsRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&granularity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_offset_) -
      reinterpret_cast<char*>(&granularity_)) + sizeof(end_offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CohortsRange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CohortsRange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.CohortsRange.Granularity granularity = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_granularity(static_cast<::google::analytics::data::v1beta::CohortsRange_Granularity>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 start_offset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_start_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 end_offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_end_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CohortsRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.CohortsRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.CohortsRange.Granularity granularity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_granularity(static_cast< ::google::analytics::data::v1beta::CohortsRange_Granularity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.CohortsRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.CohortsRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CohortsRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.CohortsRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.CohortsRange.Granularity granularity = 1;
  if (this->granularity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->granularity(), output);
  }

  // int32 start_offset = 2;
  if (this->start_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_offset(), output);
  }

  // int32 end_offset = 3;
  if (this->end_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.CohortsRange)
}

::google::protobuf::uint8* CohortsRange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.CohortsRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.CohortsRange.Granularity granularity = 1;
  if (this->granularity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->granularity(), target);
  }

  // int32 start_offset = 2;
  if (this->start_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_offset(), target);
  }

  // int32 end_offset = 3;
  if (this->end_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.CohortsRange)
  return target;
}

size_t CohortsRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.CohortsRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.CohortsRange.Granularity granularity = 1;
  if (this->granularity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->granularity());
  }

  // int32 start_offset = 2;
  if (this->start_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_offset());
  }

  // int32 end_offset = 3;
  if (this->end_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CohortsRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.CohortsRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CohortsRange* source =
      ::google::protobuf::DynamicCastToGenerated<CohortsRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.CohortsRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.CohortsRange)
    MergeFrom(*source);
  }
}

void CohortsRange::MergeFrom(const CohortsRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.CohortsRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.granularity() != 0) {
    set_granularity(from.granularity());
  }
  if (from.start_offset() != 0) {
    set_start_offset(from.start_offset());
  }
  if (from.end_offset() != 0) {
    set_end_offset(from.end_offset());
  }
}

void CohortsRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.CohortsRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CohortsRange::CopyFrom(const CohortsRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.CohortsRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CohortsRange::IsInitialized() const {
  return true;
}

void CohortsRange::Swap(CohortsRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CohortsRange::InternalSwap(CohortsRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(granularity_, other->granularity_);
  swap(start_offset_, other->start_offset_);
  swap(end_offset_, other->end_offset_);
}

::google::protobuf::Metadata CohortsRange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CohortReportSettings::InitAsDefaultInstance() {
}
class CohortReportSettings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CohortReportSettings::kAccumulateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CohortReportSettings::CohortReportSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.CohortReportSettings)
}
CohortReportSettings::CohortReportSettings(const CohortReportSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accumulate_ = from.accumulate_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.CohortReportSettings)
}

void CohortReportSettings::SharedCtor() {
  accumulate_ = false;
}

CohortReportSettings::~CohortReportSettings() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.CohortReportSettings)
  SharedDtor();
}

void CohortReportSettings::SharedDtor() {
}

void CohortReportSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CohortReportSettings& CohortReportSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CohortReportSettings_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void CohortReportSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.CohortReportSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accumulate_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CohortReportSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CohortReportSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool accumulate = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_accumulate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CohortReportSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.CohortReportSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool accumulate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accumulate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.CohortReportSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.CohortReportSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CohortReportSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.CohortReportSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accumulate = 1;
  if (this->accumulate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accumulate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.CohortReportSettings)
}

::google::protobuf::uint8* CohortReportSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.CohortReportSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accumulate = 1;
  if (this->accumulate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accumulate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.CohortReportSettings)
  return target;
}

size_t CohortReportSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.CohortReportSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool accumulate = 1;
  if (this->accumulate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CohortReportSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.CohortReportSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CohortReportSettings* source =
      ::google::protobuf::DynamicCastToGenerated<CohortReportSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.CohortReportSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.CohortReportSettings)
    MergeFrom(*source);
  }
}

void CohortReportSettings::MergeFrom(const CohortReportSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.CohortReportSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accumulate() != 0) {
    set_accumulate(from.accumulate());
  }
}

void CohortReportSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.CohortReportSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CohortReportSettings::CopyFrom(const CohortReportSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.CohortReportSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CohortReportSettings::IsInitialized() const {
  return true;
}

void CohortReportSettings::Swap(CohortReportSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CohortReportSettings::InternalSwap(CohortReportSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(accumulate_, other->accumulate_);
}

::google::protobuf::Metadata CohortReportSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResponseMetaData::InitAsDefaultInstance() {
}
class ResponseMetaData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseMetaData::kDataLossFromOtherRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseMetaData::ResponseMetaData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.ResponseMetaData)
}
ResponseMetaData::ResponseMetaData(const ResponseMetaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_loss_from_other_row_ = from.data_loss_from_other_row_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.ResponseMetaData)
}

void ResponseMetaData::SharedCtor() {
  data_loss_from_other_row_ = false;
}

ResponseMetaData::~ResponseMetaData() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.ResponseMetaData)
  SharedDtor();
}

void ResponseMetaData::SharedDtor() {
}

void ResponseMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseMetaData& ResponseMetaData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void ResponseMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.ResponseMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_loss_from_other_row_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseMetaData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseMetaData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool data_loss_from_other_row = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_data_loss_from_other_row(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.ResponseMetaData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool data_loss_from_other_row = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_loss_from_other_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.ResponseMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.ResponseMetaData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.ResponseMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool data_loss_from_other_row = 3;
  if (this->data_loss_from_other_row() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->data_loss_from_other_row(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.ResponseMetaData)
}

::google::protobuf::uint8* ResponseMetaData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.ResponseMetaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool data_loss_from_other_row = 3;
  if (this->data_loss_from_other_row() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->data_loss_from_other_row(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.ResponseMetaData)
  return target;
}

size_t ResponseMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.ResponseMetaData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool data_loss_from_other_row = 3;
  if (this->data_loss_from_other_row() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseMetaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.ResponseMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseMetaData* source =
      ::google::protobuf::DynamicCastToGenerated<ResponseMetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.ResponseMetaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.ResponseMetaData)
    MergeFrom(*source);
  }
}

void ResponseMetaData::MergeFrom(const ResponseMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.ResponseMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_loss_from_other_row() != 0) {
    set_data_loss_from_other_row(from.data_loss_from_other_row());
  }
}

void ResponseMetaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.ResponseMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseMetaData::CopyFrom(const ResponseMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.ResponseMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMetaData::IsInitialized() const {
  return true;
}

void ResponseMetaData::Swap(ResponseMetaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseMetaData::InternalSwap(ResponseMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_loss_from_other_row_, other->data_loss_from_other_row_);
}

::google::protobuf::Metadata ResponseMetaData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DimensionHeader::InitAsDefaultInstance() {
}
class DimensionHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionHeader::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionHeader::DimensionHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.DimensionHeader)
}
DimensionHeader::DimensionHeader(const DimensionHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.DimensionHeader)
}

void DimensionHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DimensionHeader::~DimensionHeader() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.DimensionHeader)
  SharedDtor();
}

void DimensionHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DimensionHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionHeader& DimensionHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DimensionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.DimensionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DimensionHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DimensionHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionHeader.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DimensionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.DimensionHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionHeader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.DimensionHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.DimensionHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DimensionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.DimensionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.DimensionHeader)
}

::google::protobuf::uint8* DimensionHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.DimensionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.DimensionHeader)
  return target;
}

size_t DimensionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.DimensionHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.DimensionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionHeader* source =
      ::google::protobuf::DynamicCastToGenerated<DimensionHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.DimensionHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.DimensionHeader)
    MergeFrom(*source);
  }
}

void DimensionHeader::MergeFrom(const DimensionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.DimensionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DimensionHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.DimensionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionHeader::CopyFrom(const DimensionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.DimensionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionHeader::IsInitialized() const {
  return true;
}

void DimensionHeader::Swap(DimensionHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionHeader::InternalSwap(DimensionHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DimensionHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MetricHeader::InitAsDefaultInstance() {
}
class MetricHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricHeader::kNameFieldNumber;
const int MetricHeader::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricHeader::MetricHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.MetricHeader)
}
MetricHeader::MetricHeader(const MetricHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.MetricHeader)
}

void MetricHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

MetricHeader::~MetricHeader() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.MetricHeader)
  SharedDtor();
}

void MetricHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricHeader& MetricHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void MetricHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.MetricHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MetricHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.MetricHeader.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.analytics.data.v1beta.MetricType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::google::analytics::data::v1beta::MetricType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.MetricHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.MetricHeader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.MetricType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::analytics::data::v1beta::MetricType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.MetricHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.MetricHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.MetricHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.analytics.data.v1beta.MetricType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.MetricHeader)
}

::google::protobuf::uint8* MetricHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.MetricHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.analytics.data.v1beta.MetricType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.MetricHeader)
  return target;
}

size_t MetricHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.MetricHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.analytics.data.v1beta.MetricType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.MetricHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricHeader* source =
      ::google::protobuf::DynamicCastToGenerated<MetricHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.MetricHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.MetricHeader)
    MergeFrom(*source);
  }
}

void MetricHeader::MergeFrom(const MetricHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.MetricHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MetricHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.MetricHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricHeader::CopyFrom(const MetricHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.MetricHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricHeader::IsInitialized() const {
  return true;
}

void MetricHeader::Swap(MetricHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricHeader::InternalSwap(MetricHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata MetricHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PivotHeader::InitAsDefaultInstance() {
}
class PivotHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotHeader::kPivotDimensionHeadersFieldNumber;
const int PivotHeader::kRowCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotHeader::PivotHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.PivotHeader)
}
PivotHeader::PivotHeader(const PivotHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pivot_dimension_headers_(from.pivot_dimension_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_count_ = from.row_count_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.PivotHeader)
}

void PivotHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  row_count_ = 0;
}

PivotHeader::~PivotHeader() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.PivotHeader)
  SharedDtor();
}

void PivotHeader::SharedDtor() {
}

void PivotHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PivotHeader& PivotHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void PivotHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.PivotHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pivot_dimension_headers_.Clear();
  row_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PivotHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PivotHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.PivotDimensionHeader pivot_dimension_headers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::PivotDimensionHeader::_InternalParse;
          object = msg->add_pivot_dimension_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int32 row_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_row_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PivotHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.PivotHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.PivotDimensionHeader pivot_dimension_headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pivot_dimension_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 row_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.PivotHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.PivotHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PivotHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.PivotHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.PivotDimensionHeader pivot_dimension_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_dimension_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pivot_dimension_headers(static_cast<int>(i)),
      output);
  }

  // int32 row_count = 2;
  if (this->row_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.PivotHeader)
}

::google::protobuf::uint8* PivotHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.PivotHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.PivotDimensionHeader pivot_dimension_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_dimension_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pivot_dimension_headers(static_cast<int>(i)), target);
  }

  // int32 row_count = 2;
  if (this->row_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->row_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.PivotHeader)
  return target;
}

size_t PivotHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.PivotHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.PivotDimensionHeader pivot_dimension_headers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pivot_dimension_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pivot_dimension_headers(static_cast<int>(i)));
    }
  }

  // int32 row_count = 2;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PivotHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.PivotHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PivotHeader* source =
      ::google::protobuf::DynamicCastToGenerated<PivotHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.PivotHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.PivotHeader)
    MergeFrom(*source);
  }
}

void PivotHeader::MergeFrom(const PivotHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.PivotHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pivot_dimension_headers_.MergeFrom(from.pivot_dimension_headers_);
  if (from.row_count() != 0) {
    set_row_count(from.row_count());
  }
}

void PivotHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.PivotHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PivotHeader::CopyFrom(const PivotHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.PivotHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotHeader::IsInitialized() const {
  return true;
}

void PivotHeader::Swap(PivotHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotHeader::InternalSwap(PivotHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pivot_dimension_headers_)->InternalSwap(CastToBase(&other->pivot_dimension_headers_));
  swap(row_count_, other->row_count_);
}

::google::protobuf::Metadata PivotHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PivotDimensionHeader::InitAsDefaultInstance() {
}
class PivotDimensionHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PivotDimensionHeader::kDimensionValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PivotDimensionHeader::PivotDimensionHeader()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.PivotDimensionHeader)
}
PivotDimensionHeader::PivotDimensionHeader(const PivotDimensionHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimension_values_(from.dimension_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.PivotDimensionHeader)
}

void PivotDimensionHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
}

PivotDimensionHeader::~PivotDimensionHeader() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.PivotDimensionHeader)
  SharedDtor();
}

void PivotDimensionHeader::SharedDtor() {
}

void PivotDimensionHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PivotDimensionHeader& PivotDimensionHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PivotDimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void PivotDimensionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.PivotDimensionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PivotDimensionHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PivotDimensionHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DimensionValue::_InternalParse;
          object = msg->add_dimension_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PivotDimensionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.PivotDimensionHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimension_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.PivotDimensionHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.PivotDimensionHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PivotDimensionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.PivotDimensionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dimension_values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.PivotDimensionHeader)
}

::google::protobuf::uint8* PivotDimensionHeader::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.PivotDimensionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dimension_values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.PivotDimensionHeader)
  return target;
}

size_t PivotDimensionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.PivotDimensionHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dimension_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimension_values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PivotDimensionHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.PivotDimensionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PivotDimensionHeader* source =
      ::google::protobuf::DynamicCastToGenerated<PivotDimensionHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.PivotDimensionHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.PivotDimensionHeader)
    MergeFrom(*source);
  }
}

void PivotDimensionHeader::MergeFrom(const PivotDimensionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.PivotDimensionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_values_.MergeFrom(from.dimension_values_);
}

void PivotDimensionHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.PivotDimensionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PivotDimensionHeader::CopyFrom(const PivotDimensionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.PivotDimensionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PivotDimensionHeader::IsInitialized() const {
  return true;
}

void PivotDimensionHeader::Swap(PivotDimensionHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PivotDimensionHeader::InternalSwap(PivotDimensionHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimension_values_)->InternalSwap(CastToBase(&other->dimension_values_));
}

::google::protobuf::Metadata PivotDimensionHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Row::InitAsDefaultInstance() {
}
class Row::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kDimensionValuesFieldNumber;
const int Row::kMetricValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimension_values_(from.dimension_values_),
      metric_values_(from.metric_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Row)
}

void Row::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Row)
  SharedDtor();
}

void Row::SharedDtor() {
}

void Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Row& Row::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_values_.Clear();
  metric_values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Row::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Row*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DimensionValue::_InternalParse;
          object = msg->add_dimension_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricValue metric_values = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::MetricValue::_InternalParse;
          object = msg->add_metric_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Row)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimension_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricValue metric_values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metric_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Row)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dimension_values(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.MetricValue metric_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->metric_values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dimension_values(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.MetricValue metric_values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->metric_values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Row)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionValue dimension_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dimension_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimension_values(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricValue metric_values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metric_values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Row* source =
      ::google::protobuf::DynamicCastToGenerated<Row>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_values_.MergeFrom(from.dimension_values_);
  metric_values_.MergeFrom(from.metric_values_);
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimension_values_)->InternalSwap(CastToBase(&other->dimension_values_));
  CastToBase(&metric_values_)->InternalSwap(CastToBase(&other->metric_values_));
}

::google::protobuf::Metadata Row::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DimensionValue::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_DimensionValue_default_instance_.value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class DimensionValue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionValue::DimensionValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.DimensionValue)
}
DimensionValue::DimensionValue(const DimensionValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_one_value();
  switch (from.one_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.DimensionValue)
}

void DimensionValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  clear_has_one_value();
}

DimensionValue::~DimensionValue() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.DimensionValue)
  SharedDtor();
}

void DimensionValue::SharedDtor() {
  if (has_one_value()) {
    clear_one_value();
  }
}

void DimensionValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionValue& DimensionValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DimensionValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DimensionValue::clear_one_value() {
// @@protoc_insertion_point(one_of_clear_start:google.analytics.data.v1beta.DimensionValue)
  switch (one_value_case()) {
    case kValue: {
      one_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_VALUE_NOT_SET;
}


void DimensionValue::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.DimensionValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_one_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DimensionValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DimensionValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionValue.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DimensionValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.DimensionValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionValue.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.DimensionValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.DimensionValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DimensionValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.DimensionValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.DimensionValue)
}

::google::protobuf::uint8* DimensionValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.DimensionValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.DimensionValue)
  return target;
}

size_t DimensionValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.DimensionValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (one_value_case()) {
    // string value = 1;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.DimensionValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionValue* source =
      ::google::protobuf::DynamicCastToGenerated<DimensionValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.DimensionValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.DimensionValue)
    MergeFrom(*source);
  }
}

void DimensionValue::MergeFrom(const DimensionValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.DimensionValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.one_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
}

void DimensionValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.DimensionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionValue::CopyFrom(const DimensionValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.DimensionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionValue::IsInitialized() const {
  return true;
}

void DimensionValue::Swap(DimensionValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionValue::InternalSwap(DimensionValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(one_value_, other->one_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DimensionValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MetricValue::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_MetricValue_default_instance_.value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class MetricValue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricValue::MetricValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.MetricValue)
}
MetricValue::MetricValue(const MetricValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_one_value();
  switch (from.one_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.MetricValue)
}

void MetricValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  clear_has_one_value();
}

MetricValue::~MetricValue() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.MetricValue)
  SharedDtor();
}

void MetricValue::SharedDtor() {
  if (has_one_value()) {
    clear_one_value();
  }
}

void MetricValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricValue& MetricValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MetricValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void MetricValue::clear_one_value() {
// @@protoc_insertion_point(one_of_clear_start:google.analytics.data.v1beta.MetricValue)
  switch (one_value_case()) {
    case kValue: {
      one_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_VALUE_NOT_SET;
}


void MetricValue::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.MetricValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_one_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MetricValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.MetricValue.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.MetricValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.MetricValue.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.MetricValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.MetricValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.MetricValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.MetricValue)
}

::google::protobuf::uint8* MetricValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.MetricValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.MetricValue)
  return target;
}

size_t MetricValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.MetricValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (one_value_case()) {
    // string value = 4;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.MetricValue)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricValue* source =
      ::google::protobuf::DynamicCastToGenerated<MetricValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.MetricValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.MetricValue)
    MergeFrom(*source);
  }
}

void MetricValue::MergeFrom(const MetricValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.MetricValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.one_value_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
}

void MetricValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.MetricValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricValue::CopyFrom(const MetricValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.MetricValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricValue::IsInitialized() const {
  return true;
}

void MetricValue::Swap(MetricValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricValue::InternalSwap(MetricValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(one_value_, other->one_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata MetricValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NumericValue::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_NumericValue_default_instance_.int64_value_ = PROTOBUF_LONGLONG(0);
  ::google::analytics::data::v1beta::_NumericValue_default_instance_.double_value_ = 0;
}
class NumericValue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NumericValue::kInt64ValueFieldNumber;
const int NumericValue::kDoubleValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NumericValue::NumericValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.NumericValue)
}
NumericValue::NumericValue(const NumericValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_one_value();
  switch (from.one_value_case()) {
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.NumericValue)
}

void NumericValue::SharedCtor() {
  clear_has_one_value();
}

NumericValue::~NumericValue() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.NumericValue)
  SharedDtor();
}

void NumericValue::SharedDtor() {
  if (has_one_value()) {
    clear_one_value();
  }
}

void NumericValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NumericValue& NumericValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NumericValue_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void NumericValue::clear_one_value() {
// @@protoc_insertion_point(one_of_clear_start:google.analytics.data.v1beta.NumericValue)
  switch (one_value_case()) {
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_VALUE_NOT_SET;
}


void NumericValue::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.NumericValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_one_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NumericValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NumericValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 int64_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_int64_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double double_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_double_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NumericValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.NumericValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 int64_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          clear_one_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &one_value_.int64_value_)));
          set_has_int64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double double_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          clear_one_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &one_value_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.NumericValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.NumericValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NumericValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.NumericValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 int64_value = 1;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->int64_value(), output);
  }

  // double double_value = 2;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->double_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.NumericValue)
}

::google::protobuf::uint8* NumericValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.NumericValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 int64_value = 1;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->int64_value(), target);
  }

  // double double_value = 2;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->double_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.NumericValue)
  return target;
}

size_t NumericValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.NumericValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (one_value_case()) {
    // int64 int64_value = 1;
    case kInt64Value: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
      break;
    }
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumericValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.NumericValue)
  GOOGLE_DCHECK_NE(&from, this);
  const NumericValue* source =
      ::google::protobuf::DynamicCastToGenerated<NumericValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.NumericValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.NumericValue)
    MergeFrom(*source);
  }
}

void NumericValue::MergeFrom(const NumericValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.NumericValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.one_value_case()) {
    case kInt64Value: {
      set_int64_value(from.int64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case ONE_VALUE_NOT_SET: {
      break;
    }
  }
}

void NumericValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.NumericValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumericValue::CopyFrom(const NumericValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.NumericValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumericValue::IsInitialized() const {
  return true;
}

void NumericValue::Swap(NumericValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NumericValue::InternalSwap(NumericValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(one_value_, other->one_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata NumericValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PropertyQuota::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_PropertyQuota_default_instance_._instance.get_mutable()->tokens_per_day_ = const_cast< ::google::analytics::data::v1beta::QuotaStatus*>(
      ::google::analytics::data::v1beta::QuotaStatus::internal_default_instance());
  ::google::analytics::data::v1beta::_PropertyQuota_default_instance_._instance.get_mutable()->tokens_per_hour_ = const_cast< ::google::analytics::data::v1beta::QuotaStatus*>(
      ::google::analytics::data::v1beta::QuotaStatus::internal_default_instance());
  ::google::analytics::data::v1beta::_PropertyQuota_default_instance_._instance.get_mutable()->concurrent_requests_ = const_cast< ::google::analytics::data::v1beta::QuotaStatus*>(
      ::google::analytics::data::v1beta::QuotaStatus::internal_default_instance());
  ::google::analytics::data::v1beta::_PropertyQuota_default_instance_._instance.get_mutable()->server_errors_per_project_per_hour_ = const_cast< ::google::analytics::data::v1beta::QuotaStatus*>(
      ::google::analytics::data::v1beta::QuotaStatus::internal_default_instance());
  ::google::analytics::data::v1beta::_PropertyQuota_default_instance_._instance.get_mutable()->potentially_thresholded_requests_per_hour_ = const_cast< ::google::analytics::data::v1beta::QuotaStatus*>(
      ::google::analytics::data::v1beta::QuotaStatus::internal_default_instance());
}
class PropertyQuota::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::QuotaStatus& tokens_per_day(const PropertyQuota* msg);
  static const ::google::analytics::data::v1beta::QuotaStatus& tokens_per_hour(const PropertyQuota* msg);
  static const ::google::analytics::data::v1beta::QuotaStatus& concurrent_requests(const PropertyQuota* msg);
  static const ::google::analytics::data::v1beta::QuotaStatus& server_errors_per_project_per_hour(const PropertyQuota* msg);
  static const ::google::analytics::data::v1beta::QuotaStatus& potentially_thresholded_requests_per_hour(const PropertyQuota* msg);
};

const ::google::analytics::data::v1beta::QuotaStatus&
PropertyQuota::HasBitSetters::tokens_per_day(const PropertyQuota* msg) {
  return *msg->tokens_per_day_;
}
const ::google::analytics::data::v1beta::QuotaStatus&
PropertyQuota::HasBitSetters::tokens_per_hour(const PropertyQuota* msg) {
  return *msg->tokens_per_hour_;
}
const ::google::analytics::data::v1beta::QuotaStatus&
PropertyQuota::HasBitSetters::concurrent_requests(const PropertyQuota* msg) {
  return *msg->concurrent_requests_;
}
const ::google::analytics::data::v1beta::QuotaStatus&
PropertyQuota::HasBitSetters::server_errors_per_project_per_hour(const PropertyQuota* msg) {
  return *msg->server_errors_per_project_per_hour_;
}
const ::google::analytics::data::v1beta::QuotaStatus&
PropertyQuota::HasBitSetters::potentially_thresholded_requests_per_hour(const PropertyQuota* msg) {
  return *msg->potentially_thresholded_requests_per_hour_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyQuota::kTokensPerDayFieldNumber;
const int PropertyQuota::kTokensPerHourFieldNumber;
const int PropertyQuota::kConcurrentRequestsFieldNumber;
const int PropertyQuota::kServerErrorsPerProjectPerHourFieldNumber;
const int PropertyQuota::kPotentiallyThresholdedRequestsPerHourFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyQuota::PropertyQuota()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.PropertyQuota)
}
PropertyQuota::PropertyQuota(const PropertyQuota& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tokens_per_day()) {
    tokens_per_day_ = new ::google::analytics::data::v1beta::QuotaStatus(*from.tokens_per_day_);
  } else {
    tokens_per_day_ = nullptr;
  }
  if (from.has_tokens_per_hour()) {
    tokens_per_hour_ = new ::google::analytics::data::v1beta::QuotaStatus(*from.tokens_per_hour_);
  } else {
    tokens_per_hour_ = nullptr;
  }
  if (from.has_concurrent_requests()) {
    concurrent_requests_ = new ::google::analytics::data::v1beta::QuotaStatus(*from.concurrent_requests_);
  } else {
    concurrent_requests_ = nullptr;
  }
  if (from.has_server_errors_per_project_per_hour()) {
    server_errors_per_project_per_hour_ = new ::google::analytics::data::v1beta::QuotaStatus(*from.server_errors_per_project_per_hour_);
  } else {
    server_errors_per_project_per_hour_ = nullptr;
  }
  if (from.has_potentially_thresholded_requests_per_hour()) {
    potentially_thresholded_requests_per_hour_ = new ::google::analytics::data::v1beta::QuotaStatus(*from.potentially_thresholded_requests_per_hour_);
  } else {
    potentially_thresholded_requests_per_hour_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.PropertyQuota)
}

void PropertyQuota::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  ::memset(&tokens_per_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&potentially_thresholded_requests_per_hour_) -
      reinterpret_cast<char*>(&tokens_per_day_)) + sizeof(potentially_thresholded_requests_per_hour_));
}

PropertyQuota::~PropertyQuota() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.PropertyQuota)
  SharedDtor();
}

void PropertyQuota::SharedDtor() {
  if (this != internal_default_instance()) delete tokens_per_day_;
  if (this != internal_default_instance()) delete tokens_per_hour_;
  if (this != internal_default_instance()) delete concurrent_requests_;
  if (this != internal_default_instance()) delete server_errors_per_project_per_hour_;
  if (this != internal_default_instance()) delete potentially_thresholded_requests_per_hour_;
}

void PropertyQuota::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropertyQuota& PropertyQuota::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void PropertyQuota::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.PropertyQuota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tokens_per_day_ != nullptr) {
    delete tokens_per_day_;
  }
  tokens_per_day_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tokens_per_hour_ != nullptr) {
    delete tokens_per_hour_;
  }
  tokens_per_hour_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && concurrent_requests_ != nullptr) {
    delete concurrent_requests_;
  }
  concurrent_requests_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_errors_per_project_per_hour_ != nullptr) {
    delete server_errors_per_project_per_hour_;
  }
  server_errors_per_project_per_hour_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && potentially_thresholded_requests_per_hour_ != nullptr) {
    delete potentially_thresholded_requests_per_hour_;
  }
  potentially_thresholded_requests_per_hour_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PropertyQuota::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PropertyQuota*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.analytics.data.v1beta.QuotaStatus tokens_per_day = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::QuotaStatus::_InternalParse;
        object = msg->mutable_tokens_per_day();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.QuotaStatus tokens_per_hour = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::QuotaStatus::_InternalParse;
        object = msg->mutable_tokens_per_hour();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.QuotaStatus concurrent_requests = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::QuotaStatus::_InternalParse;
        object = msg->mutable_concurrent_requests();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.QuotaStatus server_errors_per_project_per_hour = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::QuotaStatus::_InternalParse;
        object = msg->mutable_server_errors_per_project_per_hour();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.QuotaStatus potentially_thresholded_requests_per_hour = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::QuotaStatus::_InternalParse;
        object = msg->mutable_potentially_thresholded_requests_per_hour();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PropertyQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.PropertyQuota)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.analytics.data.v1beta.QuotaStatus tokens_per_day = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tokens_per_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.QuotaStatus tokens_per_hour = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tokens_per_hour()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.QuotaStatus concurrent_requests = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_concurrent_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.QuotaStatus server_errors_per_project_per_hour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_errors_per_project_per_hour()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.QuotaStatus potentially_thresholded_requests_per_hour = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_potentially_thresholded_requests_per_hour()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.PropertyQuota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.PropertyQuota)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PropertyQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.PropertyQuota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.QuotaStatus tokens_per_day = 1;
  if (this->has_tokens_per_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tokens_per_day(this), output);
  }

  // .google.analytics.data.v1beta.QuotaStatus tokens_per_hour = 2;
  if (this->has_tokens_per_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tokens_per_hour(this), output);
  }

  // .google.analytics.data.v1beta.QuotaStatus concurrent_requests = 3;
  if (this->has_concurrent_requests()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::concurrent_requests(this), output);
  }

  // .google.analytics.data.v1beta.QuotaStatus server_errors_per_project_per_hour = 4;
  if (this->has_server_errors_per_project_per_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::server_errors_per_project_per_hour(this), output);
  }

  // .google.analytics.data.v1beta.QuotaStatus potentially_thresholded_requests_per_hour = 5;
  if (this->has_potentially_thresholded_requests_per_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::potentially_thresholded_requests_per_hour(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.PropertyQuota)
}

::google::protobuf::uint8* PropertyQuota::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.PropertyQuota)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.QuotaStatus tokens_per_day = 1;
  if (this->has_tokens_per_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tokens_per_day(this), target);
  }

  // .google.analytics.data.v1beta.QuotaStatus tokens_per_hour = 2;
  if (this->has_tokens_per_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tokens_per_hour(this), target);
  }

  // .google.analytics.data.v1beta.QuotaStatus concurrent_requests = 3;
  if (this->has_concurrent_requests()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::concurrent_requests(this), target);
  }

  // .google.analytics.data.v1beta.QuotaStatus server_errors_per_project_per_hour = 4;
  if (this->has_server_errors_per_project_per_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::server_errors_per_project_per_hour(this), target);
  }

  // .google.analytics.data.v1beta.QuotaStatus potentially_thresholded_requests_per_hour = 5;
  if (this->has_potentially_thresholded_requests_per_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::potentially_thresholded_requests_per_hour(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.PropertyQuota)
  return target;
}

size_t PropertyQuota::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.PropertyQuota)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.analytics.data.v1beta.QuotaStatus tokens_per_day = 1;
  if (this->has_tokens_per_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tokens_per_day_);
  }

  // .google.analytics.data.v1beta.QuotaStatus tokens_per_hour = 2;
  if (this->has_tokens_per_hour()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tokens_per_hour_);
  }

  // .google.analytics.data.v1beta.QuotaStatus concurrent_requests = 3;
  if (this->has_concurrent_requests()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *concurrent_requests_);
  }

  // .google.analytics.data.v1beta.QuotaStatus server_errors_per_project_per_hour = 4;
  if (this->has_server_errors_per_project_per_hour()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_errors_per_project_per_hour_);
  }

  // .google.analytics.data.v1beta.QuotaStatus potentially_thresholded_requests_per_hour = 5;
  if (this->has_potentially_thresholded_requests_per_hour()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *potentially_thresholded_requests_per_hour_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyQuota::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.PropertyQuota)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyQuota* source =
      ::google::protobuf::DynamicCastToGenerated<PropertyQuota>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.PropertyQuota)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.PropertyQuota)
    MergeFrom(*source);
  }
}

void PropertyQuota::MergeFrom(const PropertyQuota& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.PropertyQuota)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tokens_per_day()) {
    mutable_tokens_per_day()->::google::analytics::data::v1beta::QuotaStatus::MergeFrom(from.tokens_per_day());
  }
  if (from.has_tokens_per_hour()) {
    mutable_tokens_per_hour()->::google::analytics::data::v1beta::QuotaStatus::MergeFrom(from.tokens_per_hour());
  }
  if (from.has_concurrent_requests()) {
    mutable_concurrent_requests()->::google::analytics::data::v1beta::QuotaStatus::MergeFrom(from.concurrent_requests());
  }
  if (from.has_server_errors_per_project_per_hour()) {
    mutable_server_errors_per_project_per_hour()->::google::analytics::data::v1beta::QuotaStatus::MergeFrom(from.server_errors_per_project_per_hour());
  }
  if (from.has_potentially_thresholded_requests_per_hour()) {
    mutable_potentially_thresholded_requests_per_hour()->::google::analytics::data::v1beta::QuotaStatus::MergeFrom(from.potentially_thresholded_requests_per_hour());
  }
}

void PropertyQuota::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.PropertyQuota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyQuota::CopyFrom(const PropertyQuota& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.PropertyQuota)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyQuota::IsInitialized() const {
  return true;
}

void PropertyQuota::Swap(PropertyQuota* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyQuota::InternalSwap(PropertyQuota* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tokens_per_day_, other->tokens_per_day_);
  swap(tokens_per_hour_, other->tokens_per_hour_);
  swap(concurrent_requests_, other->concurrent_requests_);
  swap(server_errors_per_project_per_hour_, other->server_errors_per_project_per_hour_);
  swap(potentially_thresholded_requests_per_hour_, other->potentially_thresholded_requests_per_hour_);
}

::google::protobuf::Metadata PropertyQuota::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuotaStatus::InitAsDefaultInstance() {
}
class QuotaStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuotaStatus::kConsumedFieldNumber;
const int QuotaStatus::kRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuotaStatus::QuotaStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.QuotaStatus)
}
QuotaStatus::QuotaStatus(const QuotaStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&consumed_, &from.consumed_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_) -
    reinterpret_cast<char*>(&consumed_)) + sizeof(remaining_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.QuotaStatus)
}

void QuotaStatus::SharedCtor() {
  ::memset(&consumed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&consumed_)) + sizeof(remaining_));
}

QuotaStatus::~QuotaStatus() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.QuotaStatus)
  SharedDtor();
}

void QuotaStatus::SharedDtor() {
}

void QuotaStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuotaStatus& QuotaStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuotaStatus_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void QuotaStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.QuotaStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&consumed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_) -
      reinterpret_cast<char*>(&consumed_)) + sizeof(remaining_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuotaStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuotaStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 consumed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_consumed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 remaining = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_remaining(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuotaStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.QuotaStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 consumed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remaining = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.QuotaStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.QuotaStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuotaStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.QuotaStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 consumed = 1;
  if (this->consumed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->consumed(), output);
  }

  // int32 remaining = 2;
  if (this->remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.QuotaStatus)
}

::google::protobuf::uint8* QuotaStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.QuotaStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 consumed = 1;
  if (this->consumed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->consumed(), target);
  }

  // int32 remaining = 2;
  if (this->remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.QuotaStatus)
  return target;
}

size_t QuotaStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.QuotaStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 consumed = 1;
  if (this->consumed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consumed());
  }

  // int32 remaining = 2;
  if (this->remaining() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaining());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuotaStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.QuotaStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const QuotaStatus* source =
      ::google::protobuf::DynamicCastToGenerated<QuotaStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.QuotaStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.QuotaStatus)
    MergeFrom(*source);
  }
}

void QuotaStatus::MergeFrom(const QuotaStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.QuotaStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.consumed() != 0) {
    set_consumed(from.consumed());
  }
  if (from.remaining() != 0) {
    set_remaining(from.remaining());
  }
}

void QuotaStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.QuotaStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaStatus::CopyFrom(const QuotaStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.QuotaStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaStatus::IsInitialized() const {
  return true;
}

void QuotaStatus::Swap(QuotaStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuotaStatus::InternalSwap(QuotaStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(consumed_, other->consumed_);
  swap(remaining_, other->remaining_);
}

::google::protobuf::Metadata QuotaStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DimensionMetadata::InitAsDefaultInstance() {
}
class DimensionMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DimensionMetadata::kApiNameFieldNumber;
const int DimensionMetadata::kUiNameFieldNumber;
const int DimensionMetadata::kDescriptionFieldNumber;
const int DimensionMetadata::kDeprecatedApiNamesFieldNumber;
const int DimensionMetadata::kCustomDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DimensionMetadata::DimensionMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.DimensionMetadata)
}
DimensionMetadata::DimensionMetadata(const DimensionMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      deprecated_api_names_(from.deprecated_api_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  api_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.api_name().size() > 0) {
    api_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_name_);
  }
  ui_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ui_name().size() > 0) {
    ui_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  custom_definition_ = from.custom_definition_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.DimensionMetadata)
}

void DimensionMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  api_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_definition_ = false;
}

DimensionMetadata::~DimensionMetadata() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.DimensionMetadata)
  SharedDtor();
}

void DimensionMetadata::SharedDtor() {
  api_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DimensionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DimensionMetadata& DimensionMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void DimensionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.DimensionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_api_names_.Clear();
  api_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_definition_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DimensionMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DimensionMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string api_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionMetadata.api_name");
        object = msg->mutable_api_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ui_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionMetadata.ui_name");
        object = msg->mutable_ui_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionMetadata.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string deprecated_api_names = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.DimensionMetadata.deprecated_api_names");
          object = msg->add_deprecated_api_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // bool custom_definition = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_custom_definition(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DimensionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.DimensionMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string api_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->api_name().data(), static_cast<int>(this->api_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionMetadata.api_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ui_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ui_name().data(), static_cast<int>(this->ui_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionMetadata.ui_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionMetadata.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string deprecated_api_names = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_api_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deprecated_api_names(this->deprecated_api_names_size() - 1).data(),
            static_cast<int>(this->deprecated_api_names(this->deprecated_api_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.DimensionMetadata.deprecated_api_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool custom_definition = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_definition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.DimensionMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.DimensionMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DimensionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.DimensionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_name().data(), static_cast<int>(this->api_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.api_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->api_name(), output);
  }

  // string ui_name = 2;
  if (this->ui_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ui_name().data(), static_cast<int>(this->ui_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.ui_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ui_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // repeated string deprecated_api_names = 4;
  for (int i = 0, n = this->deprecated_api_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_api_names(i).data(), static_cast<int>(this->deprecated_api_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.deprecated_api_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deprecated_api_names(i), output);
  }

  // bool custom_definition = 5;
  if (this->custom_definition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->custom_definition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.DimensionMetadata)
}

::google::protobuf::uint8* DimensionMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.DimensionMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_name().data(), static_cast<int>(this->api_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.api_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->api_name(), target);
  }

  // string ui_name = 2;
  if (this->ui_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ui_name().data(), static_cast<int>(this->ui_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.ui_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ui_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated string deprecated_api_names = 4;
  for (int i = 0, n = this->deprecated_api_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_api_names(i).data(), static_cast<int>(this->deprecated_api_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.DimensionMetadata.deprecated_api_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->deprecated_api_names(i), target);
  }

  // bool custom_definition = 5;
  if (this->custom_definition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->custom_definition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.DimensionMetadata)
  return target;
}

size_t DimensionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.DimensionMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deprecated_api_names = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->deprecated_api_names_size());
  for (int i = 0, n = this->deprecated_api_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_api_names(i));
  }

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->api_name());
  }

  // string ui_name = 2;
  if (this->ui_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ui_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // bool custom_definition = 5;
  if (this->custom_definition() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DimensionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.DimensionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const DimensionMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<DimensionMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.DimensionMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.DimensionMetadata)
    MergeFrom(*source);
  }
}

void DimensionMetadata::MergeFrom(const DimensionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.DimensionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_api_names_.MergeFrom(from.deprecated_api_names_);
  if (from.api_name().size() > 0) {

    api_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_name_);
  }
  if (from.ui_name().size() > 0) {

    ui_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.custom_definition() != 0) {
    set_custom_definition(from.custom_definition());
  }
}

void DimensionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.DimensionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionMetadata::CopyFrom(const DimensionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.DimensionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionMetadata::IsInitialized() const {
  return true;
}

void DimensionMetadata::Swap(DimensionMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DimensionMetadata::InternalSwap(DimensionMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deprecated_api_names_.InternalSwap(CastToBase(&other->deprecated_api_names_));
  api_name_.Swap(&other->api_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ui_name_.Swap(&other->ui_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(custom_definition_, other->custom_definition_);
}

::google::protobuf::Metadata DimensionMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MetricMetadata::InitAsDefaultInstance() {
}
class MetricMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricMetadata::kApiNameFieldNumber;
const int MetricMetadata::kUiNameFieldNumber;
const int MetricMetadata::kDescriptionFieldNumber;
const int MetricMetadata::kDeprecatedApiNamesFieldNumber;
const int MetricMetadata::kTypeFieldNumber;
const int MetricMetadata::kExpressionFieldNumber;
const int MetricMetadata::kCustomDefinitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricMetadata::MetricMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.MetricMetadata)
}
MetricMetadata::MetricMetadata(const MetricMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      deprecated_api_names_(from.deprecated_api_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  api_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.api_name().size() > 0) {
    api_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_name_);
  }
  ui_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ui_name().size() > 0) {
    ui_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expression().size() > 0) {
    expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_definition_) -
    reinterpret_cast<char*>(&type_)) + sizeof(custom_definition_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.MetricMetadata)
}

void MetricMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  api_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expression_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_definition_) -
      reinterpret_cast<char*>(&type_)) + sizeof(custom_definition_));
}

MetricMetadata::~MetricMetadata() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.MetricMetadata)
  SharedDtor();
}

void MetricMetadata::SharedDtor() {
  api_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expression_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetricMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricMetadata& MetricMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base);
  return *internal_default_instance();
}


void MetricMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.MetricMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_api_names_.Clear();
  api_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_definition_) -
      reinterpret_cast<char*>(&type_)) + sizeof(custom_definition_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MetricMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string api_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.MetricMetadata.api_name");
        object = msg->mutable_api_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ui_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.MetricMetadata.ui_name");
        object = msg->mutable_ui_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.MetricMetadata.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string deprecated_api_names = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.MetricMetadata.deprecated_api_names");
          object = msg->add_deprecated_api_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .google.analytics.data.v1beta.MetricType type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::google::analytics::data::v1beta::MetricType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string expression = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.MetricMetadata.expression");
        object = msg->mutable_expression();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool custom_definition = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_custom_definition(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.MetricMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string api_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->api_name().data(), static_cast<int>(this->api_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.MetricMetadata.api_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ui_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ui_name().data(), static_cast<int>(this->ui_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.MetricMetadata.ui_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.MetricMetadata.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string deprecated_api_names = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_api_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deprecated_api_names(this->deprecated_api_names_size() - 1).data(),
            static_cast<int>(this->deprecated_api_names(this->deprecated_api_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.MetricMetadata.deprecated_api_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.MetricType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::analytics::data::v1beta::MetricType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expression = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expression()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expression().data(), static_cast<int>(this->expression().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.MetricMetadata.expression"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool custom_definition = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_definition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.MetricMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.MetricMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.MetricMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_name().data(), static_cast<int>(this->api_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.api_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->api_name(), output);
  }

  // string ui_name = 2;
  if (this->ui_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ui_name().data(), static_cast<int>(this->ui_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.ui_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ui_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // repeated string deprecated_api_names = 4;
  for (int i = 0, n = this->deprecated_api_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_api_names(i).data(), static_cast<int>(this->deprecated_api_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.deprecated_api_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deprecated_api_names(i), output);
  }

  // .google.analytics.data.v1beta.MetricType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // string expression = 6;
  if (this->expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.expression");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->expression(), output);
  }

  // bool custom_definition = 7;
  if (this->custom_definition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->custom_definition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.MetricMetadata)
}

::google::protobuf::uint8* MetricMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.MetricMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_name().data(), static_cast<int>(this->api_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.api_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->api_name(), target);
  }

  // string ui_name = 2;
  if (this->ui_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ui_name().data(), static_cast<int>(this->ui_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.ui_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ui_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated string deprecated_api_names = 4;
  for (int i = 0, n = this->deprecated_api_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_api_names(i).data(), static_cast<int>(this->deprecated_api_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.deprecated_api_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->deprecated_api_names(i), target);
  }

  // .google.analytics.data.v1beta.MetricType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // string expression = 6;
  if (this->expression().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expression().data(), static_cast<int>(this->expression().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.MetricMetadata.expression");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->expression(), target);
  }

  // bool custom_definition = 7;
  if (this->custom_definition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->custom_definition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.MetricMetadata)
  return target;
}

size_t MetricMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.MetricMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deprecated_api_names = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->deprecated_api_names_size());
  for (int i = 0, n = this->deprecated_api_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deprecated_api_names(i));
  }

  // string api_name = 1;
  if (this->api_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->api_name());
  }

  // string ui_name = 2;
  if (this->ui_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ui_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string expression = 6;
  if (this->expression().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expression());
  }

  // .google.analytics.data.v1beta.MetricType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool custom_definition = 7;
  if (this->custom_definition() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.MetricMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<MetricMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.MetricMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.MetricMetadata)
    MergeFrom(*source);
  }
}

void MetricMetadata::MergeFrom(const MetricMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.MetricMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_api_names_.MergeFrom(from.deprecated_api_names_);
  if (from.api_name().size() > 0) {

    api_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_name_);
  }
  if (from.ui_name().size() > 0) {

    ui_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.expression().size() > 0) {

    expression_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expression_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.custom_definition() != 0) {
    set_custom_definition(from.custom_definition());
  }
}

void MetricMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.MetricMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricMetadata::CopyFrom(const MetricMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.MetricMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricMetadata::IsInitialized() const {
  return true;
}

void MetricMetadata::Swap(MetricMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricMetadata::InternalSwap(MetricMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deprecated_api_names_.InternalSwap(CastToBase(&other->deprecated_api_names_));
  api_name_.Swap(&other->api_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ui_name_.Swap(&other->ui_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  expression_.Swap(&other->expression_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(custom_definition_, other->custom_definition_);
}

::google::protobuf::Metadata MetricMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta
}  // namespace data
}  // namespace analytics
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::DateRange* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::DateRange >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::DateRange >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Dimension* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Dimension >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::DimensionExpression_CaseExpression* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::DimensionExpression_CaseExpression >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::DimensionExpression_CaseExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::DimensionExpression_ConcatenateExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::DimensionExpression* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::DimensionExpression >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::DimensionExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Metric* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Metric >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::FilterExpression* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::FilterExpression >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::FilterExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::FilterExpressionList* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::FilterExpressionList >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::FilterExpressionList >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Filter_StringFilter* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Filter_StringFilter >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Filter_StringFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Filter_InListFilter* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Filter_InListFilter >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Filter_InListFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Filter_NumericFilter* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Filter_NumericFilter >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Filter_NumericFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Filter_BetweenFilter* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Filter_BetweenFilter >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Filter_BetweenFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Filter* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Filter >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::OrderBy_MetricOrderBy* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::OrderBy_MetricOrderBy >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::OrderBy_MetricOrderBy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::OrderBy_DimensionOrderBy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::OrderBy_PivotOrderBy_PivotSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::OrderBy_PivotOrderBy* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::OrderBy_PivotOrderBy >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::OrderBy_PivotOrderBy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::OrderBy* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::OrderBy >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::OrderBy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Pivot* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Pivot >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Pivot >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::CohortSpec* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::CohortSpec >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::CohortSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Cohort* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Cohort >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Cohort >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::CohortsRange* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::CohortsRange >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::CohortsRange >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::CohortReportSettings* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::CohortReportSettings >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::CohortReportSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::ResponseMetaData* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::ResponseMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::ResponseMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::DimensionHeader* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::DimensionHeader >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::DimensionHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::MetricHeader* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::MetricHeader >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::MetricHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::PivotHeader* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::PivotHeader >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::PivotHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::PivotDimensionHeader* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::PivotDimensionHeader >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::PivotDimensionHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Row* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Row >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Row >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::DimensionValue* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::DimensionValue >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::DimensionValue >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::MetricValue* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::MetricValue >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::MetricValue >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::NumericValue* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::NumericValue >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::NumericValue >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::PropertyQuota* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::PropertyQuota >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::PropertyQuota >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::QuotaStatus* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::QuotaStatus >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::QuotaStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::DimensionMetadata* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::DimensionMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::DimensionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::MetricMetadata* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::MetricMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::MetricMetadata >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
