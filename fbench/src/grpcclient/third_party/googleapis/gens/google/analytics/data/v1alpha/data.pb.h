// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/analytics/data/v1alpha/data.proto

#ifndef PROTOBUF_INCLUDED_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto
#define PROTOBUF_INCLUDED_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto();
namespace google {
namespace analytics {
namespace data {
namespace v1alpha {
class Cohort;
class CohortDefaultTypeInternal;
extern CohortDefaultTypeInternal _Cohort_default_instance_;
class CohortReportSettings;
class CohortReportSettingsDefaultTypeInternal;
extern CohortReportSettingsDefaultTypeInternal _CohortReportSettings_default_instance_;
class CohortSpec;
class CohortSpecDefaultTypeInternal;
extern CohortSpecDefaultTypeInternal _CohortSpec_default_instance_;
class CohortsRange;
class CohortsRangeDefaultTypeInternal;
extern CohortsRangeDefaultTypeInternal _CohortsRange_default_instance_;
class DateRange;
class DateRangeDefaultTypeInternal;
extern DateRangeDefaultTypeInternal _DateRange_default_instance_;
class Dimension;
class DimensionDefaultTypeInternal;
extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class DimensionExpression;
class DimensionExpressionDefaultTypeInternal;
extern DimensionExpressionDefaultTypeInternal _DimensionExpression_default_instance_;
class DimensionExpression_CaseExpression;
class DimensionExpression_CaseExpressionDefaultTypeInternal;
extern DimensionExpression_CaseExpressionDefaultTypeInternal _DimensionExpression_CaseExpression_default_instance_;
class DimensionExpression_ConcatenateExpression;
class DimensionExpression_ConcatenateExpressionDefaultTypeInternal;
extern DimensionExpression_ConcatenateExpressionDefaultTypeInternal _DimensionExpression_ConcatenateExpression_default_instance_;
class DimensionHeader;
class DimensionHeaderDefaultTypeInternal;
extern DimensionHeaderDefaultTypeInternal _DimensionHeader_default_instance_;
class DimensionMetadata;
class DimensionMetadataDefaultTypeInternal;
extern DimensionMetadataDefaultTypeInternal _DimensionMetadata_default_instance_;
class DimensionValue;
class DimensionValueDefaultTypeInternal;
extern DimensionValueDefaultTypeInternal _DimensionValue_default_instance_;
class Entity;
class EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class FilterExpression;
class FilterExpressionDefaultTypeInternal;
extern FilterExpressionDefaultTypeInternal _FilterExpression_default_instance_;
class FilterExpressionList;
class FilterExpressionListDefaultTypeInternal;
extern FilterExpressionListDefaultTypeInternal _FilterExpressionList_default_instance_;
class Filter_BetweenFilter;
class Filter_BetweenFilterDefaultTypeInternal;
extern Filter_BetweenFilterDefaultTypeInternal _Filter_BetweenFilter_default_instance_;
class Filter_InListFilter;
class Filter_InListFilterDefaultTypeInternal;
extern Filter_InListFilterDefaultTypeInternal _Filter_InListFilter_default_instance_;
class Filter_NumericFilter;
class Filter_NumericFilterDefaultTypeInternal;
extern Filter_NumericFilterDefaultTypeInternal _Filter_NumericFilter_default_instance_;
class Filter_StringFilter;
class Filter_StringFilterDefaultTypeInternal;
extern Filter_StringFilterDefaultTypeInternal _Filter_StringFilter_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricHeader;
class MetricHeaderDefaultTypeInternal;
extern MetricHeaderDefaultTypeInternal _MetricHeader_default_instance_;
class MetricMetadata;
class MetricMetadataDefaultTypeInternal;
extern MetricMetadataDefaultTypeInternal _MetricMetadata_default_instance_;
class MetricValue;
class MetricValueDefaultTypeInternal;
extern MetricValueDefaultTypeInternal _MetricValue_default_instance_;
class NumericValue;
class NumericValueDefaultTypeInternal;
extern NumericValueDefaultTypeInternal _NumericValue_default_instance_;
class OrderBy;
class OrderByDefaultTypeInternal;
extern OrderByDefaultTypeInternal _OrderBy_default_instance_;
class OrderBy_DimensionOrderBy;
class OrderBy_DimensionOrderByDefaultTypeInternal;
extern OrderBy_DimensionOrderByDefaultTypeInternal _OrderBy_DimensionOrderBy_default_instance_;
class OrderBy_MetricOrderBy;
class OrderBy_MetricOrderByDefaultTypeInternal;
extern OrderBy_MetricOrderByDefaultTypeInternal _OrderBy_MetricOrderBy_default_instance_;
class OrderBy_PivotOrderBy;
class OrderBy_PivotOrderByDefaultTypeInternal;
extern OrderBy_PivotOrderByDefaultTypeInternal _OrderBy_PivotOrderBy_default_instance_;
class OrderBy_PivotOrderBy_PivotSelection;
class OrderBy_PivotOrderBy_PivotSelectionDefaultTypeInternal;
extern OrderBy_PivotOrderBy_PivotSelectionDefaultTypeInternal _OrderBy_PivotOrderBy_PivotSelection_default_instance_;
class Pivot;
class PivotDefaultTypeInternal;
extern PivotDefaultTypeInternal _Pivot_default_instance_;
class PivotDimensionHeader;
class PivotDimensionHeaderDefaultTypeInternal;
extern PivotDimensionHeaderDefaultTypeInternal _PivotDimensionHeader_default_instance_;
class PivotHeader;
class PivotHeaderDefaultTypeInternal;
extern PivotHeaderDefaultTypeInternal _PivotHeader_default_instance_;
class PropertyQuota;
class PropertyQuotaDefaultTypeInternal;
extern PropertyQuotaDefaultTypeInternal _PropertyQuota_default_instance_;
class QuotaStatus;
class QuotaStatusDefaultTypeInternal;
extern QuotaStatusDefaultTypeInternal _QuotaStatus_default_instance_;
class ResponseMetaData;
class ResponseMetaDataDefaultTypeInternal;
extern ResponseMetaDataDefaultTypeInternal _ResponseMetaData_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
}  // namespace v1alpha
}  // namespace data
}  // namespace analytics
namespace protobuf {
template<> ::google::analytics::data::v1alpha::Cohort* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Cohort>(Arena*);
template<> ::google::analytics::data::v1alpha::CohortReportSettings* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::CohortReportSettings>(Arena*);
template<> ::google::analytics::data::v1alpha::CohortSpec* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::CohortSpec>(Arena*);
template<> ::google::analytics::data::v1alpha::CohortsRange* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::CohortsRange>(Arena*);
template<> ::google::analytics::data::v1alpha::DateRange* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::DateRange>(Arena*);
template<> ::google::analytics::data::v1alpha::Dimension* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Dimension>(Arena*);
template<> ::google::analytics::data::v1alpha::DimensionExpression* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::DimensionExpression>(Arena*);
template<> ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::DimensionExpression_CaseExpression>(Arena*);
template<> ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression>(Arena*);
template<> ::google::analytics::data::v1alpha::DimensionHeader* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::DimensionHeader>(Arena*);
template<> ::google::analytics::data::v1alpha::DimensionMetadata* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::DimensionMetadata>(Arena*);
template<> ::google::analytics::data::v1alpha::DimensionValue* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::DimensionValue>(Arena*);
template<> ::google::analytics::data::v1alpha::Entity* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Entity>(Arena*);
template<> ::google::analytics::data::v1alpha::Filter* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Filter>(Arena*);
template<> ::google::analytics::data::v1alpha::FilterExpression* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::FilterExpression>(Arena*);
template<> ::google::analytics::data::v1alpha::FilterExpressionList* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::FilterExpressionList>(Arena*);
template<> ::google::analytics::data::v1alpha::Filter_BetweenFilter* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Filter_BetweenFilter>(Arena*);
template<> ::google::analytics::data::v1alpha::Filter_InListFilter* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Filter_InListFilter>(Arena*);
template<> ::google::analytics::data::v1alpha::Filter_NumericFilter* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Filter_NumericFilter>(Arena*);
template<> ::google::analytics::data::v1alpha::Filter_StringFilter* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Filter_StringFilter>(Arena*);
template<> ::google::analytics::data::v1alpha::Metric* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Metric>(Arena*);
template<> ::google::analytics::data::v1alpha::MetricHeader* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::MetricHeader>(Arena*);
template<> ::google::analytics::data::v1alpha::MetricMetadata* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::MetricMetadata>(Arena*);
template<> ::google::analytics::data::v1alpha::MetricValue* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::MetricValue>(Arena*);
template<> ::google::analytics::data::v1alpha::NumericValue* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::NumericValue>(Arena*);
template<> ::google::analytics::data::v1alpha::OrderBy* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::OrderBy>(Arena*);
template<> ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy>(Arena*);
template<> ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::OrderBy_MetricOrderBy>(Arena*);
template<> ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::OrderBy_PivotOrderBy>(Arena*);
template<> ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection>(Arena*);
template<> ::google::analytics::data::v1alpha::Pivot* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Pivot>(Arena*);
template<> ::google::analytics::data::v1alpha::PivotDimensionHeader* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::PivotDimensionHeader>(Arena*);
template<> ::google::analytics::data::v1alpha::PivotHeader* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::PivotHeader>(Arena*);
template<> ::google::analytics::data::v1alpha::PropertyQuota* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::PropertyQuota>(Arena*);
template<> ::google::analytics::data::v1alpha::QuotaStatus* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::QuotaStatus>(Arena*);
template<> ::google::analytics::data::v1alpha::ResponseMetaData* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::ResponseMetaData>(Arena*);
template<> ::google::analytics::data::v1alpha::Row* Arena::CreateMaybeMessage<::google::analytics::data::v1alpha::Row>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace analytics {
namespace data {
namespace v1alpha {

enum Filter_StringFilter_MatchType {
  Filter_StringFilter_MatchType_MATCH_TYPE_UNSPECIFIED = 0,
  Filter_StringFilter_MatchType_EXACT = 1,
  Filter_StringFilter_MatchType_BEGINS_WITH = 2,
  Filter_StringFilter_MatchType_ENDS_WITH = 3,
  Filter_StringFilter_MatchType_CONTAINS = 4,
  Filter_StringFilter_MatchType_FULL_REGEXP = 5,
  Filter_StringFilter_MatchType_PARTIAL_REGEXP = 6,
  Filter_StringFilter_MatchType_Filter_StringFilter_MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Filter_StringFilter_MatchType_Filter_StringFilter_MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Filter_StringFilter_MatchType_IsValid(int value);
const Filter_StringFilter_MatchType Filter_StringFilter_MatchType_MatchType_MIN = Filter_StringFilter_MatchType_MATCH_TYPE_UNSPECIFIED;
const Filter_StringFilter_MatchType Filter_StringFilter_MatchType_MatchType_MAX = Filter_StringFilter_MatchType_PARTIAL_REGEXP;
const int Filter_StringFilter_MatchType_MatchType_ARRAYSIZE = Filter_StringFilter_MatchType_MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Filter_StringFilter_MatchType_descriptor();
inline const ::std::string& Filter_StringFilter_MatchType_Name(Filter_StringFilter_MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Filter_StringFilter_MatchType_descriptor(), value);
}
inline bool Filter_StringFilter_MatchType_Parse(
    const ::std::string& name, Filter_StringFilter_MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Filter_StringFilter_MatchType>(
    Filter_StringFilter_MatchType_descriptor(), name, value);
}
enum Filter_NumericFilter_Operation {
  Filter_NumericFilter_Operation_OPERATION_UNSPECIFIED = 0,
  Filter_NumericFilter_Operation_EQUAL = 1,
  Filter_NumericFilter_Operation_LESS_THAN = 2,
  Filter_NumericFilter_Operation_LESS_THAN_OR_EQUAL = 3,
  Filter_NumericFilter_Operation_GREATER_THAN = 4,
  Filter_NumericFilter_Operation_GREATER_THAN_OR_EQUAL = 5,
  Filter_NumericFilter_Operation_Filter_NumericFilter_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Filter_NumericFilter_Operation_Filter_NumericFilter_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Filter_NumericFilter_Operation_IsValid(int value);
const Filter_NumericFilter_Operation Filter_NumericFilter_Operation_Operation_MIN = Filter_NumericFilter_Operation_OPERATION_UNSPECIFIED;
const Filter_NumericFilter_Operation Filter_NumericFilter_Operation_Operation_MAX = Filter_NumericFilter_Operation_GREATER_THAN_OR_EQUAL;
const int Filter_NumericFilter_Operation_Operation_ARRAYSIZE = Filter_NumericFilter_Operation_Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Filter_NumericFilter_Operation_descriptor();
inline const ::std::string& Filter_NumericFilter_Operation_Name(Filter_NumericFilter_Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Filter_NumericFilter_Operation_descriptor(), value);
}
inline bool Filter_NumericFilter_Operation_Parse(
    const ::std::string& name, Filter_NumericFilter_Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Filter_NumericFilter_Operation>(
    Filter_NumericFilter_Operation_descriptor(), name, value);
}
enum OrderBy_DimensionOrderBy_OrderType {
  OrderBy_DimensionOrderBy_OrderType_ORDER_TYPE_UNSPECIFIED = 0,
  OrderBy_DimensionOrderBy_OrderType_ALPHANUMERIC = 1,
  OrderBy_DimensionOrderBy_OrderType_CASE_INSENSITIVE_ALPHANUMERIC = 2,
  OrderBy_DimensionOrderBy_OrderType_NUMERIC = 3,
  OrderBy_DimensionOrderBy_OrderType_OrderBy_DimensionOrderBy_OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OrderBy_DimensionOrderBy_OrderType_OrderBy_DimensionOrderBy_OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OrderBy_DimensionOrderBy_OrderType_IsValid(int value);
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy_OrderType_OrderType_MIN = OrderBy_DimensionOrderBy_OrderType_ORDER_TYPE_UNSPECIFIED;
const OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy_OrderType_OrderType_MAX = OrderBy_DimensionOrderBy_OrderType_NUMERIC;
const int OrderBy_DimensionOrderBy_OrderType_OrderType_ARRAYSIZE = OrderBy_DimensionOrderBy_OrderType_OrderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderBy_DimensionOrderBy_OrderType_descriptor();
inline const ::std::string& OrderBy_DimensionOrderBy_OrderType_Name(OrderBy_DimensionOrderBy_OrderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderBy_DimensionOrderBy_OrderType_descriptor(), value);
}
inline bool OrderBy_DimensionOrderBy_OrderType_Parse(
    const ::std::string& name, OrderBy_DimensionOrderBy_OrderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderBy_DimensionOrderBy_OrderType>(
    OrderBy_DimensionOrderBy_OrderType_descriptor(), name, value);
}
enum CohortsRange_Granularity {
  CohortsRange_Granularity_GRANULARITY_UNSPECIFIED = 0,
  CohortsRange_Granularity_DAILY = 1,
  CohortsRange_Granularity_WEEKLY = 2,
  CohortsRange_Granularity_MONTHLY = 3,
  CohortsRange_Granularity_CohortsRange_Granularity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CohortsRange_Granularity_CohortsRange_Granularity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CohortsRange_Granularity_IsValid(int value);
const CohortsRange_Granularity CohortsRange_Granularity_Granularity_MIN = CohortsRange_Granularity_GRANULARITY_UNSPECIFIED;
const CohortsRange_Granularity CohortsRange_Granularity_Granularity_MAX = CohortsRange_Granularity_MONTHLY;
const int CohortsRange_Granularity_Granularity_ARRAYSIZE = CohortsRange_Granularity_Granularity_MAX + 1;

const ::google::protobuf::EnumDescriptor* CohortsRange_Granularity_descriptor();
inline const ::std::string& CohortsRange_Granularity_Name(CohortsRange_Granularity value) {
  return ::google::protobuf::internal::NameOfEnum(
    CohortsRange_Granularity_descriptor(), value);
}
inline bool CohortsRange_Granularity_Parse(
    const ::std::string& name, CohortsRange_Granularity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CohortsRange_Granularity>(
    CohortsRange_Granularity_descriptor(), name, value);
}
enum MetricAggregation {
  METRIC_AGGREGATION_UNSPECIFIED = 0,
  TOTAL = 1,
  MINIMUM = 5,
  MAXIMUM = 6,
  COUNT = 4,
  MetricAggregation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MetricAggregation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MetricAggregation_IsValid(int value);
const MetricAggregation MetricAggregation_MIN = METRIC_AGGREGATION_UNSPECIFIED;
const MetricAggregation MetricAggregation_MAX = MAXIMUM;
const int MetricAggregation_ARRAYSIZE = MetricAggregation_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetricAggregation_descriptor();
inline const ::std::string& MetricAggregation_Name(MetricAggregation value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetricAggregation_descriptor(), value);
}
inline bool MetricAggregation_Parse(
    const ::std::string& name, MetricAggregation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetricAggregation>(
    MetricAggregation_descriptor(), name, value);
}
enum MetricType {
  METRIC_TYPE_UNSPECIFIED = 0,
  TYPE_INTEGER = 1,
  TYPE_FLOAT = 2,
  TYPE_SECONDS = 4,
  TYPE_MILLISECONDS = 5,
  TYPE_MINUTES = 6,
  TYPE_HOURS = 7,
  TYPE_STANDARD = 8,
  TYPE_CURRENCY = 9,
  TYPE_FEET = 10,
  TYPE_MILES = 11,
  TYPE_METERS = 12,
  TYPE_KILOMETERS = 13,
  MetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MetricType_IsValid(int value);
const MetricType MetricType_MIN = METRIC_TYPE_UNSPECIFIED;
const MetricType MetricType_MAX = TYPE_KILOMETERS;
const int MetricType_ARRAYSIZE = MetricType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetricType_descriptor();
inline const ::std::string& MetricType_Name(MetricType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetricType_descriptor(), value);
}
inline bool MetricType_Parse(
    const ::std::string& name, MetricType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetricType>(
    MetricType_descriptor(), name, value);
}
// ===================================================================

class DateRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.DateRange) */ {
 public:
  DateRange();
  virtual ~DateRange();

  DateRange(const DateRange& from);

  inline DateRange& operator=(const DateRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateRange(DateRange&& from) noexcept
    : DateRange() {
    *this = ::std::move(from);
  }

  inline DateRange& operator=(DateRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateRange* internal_default_instance() {
    return reinterpret_cast<const DateRange*>(
               &_DateRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DateRange* other);
  friend void swap(DateRange& a, DateRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateRange* New() const final {
    return CreateMaybeMessage<DateRange>(nullptr);
  }

  DateRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateRange& from);
  void MergeFrom(const DateRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string start_date = 1;
  void clear_start_date();
  static const int kStartDateFieldNumber = 1;
  const ::std::string& start_date() const;
  void set_start_date(const ::std::string& value);
  #if LANG_CXX11
  void set_start_date(::std::string&& value);
  #endif
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  ::std::string* mutable_start_date();
  ::std::string* release_start_date();
  void set_allocated_start_date(::std::string* start_date);

  // string end_date = 2;
  void clear_end_date();
  static const int kEndDateFieldNumber = 2;
  const ::std::string& end_date() const;
  void set_end_date(const ::std::string& value);
  #if LANG_CXX11
  void set_end_date(::std::string&& value);
  #endif
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  ::std::string* mutable_end_date();
  ::std::string* release_end_date();
  void set_allocated_end_date(::std::string* end_date);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.DateRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_date_;
  ::google::protobuf::internal::ArenaStringPtr end_date_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Entity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Entity* other);
  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entity* New() const final {
    return CreateMaybeMessage<Entity>(nullptr);
  }

  Entity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string property_id = 1;
  void clear_property_id();
  static const int kPropertyIdFieldNumber = 1;
  const ::std::string& property_id() const;
  void set_property_id(const ::std::string& value);
  #if LANG_CXX11
  void set_property_id(::std::string&& value);
  #endif
  void set_property_id(const char* value);
  void set_property_id(const char* value, size_t size);
  ::std::string* mutable_property_id();
  ::std::string* release_property_id();
  void set_allocated_property_id(::std::string* property_id);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Entity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Dimension final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Dimension) */ {
 public:
  Dimension();
  virtual ~Dimension();

  Dimension(const Dimension& from);

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(Dimension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Dimension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Dimension* other);
  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dimension* New() const final {
    return CreateMaybeMessage<Dimension>(nullptr);
  }

  Dimension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Dimension& from);
  void MergeFrom(const Dimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.analytics.data.v1alpha.DimensionExpression dimension_expression = 2;
  bool has_dimension_expression() const;
  void clear_dimension_expression();
  static const int kDimensionExpressionFieldNumber = 2;
  const ::google::analytics::data::v1alpha::DimensionExpression& dimension_expression() const;
  ::google::analytics::data::v1alpha::DimensionExpression* release_dimension_expression();
  ::google::analytics::data::v1alpha::DimensionExpression* mutable_dimension_expression();
  void set_allocated_dimension_expression(::google::analytics::data::v1alpha::DimensionExpression* dimension_expression);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Dimension)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::analytics::data::v1alpha::DimensionExpression* dimension_expression_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DimensionExpression_CaseExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.DimensionExpression.CaseExpression) */ {
 public:
  DimensionExpression_CaseExpression();
  virtual ~DimensionExpression_CaseExpression();

  DimensionExpression_CaseExpression(const DimensionExpression_CaseExpression& from);

  inline DimensionExpression_CaseExpression& operator=(const DimensionExpression_CaseExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DimensionExpression_CaseExpression(DimensionExpression_CaseExpression&& from) noexcept
    : DimensionExpression_CaseExpression() {
    *this = ::std::move(from);
  }

  inline DimensionExpression_CaseExpression& operator=(DimensionExpression_CaseExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DimensionExpression_CaseExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionExpression_CaseExpression* internal_default_instance() {
    return reinterpret_cast<const DimensionExpression_CaseExpression*>(
               &_DimensionExpression_CaseExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DimensionExpression_CaseExpression* other);
  friend void swap(DimensionExpression_CaseExpression& a, DimensionExpression_CaseExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DimensionExpression_CaseExpression* New() const final {
    return CreateMaybeMessage<DimensionExpression_CaseExpression>(nullptr);
  }

  DimensionExpression_CaseExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DimensionExpression_CaseExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DimensionExpression_CaseExpression& from);
  void MergeFrom(const DimensionExpression_CaseExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionExpression_CaseExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dimension_name = 1;
  void clear_dimension_name();
  static const int kDimensionNameFieldNumber = 1;
  const ::std::string& dimension_name() const;
  void set_dimension_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dimension_name(::std::string&& value);
  #endif
  void set_dimension_name(const char* value);
  void set_dimension_name(const char* value, size_t size);
  ::std::string* mutable_dimension_name();
  ::std::string* release_dimension_name();
  void set_allocated_dimension_name(::std::string* dimension_name);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.DimensionExpression.CaseExpression)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dimension_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DimensionExpression_ConcatenateExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression) */ {
 public:
  DimensionExpression_ConcatenateExpression();
  virtual ~DimensionExpression_ConcatenateExpression();

  DimensionExpression_ConcatenateExpression(const DimensionExpression_ConcatenateExpression& from);

  inline DimensionExpression_ConcatenateExpression& operator=(const DimensionExpression_ConcatenateExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DimensionExpression_ConcatenateExpression(DimensionExpression_ConcatenateExpression&& from) noexcept
    : DimensionExpression_ConcatenateExpression() {
    *this = ::std::move(from);
  }

  inline DimensionExpression_ConcatenateExpression& operator=(DimensionExpression_ConcatenateExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DimensionExpression_ConcatenateExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionExpression_ConcatenateExpression* internal_default_instance() {
    return reinterpret_cast<const DimensionExpression_ConcatenateExpression*>(
               &_DimensionExpression_ConcatenateExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DimensionExpression_ConcatenateExpression* other);
  friend void swap(DimensionExpression_ConcatenateExpression& a, DimensionExpression_ConcatenateExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DimensionExpression_ConcatenateExpression* New() const final {
    return CreateMaybeMessage<DimensionExpression_ConcatenateExpression>(nullptr);
  }

  DimensionExpression_ConcatenateExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DimensionExpression_ConcatenateExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DimensionExpression_ConcatenateExpression& from);
  void MergeFrom(const DimensionExpression_ConcatenateExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionExpression_ConcatenateExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dimension_names = 1;
  int dimension_names_size() const;
  void clear_dimension_names();
  static const int kDimensionNamesFieldNumber = 1;
  const ::std::string& dimension_names(int index) const;
  ::std::string* mutable_dimension_names(int index);
  void set_dimension_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dimension_names(int index, ::std::string&& value);
  #endif
  void set_dimension_names(int index, const char* value);
  void set_dimension_names(int index, const char* value, size_t size);
  ::std::string* add_dimension_names();
  void add_dimension_names(const ::std::string& value);
  #if LANG_CXX11
  void add_dimension_names(::std::string&& value);
  #endif
  void add_dimension_names(const char* value);
  void add_dimension_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& dimension_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_dimension_names();

  // string delimiter = 2;
  void clear_delimiter();
  static const int kDelimiterFieldNumber = 2;
  const ::std::string& delimiter() const;
  void set_delimiter(const ::std::string& value);
  #if LANG_CXX11
  void set_delimiter(::std::string&& value);
  #endif
  void set_delimiter(const char* value);
  void set_delimiter(const char* value, size_t size);
  ::std::string* mutable_delimiter();
  ::std::string* release_delimiter();
  void set_allocated_delimiter(::std::string* delimiter);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> dimension_names_;
  ::google::protobuf::internal::ArenaStringPtr delimiter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DimensionExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.DimensionExpression) */ {
 public:
  DimensionExpression();
  virtual ~DimensionExpression();

  DimensionExpression(const DimensionExpression& from);

  inline DimensionExpression& operator=(const DimensionExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DimensionExpression(DimensionExpression&& from) noexcept
    : DimensionExpression() {
    *this = ::std::move(from);
  }

  inline DimensionExpression& operator=(DimensionExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DimensionExpression& default_instance();

  enum OneExpressionCase {
    kLowerCase = 4,
    kUpperCase = 5,
    kConcatenate = 6,
    ONE_EXPRESSION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionExpression* internal_default_instance() {
    return reinterpret_cast<const DimensionExpression*>(
               &_DimensionExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DimensionExpression* other);
  friend void swap(DimensionExpression& a, DimensionExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DimensionExpression* New() const final {
    return CreateMaybeMessage<DimensionExpression>(nullptr);
  }

  DimensionExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DimensionExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DimensionExpression& from);
  void MergeFrom(const DimensionExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DimensionExpression_CaseExpression CaseExpression;
  typedef DimensionExpression_ConcatenateExpression ConcatenateExpression;

  // accessors -------------------------------------------------------

  // .google.analytics.data.v1alpha.DimensionExpression.CaseExpression lower_case = 4;
  bool has_lower_case() const;
  void clear_lower_case();
  static const int kLowerCaseFieldNumber = 4;
  const ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression& lower_case() const;
  ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* release_lower_case();
  ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* mutable_lower_case();
  void set_allocated_lower_case(::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* lower_case);

  // .google.analytics.data.v1alpha.DimensionExpression.CaseExpression upper_case = 5;
  bool has_upper_case() const;
  void clear_upper_case();
  static const int kUpperCaseFieldNumber = 5;
  const ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression& upper_case() const;
  ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* release_upper_case();
  ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* mutable_upper_case();
  void set_allocated_upper_case(::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* upper_case);

  // .google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression concatenate = 6;
  bool has_concatenate() const;
  void clear_concatenate();
  static const int kConcatenateFieldNumber = 6;
  const ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression& concatenate() const;
  ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* release_concatenate();
  ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* mutable_concatenate();
  void set_allocated_concatenate(::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* concatenate);

  void clear_one_expression();
  OneExpressionCase one_expression_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.DimensionExpression)
 private:
  class HasBitSetters;
  void set_has_lower_case();
  void set_has_upper_case();
  void set_has_concatenate();

  inline bool has_one_expression() const;
  inline void clear_has_one_expression();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OneExpressionUnion {
    OneExpressionUnion() {}
    ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* lower_case_;
    ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* upper_case_;
    ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* concatenate_;
  } one_expression_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Metric* other);
  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string expression = 2;
  void clear_expression();
  static const int kExpressionFieldNumber = 2;
  const ::std::string& expression() const;
  void set_expression(const ::std::string& value);
  #if LANG_CXX11
  void set_expression(::std::string&& value);
  #endif
  void set_expression(const char* value);
  void set_expression(const char* value, size_t size);
  ::std::string* mutable_expression();
  ::std::string* release_expression();
  void set_allocated_expression(::std::string* expression);

  // bool invisible = 3;
  void clear_invisible();
  static const int kInvisibleFieldNumber = 3;
  bool invisible() const;
  void set_invisible(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Metric)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr expression_;
  bool invisible_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class FilterExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.FilterExpression) */ {
 public:
  FilterExpression();
  virtual ~FilterExpression();

  FilterExpression(const FilterExpression& from);

  inline FilterExpression& operator=(const FilterExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FilterExpression(FilterExpression&& from) noexcept
    : FilterExpression() {
    *this = ::std::move(from);
  }

  inline FilterExpression& operator=(FilterExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FilterExpression& default_instance();

  enum ExprCase {
    kAndGroup = 1,
    kOrGroup = 2,
    kNotExpression = 3,
    kFilter = 4,
    EXPR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterExpression* internal_default_instance() {
    return reinterpret_cast<const FilterExpression*>(
               &_FilterExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(FilterExpression* other);
  friend void swap(FilterExpression& a, FilterExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FilterExpression* New() const final {
    return CreateMaybeMessage<FilterExpression>(nullptr);
  }

  FilterExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FilterExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FilterExpression& from);
  void MergeFrom(const FilterExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.analytics.data.v1alpha.FilterExpressionList and_group = 1;
  bool has_and_group() const;
  void clear_and_group();
  static const int kAndGroupFieldNumber = 1;
  const ::google::analytics::data::v1alpha::FilterExpressionList& and_group() const;
  ::google::analytics::data::v1alpha::FilterExpressionList* release_and_group();
  ::google::analytics::data::v1alpha::FilterExpressionList* mutable_and_group();
  void set_allocated_and_group(::google::analytics::data::v1alpha::FilterExpressionList* and_group);

  // .google.analytics.data.v1alpha.FilterExpressionList or_group = 2;
  bool has_or_group() const;
  void clear_or_group();
  static const int kOrGroupFieldNumber = 2;
  const ::google::analytics::data::v1alpha::FilterExpressionList& or_group() const;
  ::google::analytics::data::v1alpha::FilterExpressionList* release_or_group();
  ::google::analytics::data::v1alpha::FilterExpressionList* mutable_or_group();
  void set_allocated_or_group(::google::analytics::data::v1alpha::FilterExpressionList* or_group);

  // .google.analytics.data.v1alpha.FilterExpression not_expression = 3;
  bool has_not_expression() const;
  void clear_not_expression();
  static const int kNotExpressionFieldNumber = 3;
  const ::google::analytics::data::v1alpha::FilterExpression& not_expression() const;
  ::google::analytics::data::v1alpha::FilterExpression* release_not_expression();
  ::google::analytics::data::v1alpha::FilterExpression* mutable_not_expression();
  void set_allocated_not_expression(::google::analytics::data::v1alpha::FilterExpression* not_expression);

  // .google.analytics.data.v1alpha.Filter filter = 4;
  bool has_filter() const;
  void clear_filter();
  static const int kFilterFieldNumber = 4;
  const ::google::analytics::data::v1alpha::Filter& filter() const;
  ::google::analytics::data::v1alpha::Filter* release_filter();
  ::google::analytics::data::v1alpha::Filter* mutable_filter();
  void set_allocated_filter(::google::analytics::data::v1alpha::Filter* filter);

  void clear_expr();
  ExprCase expr_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.FilterExpression)
 private:
  class HasBitSetters;
  void set_has_and_group();
  void set_has_or_group();
  void set_has_not_expression();
  void set_has_filter();

  inline bool has_expr() const;
  inline void clear_has_expr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ExprUnion {
    ExprUnion() {}
    ::google::analytics::data::v1alpha::FilterExpressionList* and_group_;
    ::google::analytics::data::v1alpha::FilterExpressionList* or_group_;
    ::google::analytics::data::v1alpha::FilterExpression* not_expression_;
    ::google::analytics::data::v1alpha::Filter* filter_;
  } expr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class FilterExpressionList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.FilterExpressionList) */ {
 public:
  FilterExpressionList();
  virtual ~FilterExpressionList();

  FilterExpressionList(const FilterExpressionList& from);

  inline FilterExpressionList& operator=(const FilterExpressionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FilterExpressionList(FilterExpressionList&& from) noexcept
    : FilterExpressionList() {
    *this = ::std::move(from);
  }

  inline FilterExpressionList& operator=(FilterExpressionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FilterExpressionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterExpressionList* internal_default_instance() {
    return reinterpret_cast<const FilterExpressionList*>(
               &_FilterExpressionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FilterExpressionList* other);
  friend void swap(FilterExpressionList& a, FilterExpressionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FilterExpressionList* New() const final {
    return CreateMaybeMessage<FilterExpressionList>(nullptr);
  }

  FilterExpressionList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FilterExpressionList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FilterExpressionList& from);
  void MergeFrom(const FilterExpressionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterExpressionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.analytics.data.v1alpha.FilterExpression expressions = 1;
  int expressions_size() const;
  void clear_expressions();
  static const int kExpressionsFieldNumber = 1;
  ::google::analytics::data::v1alpha::FilterExpression* mutable_expressions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::FilterExpression >*
      mutable_expressions();
  const ::google::analytics::data::v1alpha::FilterExpression& expressions(int index) const;
  ::google::analytics::data::v1alpha::FilterExpression* add_expressions();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::FilterExpression >&
      expressions() const;

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.FilterExpressionList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::FilterExpression > expressions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Filter_StringFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Filter.StringFilter) */ {
 public:
  Filter_StringFilter();
  virtual ~Filter_StringFilter();

  Filter_StringFilter(const Filter_StringFilter& from);

  inline Filter_StringFilter& operator=(const Filter_StringFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filter_StringFilter(Filter_StringFilter&& from) noexcept
    : Filter_StringFilter() {
    *this = ::std::move(from);
  }

  inline Filter_StringFilter& operator=(Filter_StringFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Filter_StringFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter_StringFilter* internal_default_instance() {
    return reinterpret_cast<const Filter_StringFilter*>(
               &_Filter_StringFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Filter_StringFilter* other);
  friend void swap(Filter_StringFilter& a, Filter_StringFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filter_StringFilter* New() const final {
    return CreateMaybeMessage<Filter_StringFilter>(nullptr);
  }

  Filter_StringFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Filter_StringFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Filter_StringFilter& from);
  void MergeFrom(const Filter_StringFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter_StringFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Filter_StringFilter_MatchType MatchType;
  static const MatchType MATCH_TYPE_UNSPECIFIED =
    Filter_StringFilter_MatchType_MATCH_TYPE_UNSPECIFIED;
  static const MatchType EXACT =
    Filter_StringFilter_MatchType_EXACT;
  static const MatchType BEGINS_WITH =
    Filter_StringFilter_MatchType_BEGINS_WITH;
  static const MatchType ENDS_WITH =
    Filter_StringFilter_MatchType_ENDS_WITH;
  static const MatchType CONTAINS =
    Filter_StringFilter_MatchType_CONTAINS;
  static const MatchType FULL_REGEXP =
    Filter_StringFilter_MatchType_FULL_REGEXP;
  static const MatchType PARTIAL_REGEXP =
    Filter_StringFilter_MatchType_PARTIAL_REGEXP;
  static inline bool MatchType_IsValid(int value) {
    return Filter_StringFilter_MatchType_IsValid(value);
  }
  static const MatchType MatchType_MIN =
    Filter_StringFilter_MatchType_MatchType_MIN;
  static const MatchType MatchType_MAX =
    Filter_StringFilter_MatchType_MatchType_MAX;
  static const int MatchType_ARRAYSIZE =
    Filter_StringFilter_MatchType_MatchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchType_descriptor() {
    return Filter_StringFilter_MatchType_descriptor();
  }
  static inline const ::std::string& MatchType_Name(MatchType value) {
    return Filter_StringFilter_MatchType_Name(value);
  }
  static inline bool MatchType_Parse(const ::std::string& name,
      MatchType* value) {
    return Filter_StringFilter_MatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.analytics.data.v1alpha.Filter.StringFilter.MatchType match_type = 1;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 1;
  ::google::analytics::data::v1alpha::Filter_StringFilter_MatchType match_type() const;
  void set_match_type(::google::analytics::data::v1alpha::Filter_StringFilter_MatchType value);

  // bool case_sensitive = 3;
  void clear_case_sensitive();
  static const int kCaseSensitiveFieldNumber = 3;
  bool case_sensitive() const;
  void set_case_sensitive(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Filter.StringFilter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int match_type_;
  bool case_sensitive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Filter_InListFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Filter.InListFilter) */ {
 public:
  Filter_InListFilter();
  virtual ~Filter_InListFilter();

  Filter_InListFilter(const Filter_InListFilter& from);

  inline Filter_InListFilter& operator=(const Filter_InListFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filter_InListFilter(Filter_InListFilter&& from) noexcept
    : Filter_InListFilter() {
    *this = ::std::move(from);
  }

  inline Filter_InListFilter& operator=(Filter_InListFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Filter_InListFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter_InListFilter* internal_default_instance() {
    return reinterpret_cast<const Filter_InListFilter*>(
               &_Filter_InListFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Filter_InListFilter* other);
  friend void swap(Filter_InListFilter& a, Filter_InListFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filter_InListFilter* New() const final {
    return CreateMaybeMessage<Filter_InListFilter>(nullptr);
  }

  Filter_InListFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Filter_InListFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Filter_InListFilter& from);
  void MergeFrom(const Filter_InListFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter_InListFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_values();

  // bool case_sensitive = 2;
  void clear_case_sensitive();
  static const int kCaseSensitiveFieldNumber = 2;
  bool case_sensitive() const;
  void set_case_sensitive(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Filter.InListFilter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> values_;
  bool case_sensitive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Filter_NumericFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Filter.NumericFilter) */ {
 public:
  Filter_NumericFilter();
  virtual ~Filter_NumericFilter();

  Filter_NumericFilter(const Filter_NumericFilter& from);

  inline Filter_NumericFilter& operator=(const Filter_NumericFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filter_NumericFilter(Filter_NumericFilter&& from) noexcept
    : Filter_NumericFilter() {
    *this = ::std::move(from);
  }

  inline Filter_NumericFilter& operator=(Filter_NumericFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Filter_NumericFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter_NumericFilter* internal_default_instance() {
    return reinterpret_cast<const Filter_NumericFilter*>(
               &_Filter_NumericFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Filter_NumericFilter* other);
  friend void swap(Filter_NumericFilter& a, Filter_NumericFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filter_NumericFilter* New() const final {
    return CreateMaybeMessage<Filter_NumericFilter>(nullptr);
  }

  Filter_NumericFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Filter_NumericFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Filter_NumericFilter& from);
  void MergeFrom(const Filter_NumericFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter_NumericFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Filter_NumericFilter_Operation Operation;
  static const Operation OPERATION_UNSPECIFIED =
    Filter_NumericFilter_Operation_OPERATION_UNSPECIFIED;
  static const Operation EQUAL =
    Filter_NumericFilter_Operation_EQUAL;
  static const Operation LESS_THAN =
    Filter_NumericFilter_Operation_LESS_THAN;
  static const Operation LESS_THAN_OR_EQUAL =
    Filter_NumericFilter_Operation_LESS_THAN_OR_EQUAL;
  static const Operation GREATER_THAN =
    Filter_NumericFilter_Operation_GREATER_THAN;
  static const Operation GREATER_THAN_OR_EQUAL =
    Filter_NumericFilter_Operation_GREATER_THAN_OR_EQUAL;
  static inline bool Operation_IsValid(int value) {
    return Filter_NumericFilter_Operation_IsValid(value);
  }
  static const Operation Operation_MIN =
    Filter_NumericFilter_Operation_Operation_MIN;
  static const Operation Operation_MAX =
    Filter_NumericFilter_Operation_Operation_MAX;
  static const int Operation_ARRAYSIZE =
    Filter_NumericFilter_Operation_Operation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operation_descriptor() {
    return Filter_NumericFilter_Operation_descriptor();
  }
  static inline const ::std::string& Operation_Name(Operation value) {
    return Filter_NumericFilter_Operation_Name(value);
  }
  static inline bool Operation_Parse(const ::std::string& name,
      Operation* value) {
    return Filter_NumericFilter_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.analytics.data.v1alpha.NumericValue value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::google::analytics::data::v1alpha::NumericValue& value() const;
  ::google::analytics::data::v1alpha::NumericValue* release_value();
  ::google::analytics::data::v1alpha::NumericValue* mutable_value();
  void set_allocated_value(::google::analytics::data::v1alpha::NumericValue* value);

  // .google.analytics.data.v1alpha.Filter.NumericFilter.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::google::analytics::data::v1alpha::Filter_NumericFilter_Operation operation() const;
  void set_operation(::google::analytics::data::v1alpha::Filter_NumericFilter_Operation value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Filter.NumericFilter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::analytics::data::v1alpha::NumericValue* value_;
  int operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Filter_BetweenFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Filter.BetweenFilter) */ {
 public:
  Filter_BetweenFilter();
  virtual ~Filter_BetweenFilter();

  Filter_BetweenFilter(const Filter_BetweenFilter& from);

  inline Filter_BetweenFilter& operator=(const Filter_BetweenFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filter_BetweenFilter(Filter_BetweenFilter&& from) noexcept
    : Filter_BetweenFilter() {
    *this = ::std::move(from);
  }

  inline Filter_BetweenFilter& operator=(Filter_BetweenFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Filter_BetweenFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter_BetweenFilter* internal_default_instance() {
    return reinterpret_cast<const Filter_BetweenFilter*>(
               &_Filter_BetweenFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Filter_BetweenFilter* other);
  friend void swap(Filter_BetweenFilter& a, Filter_BetweenFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filter_BetweenFilter* New() const final {
    return CreateMaybeMessage<Filter_BetweenFilter>(nullptr);
  }

  Filter_BetweenFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Filter_BetweenFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Filter_BetweenFilter& from);
  void MergeFrom(const Filter_BetweenFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter_BetweenFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.analytics.data.v1alpha.NumericValue from_value = 1;
  bool has_from_value() const;
  void clear_from_value();
  static const int kFromValueFieldNumber = 1;
  const ::google::analytics::data::v1alpha::NumericValue& from_value() const;
  ::google::analytics::data::v1alpha::NumericValue* release_from_value();
  ::google::analytics::data::v1alpha::NumericValue* mutable_from_value();
  void set_allocated_from_value(::google::analytics::data::v1alpha::NumericValue* from_value);

  // .google.analytics.data.v1alpha.NumericValue to_value = 2;
  bool has_to_value() const;
  void clear_to_value();
  static const int kToValueFieldNumber = 2;
  const ::google::analytics::data::v1alpha::NumericValue& to_value() const;
  ::google::analytics::data::v1alpha::NumericValue* release_to_value();
  ::google::analytics::data::v1alpha::NumericValue* mutable_to_value();
  void set_allocated_to_value(::google::analytics::data::v1alpha::NumericValue* to_value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Filter.BetweenFilter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::analytics::data::v1alpha::NumericValue* from_value_;
  ::google::analytics::data::v1alpha::NumericValue* to_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Filter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Filter) */ {
 public:
  Filter();
  virtual ~Filter();

  Filter(const Filter& from);

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Filter& default_instance();

  enum OneFilterCase {
    kNullFilter = 2,
    kStringFilter = 3,
    kInListFilter = 4,
    kNumericFilter = 5,
    kBetweenFilter = 6,
    ONE_FILTER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Filter* other);
  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Filter_StringFilter StringFilter;
  typedef Filter_InListFilter InListFilter;
  typedef Filter_NumericFilter NumericFilter;
  typedef Filter_BetweenFilter BetweenFilter;

  // accessors -------------------------------------------------------

  // string field_name = 1;
  void clear_field_name();
  static const int kFieldNameFieldNumber = 1;
  const ::std::string& field_name() const;
  void set_field_name(const ::std::string& value);
  #if LANG_CXX11
  void set_field_name(::std::string&& value);
  #endif
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  ::std::string* mutable_field_name();
  ::std::string* release_field_name();
  void set_allocated_field_name(::std::string* field_name);

  // bool null_filter = 2;
  private:
  bool has_null_filter() const;
  public:
  void clear_null_filter();
  static const int kNullFilterFieldNumber = 2;
  bool null_filter() const;
  void set_null_filter(bool value);

  // .google.analytics.data.v1alpha.Filter.StringFilter string_filter = 3;
  bool has_string_filter() const;
  void clear_string_filter();
  static const int kStringFilterFieldNumber = 3;
  const ::google::analytics::data::v1alpha::Filter_StringFilter& string_filter() const;
  ::google::analytics::data::v1alpha::Filter_StringFilter* release_string_filter();
  ::google::analytics::data::v1alpha::Filter_StringFilter* mutable_string_filter();
  void set_allocated_string_filter(::google::analytics::data::v1alpha::Filter_StringFilter* string_filter);

  // .google.analytics.data.v1alpha.Filter.InListFilter in_list_filter = 4;
  bool has_in_list_filter() const;
  void clear_in_list_filter();
  static const int kInListFilterFieldNumber = 4;
  const ::google::analytics::data::v1alpha::Filter_InListFilter& in_list_filter() const;
  ::google::analytics::data::v1alpha::Filter_InListFilter* release_in_list_filter();
  ::google::analytics::data::v1alpha::Filter_InListFilter* mutable_in_list_filter();
  void set_allocated_in_list_filter(::google::analytics::data::v1alpha::Filter_InListFilter* in_list_filter);

  // .google.analytics.data.v1alpha.Filter.NumericFilter numeric_filter = 5;
  bool has_numeric_filter() const;
  void clear_numeric_filter();
  static const int kNumericFilterFieldNumber = 5;
  const ::google::analytics::data::v1alpha::Filter_NumericFilter& numeric_filter() const;
  ::google::analytics::data::v1alpha::Filter_NumericFilter* release_numeric_filter();
  ::google::analytics::data::v1alpha::Filter_NumericFilter* mutable_numeric_filter();
  void set_allocated_numeric_filter(::google::analytics::data::v1alpha::Filter_NumericFilter* numeric_filter);

  // .google.analytics.data.v1alpha.Filter.BetweenFilter between_filter = 6;
  bool has_between_filter() const;
  void clear_between_filter();
  static const int kBetweenFilterFieldNumber = 6;
  const ::google::analytics::data::v1alpha::Filter_BetweenFilter& between_filter() const;
  ::google::analytics::data::v1alpha::Filter_BetweenFilter* release_between_filter();
  ::google::analytics::data::v1alpha::Filter_BetweenFilter* mutable_between_filter();
  void set_allocated_between_filter(::google::analytics::data::v1alpha::Filter_BetweenFilter* between_filter);

  void clear_one_filter();
  OneFilterCase one_filter_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Filter)
 private:
  class HasBitSetters;
  void set_has_null_filter();
  void set_has_string_filter();
  void set_has_in_list_filter();
  void set_has_numeric_filter();
  void set_has_between_filter();

  inline bool has_one_filter() const;
  inline void clear_has_one_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_name_;
  union OneFilterUnion {
    OneFilterUnion() {}
    bool null_filter_;
    ::google::analytics::data::v1alpha::Filter_StringFilter* string_filter_;
    ::google::analytics::data::v1alpha::Filter_InListFilter* in_list_filter_;
    ::google::analytics::data::v1alpha::Filter_NumericFilter* numeric_filter_;
    ::google::analytics::data::v1alpha::Filter_BetweenFilter* between_filter_;
  } one_filter_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBy_MetricOrderBy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.OrderBy.MetricOrderBy) */ {
 public:
  OrderBy_MetricOrderBy();
  virtual ~OrderBy_MetricOrderBy();

  OrderBy_MetricOrderBy(const OrderBy_MetricOrderBy& from);

  inline OrderBy_MetricOrderBy& operator=(const OrderBy_MetricOrderBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBy_MetricOrderBy(OrderBy_MetricOrderBy&& from) noexcept
    : OrderBy_MetricOrderBy() {
    *this = ::std::move(from);
  }

  inline OrderBy_MetricOrderBy& operator=(OrderBy_MetricOrderBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderBy_MetricOrderBy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBy_MetricOrderBy* internal_default_instance() {
    return reinterpret_cast<const OrderBy_MetricOrderBy*>(
               &_OrderBy_MetricOrderBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(OrderBy_MetricOrderBy* other);
  friend void swap(OrderBy_MetricOrderBy& a, OrderBy_MetricOrderBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBy_MetricOrderBy* New() const final {
    return CreateMaybeMessage<OrderBy_MetricOrderBy>(nullptr);
  }

  OrderBy_MetricOrderBy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderBy_MetricOrderBy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderBy_MetricOrderBy& from);
  void MergeFrom(const OrderBy_MetricOrderBy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBy_MetricOrderBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metric_name = 1;
  void clear_metric_name();
  static const int kMetricNameFieldNumber = 1;
  const ::std::string& metric_name() const;
  void set_metric_name(const ::std::string& value);
  #if LANG_CXX11
  void set_metric_name(::std::string&& value);
  #endif
  void set_metric_name(const char* value);
  void set_metric_name(const char* value, size_t size);
  ::std::string* mutable_metric_name();
  ::std::string* release_metric_name();
  void set_allocated_metric_name(::std::string* metric_name);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.OrderBy.MetricOrderBy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metric_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBy_DimensionOrderBy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy) */ {
 public:
  OrderBy_DimensionOrderBy();
  virtual ~OrderBy_DimensionOrderBy();

  OrderBy_DimensionOrderBy(const OrderBy_DimensionOrderBy& from);

  inline OrderBy_DimensionOrderBy& operator=(const OrderBy_DimensionOrderBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBy_DimensionOrderBy(OrderBy_DimensionOrderBy&& from) noexcept
    : OrderBy_DimensionOrderBy() {
    *this = ::std::move(from);
  }

  inline OrderBy_DimensionOrderBy& operator=(OrderBy_DimensionOrderBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderBy_DimensionOrderBy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBy_DimensionOrderBy* internal_default_instance() {
    return reinterpret_cast<const OrderBy_DimensionOrderBy*>(
               &_OrderBy_DimensionOrderBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(OrderBy_DimensionOrderBy* other);
  friend void swap(OrderBy_DimensionOrderBy& a, OrderBy_DimensionOrderBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBy_DimensionOrderBy* New() const final {
    return CreateMaybeMessage<OrderBy_DimensionOrderBy>(nullptr);
  }

  OrderBy_DimensionOrderBy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderBy_DimensionOrderBy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderBy_DimensionOrderBy& from);
  void MergeFrom(const OrderBy_DimensionOrderBy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBy_DimensionOrderBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderBy_DimensionOrderBy_OrderType OrderType;
  static const OrderType ORDER_TYPE_UNSPECIFIED =
    OrderBy_DimensionOrderBy_OrderType_ORDER_TYPE_UNSPECIFIED;
  static const OrderType ALPHANUMERIC =
    OrderBy_DimensionOrderBy_OrderType_ALPHANUMERIC;
  static const OrderType CASE_INSENSITIVE_ALPHANUMERIC =
    OrderBy_DimensionOrderBy_OrderType_CASE_INSENSITIVE_ALPHANUMERIC;
  static const OrderType NUMERIC =
    OrderBy_DimensionOrderBy_OrderType_NUMERIC;
  static inline bool OrderType_IsValid(int value) {
    return OrderBy_DimensionOrderBy_OrderType_IsValid(value);
  }
  static const OrderType OrderType_MIN =
    OrderBy_DimensionOrderBy_OrderType_OrderType_MIN;
  static const OrderType OrderType_MAX =
    OrderBy_DimensionOrderBy_OrderType_OrderType_MAX;
  static const int OrderType_ARRAYSIZE =
    OrderBy_DimensionOrderBy_OrderType_OrderType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OrderType_descriptor() {
    return OrderBy_DimensionOrderBy_OrderType_descriptor();
  }
  static inline const ::std::string& OrderType_Name(OrderType value) {
    return OrderBy_DimensionOrderBy_OrderType_Name(value);
  }
  static inline bool OrderType_Parse(const ::std::string& name,
      OrderType* value) {
    return OrderBy_DimensionOrderBy_OrderType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string dimension_name = 1;
  void clear_dimension_name();
  static const int kDimensionNameFieldNumber = 1;
  const ::std::string& dimension_name() const;
  void set_dimension_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dimension_name(::std::string&& value);
  #endif
  void set_dimension_name(const char* value);
  void set_dimension_name(const char* value, size_t size);
  ::std::string* mutable_dimension_name();
  ::std::string* release_dimension_name();
  void set_allocated_dimension_name(::std::string* dimension_name);

  // .google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.OrderType order_type = 2;
  void clear_order_type();
  static const int kOrderTypeFieldNumber = 2;
  ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType order_type() const;
  void set_order_type(::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dimension_name_;
  int order_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBy_PivotOrderBy_PivotSelection final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection) */ {
 public:
  OrderBy_PivotOrderBy_PivotSelection();
  virtual ~OrderBy_PivotOrderBy_PivotSelection();

  OrderBy_PivotOrderBy_PivotSelection(const OrderBy_PivotOrderBy_PivotSelection& from);

  inline OrderBy_PivotOrderBy_PivotSelection& operator=(const OrderBy_PivotOrderBy_PivotSelection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBy_PivotOrderBy_PivotSelection(OrderBy_PivotOrderBy_PivotSelection&& from) noexcept
    : OrderBy_PivotOrderBy_PivotSelection() {
    *this = ::std::move(from);
  }

  inline OrderBy_PivotOrderBy_PivotSelection& operator=(OrderBy_PivotOrderBy_PivotSelection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderBy_PivotOrderBy_PivotSelection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBy_PivotOrderBy_PivotSelection* internal_default_instance() {
    return reinterpret_cast<const OrderBy_PivotOrderBy_PivotSelection*>(
               &_OrderBy_PivotOrderBy_PivotSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(OrderBy_PivotOrderBy_PivotSelection* other);
  friend void swap(OrderBy_PivotOrderBy_PivotSelection& a, OrderBy_PivotOrderBy_PivotSelection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBy_PivotOrderBy_PivotSelection* New() const final {
    return CreateMaybeMessage<OrderBy_PivotOrderBy_PivotSelection>(nullptr);
  }

  OrderBy_PivotOrderBy_PivotSelection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderBy_PivotOrderBy_PivotSelection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderBy_PivotOrderBy_PivotSelection& from);
  void MergeFrom(const OrderBy_PivotOrderBy_PivotSelection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBy_PivotOrderBy_PivotSelection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dimension_name = 1;
  void clear_dimension_name();
  static const int kDimensionNameFieldNumber = 1;
  const ::std::string& dimension_name() const;
  void set_dimension_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dimension_name(::std::string&& value);
  #endif
  void set_dimension_name(const char* value);
  void set_dimension_name(const char* value, size_t size);
  ::std::string* mutable_dimension_name();
  ::std::string* release_dimension_name();
  void set_allocated_dimension_name(::std::string* dimension_name);

  // string dimension_value = 2;
  void clear_dimension_value();
  static const int kDimensionValueFieldNumber = 2;
  const ::std::string& dimension_value() const;
  void set_dimension_value(const ::std::string& value);
  #if LANG_CXX11
  void set_dimension_value(::std::string&& value);
  #endif
  void set_dimension_value(const char* value);
  void set_dimension_value(const char* value, size_t size);
  ::std::string* mutable_dimension_value();
  ::std::string* release_dimension_value();
  void set_allocated_dimension_value(::std::string* dimension_value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dimension_name_;
  ::google::protobuf::internal::ArenaStringPtr dimension_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBy_PivotOrderBy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.OrderBy.PivotOrderBy) */ {
 public:
  OrderBy_PivotOrderBy();
  virtual ~OrderBy_PivotOrderBy();

  OrderBy_PivotOrderBy(const OrderBy_PivotOrderBy& from);

  inline OrderBy_PivotOrderBy& operator=(const OrderBy_PivotOrderBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBy_PivotOrderBy(OrderBy_PivotOrderBy&& from) noexcept
    : OrderBy_PivotOrderBy() {
    *this = ::std::move(from);
  }

  inline OrderBy_PivotOrderBy& operator=(OrderBy_PivotOrderBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderBy_PivotOrderBy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBy_PivotOrderBy* internal_default_instance() {
    return reinterpret_cast<const OrderBy_PivotOrderBy*>(
               &_OrderBy_PivotOrderBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(OrderBy_PivotOrderBy* other);
  friend void swap(OrderBy_PivotOrderBy& a, OrderBy_PivotOrderBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBy_PivotOrderBy* New() const final {
    return CreateMaybeMessage<OrderBy_PivotOrderBy>(nullptr);
  }

  OrderBy_PivotOrderBy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderBy_PivotOrderBy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderBy_PivotOrderBy& from);
  void MergeFrom(const OrderBy_PivotOrderBy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBy_PivotOrderBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderBy_PivotOrderBy_PivotSelection PivotSelection;

  // accessors -------------------------------------------------------

  // repeated .google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
  int pivot_selections_size() const;
  void clear_pivot_selections();
  static const int kPivotSelectionsFieldNumber = 2;
  ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection* mutable_pivot_selections(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection >*
      mutable_pivot_selections();
  const ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection& pivot_selections(int index) const;
  ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection* add_pivot_selections();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection >&
      pivot_selections() const;

  // string metric_name = 1;
  void clear_metric_name();
  static const int kMetricNameFieldNumber = 1;
  const ::std::string& metric_name() const;
  void set_metric_name(const ::std::string& value);
  #if LANG_CXX11
  void set_metric_name(::std::string&& value);
  #endif
  void set_metric_name(const char* value);
  void set_metric_name(const char* value, size_t size);
  ::std::string* mutable_metric_name();
  ::std::string* release_metric_name();
  void set_allocated_metric_name(::std::string* metric_name);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.OrderBy.PivotOrderBy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection > pivot_selections_;
  ::google::protobuf::internal::ArenaStringPtr metric_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.OrderBy) */ {
 public:
  OrderBy();
  virtual ~OrderBy();

  OrderBy(const OrderBy& from);

  inline OrderBy& operator=(const OrderBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBy(OrderBy&& from) noexcept
    : OrderBy() {
    *this = ::std::move(from);
  }

  inline OrderBy& operator=(OrderBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderBy& default_instance();

  enum OneOrderByCase {
    kMetric = 1,
    kDimension = 2,
    kPivot = 3,
    ONE_ORDER_BY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBy* internal_default_instance() {
    return reinterpret_cast<const OrderBy*>(
               &_OrderBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(OrderBy* other);
  friend void swap(OrderBy& a, OrderBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBy* New() const final {
    return CreateMaybeMessage<OrderBy>(nullptr);
  }

  OrderBy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderBy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderBy& from);
  void MergeFrom(const OrderBy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderBy_MetricOrderBy MetricOrderBy;
  typedef OrderBy_DimensionOrderBy DimensionOrderBy;
  typedef OrderBy_PivotOrderBy PivotOrderBy;

  // accessors -------------------------------------------------------

  // bool desc = 4;
  void clear_desc();
  static const int kDescFieldNumber = 4;
  bool desc() const;
  void set_desc(bool value);

  // .google.analytics.data.v1alpha.OrderBy.MetricOrderBy metric = 1;
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 1;
  const ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy& metric() const;
  ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* release_metric();
  ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* mutable_metric();
  void set_allocated_metric(::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* metric);

  // .google.analytics.data.v1alpha.OrderBy.DimensionOrderBy dimension = 2;
  bool has_dimension() const;
  void clear_dimension();
  static const int kDimensionFieldNumber = 2;
  const ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy& dimension() const;
  ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* release_dimension();
  ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* mutable_dimension();
  void set_allocated_dimension(::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* dimension);

  // .google.analytics.data.v1alpha.OrderBy.PivotOrderBy pivot = 3;
  bool has_pivot() const;
  void clear_pivot();
  static const int kPivotFieldNumber = 3;
  const ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy& pivot() const;
  ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* release_pivot();
  ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* mutable_pivot();
  void set_allocated_pivot(::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* pivot);

  void clear_one_order_by();
  OneOrderByCase one_order_by_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.OrderBy)
 private:
  class HasBitSetters;
  void set_has_metric();
  void set_has_dimension();
  void set_has_pivot();

  inline bool has_one_order_by() const;
  inline void clear_has_one_order_by();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool desc_;
  union OneOrderByUnion {
    OneOrderByUnion() {}
    ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* metric_;
    ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* dimension_;
    ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* pivot_;
  } one_order_by_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Pivot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Pivot) */ {
 public:
  Pivot();
  virtual ~Pivot();

  Pivot(const Pivot& from);

  inline Pivot& operator=(const Pivot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pivot(Pivot&& from) noexcept
    : Pivot() {
    *this = ::std::move(from);
  }

  inline Pivot& operator=(Pivot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Pivot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pivot* internal_default_instance() {
    return reinterpret_cast<const Pivot*>(
               &_Pivot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Pivot* other);
  friend void swap(Pivot& a, Pivot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pivot* New() const final {
    return CreateMaybeMessage<Pivot>(nullptr);
  }

  Pivot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pivot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pivot& from);
  void MergeFrom(const Pivot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pivot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string field_names = 1;
  int field_names_size() const;
  void clear_field_names();
  static const int kFieldNamesFieldNumber = 1;
  const ::std::string& field_names(int index) const;
  ::std::string* mutable_field_names(int index);
  void set_field_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_field_names(int index, ::std::string&& value);
  #endif
  void set_field_names(int index, const char* value);
  void set_field_names(int index, const char* value, size_t size);
  ::std::string* add_field_names();
  void add_field_names(const ::std::string& value);
  #if LANG_CXX11
  void add_field_names(::std::string&& value);
  #endif
  void add_field_names(const char* value);
  void add_field_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& field_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_field_names();

  // repeated .google.analytics.data.v1alpha.OrderBy order_bys = 2;
  int order_bys_size() const;
  void clear_order_bys();
  static const int kOrderBysFieldNumber = 2;
  ::google::analytics::data::v1alpha::OrderBy* mutable_order_bys(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy >*
      mutable_order_bys();
  const ::google::analytics::data::v1alpha::OrderBy& order_bys(int index) const;
  ::google::analytics::data::v1alpha::OrderBy* add_order_bys();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy >&
      order_bys() const;

  // repeated .google.analytics.data.v1alpha.MetricAggregation metric_aggregations = 5;
  int metric_aggregations_size() const;
  void clear_metric_aggregations();
  static const int kMetricAggregationsFieldNumber = 5;
  ::google::analytics::data::v1alpha::MetricAggregation metric_aggregations(int index) const;
  void set_metric_aggregations(int index, ::google::analytics::data::v1alpha::MetricAggregation value);
  void add_metric_aggregations(::google::analytics::data::v1alpha::MetricAggregation value);
  const ::google::protobuf::RepeatedField<int>& metric_aggregations() const;
  ::google::protobuf::RepeatedField<int>* mutable_metric_aggregations();

  // int64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // int64 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::google::protobuf::int64 limit() const;
  void set_limit(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Pivot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> field_names_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy > order_bys_;
  ::google::protobuf::RepeatedField<int> metric_aggregations_;
  mutable std::atomic<int> _metric_aggregations_cached_byte_size_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int64 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class CohortSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.CohortSpec) */ {
 public:
  CohortSpec();
  virtual ~CohortSpec();

  CohortSpec(const CohortSpec& from);

  inline CohortSpec& operator=(const CohortSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CohortSpec(CohortSpec&& from) noexcept
    : CohortSpec() {
    *this = ::std::move(from);
  }

  inline CohortSpec& operator=(CohortSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CohortSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CohortSpec* internal_default_instance() {
    return reinterpret_cast<const CohortSpec*>(
               &_CohortSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CohortSpec* other);
  friend void swap(CohortSpec& a, CohortSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CohortSpec* New() const final {
    return CreateMaybeMessage<CohortSpec>(nullptr);
  }

  CohortSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CohortSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CohortSpec& from);
  void MergeFrom(const CohortSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CohortSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.analytics.data.v1alpha.Cohort cohorts = 1;
  int cohorts_size() const;
  void clear_cohorts();
  static const int kCohortsFieldNumber = 1;
  ::google::analytics::data::v1alpha::Cohort* mutable_cohorts(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::Cohort >*
      mutable_cohorts();
  const ::google::analytics::data::v1alpha::Cohort& cohorts(int index) const;
  ::google::analytics::data::v1alpha::Cohort* add_cohorts();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::Cohort >&
      cohorts() const;

  // .google.analytics.data.v1alpha.CohortsRange cohorts_range = 2;
  bool has_cohorts_range() const;
  void clear_cohorts_range();
  static const int kCohortsRangeFieldNumber = 2;
  const ::google::analytics::data::v1alpha::CohortsRange& cohorts_range() const;
  ::google::analytics::data::v1alpha::CohortsRange* release_cohorts_range();
  ::google::analytics::data::v1alpha::CohortsRange* mutable_cohorts_range();
  void set_allocated_cohorts_range(::google::analytics::data::v1alpha::CohortsRange* cohorts_range);

  // .google.analytics.data.v1alpha.CohortReportSettings cohort_report_settings = 3;
  bool has_cohort_report_settings() const;
  void clear_cohort_report_settings();
  static const int kCohortReportSettingsFieldNumber = 3;
  const ::google::analytics::data::v1alpha::CohortReportSettings& cohort_report_settings() const;
  ::google::analytics::data::v1alpha::CohortReportSettings* release_cohort_report_settings();
  ::google::analytics::data::v1alpha::CohortReportSettings* mutable_cohort_report_settings();
  void set_allocated_cohort_report_settings(::google::analytics::data::v1alpha::CohortReportSettings* cohort_report_settings);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.CohortSpec)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::Cohort > cohorts_;
  ::google::analytics::data::v1alpha::CohortsRange* cohorts_range_;
  ::google::analytics::data::v1alpha::CohortReportSettings* cohort_report_settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Cohort final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Cohort) */ {
 public:
  Cohort();
  virtual ~Cohort();

  Cohort(const Cohort& from);

  inline Cohort& operator=(const Cohort& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cohort(Cohort&& from) noexcept
    : Cohort() {
    *this = ::std::move(from);
  }

  inline Cohort& operator=(Cohort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Cohort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cohort* internal_default_instance() {
    return reinterpret_cast<const Cohort*>(
               &_Cohort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Cohort* other);
  friend void swap(Cohort& a, Cohort& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cohort* New() const final {
    return CreateMaybeMessage<Cohort>(nullptr);
  }

  Cohort* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cohort>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cohort& from);
  void MergeFrom(const Cohort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cohort* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string dimension = 2;
  void clear_dimension();
  static const int kDimensionFieldNumber = 2;
  const ::std::string& dimension() const;
  void set_dimension(const ::std::string& value);
  #if LANG_CXX11
  void set_dimension(::std::string&& value);
  #endif
  void set_dimension(const char* value);
  void set_dimension(const char* value, size_t size);
  ::std::string* mutable_dimension();
  ::std::string* release_dimension();
  void set_allocated_dimension(::std::string* dimension);

  // .google.analytics.data.v1alpha.DateRange date_range = 3;
  bool has_date_range() const;
  void clear_date_range();
  static const int kDateRangeFieldNumber = 3;
  const ::google::analytics::data::v1alpha::DateRange& date_range() const;
  ::google::analytics::data::v1alpha::DateRange* release_date_range();
  ::google::analytics::data::v1alpha::DateRange* mutable_date_range();
  void set_allocated_date_range(::google::analytics::data::v1alpha::DateRange* date_range);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Cohort)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr dimension_;
  ::google::analytics::data::v1alpha::DateRange* date_range_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class CohortsRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.CohortsRange) */ {
 public:
  CohortsRange();
  virtual ~CohortsRange();

  CohortsRange(const CohortsRange& from);

  inline CohortsRange& operator=(const CohortsRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CohortsRange(CohortsRange&& from) noexcept
    : CohortsRange() {
    *this = ::std::move(from);
  }

  inline CohortsRange& operator=(CohortsRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CohortsRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CohortsRange* internal_default_instance() {
    return reinterpret_cast<const CohortsRange*>(
               &_CohortsRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(CohortsRange* other);
  friend void swap(CohortsRange& a, CohortsRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CohortsRange* New() const final {
    return CreateMaybeMessage<CohortsRange>(nullptr);
  }

  CohortsRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CohortsRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CohortsRange& from);
  void MergeFrom(const CohortsRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CohortsRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CohortsRange_Granularity Granularity;
  static const Granularity GRANULARITY_UNSPECIFIED =
    CohortsRange_Granularity_GRANULARITY_UNSPECIFIED;
  static const Granularity DAILY =
    CohortsRange_Granularity_DAILY;
  static const Granularity WEEKLY =
    CohortsRange_Granularity_WEEKLY;
  static const Granularity MONTHLY =
    CohortsRange_Granularity_MONTHLY;
  static inline bool Granularity_IsValid(int value) {
    return CohortsRange_Granularity_IsValid(value);
  }
  static const Granularity Granularity_MIN =
    CohortsRange_Granularity_Granularity_MIN;
  static const Granularity Granularity_MAX =
    CohortsRange_Granularity_Granularity_MAX;
  static const int Granularity_ARRAYSIZE =
    CohortsRange_Granularity_Granularity_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Granularity_descriptor() {
    return CohortsRange_Granularity_descriptor();
  }
  static inline const ::std::string& Granularity_Name(Granularity value) {
    return CohortsRange_Granularity_Name(value);
  }
  static inline bool Granularity_Parse(const ::std::string& name,
      Granularity* value) {
    return CohortsRange_Granularity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.analytics.data.v1alpha.CohortsRange.Granularity granularity = 1;
  void clear_granularity();
  static const int kGranularityFieldNumber = 1;
  ::google::analytics::data::v1alpha::CohortsRange_Granularity granularity() const;
  void set_granularity(::google::analytics::data::v1alpha::CohortsRange_Granularity value);

  // int32 start_offset = 2;
  void clear_start_offset();
  static const int kStartOffsetFieldNumber = 2;
  ::google::protobuf::int32 start_offset() const;
  void set_start_offset(::google::protobuf::int32 value);

  // int32 end_offset = 3;
  void clear_end_offset();
  static const int kEndOffsetFieldNumber = 3;
  ::google::protobuf::int32 end_offset() const;
  void set_end_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.CohortsRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int granularity_;
  ::google::protobuf::int32 start_offset_;
  ::google::protobuf::int32 end_offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class CohortReportSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.CohortReportSettings) */ {
 public:
  CohortReportSettings();
  virtual ~CohortReportSettings();

  CohortReportSettings(const CohortReportSettings& from);

  inline CohortReportSettings& operator=(const CohortReportSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CohortReportSettings(CohortReportSettings&& from) noexcept
    : CohortReportSettings() {
    *this = ::std::move(from);
  }

  inline CohortReportSettings& operator=(CohortReportSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CohortReportSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CohortReportSettings* internal_default_instance() {
    return reinterpret_cast<const CohortReportSettings*>(
               &_CohortReportSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CohortReportSettings* other);
  friend void swap(CohortReportSettings& a, CohortReportSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CohortReportSettings* New() const final {
    return CreateMaybeMessage<CohortReportSettings>(nullptr);
  }

  CohortReportSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CohortReportSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CohortReportSettings& from);
  void MergeFrom(const CohortReportSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CohortReportSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool accumulate = 1;
  void clear_accumulate();
  static const int kAccumulateFieldNumber = 1;
  bool accumulate() const;
  void set_accumulate(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.CohortReportSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool accumulate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class ResponseMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.ResponseMetaData) */ {
 public:
  ResponseMetaData();
  virtual ~ResponseMetaData();

  ResponseMetaData(const ResponseMetaData& from);

  inline ResponseMetaData& operator=(const ResponseMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseMetaData(ResponseMetaData&& from) noexcept
    : ResponseMetaData() {
    *this = ::std::move(from);
  }

  inline ResponseMetaData& operator=(ResponseMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResponseMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseMetaData* internal_default_instance() {
    return reinterpret_cast<const ResponseMetaData*>(
               &_ResponseMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ResponseMetaData* other);
  friend void swap(ResponseMetaData& a, ResponseMetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseMetaData* New() const final {
    return CreateMaybeMessage<ResponseMetaData>(nullptr);
  }

  ResponseMetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseMetaData& from);
  void MergeFrom(const ResponseMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool data_loss_from_other_row = 3;
  void clear_data_loss_from_other_row();
  static const int kDataLossFromOtherRowFieldNumber = 3;
  bool data_loss_from_other_row() const;
  void set_data_loss_from_other_row(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.ResponseMetaData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool data_loss_from_other_row_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DimensionHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.DimensionHeader) */ {
 public:
  DimensionHeader();
  virtual ~DimensionHeader();

  DimensionHeader(const DimensionHeader& from);

  inline DimensionHeader& operator=(const DimensionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DimensionHeader(DimensionHeader&& from) noexcept
    : DimensionHeader() {
    *this = ::std::move(from);
  }

  inline DimensionHeader& operator=(DimensionHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DimensionHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionHeader* internal_default_instance() {
    return reinterpret_cast<const DimensionHeader*>(
               &_DimensionHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DimensionHeader* other);
  friend void swap(DimensionHeader& a, DimensionHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DimensionHeader* New() const final {
    return CreateMaybeMessage<DimensionHeader>(nullptr);
  }

  DimensionHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DimensionHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DimensionHeader& from);
  void MergeFrom(const DimensionHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.DimensionHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class MetricHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.MetricHeader) */ {
 public:
  MetricHeader();
  virtual ~MetricHeader();

  MetricHeader(const MetricHeader& from);

  inline MetricHeader& operator=(const MetricHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricHeader(MetricHeader&& from) noexcept
    : MetricHeader() {
    *this = ::std::move(from);
  }

  inline MetricHeader& operator=(MetricHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MetricHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricHeader* internal_default_instance() {
    return reinterpret_cast<const MetricHeader*>(
               &_MetricHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(MetricHeader* other);
  friend void swap(MetricHeader& a, MetricHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricHeader* New() const final {
    return CreateMaybeMessage<MetricHeader>(nullptr);
  }

  MetricHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetricHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetricHeader& from);
  void MergeFrom(const MetricHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.analytics.data.v1alpha.MetricType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::analytics::data::v1alpha::MetricType type() const;
  void set_type(::google::analytics::data::v1alpha::MetricType value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.MetricHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class PivotHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.PivotHeader) */ {
 public:
  PivotHeader();
  virtual ~PivotHeader();

  PivotHeader(const PivotHeader& from);

  inline PivotHeader& operator=(const PivotHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PivotHeader(PivotHeader&& from) noexcept
    : PivotHeader() {
    *this = ::std::move(from);
  }

  inline PivotHeader& operator=(PivotHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PivotHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PivotHeader* internal_default_instance() {
    return reinterpret_cast<const PivotHeader*>(
               &_PivotHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(PivotHeader* other);
  friend void swap(PivotHeader& a, PivotHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PivotHeader* New() const final {
    return CreateMaybeMessage<PivotHeader>(nullptr);
  }

  PivotHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PivotHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PivotHeader& from);
  void MergeFrom(const PivotHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PivotHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.analytics.data.v1alpha.PivotDimensionHeader pivot_dimension_headers = 1;
  int pivot_dimension_headers_size() const;
  void clear_pivot_dimension_headers();
  static const int kPivotDimensionHeadersFieldNumber = 1;
  ::google::analytics::data::v1alpha::PivotDimensionHeader* mutable_pivot_dimension_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::PivotDimensionHeader >*
      mutable_pivot_dimension_headers();
  const ::google::analytics::data::v1alpha::PivotDimensionHeader& pivot_dimension_headers(int index) const;
  ::google::analytics::data::v1alpha::PivotDimensionHeader* add_pivot_dimension_headers();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::PivotDimensionHeader >&
      pivot_dimension_headers() const;

  // int32 row_count = 2;
  void clear_row_count();
  static const int kRowCountFieldNumber = 2;
  ::google::protobuf::int32 row_count() const;
  void set_row_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.PivotHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::PivotDimensionHeader > pivot_dimension_headers_;
  ::google::protobuf::int32 row_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class PivotDimensionHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.PivotDimensionHeader) */ {
 public:
  PivotDimensionHeader();
  virtual ~PivotDimensionHeader();

  PivotDimensionHeader(const PivotDimensionHeader& from);

  inline PivotDimensionHeader& operator=(const PivotDimensionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PivotDimensionHeader(PivotDimensionHeader&& from) noexcept
    : PivotDimensionHeader() {
    *this = ::std::move(from);
  }

  inline PivotDimensionHeader& operator=(PivotDimensionHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PivotDimensionHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PivotDimensionHeader* internal_default_instance() {
    return reinterpret_cast<const PivotDimensionHeader*>(
               &_PivotDimensionHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(PivotDimensionHeader* other);
  friend void swap(PivotDimensionHeader& a, PivotDimensionHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PivotDimensionHeader* New() const final {
    return CreateMaybeMessage<PivotDimensionHeader>(nullptr);
  }

  PivotDimensionHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PivotDimensionHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PivotDimensionHeader& from);
  void MergeFrom(const PivotDimensionHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PivotDimensionHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.analytics.data.v1alpha.DimensionValue dimension_values = 1;
  int dimension_values_size() const;
  void clear_dimension_values();
  static const int kDimensionValuesFieldNumber = 1;
  ::google::analytics::data::v1alpha::DimensionValue* mutable_dimension_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >*
      mutable_dimension_values();
  const ::google::analytics::data::v1alpha::DimensionValue& dimension_values(int index) const;
  ::google::analytics::data::v1alpha::DimensionValue* add_dimension_values();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >&
      dimension_values() const;

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.PivotDimensionHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue > dimension_values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Row final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Row* other);
  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const final {
    return CreateMaybeMessage<Row>(nullptr);
  }

  Row* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.analytics.data.v1alpha.DimensionValue dimension_values = 1;
  int dimension_values_size() const;
  void clear_dimension_values();
  static const int kDimensionValuesFieldNumber = 1;
  ::google::analytics::data::v1alpha::DimensionValue* mutable_dimension_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >*
      mutable_dimension_values();
  const ::google::analytics::data::v1alpha::DimensionValue& dimension_values(int index) const;
  ::google::analytics::data::v1alpha::DimensionValue* add_dimension_values();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >&
      dimension_values() const;

  // repeated .google.analytics.data.v1alpha.MetricValue metric_values = 2;
  int metric_values_size() const;
  void clear_metric_values();
  static const int kMetricValuesFieldNumber = 2;
  ::google::analytics::data::v1alpha::MetricValue* mutable_metric_values(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::MetricValue >*
      mutable_metric_values();
  const ::google::analytics::data::v1alpha::MetricValue& metric_values(int index) const;
  ::google::analytics::data::v1alpha::MetricValue* add_metric_values();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::MetricValue >&
      metric_values() const;

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.Row)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue > dimension_values_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::MetricValue > metric_values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DimensionValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.DimensionValue) */ {
 public:
  DimensionValue();
  virtual ~DimensionValue();

  DimensionValue(const DimensionValue& from);

  inline DimensionValue& operator=(const DimensionValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DimensionValue(DimensionValue&& from) noexcept
    : DimensionValue() {
    *this = ::std::move(from);
  }

  inline DimensionValue& operator=(DimensionValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DimensionValue& default_instance();

  enum OneValueCase {
    kValue = 1,
    ONE_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionValue* internal_default_instance() {
    return reinterpret_cast<const DimensionValue*>(
               &_DimensionValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(DimensionValue* other);
  friend void swap(DimensionValue& a, DimensionValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DimensionValue* New() const final {
    return CreateMaybeMessage<DimensionValue>(nullptr);
  }

  DimensionValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DimensionValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DimensionValue& from);
  void MergeFrom(const DimensionValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  void clear_one_value();
  OneValueCase one_value_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.DimensionValue)
 private:
  class HasBitSetters;
  void set_has_value();

  inline bool has_one_value() const;
  inline void clear_has_one_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OneValueUnion {
    OneValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr value_;
  } one_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class MetricValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.MetricValue) */ {
 public:
  MetricValue();
  virtual ~MetricValue();

  MetricValue(const MetricValue& from);

  inline MetricValue& operator=(const MetricValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricValue(MetricValue&& from) noexcept
    : MetricValue() {
    *this = ::std::move(from);
  }

  inline MetricValue& operator=(MetricValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MetricValue& default_instance();

  enum OneValueCase {
    kValue = 4,
    ONE_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricValue* internal_default_instance() {
    return reinterpret_cast<const MetricValue*>(
               &_MetricValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(MetricValue* other);
  friend void swap(MetricValue& a, MetricValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricValue* New() const final {
    return CreateMaybeMessage<MetricValue>(nullptr);
  }

  MetricValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetricValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetricValue& from);
  void MergeFrom(const MetricValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 4;
  private:
  bool has_value() const;
  public:
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  void clear_one_value();
  OneValueCase one_value_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.MetricValue)
 private:
  class HasBitSetters;
  void set_has_value();

  inline bool has_one_value() const;
  inline void clear_has_one_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OneValueUnion {
    OneValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr value_;
  } one_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class NumericValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.NumericValue) */ {
 public:
  NumericValue();
  virtual ~NumericValue();

  NumericValue(const NumericValue& from);

  inline NumericValue& operator=(const NumericValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NumericValue(NumericValue&& from) noexcept
    : NumericValue() {
    *this = ::std::move(from);
  }

  inline NumericValue& operator=(NumericValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NumericValue& default_instance();

  enum OneValueCase {
    kInt64Value = 1,
    kDoubleValue = 2,
    ONE_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NumericValue* internal_default_instance() {
    return reinterpret_cast<const NumericValue*>(
               &_NumericValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(NumericValue* other);
  friend void swap(NumericValue& a, NumericValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NumericValue* New() const final {
    return CreateMaybeMessage<NumericValue>(nullptr);
  }

  NumericValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NumericValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NumericValue& from);
  void MergeFrom(const NumericValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumericValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 int64_value = 1;
  private:
  bool has_int64_value() const;
  public:
  void clear_int64_value();
  static const int kInt64ValueFieldNumber = 1;
  ::google::protobuf::int64 int64_value() const;
  void set_int64_value(::google::protobuf::int64 value);

  // double double_value = 2;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 2;
  double double_value() const;
  void set_double_value(double value);

  void clear_one_value();
  OneValueCase one_value_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.NumericValue)
 private:
  class HasBitSetters;
  void set_has_int64_value();
  void set_has_double_value();

  inline bool has_one_value() const;
  inline void clear_has_one_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OneValueUnion {
    OneValueUnion() {}
    ::google::protobuf::int64 int64_value_;
    double double_value_;
  } one_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class PropertyQuota final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.PropertyQuota) */ {
 public:
  PropertyQuota();
  virtual ~PropertyQuota();

  PropertyQuota(const PropertyQuota& from);

  inline PropertyQuota& operator=(const PropertyQuota& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertyQuota(PropertyQuota&& from) noexcept
    : PropertyQuota() {
    *this = ::std::move(from);
  }

  inline PropertyQuota& operator=(PropertyQuota&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PropertyQuota& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertyQuota* internal_default_instance() {
    return reinterpret_cast<const PropertyQuota*>(
               &_PropertyQuota_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(PropertyQuota* other);
  friend void swap(PropertyQuota& a, PropertyQuota& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertyQuota* New() const final {
    return CreateMaybeMessage<PropertyQuota>(nullptr);
  }

  PropertyQuota* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertyQuota>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertyQuota& from);
  void MergeFrom(const PropertyQuota& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyQuota* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.analytics.data.v1alpha.QuotaStatus tokens_per_day = 1;
  bool has_tokens_per_day() const;
  void clear_tokens_per_day();
  static const int kTokensPerDayFieldNumber = 1;
  const ::google::analytics::data::v1alpha::QuotaStatus& tokens_per_day() const;
  ::google::analytics::data::v1alpha::QuotaStatus* release_tokens_per_day();
  ::google::analytics::data::v1alpha::QuotaStatus* mutable_tokens_per_day();
  void set_allocated_tokens_per_day(::google::analytics::data::v1alpha::QuotaStatus* tokens_per_day);

  // .google.analytics.data.v1alpha.QuotaStatus tokens_per_hour = 2;
  bool has_tokens_per_hour() const;
  void clear_tokens_per_hour();
  static const int kTokensPerHourFieldNumber = 2;
  const ::google::analytics::data::v1alpha::QuotaStatus& tokens_per_hour() const;
  ::google::analytics::data::v1alpha::QuotaStatus* release_tokens_per_hour();
  ::google::analytics::data::v1alpha::QuotaStatus* mutable_tokens_per_hour();
  void set_allocated_tokens_per_hour(::google::analytics::data::v1alpha::QuotaStatus* tokens_per_hour);

  // .google.analytics.data.v1alpha.QuotaStatus concurrent_requests = 3;
  bool has_concurrent_requests() const;
  void clear_concurrent_requests();
  static const int kConcurrentRequestsFieldNumber = 3;
  const ::google::analytics::data::v1alpha::QuotaStatus& concurrent_requests() const;
  ::google::analytics::data::v1alpha::QuotaStatus* release_concurrent_requests();
  ::google::analytics::data::v1alpha::QuotaStatus* mutable_concurrent_requests();
  void set_allocated_concurrent_requests(::google::analytics::data::v1alpha::QuotaStatus* concurrent_requests);

  // .google.analytics.data.v1alpha.QuotaStatus server_errors_per_project_per_hour = 4;
  bool has_server_errors_per_project_per_hour() const;
  void clear_server_errors_per_project_per_hour();
  static const int kServerErrorsPerProjectPerHourFieldNumber = 4;
  const ::google::analytics::data::v1alpha::QuotaStatus& server_errors_per_project_per_hour() const;
  ::google::analytics::data::v1alpha::QuotaStatus* release_server_errors_per_project_per_hour();
  ::google::analytics::data::v1alpha::QuotaStatus* mutable_server_errors_per_project_per_hour();
  void set_allocated_server_errors_per_project_per_hour(::google::analytics::data::v1alpha::QuotaStatus* server_errors_per_project_per_hour);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.PropertyQuota)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::analytics::data::v1alpha::QuotaStatus* tokens_per_day_;
  ::google::analytics::data::v1alpha::QuotaStatus* tokens_per_hour_;
  ::google::analytics::data::v1alpha::QuotaStatus* concurrent_requests_;
  ::google::analytics::data::v1alpha::QuotaStatus* server_errors_per_project_per_hour_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class QuotaStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.QuotaStatus) */ {
 public:
  QuotaStatus();
  virtual ~QuotaStatus();

  QuotaStatus(const QuotaStatus& from);

  inline QuotaStatus& operator=(const QuotaStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuotaStatus(QuotaStatus&& from) noexcept
    : QuotaStatus() {
    *this = ::std::move(from);
  }

  inline QuotaStatus& operator=(QuotaStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const QuotaStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuotaStatus* internal_default_instance() {
    return reinterpret_cast<const QuotaStatus*>(
               &_QuotaStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(QuotaStatus* other);
  friend void swap(QuotaStatus& a, QuotaStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuotaStatus* New() const final {
    return CreateMaybeMessage<QuotaStatus>(nullptr);
  }

  QuotaStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuotaStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuotaStatus& from);
  void MergeFrom(const QuotaStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 consumed = 1;
  void clear_consumed();
  static const int kConsumedFieldNumber = 1;
  ::google::protobuf::int32 consumed() const;
  void set_consumed(::google::protobuf::int32 value);

  // int32 remaining = 2;
  void clear_remaining();
  static const int kRemainingFieldNumber = 2;
  ::google::protobuf::int32 remaining() const;
  void set_remaining(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.QuotaStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 consumed_;
  ::google::protobuf::int32 remaining_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DimensionMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.DimensionMetadata) */ {
 public:
  DimensionMetadata();
  virtual ~DimensionMetadata();

  DimensionMetadata(const DimensionMetadata& from);

  inline DimensionMetadata& operator=(const DimensionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DimensionMetadata(DimensionMetadata&& from) noexcept
    : DimensionMetadata() {
    *this = ::std::move(from);
  }

  inline DimensionMetadata& operator=(DimensionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DimensionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimensionMetadata* internal_default_instance() {
    return reinterpret_cast<const DimensionMetadata*>(
               &_DimensionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(DimensionMetadata* other);
  friend void swap(DimensionMetadata& a, DimensionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DimensionMetadata* New() const final {
    return CreateMaybeMessage<DimensionMetadata>(nullptr);
  }

  DimensionMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DimensionMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DimensionMetadata& from);
  void MergeFrom(const DimensionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string deprecated_api_names = 4;
  int deprecated_api_names_size() const;
  void clear_deprecated_api_names();
  static const int kDeprecatedApiNamesFieldNumber = 4;
  const ::std::string& deprecated_api_names(int index) const;
  ::std::string* mutable_deprecated_api_names(int index);
  void set_deprecated_api_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_deprecated_api_names(int index, ::std::string&& value);
  #endif
  void set_deprecated_api_names(int index, const char* value);
  void set_deprecated_api_names(int index, const char* value, size_t size);
  ::std::string* add_deprecated_api_names();
  void add_deprecated_api_names(const ::std::string& value);
  #if LANG_CXX11
  void add_deprecated_api_names(::std::string&& value);
  #endif
  void add_deprecated_api_names(const char* value);
  void add_deprecated_api_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& deprecated_api_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_deprecated_api_names();

  // string api_name = 1;
  void clear_api_name();
  static const int kApiNameFieldNumber = 1;
  const ::std::string& api_name() const;
  void set_api_name(const ::std::string& value);
  #if LANG_CXX11
  void set_api_name(::std::string&& value);
  #endif
  void set_api_name(const char* value);
  void set_api_name(const char* value, size_t size);
  ::std::string* mutable_api_name();
  ::std::string* release_api_name();
  void set_allocated_api_name(::std::string* api_name);

  // string ui_name = 2;
  void clear_ui_name();
  static const int kUiNameFieldNumber = 2;
  const ::std::string& ui_name() const;
  void set_ui_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ui_name(::std::string&& value);
  #endif
  void set_ui_name(const char* value);
  void set_ui_name(const char* value, size_t size);
  ::std::string* mutable_ui_name();
  ::std::string* release_ui_name();
  void set_allocated_ui_name(::std::string* ui_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // bool custom_definition = 5;
  void clear_custom_definition();
  static const int kCustomDefinitionFieldNumber = 5;
  bool custom_definition() const;
  void set_custom_definition(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.DimensionMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> deprecated_api_names_;
  ::google::protobuf::internal::ArenaStringPtr api_name_;
  ::google::protobuf::internal::ArenaStringPtr ui_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  bool custom_definition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// -------------------------------------------------------------------

class MetricMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.data.v1alpha.MetricMetadata) */ {
 public:
  MetricMetadata();
  virtual ~MetricMetadata();

  MetricMetadata(const MetricMetadata& from);

  inline MetricMetadata& operator=(const MetricMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetricMetadata(MetricMetadata&& from) noexcept
    : MetricMetadata() {
    *this = ::std::move(from);
  }

  inline MetricMetadata& operator=(MetricMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MetricMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricMetadata* internal_default_instance() {
    return reinterpret_cast<const MetricMetadata*>(
               &_MetricMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(MetricMetadata* other);
  friend void swap(MetricMetadata& a, MetricMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricMetadata* New() const final {
    return CreateMaybeMessage<MetricMetadata>(nullptr);
  }

  MetricMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetricMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetricMetadata& from);
  void MergeFrom(const MetricMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string deprecated_api_names = 4;
  int deprecated_api_names_size() const;
  void clear_deprecated_api_names();
  static const int kDeprecatedApiNamesFieldNumber = 4;
  const ::std::string& deprecated_api_names(int index) const;
  ::std::string* mutable_deprecated_api_names(int index);
  void set_deprecated_api_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_deprecated_api_names(int index, ::std::string&& value);
  #endif
  void set_deprecated_api_names(int index, const char* value);
  void set_deprecated_api_names(int index, const char* value, size_t size);
  ::std::string* add_deprecated_api_names();
  void add_deprecated_api_names(const ::std::string& value);
  #if LANG_CXX11
  void add_deprecated_api_names(::std::string&& value);
  #endif
  void add_deprecated_api_names(const char* value);
  void add_deprecated_api_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& deprecated_api_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_deprecated_api_names();

  // string api_name = 1;
  void clear_api_name();
  static const int kApiNameFieldNumber = 1;
  const ::std::string& api_name() const;
  void set_api_name(const ::std::string& value);
  #if LANG_CXX11
  void set_api_name(::std::string&& value);
  #endif
  void set_api_name(const char* value);
  void set_api_name(const char* value, size_t size);
  ::std::string* mutable_api_name();
  ::std::string* release_api_name();
  void set_allocated_api_name(::std::string* api_name);

  // string ui_name = 2;
  void clear_ui_name();
  static const int kUiNameFieldNumber = 2;
  const ::std::string& ui_name() const;
  void set_ui_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ui_name(::std::string&& value);
  #endif
  void set_ui_name(const char* value);
  void set_ui_name(const char* value, size_t size);
  ::std::string* mutable_ui_name();
  ::std::string* release_ui_name();
  void set_allocated_ui_name(::std::string* ui_name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string expression = 6;
  void clear_expression();
  static const int kExpressionFieldNumber = 6;
  const ::std::string& expression() const;
  void set_expression(const ::std::string& value);
  #if LANG_CXX11
  void set_expression(::std::string&& value);
  #endif
  void set_expression(const char* value);
  void set_expression(const char* value, size_t size);
  ::std::string* mutable_expression();
  ::std::string* release_expression();
  void set_allocated_expression(::std::string* expression);

  // .google.analytics.data.v1alpha.MetricType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::analytics::data::v1alpha::MetricType type() const;
  void set_type(::google::analytics::data::v1alpha::MetricType value);

  // bool custom_definition = 7;
  void clear_custom_definition();
  static const int kCustomDefinitionFieldNumber = 7;
  bool custom_definition() const;
  void set_custom_definition(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.data.v1alpha.MetricMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> deprecated_api_names_;
  ::google::protobuf::internal::ArenaStringPtr api_name_;
  ::google::protobuf::internal::ArenaStringPtr ui_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr expression_;
  int type_;
  bool custom_definition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DateRange

// string start_date = 1;
inline void DateRange::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DateRange::start_date() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DateRange.start_date)
  return start_date_.GetNoArena();
}
inline void DateRange::set_start_date(const ::std::string& value) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DateRange.start_date)
}
#if LANG_CXX11
inline void DateRange::set_start_date(::std::string&& value) {
  
  start_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DateRange.start_date)
}
#endif
inline void DateRange::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DateRange.start_date)
}
inline void DateRange::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DateRange.start_date)
}
inline ::std::string* DateRange::mutable_start_date() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DateRange.start_date)
  return start_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DateRange::release_start_date() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DateRange.start_date)
  
  return start_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DateRange::set_allocated_start_date(::std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DateRange.start_date)
}

// string end_date = 2;
inline void DateRange::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DateRange::end_date() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DateRange.end_date)
  return end_date_.GetNoArena();
}
inline void DateRange::set_end_date(const ::std::string& value) {
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DateRange.end_date)
}
#if LANG_CXX11
inline void DateRange::set_end_date(::std::string&& value) {
  
  end_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DateRange.end_date)
}
#endif
inline void DateRange::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DateRange.end_date)
}
inline void DateRange::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DateRange.end_date)
}
inline ::std::string* DateRange::mutable_end_date() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DateRange.end_date)
  return end_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DateRange::release_end_date() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DateRange.end_date)
  
  return end_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DateRange::set_allocated_end_date(::std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DateRange.end_date)
}

// string name = 3;
inline void DateRange::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DateRange::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DateRange.name)
  return name_.GetNoArena();
}
inline void DateRange::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DateRange.name)
}
#if LANG_CXX11
inline void DateRange::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DateRange.name)
}
#endif
inline void DateRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DateRange.name)
}
inline void DateRange::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DateRange.name)
}
inline ::std::string* DateRange::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DateRange.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DateRange::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DateRange.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DateRange::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DateRange.name)
}

// -------------------------------------------------------------------

// Entity

// string property_id = 1;
inline void Entity::clear_property_id() {
  property_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Entity::property_id() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Entity.property_id)
  return property_id_.GetNoArena();
}
inline void Entity::set_property_id(const ::std::string& value) {
  
  property_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Entity.property_id)
}
#if LANG_CXX11
inline void Entity::set_property_id(::std::string&& value) {
  
  property_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Entity.property_id)
}
#endif
inline void Entity::set_property_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  property_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Entity.property_id)
}
inline void Entity::set_property_id(const char* value, size_t size) {
  
  property_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Entity.property_id)
}
inline ::std::string* Entity::mutable_property_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Entity.property_id)
  return property_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Entity::release_property_id() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Entity.property_id)
  
  return property_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Entity::set_allocated_property_id(::std::string* property_id) {
  if (property_id != nullptr) {
    
  } else {
    
  }
  property_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Entity.property_id)
}

// -------------------------------------------------------------------

// Dimension

// string name = 1;
inline void Dimension::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Dimension::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Dimension.name)
  return name_.GetNoArena();
}
inline void Dimension::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Dimension.name)
}
#if LANG_CXX11
inline void Dimension::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Dimension.name)
}
#endif
inline void Dimension::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Dimension.name)
}
inline void Dimension::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Dimension.name)
}
inline ::std::string* Dimension::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Dimension.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Dimension::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Dimension.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Dimension::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Dimension.name)
}

// .google.analytics.data.v1alpha.DimensionExpression dimension_expression = 2;
inline bool Dimension::has_dimension_expression() const {
  return this != internal_default_instance() && dimension_expression_ != nullptr;
}
inline void Dimension::clear_dimension_expression() {
  if (GetArenaNoVirtual() == nullptr && dimension_expression_ != nullptr) {
    delete dimension_expression_;
  }
  dimension_expression_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::DimensionExpression& Dimension::dimension_expression() const {
  const ::google::analytics::data::v1alpha::DimensionExpression* p = dimension_expression_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Dimension.dimension_expression)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::DimensionExpression*>(
      &::google::analytics::data::v1alpha::_DimensionExpression_default_instance_);
}
inline ::google::analytics::data::v1alpha::DimensionExpression* Dimension::release_dimension_expression() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Dimension.dimension_expression)
  
  ::google::analytics::data::v1alpha::DimensionExpression* temp = dimension_expression_;
  dimension_expression_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::DimensionExpression* Dimension::mutable_dimension_expression() {
  
  if (dimension_expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::DimensionExpression>(GetArenaNoVirtual());
    dimension_expression_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Dimension.dimension_expression)
  return dimension_expression_;
}
inline void Dimension::set_allocated_dimension_expression(::google::analytics::data::v1alpha::DimensionExpression* dimension_expression) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimension_expression_;
  }
  if (dimension_expression) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimension_expression = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dimension_expression, submessage_arena);
    }
    
  } else {
    
  }
  dimension_expression_ = dimension_expression;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Dimension.dimension_expression)
}

// -------------------------------------------------------------------

// DimensionExpression_CaseExpression

// string dimension_name = 1;
inline void DimensionExpression_CaseExpression::clear_dimension_name() {
  dimension_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DimensionExpression_CaseExpression::dimension_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
  return dimension_name_.GetNoArena();
}
inline void DimensionExpression_CaseExpression::set_dimension_name(const ::std::string& value) {
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
}
#if LANG_CXX11
inline void DimensionExpression_CaseExpression::set_dimension_name(::std::string&& value) {
  
  dimension_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
}
#endif
inline void DimensionExpression_CaseExpression::set_dimension_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
}
inline void DimensionExpression_CaseExpression::set_dimension_name(const char* value, size_t size) {
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
}
inline ::std::string* DimensionExpression_CaseExpression::mutable_dimension_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
  return dimension_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DimensionExpression_CaseExpression::release_dimension_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
  
  return dimension_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DimensionExpression_CaseExpression::set_allocated_dimension_name(::std::string* dimension_name) {
  if (dimension_name != nullptr) {
    
  } else {
    
  }
  dimension_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimension_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DimensionExpression.CaseExpression.dimension_name)
}

// -------------------------------------------------------------------

// DimensionExpression_ConcatenateExpression

// repeated string dimension_names = 1;
inline int DimensionExpression_ConcatenateExpression::dimension_names_size() const {
  return dimension_names_.size();
}
inline void DimensionExpression_ConcatenateExpression::clear_dimension_names() {
  dimension_names_.Clear();
}
inline const ::std::string& DimensionExpression_ConcatenateExpression::dimension_names(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
  return dimension_names_.Get(index);
}
inline ::std::string* DimensionExpression_ConcatenateExpression::mutable_dimension_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
  return dimension_names_.Mutable(index);
}
inline void DimensionExpression_ConcatenateExpression::set_dimension_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
  dimension_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DimensionExpression_ConcatenateExpression::set_dimension_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
  dimension_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DimensionExpression_ConcatenateExpression::set_dimension_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dimension_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
}
inline void DimensionExpression_ConcatenateExpression::set_dimension_names(int index, const char* value, size_t size) {
  dimension_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
}
inline ::std::string* DimensionExpression_ConcatenateExpression::add_dimension_names() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
  return dimension_names_.Add();
}
inline void DimensionExpression_ConcatenateExpression::add_dimension_names(const ::std::string& value) {
  dimension_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
}
#if LANG_CXX11
inline void DimensionExpression_ConcatenateExpression::add_dimension_names(::std::string&& value) {
  dimension_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
}
#endif
inline void DimensionExpression_ConcatenateExpression::add_dimension_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dimension_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
}
inline void DimensionExpression_ConcatenateExpression::add_dimension_names(const char* value, size_t size) {
  dimension_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DimensionExpression_ConcatenateExpression::dimension_names() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
  return dimension_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DimensionExpression_ConcatenateExpression::mutable_dimension_names() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.dimension_names)
  return &dimension_names_;
}

// string delimiter = 2;
inline void DimensionExpression_ConcatenateExpression::clear_delimiter() {
  delimiter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DimensionExpression_ConcatenateExpression::delimiter() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
  return delimiter_.GetNoArena();
}
inline void DimensionExpression_ConcatenateExpression::set_delimiter(const ::std::string& value) {
  
  delimiter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
}
#if LANG_CXX11
inline void DimensionExpression_ConcatenateExpression::set_delimiter(::std::string&& value) {
  
  delimiter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
}
#endif
inline void DimensionExpression_ConcatenateExpression::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delimiter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
}
inline void DimensionExpression_ConcatenateExpression::set_delimiter(const char* value, size_t size) {
  
  delimiter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
}
inline ::std::string* DimensionExpression_ConcatenateExpression::mutable_delimiter() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
  return delimiter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DimensionExpression_ConcatenateExpression::release_delimiter() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
  
  return delimiter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DimensionExpression_ConcatenateExpression::set_allocated_delimiter(::std::string* delimiter) {
  if (delimiter != nullptr) {
    
  } else {
    
  }
  delimiter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delimiter);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.delimiter)
}

// -------------------------------------------------------------------

// DimensionExpression

// .google.analytics.data.v1alpha.DimensionExpression.CaseExpression lower_case = 4;
inline bool DimensionExpression::has_lower_case() const {
  return one_expression_case() == kLowerCase;
}
inline void DimensionExpression::set_has_lower_case() {
  _oneof_case_[0] = kLowerCase;
}
inline void DimensionExpression::clear_lower_case() {
  if (has_lower_case()) {
    delete one_expression_.lower_case_;
    clear_has_one_expression();
  }
}
inline ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* DimensionExpression::release_lower_case() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionExpression.lower_case)
  if (has_lower_case()) {
    clear_has_one_expression();
      ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* temp = one_expression_.lower_case_;
    one_expression_.lower_case_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression& DimensionExpression::lower_case() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionExpression.lower_case)
  return has_lower_case()
      ? *one_expression_.lower_case_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression*>(&::google::analytics::data::v1alpha::_DimensionExpression_CaseExpression_default_instance_);
}
inline ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* DimensionExpression::mutable_lower_case() {
  if (!has_lower_case()) {
    clear_one_expression();
    set_has_lower_case();
    one_expression_.lower_case_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionExpression.lower_case)
  return one_expression_.lower_case_;
}

// .google.analytics.data.v1alpha.DimensionExpression.CaseExpression upper_case = 5;
inline bool DimensionExpression::has_upper_case() const {
  return one_expression_case() == kUpperCase;
}
inline void DimensionExpression::set_has_upper_case() {
  _oneof_case_[0] = kUpperCase;
}
inline void DimensionExpression::clear_upper_case() {
  if (has_upper_case()) {
    delete one_expression_.upper_case_;
    clear_has_one_expression();
  }
}
inline ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* DimensionExpression::release_upper_case() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionExpression.upper_case)
  if (has_upper_case()) {
    clear_has_one_expression();
      ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* temp = one_expression_.upper_case_;
    one_expression_.upper_case_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression& DimensionExpression::upper_case() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionExpression.upper_case)
  return has_upper_case()
      ? *one_expression_.upper_case_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression*>(&::google::analytics::data::v1alpha::_DimensionExpression_CaseExpression_default_instance_);
}
inline ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression* DimensionExpression::mutable_upper_case() {
  if (!has_upper_case()) {
    clear_one_expression();
    set_has_upper_case();
    one_expression_.upper_case_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::DimensionExpression_CaseExpression >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionExpression.upper_case)
  return one_expression_.upper_case_;
}

// .google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression concatenate = 6;
inline bool DimensionExpression::has_concatenate() const {
  return one_expression_case() == kConcatenate;
}
inline void DimensionExpression::set_has_concatenate() {
  _oneof_case_[0] = kConcatenate;
}
inline void DimensionExpression::clear_concatenate() {
  if (has_concatenate()) {
    delete one_expression_.concatenate_;
    clear_has_one_expression();
  }
}
inline ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* DimensionExpression::release_concatenate() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionExpression.concatenate)
  if (has_concatenate()) {
    clear_has_one_expression();
      ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* temp = one_expression_.concatenate_;
    one_expression_.concatenate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression& DimensionExpression::concatenate() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionExpression.concatenate)
  return has_concatenate()
      ? *one_expression_.concatenate_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression*>(&::google::analytics::data::v1alpha::_DimensionExpression_ConcatenateExpression_default_instance_);
}
inline ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression* DimensionExpression::mutable_concatenate() {
  if (!has_concatenate()) {
    clear_one_expression();
    set_has_concatenate();
    one_expression_.concatenate_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::DimensionExpression_ConcatenateExpression >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionExpression.concatenate)
  return one_expression_.concatenate_;
}

inline bool DimensionExpression::has_one_expression() const {
  return one_expression_case() != ONE_EXPRESSION_NOT_SET;
}
inline void DimensionExpression::clear_has_one_expression() {
  _oneof_case_[0] = ONE_EXPRESSION_NOT_SET;
}
inline DimensionExpression::OneExpressionCase DimensionExpression::one_expression_case() const {
  return DimensionExpression::OneExpressionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Metric.name)
  return name_.GetNoArena();
}
inline void Metric::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Metric.name)
}
#if LANG_CXX11
inline void Metric::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Metric.name)
}
#endif
inline void Metric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Metric.name)
}
inline void Metric::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Metric.name)
}
inline ::std::string* Metric::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Metric.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Metric.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Metric.name)
}

// string expression = 2;
inline void Metric::clear_expression() {
  expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metric::expression() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Metric.expression)
  return expression_.GetNoArena();
}
inline void Metric::set_expression(const ::std::string& value) {
  
  expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Metric.expression)
}
#if LANG_CXX11
inline void Metric::set_expression(::std::string&& value) {
  
  expression_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Metric.expression)
}
#endif
inline void Metric::set_expression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Metric.expression)
}
inline void Metric::set_expression(const char* value, size_t size) {
  
  expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Metric.expression)
}
inline ::std::string* Metric::mutable_expression() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Metric.expression)
  return expression_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_expression() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Metric.expression)
  
  return expression_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_expression(::std::string* expression) {
  if (expression != nullptr) {
    
  } else {
    
  }
  expression_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expression);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Metric.expression)
}

// bool invisible = 3;
inline void Metric::clear_invisible() {
  invisible_ = false;
}
inline bool Metric::invisible() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Metric.invisible)
  return invisible_;
}
inline void Metric::set_invisible(bool value) {
  
  invisible_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Metric.invisible)
}

// -------------------------------------------------------------------

// FilterExpression

// .google.analytics.data.v1alpha.FilterExpressionList and_group = 1;
inline bool FilterExpression::has_and_group() const {
  return expr_case() == kAndGroup;
}
inline void FilterExpression::set_has_and_group() {
  _oneof_case_[0] = kAndGroup;
}
inline void FilterExpression::clear_and_group() {
  if (has_and_group()) {
    delete expr_.and_group_;
    clear_has_expr();
  }
}
inline ::google::analytics::data::v1alpha::FilterExpressionList* FilterExpression::release_and_group() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.FilterExpression.and_group)
  if (has_and_group()) {
    clear_has_expr();
      ::google::analytics::data::v1alpha::FilterExpressionList* temp = expr_.and_group_;
    expr_.and_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::FilterExpressionList& FilterExpression::and_group() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.FilterExpression.and_group)
  return has_and_group()
      ? *expr_.and_group_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::FilterExpressionList*>(&::google::analytics::data::v1alpha::_FilterExpressionList_default_instance_);
}
inline ::google::analytics::data::v1alpha::FilterExpressionList* FilterExpression::mutable_and_group() {
  if (!has_and_group()) {
    clear_expr();
    set_has_and_group();
    expr_.and_group_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::FilterExpressionList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.FilterExpression.and_group)
  return expr_.and_group_;
}

// .google.analytics.data.v1alpha.FilterExpressionList or_group = 2;
inline bool FilterExpression::has_or_group() const {
  return expr_case() == kOrGroup;
}
inline void FilterExpression::set_has_or_group() {
  _oneof_case_[0] = kOrGroup;
}
inline void FilterExpression::clear_or_group() {
  if (has_or_group()) {
    delete expr_.or_group_;
    clear_has_expr();
  }
}
inline ::google::analytics::data::v1alpha::FilterExpressionList* FilterExpression::release_or_group() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.FilterExpression.or_group)
  if (has_or_group()) {
    clear_has_expr();
      ::google::analytics::data::v1alpha::FilterExpressionList* temp = expr_.or_group_;
    expr_.or_group_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::FilterExpressionList& FilterExpression::or_group() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.FilterExpression.or_group)
  return has_or_group()
      ? *expr_.or_group_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::FilterExpressionList*>(&::google::analytics::data::v1alpha::_FilterExpressionList_default_instance_);
}
inline ::google::analytics::data::v1alpha::FilterExpressionList* FilterExpression::mutable_or_group() {
  if (!has_or_group()) {
    clear_expr();
    set_has_or_group();
    expr_.or_group_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::FilterExpressionList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.FilterExpression.or_group)
  return expr_.or_group_;
}

// .google.analytics.data.v1alpha.FilterExpression not_expression = 3;
inline bool FilterExpression::has_not_expression() const {
  return expr_case() == kNotExpression;
}
inline void FilterExpression::set_has_not_expression() {
  _oneof_case_[0] = kNotExpression;
}
inline void FilterExpression::clear_not_expression() {
  if (has_not_expression()) {
    delete expr_.not_expression_;
    clear_has_expr();
  }
}
inline ::google::analytics::data::v1alpha::FilterExpression* FilterExpression::release_not_expression() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.FilterExpression.not_expression)
  if (has_not_expression()) {
    clear_has_expr();
      ::google::analytics::data::v1alpha::FilterExpression* temp = expr_.not_expression_;
    expr_.not_expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::FilterExpression& FilterExpression::not_expression() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.FilterExpression.not_expression)
  return has_not_expression()
      ? *expr_.not_expression_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::FilterExpression*>(&::google::analytics::data::v1alpha::_FilterExpression_default_instance_);
}
inline ::google::analytics::data::v1alpha::FilterExpression* FilterExpression::mutable_not_expression() {
  if (!has_not_expression()) {
    clear_expr();
    set_has_not_expression();
    expr_.not_expression_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::FilterExpression >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.FilterExpression.not_expression)
  return expr_.not_expression_;
}

// .google.analytics.data.v1alpha.Filter filter = 4;
inline bool FilterExpression::has_filter() const {
  return expr_case() == kFilter;
}
inline void FilterExpression::set_has_filter() {
  _oneof_case_[0] = kFilter;
}
inline void FilterExpression::clear_filter() {
  if (has_filter()) {
    delete expr_.filter_;
    clear_has_expr();
  }
}
inline ::google::analytics::data::v1alpha::Filter* FilterExpression::release_filter() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.FilterExpression.filter)
  if (has_filter()) {
    clear_has_expr();
      ::google::analytics::data::v1alpha::Filter* temp = expr_.filter_;
    expr_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::Filter& FilterExpression::filter() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.FilterExpression.filter)
  return has_filter()
      ? *expr_.filter_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::Filter*>(&::google::analytics::data::v1alpha::_Filter_default_instance_);
}
inline ::google::analytics::data::v1alpha::Filter* FilterExpression::mutable_filter() {
  if (!has_filter()) {
    clear_expr();
    set_has_filter();
    expr_.filter_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::Filter >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.FilterExpression.filter)
  return expr_.filter_;
}

inline bool FilterExpression::has_expr() const {
  return expr_case() != EXPR_NOT_SET;
}
inline void FilterExpression::clear_has_expr() {
  _oneof_case_[0] = EXPR_NOT_SET;
}
inline FilterExpression::ExprCase FilterExpression::expr_case() const {
  return FilterExpression::ExprCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FilterExpressionList

// repeated .google.analytics.data.v1alpha.FilterExpression expressions = 1;
inline int FilterExpressionList::expressions_size() const {
  return expressions_.size();
}
inline void FilterExpressionList::clear_expressions() {
  expressions_.Clear();
}
inline ::google::analytics::data::v1alpha::FilterExpression* FilterExpressionList::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.FilterExpressionList.expressions)
  return expressions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::FilterExpression >*
FilterExpressionList::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.FilterExpressionList.expressions)
  return &expressions_;
}
inline const ::google::analytics::data::v1alpha::FilterExpression& FilterExpressionList::expressions(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.FilterExpressionList.expressions)
  return expressions_.Get(index);
}
inline ::google::analytics::data::v1alpha::FilterExpression* FilterExpressionList::add_expressions() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.FilterExpressionList.expressions)
  return expressions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::FilterExpression >&
FilterExpressionList::expressions() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.FilterExpressionList.expressions)
  return expressions_;
}

// -------------------------------------------------------------------

// Filter_StringFilter

// .google.analytics.data.v1alpha.Filter.StringFilter.MatchType match_type = 1;
inline void Filter_StringFilter::clear_match_type() {
  match_type_ = 0;
}
inline ::google::analytics::data::v1alpha::Filter_StringFilter_MatchType Filter_StringFilter::match_type() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.StringFilter.match_type)
  return static_cast< ::google::analytics::data::v1alpha::Filter_StringFilter_MatchType >(match_type_);
}
inline void Filter_StringFilter::set_match_type(::google::analytics::data::v1alpha::Filter_StringFilter_MatchType value) {
  
  match_type_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.StringFilter.match_type)
}

// string value = 2;
inline void Filter_StringFilter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Filter_StringFilter::value() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.StringFilter.value)
  return value_.GetNoArena();
}
inline void Filter_StringFilter::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.StringFilter.value)
}
#if LANG_CXX11
inline void Filter_StringFilter::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Filter.StringFilter.value)
}
#endif
inline void Filter_StringFilter::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Filter.StringFilter.value)
}
inline void Filter_StringFilter::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Filter.StringFilter.value)
}
inline ::std::string* Filter_StringFilter::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.StringFilter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Filter_StringFilter::release_value() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.StringFilter.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filter_StringFilter::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Filter.StringFilter.value)
}

// bool case_sensitive = 3;
inline void Filter_StringFilter::clear_case_sensitive() {
  case_sensitive_ = false;
}
inline bool Filter_StringFilter::case_sensitive() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.StringFilter.case_sensitive)
  return case_sensitive_;
}
inline void Filter_StringFilter::set_case_sensitive(bool value) {
  
  case_sensitive_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.StringFilter.case_sensitive)
}

// -------------------------------------------------------------------

// Filter_InListFilter

// repeated string values = 1;
inline int Filter_InListFilter::values_size() const {
  return values_.size();
}
inline void Filter_InListFilter::clear_values() {
  values_.Clear();
}
inline const ::std::string& Filter_InListFilter::values(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.InListFilter.values)
  return values_.Get(index);
}
inline ::std::string* Filter_InListFilter::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.InListFilter.values)
  return values_.Mutable(index);
}
inline void Filter_InListFilter::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.InListFilter.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Filter_InListFilter::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.InListFilter.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Filter_InListFilter::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Filter.InListFilter.values)
}
inline void Filter_InListFilter::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Filter.InListFilter.values)
}
inline ::std::string* Filter_InListFilter::add_values() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.data.v1alpha.Filter.InListFilter.values)
  return values_.Add();
}
inline void Filter_InListFilter::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Filter.InListFilter.values)
}
#if LANG_CXX11
inline void Filter_InListFilter::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Filter.InListFilter.values)
}
#endif
inline void Filter_InListFilter::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.data.v1alpha.Filter.InListFilter.values)
}
inline void Filter_InListFilter::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.data.v1alpha.Filter.InListFilter.values)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Filter_InListFilter::values() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.Filter.InListFilter.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Filter_InListFilter::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.Filter.InListFilter.values)
  return &values_;
}

// bool case_sensitive = 2;
inline void Filter_InListFilter::clear_case_sensitive() {
  case_sensitive_ = false;
}
inline bool Filter_InListFilter::case_sensitive() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.InListFilter.case_sensitive)
  return case_sensitive_;
}
inline void Filter_InListFilter::set_case_sensitive(bool value) {
  
  case_sensitive_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.InListFilter.case_sensitive)
}

// -------------------------------------------------------------------

// Filter_NumericFilter

// .google.analytics.data.v1alpha.Filter.NumericFilter.Operation operation = 1;
inline void Filter_NumericFilter::clear_operation() {
  operation_ = 0;
}
inline ::google::analytics::data::v1alpha::Filter_NumericFilter_Operation Filter_NumericFilter::operation() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.NumericFilter.operation)
  return static_cast< ::google::analytics::data::v1alpha::Filter_NumericFilter_Operation >(operation_);
}
inline void Filter_NumericFilter::set_operation(::google::analytics::data::v1alpha::Filter_NumericFilter_Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.NumericFilter.operation)
}

// .google.analytics.data.v1alpha.NumericValue value = 2;
inline bool Filter_NumericFilter::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline void Filter_NumericFilter::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::NumericValue& Filter_NumericFilter::value() const {
  const ::google::analytics::data::v1alpha::NumericValue* p = value_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.NumericFilter.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::NumericValue*>(
      &::google::analytics::data::v1alpha::_NumericValue_default_instance_);
}
inline ::google::analytics::data::v1alpha::NumericValue* Filter_NumericFilter::release_value() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.NumericFilter.value)
  
  ::google::analytics::data::v1alpha::NumericValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::NumericValue* Filter_NumericFilter::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::NumericValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.NumericFilter.value)
  return value_;
}
inline void Filter_NumericFilter::set_allocated_value(::google::analytics::data::v1alpha::NumericValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Filter.NumericFilter.value)
}

// -------------------------------------------------------------------

// Filter_BetweenFilter

// .google.analytics.data.v1alpha.NumericValue from_value = 1;
inline bool Filter_BetweenFilter::has_from_value() const {
  return this != internal_default_instance() && from_value_ != nullptr;
}
inline void Filter_BetweenFilter::clear_from_value() {
  if (GetArenaNoVirtual() == nullptr && from_value_ != nullptr) {
    delete from_value_;
  }
  from_value_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::NumericValue& Filter_BetweenFilter::from_value() const {
  const ::google::analytics::data::v1alpha::NumericValue* p = from_value_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.BetweenFilter.from_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::NumericValue*>(
      &::google::analytics::data::v1alpha::_NumericValue_default_instance_);
}
inline ::google::analytics::data::v1alpha::NumericValue* Filter_BetweenFilter::release_from_value() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.BetweenFilter.from_value)
  
  ::google::analytics::data::v1alpha::NumericValue* temp = from_value_;
  from_value_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::NumericValue* Filter_BetweenFilter::mutable_from_value() {
  
  if (from_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::NumericValue>(GetArenaNoVirtual());
    from_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.BetweenFilter.from_value)
  return from_value_;
}
inline void Filter_BetweenFilter::set_allocated_from_value(::google::analytics::data::v1alpha::NumericValue* from_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_value_;
  }
  if (from_value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_value, submessage_arena);
    }
    
  } else {
    
  }
  from_value_ = from_value;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Filter.BetweenFilter.from_value)
}

// .google.analytics.data.v1alpha.NumericValue to_value = 2;
inline bool Filter_BetweenFilter::has_to_value() const {
  return this != internal_default_instance() && to_value_ != nullptr;
}
inline void Filter_BetweenFilter::clear_to_value() {
  if (GetArenaNoVirtual() == nullptr && to_value_ != nullptr) {
    delete to_value_;
  }
  to_value_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::NumericValue& Filter_BetweenFilter::to_value() const {
  const ::google::analytics::data::v1alpha::NumericValue* p = to_value_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.BetweenFilter.to_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::NumericValue*>(
      &::google::analytics::data::v1alpha::_NumericValue_default_instance_);
}
inline ::google::analytics::data::v1alpha::NumericValue* Filter_BetweenFilter::release_to_value() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.BetweenFilter.to_value)
  
  ::google::analytics::data::v1alpha::NumericValue* temp = to_value_;
  to_value_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::NumericValue* Filter_BetweenFilter::mutable_to_value() {
  
  if (to_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::NumericValue>(GetArenaNoVirtual());
    to_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.BetweenFilter.to_value)
  return to_value_;
}
inline void Filter_BetweenFilter::set_allocated_to_value(::google::analytics::data::v1alpha::NumericValue* to_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete to_value_;
  }
  if (to_value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, to_value, submessage_arena);
    }
    
  } else {
    
  }
  to_value_ = to_value;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Filter.BetweenFilter.to_value)
}

// -------------------------------------------------------------------

// Filter

// string field_name = 1;
inline void Filter::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Filter::field_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.field_name)
  return field_name_.GetNoArena();
}
inline void Filter::set_field_name(const ::std::string& value) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.field_name)
}
#if LANG_CXX11
inline void Filter::set_field_name(::std::string&& value) {
  
  field_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Filter.field_name)
}
#endif
inline void Filter::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Filter.field_name)
}
inline void Filter::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Filter.field_name)
}
inline ::std::string* Filter::mutable_field_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.field_name)
  return field_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Filter::release_field_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.field_name)
  
  return field_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filter::set_allocated_field_name(::std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Filter.field_name)
}

// bool null_filter = 2;
inline bool Filter::has_null_filter() const {
  return one_filter_case() == kNullFilter;
}
inline void Filter::set_has_null_filter() {
  _oneof_case_[0] = kNullFilter;
}
inline void Filter::clear_null_filter() {
  if (has_null_filter()) {
    one_filter_.null_filter_ = false;
    clear_has_one_filter();
  }
}
inline bool Filter::null_filter() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.null_filter)
  if (has_null_filter()) {
    return one_filter_.null_filter_;
  }
  return false;
}
inline void Filter::set_null_filter(bool value) {
  if (!has_null_filter()) {
    clear_one_filter();
    set_has_null_filter();
  }
  one_filter_.null_filter_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Filter.null_filter)
}

// .google.analytics.data.v1alpha.Filter.StringFilter string_filter = 3;
inline bool Filter::has_string_filter() const {
  return one_filter_case() == kStringFilter;
}
inline void Filter::set_has_string_filter() {
  _oneof_case_[0] = kStringFilter;
}
inline void Filter::clear_string_filter() {
  if (has_string_filter()) {
    delete one_filter_.string_filter_;
    clear_has_one_filter();
  }
}
inline ::google::analytics::data::v1alpha::Filter_StringFilter* Filter::release_string_filter() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.string_filter)
  if (has_string_filter()) {
    clear_has_one_filter();
      ::google::analytics::data::v1alpha::Filter_StringFilter* temp = one_filter_.string_filter_;
    one_filter_.string_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::Filter_StringFilter& Filter::string_filter() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.string_filter)
  return has_string_filter()
      ? *one_filter_.string_filter_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::Filter_StringFilter*>(&::google::analytics::data::v1alpha::_Filter_StringFilter_default_instance_);
}
inline ::google::analytics::data::v1alpha::Filter_StringFilter* Filter::mutable_string_filter() {
  if (!has_string_filter()) {
    clear_one_filter();
    set_has_string_filter();
    one_filter_.string_filter_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::Filter_StringFilter >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.string_filter)
  return one_filter_.string_filter_;
}

// .google.analytics.data.v1alpha.Filter.InListFilter in_list_filter = 4;
inline bool Filter::has_in_list_filter() const {
  return one_filter_case() == kInListFilter;
}
inline void Filter::set_has_in_list_filter() {
  _oneof_case_[0] = kInListFilter;
}
inline void Filter::clear_in_list_filter() {
  if (has_in_list_filter()) {
    delete one_filter_.in_list_filter_;
    clear_has_one_filter();
  }
}
inline ::google::analytics::data::v1alpha::Filter_InListFilter* Filter::release_in_list_filter() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.in_list_filter)
  if (has_in_list_filter()) {
    clear_has_one_filter();
      ::google::analytics::data::v1alpha::Filter_InListFilter* temp = one_filter_.in_list_filter_;
    one_filter_.in_list_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::Filter_InListFilter& Filter::in_list_filter() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.in_list_filter)
  return has_in_list_filter()
      ? *one_filter_.in_list_filter_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::Filter_InListFilter*>(&::google::analytics::data::v1alpha::_Filter_InListFilter_default_instance_);
}
inline ::google::analytics::data::v1alpha::Filter_InListFilter* Filter::mutable_in_list_filter() {
  if (!has_in_list_filter()) {
    clear_one_filter();
    set_has_in_list_filter();
    one_filter_.in_list_filter_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::Filter_InListFilter >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.in_list_filter)
  return one_filter_.in_list_filter_;
}

// .google.analytics.data.v1alpha.Filter.NumericFilter numeric_filter = 5;
inline bool Filter::has_numeric_filter() const {
  return one_filter_case() == kNumericFilter;
}
inline void Filter::set_has_numeric_filter() {
  _oneof_case_[0] = kNumericFilter;
}
inline void Filter::clear_numeric_filter() {
  if (has_numeric_filter()) {
    delete one_filter_.numeric_filter_;
    clear_has_one_filter();
  }
}
inline ::google::analytics::data::v1alpha::Filter_NumericFilter* Filter::release_numeric_filter() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.numeric_filter)
  if (has_numeric_filter()) {
    clear_has_one_filter();
      ::google::analytics::data::v1alpha::Filter_NumericFilter* temp = one_filter_.numeric_filter_;
    one_filter_.numeric_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::Filter_NumericFilter& Filter::numeric_filter() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.numeric_filter)
  return has_numeric_filter()
      ? *one_filter_.numeric_filter_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::Filter_NumericFilter*>(&::google::analytics::data::v1alpha::_Filter_NumericFilter_default_instance_);
}
inline ::google::analytics::data::v1alpha::Filter_NumericFilter* Filter::mutable_numeric_filter() {
  if (!has_numeric_filter()) {
    clear_one_filter();
    set_has_numeric_filter();
    one_filter_.numeric_filter_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::Filter_NumericFilter >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.numeric_filter)
  return one_filter_.numeric_filter_;
}

// .google.analytics.data.v1alpha.Filter.BetweenFilter between_filter = 6;
inline bool Filter::has_between_filter() const {
  return one_filter_case() == kBetweenFilter;
}
inline void Filter::set_has_between_filter() {
  _oneof_case_[0] = kBetweenFilter;
}
inline void Filter::clear_between_filter() {
  if (has_between_filter()) {
    delete one_filter_.between_filter_;
    clear_has_one_filter();
  }
}
inline ::google::analytics::data::v1alpha::Filter_BetweenFilter* Filter::release_between_filter() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Filter.between_filter)
  if (has_between_filter()) {
    clear_has_one_filter();
      ::google::analytics::data::v1alpha::Filter_BetweenFilter* temp = one_filter_.between_filter_;
    one_filter_.between_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::Filter_BetweenFilter& Filter::between_filter() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Filter.between_filter)
  return has_between_filter()
      ? *one_filter_.between_filter_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::Filter_BetweenFilter*>(&::google::analytics::data::v1alpha::_Filter_BetweenFilter_default_instance_);
}
inline ::google::analytics::data::v1alpha::Filter_BetweenFilter* Filter::mutable_between_filter() {
  if (!has_between_filter()) {
    clear_one_filter();
    set_has_between_filter();
    one_filter_.between_filter_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::Filter_BetweenFilter >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Filter.between_filter)
  return one_filter_.between_filter_;
}

inline bool Filter::has_one_filter() const {
  return one_filter_case() != ONE_FILTER_NOT_SET;
}
inline void Filter::clear_has_one_filter() {
  _oneof_case_[0] = ONE_FILTER_NOT_SET;
}
inline Filter::OneFilterCase Filter::one_filter_case() const {
  return Filter::OneFilterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OrderBy_MetricOrderBy

// string metric_name = 1;
inline void OrderBy_MetricOrderBy::clear_metric_name() {
  metric_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderBy_MetricOrderBy::metric_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
  return metric_name_.GetNoArena();
}
inline void OrderBy_MetricOrderBy::set_metric_name(const ::std::string& value) {
  
  metric_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
}
#if LANG_CXX11
inline void OrderBy_MetricOrderBy::set_metric_name(::std::string&& value) {
  
  metric_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
}
#endif
inline void OrderBy_MetricOrderBy::set_metric_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metric_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
}
inline void OrderBy_MetricOrderBy::set_metric_name(const char* value, size_t size) {
  
  metric_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
}
inline ::std::string* OrderBy_MetricOrderBy::mutable_metric_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
  return metric_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderBy_MetricOrderBy::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
  
  return metric_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderBy_MetricOrderBy::set_allocated_metric_name(::std::string* metric_name) {
  if (metric_name != nullptr) {
    
  } else {
    
  }
  metric_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.OrderBy.MetricOrderBy.metric_name)
}

// -------------------------------------------------------------------

// OrderBy_DimensionOrderBy

// string dimension_name = 1;
inline void OrderBy_DimensionOrderBy::clear_dimension_name() {
  dimension_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderBy_DimensionOrderBy::dimension_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
  return dimension_name_.GetNoArena();
}
inline void OrderBy_DimensionOrderBy::set_dimension_name(const ::std::string& value) {
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
}
#if LANG_CXX11
inline void OrderBy_DimensionOrderBy::set_dimension_name(::std::string&& value) {
  
  dimension_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
}
#endif
inline void OrderBy_DimensionOrderBy::set_dimension_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
}
inline void OrderBy_DimensionOrderBy::set_dimension_name(const char* value, size_t size) {
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
}
inline ::std::string* OrderBy_DimensionOrderBy::mutable_dimension_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
  return dimension_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderBy_DimensionOrderBy::release_dimension_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
  
  return dimension_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderBy_DimensionOrderBy::set_allocated_dimension_name(::std::string* dimension_name) {
  if (dimension_name != nullptr) {
    
  } else {
    
  }
  dimension_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimension_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.dimension_name)
}

// .google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.OrderType order_type = 2;
inline void OrderBy_DimensionOrderBy::clear_order_type() {
  order_type_ = 0;
}
inline ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType OrderBy_DimensionOrderBy::order_type() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.order_type)
  return static_cast< ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType >(order_type_);
}
inline void OrderBy_DimensionOrderBy::set_order_type(::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType value) {
  
  order_type_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.order_type)
}

// -------------------------------------------------------------------

// OrderBy_PivotOrderBy_PivotSelection

// string dimension_name = 1;
inline void OrderBy_PivotOrderBy_PivotSelection::clear_dimension_name() {
  dimension_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderBy_PivotOrderBy_PivotSelection::dimension_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
  return dimension_name_.GetNoArena();
}
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_name(const ::std::string& value) {
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
}
#if LANG_CXX11
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_name(::std::string&& value) {
  
  dimension_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
}
#endif
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
}
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_name(const char* value, size_t size) {
  
  dimension_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
}
inline ::std::string* OrderBy_PivotOrderBy_PivotSelection::mutable_dimension_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
  return dimension_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderBy_PivotOrderBy_PivotSelection::release_dimension_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
  
  return dimension_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderBy_PivotOrderBy_PivotSelection::set_allocated_dimension_name(::std::string* dimension_name) {
  if (dimension_name != nullptr) {
    
  } else {
    
  }
  dimension_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimension_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_name)
}

// string dimension_value = 2;
inline void OrderBy_PivotOrderBy_PivotSelection::clear_dimension_value() {
  dimension_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderBy_PivotOrderBy_PivotSelection::dimension_value() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
  return dimension_value_.GetNoArena();
}
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_value(const ::std::string& value) {
  
  dimension_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
}
#if LANG_CXX11
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_value(::std::string&& value) {
  
  dimension_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
}
#endif
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dimension_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
}
inline void OrderBy_PivotOrderBy_PivotSelection::set_dimension_value(const char* value, size_t size) {
  
  dimension_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
}
inline ::std::string* OrderBy_PivotOrderBy_PivotSelection::mutable_dimension_value() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
  return dimension_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderBy_PivotOrderBy_PivotSelection::release_dimension_value() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
  
  return dimension_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderBy_PivotOrderBy_PivotSelection::set_allocated_dimension_value(::std::string* dimension_value) {
  if (dimension_value != nullptr) {
    
  } else {
    
  }
  dimension_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimension_value);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection.dimension_value)
}

// -------------------------------------------------------------------

// OrderBy_PivotOrderBy

// string metric_name = 1;
inline void OrderBy_PivotOrderBy::clear_metric_name() {
  metric_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OrderBy_PivotOrderBy::metric_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
  return metric_name_.GetNoArena();
}
inline void OrderBy_PivotOrderBy::set_metric_name(const ::std::string& value) {
  
  metric_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
}
#if LANG_CXX11
inline void OrderBy_PivotOrderBy::set_metric_name(::std::string&& value) {
  
  metric_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
}
#endif
inline void OrderBy_PivotOrderBy::set_metric_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metric_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
}
inline void OrderBy_PivotOrderBy::set_metric_name(const char* value, size_t size) {
  
  metric_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
}
inline ::std::string* OrderBy_PivotOrderBy::mutable_metric_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
  return metric_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderBy_PivotOrderBy::release_metric_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
  
  return metric_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderBy_PivotOrderBy::set_allocated_metric_name(::std::string* metric_name) {
  if (metric_name != nullptr) {
    
  } else {
    
  }
  metric_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metric_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.metric_name)
}

// repeated .google.analytics.data.v1alpha.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
inline int OrderBy_PivotOrderBy::pivot_selections_size() const {
  return pivot_selections_.size();
}
inline void OrderBy_PivotOrderBy::clear_pivot_selections() {
  pivot_selections_.Clear();
}
inline ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection* OrderBy_PivotOrderBy::mutable_pivot_selections(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.pivot_selections)
  return pivot_selections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection >*
OrderBy_PivotOrderBy::mutable_pivot_selections() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.pivot_selections)
  return &pivot_selections_;
}
inline const ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection& OrderBy_PivotOrderBy::pivot_selections(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.pivot_selections)
  return pivot_selections_.Get(index);
}
inline ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection* OrderBy_PivotOrderBy::add_pivot_selections() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.pivot_selections)
  return pivot_selections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy_PivotSelection >&
OrderBy_PivotOrderBy::pivot_selections() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.OrderBy.PivotOrderBy.pivot_selections)
  return pivot_selections_;
}

// -------------------------------------------------------------------

// OrderBy

// .google.analytics.data.v1alpha.OrderBy.MetricOrderBy metric = 1;
inline bool OrderBy::has_metric() const {
  return one_order_by_case() == kMetric;
}
inline void OrderBy::set_has_metric() {
  _oneof_case_[0] = kMetric;
}
inline void OrderBy::clear_metric() {
  if (has_metric()) {
    delete one_order_by_.metric_;
    clear_has_one_order_by();
  }
}
inline ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* OrderBy::release_metric() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.metric)
  if (has_metric()) {
    clear_has_one_order_by();
      ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* temp = one_order_by_.metric_;
    one_order_by_.metric_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy& OrderBy::metric() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.metric)
  return has_metric()
      ? *one_order_by_.metric_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy*>(&::google::analytics::data::v1alpha::_OrderBy_MetricOrderBy_default_instance_);
}
inline ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy* OrderBy::mutable_metric() {
  if (!has_metric()) {
    clear_one_order_by();
    set_has_metric();
    one_order_by_.metric_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::OrderBy_MetricOrderBy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.metric)
  return one_order_by_.metric_;
}

// .google.analytics.data.v1alpha.OrderBy.DimensionOrderBy dimension = 2;
inline bool OrderBy::has_dimension() const {
  return one_order_by_case() == kDimension;
}
inline void OrderBy::set_has_dimension() {
  _oneof_case_[0] = kDimension;
}
inline void OrderBy::clear_dimension() {
  if (has_dimension()) {
    delete one_order_by_.dimension_;
    clear_has_one_order_by();
  }
}
inline ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* OrderBy::release_dimension() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.dimension)
  if (has_dimension()) {
    clear_has_one_order_by();
      ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* temp = one_order_by_.dimension_;
    one_order_by_.dimension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy& OrderBy::dimension() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.dimension)
  return has_dimension()
      ? *one_order_by_.dimension_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy*>(&::google::analytics::data::v1alpha::_OrderBy_DimensionOrderBy_default_instance_);
}
inline ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy* OrderBy::mutable_dimension() {
  if (!has_dimension()) {
    clear_one_order_by();
    set_has_dimension();
    one_order_by_.dimension_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.dimension)
  return one_order_by_.dimension_;
}

// .google.analytics.data.v1alpha.OrderBy.PivotOrderBy pivot = 3;
inline bool OrderBy::has_pivot() const {
  return one_order_by_case() == kPivot;
}
inline void OrderBy::set_has_pivot() {
  _oneof_case_[0] = kPivot;
}
inline void OrderBy::clear_pivot() {
  if (has_pivot()) {
    delete one_order_by_.pivot_;
    clear_has_one_order_by();
  }
}
inline ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* OrderBy::release_pivot() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.OrderBy.pivot)
  if (has_pivot()) {
    clear_has_one_order_by();
      ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* temp = one_order_by_.pivot_;
    one_order_by_.pivot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy& OrderBy::pivot() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.pivot)
  return has_pivot()
      ? *one_order_by_.pivot_
      : *reinterpret_cast< ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy*>(&::google::analytics::data::v1alpha::_OrderBy_PivotOrderBy_default_instance_);
}
inline ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy* OrderBy::mutable_pivot() {
  if (!has_pivot()) {
    clear_one_order_by();
    set_has_pivot();
    one_order_by_.pivot_ = CreateMaybeMessage< ::google::analytics::data::v1alpha::OrderBy_PivotOrderBy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.OrderBy.pivot)
  return one_order_by_.pivot_;
}

// bool desc = 4;
inline void OrderBy::clear_desc() {
  desc_ = false;
}
inline bool OrderBy::desc() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.OrderBy.desc)
  return desc_;
}
inline void OrderBy::set_desc(bool value) {
  
  desc_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.OrderBy.desc)
}

inline bool OrderBy::has_one_order_by() const {
  return one_order_by_case() != ONE_ORDER_BY_NOT_SET;
}
inline void OrderBy::clear_has_one_order_by() {
  _oneof_case_[0] = ONE_ORDER_BY_NOT_SET;
}
inline OrderBy::OneOrderByCase OrderBy::one_order_by_case() const {
  return OrderBy::OneOrderByCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Pivot

// repeated string field_names = 1;
inline int Pivot::field_names_size() const {
  return field_names_.size();
}
inline void Pivot::clear_field_names() {
  field_names_.Clear();
}
inline const ::std::string& Pivot::field_names(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Pivot.field_names)
  return field_names_.Get(index);
}
inline ::std::string* Pivot::mutable_field_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Pivot.field_names)
  return field_names_.Mutable(index);
}
inline void Pivot::set_field_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Pivot.field_names)
  field_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Pivot::set_field_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Pivot.field_names)
  field_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Pivot::set_field_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Pivot.field_names)
}
inline void Pivot::set_field_names(int index, const char* value, size_t size) {
  field_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Pivot.field_names)
}
inline ::std::string* Pivot::add_field_names() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.data.v1alpha.Pivot.field_names)
  return field_names_.Add();
}
inline void Pivot::add_field_names(const ::std::string& value) {
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Pivot.field_names)
}
#if LANG_CXX11
inline void Pivot::add_field_names(::std::string&& value) {
  field_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Pivot.field_names)
}
#endif
inline void Pivot::add_field_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.data.v1alpha.Pivot.field_names)
}
inline void Pivot::add_field_names(const char* value, size_t size) {
  field_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.data.v1alpha.Pivot.field_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Pivot::field_names() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.Pivot.field_names)
  return field_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Pivot::mutable_field_names() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.Pivot.field_names)
  return &field_names_;
}

// repeated .google.analytics.data.v1alpha.OrderBy order_bys = 2;
inline int Pivot::order_bys_size() const {
  return order_bys_.size();
}
inline void Pivot::clear_order_bys() {
  order_bys_.Clear();
}
inline ::google::analytics::data::v1alpha::OrderBy* Pivot::mutable_order_bys(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Pivot.order_bys)
  return order_bys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy >*
Pivot::mutable_order_bys() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.Pivot.order_bys)
  return &order_bys_;
}
inline const ::google::analytics::data::v1alpha::OrderBy& Pivot::order_bys(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Pivot.order_bys)
  return order_bys_.Get(index);
}
inline ::google::analytics::data::v1alpha::OrderBy* Pivot::add_order_bys() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Pivot.order_bys)
  return order_bys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::OrderBy >&
Pivot::order_bys() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.Pivot.order_bys)
  return order_bys_;
}

// int64 offset = 3;
inline void Pivot::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Pivot::offset() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Pivot.offset)
  return offset_;
}
inline void Pivot::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Pivot.offset)
}

// int64 limit = 4;
inline void Pivot::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Pivot::limit() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Pivot.limit)
  return limit_;
}
inline void Pivot::set_limit(::google::protobuf::int64 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Pivot.limit)
}

// repeated .google.analytics.data.v1alpha.MetricAggregation metric_aggregations = 5;
inline int Pivot::metric_aggregations_size() const {
  return metric_aggregations_.size();
}
inline void Pivot::clear_metric_aggregations() {
  metric_aggregations_.Clear();
}
inline ::google::analytics::data::v1alpha::MetricAggregation Pivot::metric_aggregations(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Pivot.metric_aggregations)
  return static_cast< ::google::analytics::data::v1alpha::MetricAggregation >(metric_aggregations_.Get(index));
}
inline void Pivot::set_metric_aggregations(int index, ::google::analytics::data::v1alpha::MetricAggregation value) {
  metric_aggregations_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Pivot.metric_aggregations)
}
inline void Pivot::add_metric_aggregations(::google::analytics::data::v1alpha::MetricAggregation value) {
  metric_aggregations_.Add(value);
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Pivot.metric_aggregations)
}
inline const ::google::protobuf::RepeatedField<int>&
Pivot::metric_aggregations() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.Pivot.metric_aggregations)
  return metric_aggregations_;
}
inline ::google::protobuf::RepeatedField<int>*
Pivot::mutable_metric_aggregations() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.Pivot.metric_aggregations)
  return &metric_aggregations_;
}

// -------------------------------------------------------------------

// CohortSpec

// repeated .google.analytics.data.v1alpha.Cohort cohorts = 1;
inline int CohortSpec::cohorts_size() const {
  return cohorts_.size();
}
inline void CohortSpec::clear_cohorts() {
  cohorts_.Clear();
}
inline ::google::analytics::data::v1alpha::Cohort* CohortSpec::mutable_cohorts(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.CohortSpec.cohorts)
  return cohorts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::Cohort >*
CohortSpec::mutable_cohorts() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.CohortSpec.cohorts)
  return &cohorts_;
}
inline const ::google::analytics::data::v1alpha::Cohort& CohortSpec::cohorts(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.CohortSpec.cohorts)
  return cohorts_.Get(index);
}
inline ::google::analytics::data::v1alpha::Cohort* CohortSpec::add_cohorts() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.CohortSpec.cohorts)
  return cohorts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::Cohort >&
CohortSpec::cohorts() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.CohortSpec.cohorts)
  return cohorts_;
}

// .google.analytics.data.v1alpha.CohortsRange cohorts_range = 2;
inline bool CohortSpec::has_cohorts_range() const {
  return this != internal_default_instance() && cohorts_range_ != nullptr;
}
inline void CohortSpec::clear_cohorts_range() {
  if (GetArenaNoVirtual() == nullptr && cohorts_range_ != nullptr) {
    delete cohorts_range_;
  }
  cohorts_range_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::CohortsRange& CohortSpec::cohorts_range() const {
  const ::google::analytics::data::v1alpha::CohortsRange* p = cohorts_range_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.CohortSpec.cohorts_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::CohortsRange*>(
      &::google::analytics::data::v1alpha::_CohortsRange_default_instance_);
}
inline ::google::analytics::data::v1alpha::CohortsRange* CohortSpec::release_cohorts_range() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.CohortSpec.cohorts_range)
  
  ::google::analytics::data::v1alpha::CohortsRange* temp = cohorts_range_;
  cohorts_range_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::CohortsRange* CohortSpec::mutable_cohorts_range() {
  
  if (cohorts_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::CohortsRange>(GetArenaNoVirtual());
    cohorts_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.CohortSpec.cohorts_range)
  return cohorts_range_;
}
inline void CohortSpec::set_allocated_cohorts_range(::google::analytics::data::v1alpha::CohortsRange* cohorts_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cohorts_range_;
  }
  if (cohorts_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cohorts_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cohorts_range, submessage_arena);
    }
    
  } else {
    
  }
  cohorts_range_ = cohorts_range;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.CohortSpec.cohorts_range)
}

// .google.analytics.data.v1alpha.CohortReportSettings cohort_report_settings = 3;
inline bool CohortSpec::has_cohort_report_settings() const {
  return this != internal_default_instance() && cohort_report_settings_ != nullptr;
}
inline void CohortSpec::clear_cohort_report_settings() {
  if (GetArenaNoVirtual() == nullptr && cohort_report_settings_ != nullptr) {
    delete cohort_report_settings_;
  }
  cohort_report_settings_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::CohortReportSettings& CohortSpec::cohort_report_settings() const {
  const ::google::analytics::data::v1alpha::CohortReportSettings* p = cohort_report_settings_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.CohortSpec.cohort_report_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::CohortReportSettings*>(
      &::google::analytics::data::v1alpha::_CohortReportSettings_default_instance_);
}
inline ::google::analytics::data::v1alpha::CohortReportSettings* CohortSpec::release_cohort_report_settings() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.CohortSpec.cohort_report_settings)
  
  ::google::analytics::data::v1alpha::CohortReportSettings* temp = cohort_report_settings_;
  cohort_report_settings_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::CohortReportSettings* CohortSpec::mutable_cohort_report_settings() {
  
  if (cohort_report_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::CohortReportSettings>(GetArenaNoVirtual());
    cohort_report_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.CohortSpec.cohort_report_settings)
  return cohort_report_settings_;
}
inline void CohortSpec::set_allocated_cohort_report_settings(::google::analytics::data::v1alpha::CohortReportSettings* cohort_report_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cohort_report_settings_;
  }
  if (cohort_report_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cohort_report_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cohort_report_settings, submessage_arena);
    }
    
  } else {
    
  }
  cohort_report_settings_ = cohort_report_settings;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.CohortSpec.cohort_report_settings)
}

// -------------------------------------------------------------------

// Cohort

// string name = 1;
inline void Cohort::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cohort::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Cohort.name)
  return name_.GetNoArena();
}
inline void Cohort::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Cohort.name)
}
#if LANG_CXX11
inline void Cohort::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Cohort.name)
}
#endif
inline void Cohort::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Cohort.name)
}
inline void Cohort::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Cohort.name)
}
inline ::std::string* Cohort::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Cohort.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cohort::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Cohort.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cohort::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Cohort.name)
}

// string dimension = 2;
inline void Cohort::clear_dimension() {
  dimension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cohort::dimension() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Cohort.dimension)
  return dimension_.GetNoArena();
}
inline void Cohort::set_dimension(const ::std::string& value) {
  
  dimension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.Cohort.dimension)
}
#if LANG_CXX11
inline void Cohort::set_dimension(::std::string&& value) {
  
  dimension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.Cohort.dimension)
}
#endif
inline void Cohort::set_dimension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dimension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.Cohort.dimension)
}
inline void Cohort::set_dimension(const char* value, size_t size) {
  
  dimension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.Cohort.dimension)
}
inline ::std::string* Cohort::mutable_dimension() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Cohort.dimension)
  return dimension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cohort::release_dimension() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Cohort.dimension)
  
  return dimension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cohort::set_allocated_dimension(::std::string* dimension) {
  if (dimension != nullptr) {
    
  } else {
    
  }
  dimension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dimension);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Cohort.dimension)
}

// .google.analytics.data.v1alpha.DateRange date_range = 3;
inline bool Cohort::has_date_range() const {
  return this != internal_default_instance() && date_range_ != nullptr;
}
inline void Cohort::clear_date_range() {
  if (GetArenaNoVirtual() == nullptr && date_range_ != nullptr) {
    delete date_range_;
  }
  date_range_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::DateRange& Cohort::date_range() const {
  const ::google::analytics::data::v1alpha::DateRange* p = date_range_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Cohort.date_range)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::DateRange*>(
      &::google::analytics::data::v1alpha::_DateRange_default_instance_);
}
inline ::google::analytics::data::v1alpha::DateRange* Cohort::release_date_range() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.Cohort.date_range)
  
  ::google::analytics::data::v1alpha::DateRange* temp = date_range_;
  date_range_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::DateRange* Cohort::mutable_date_range() {
  
  if (date_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::DateRange>(GetArenaNoVirtual());
    date_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Cohort.date_range)
  return date_range_;
}
inline void Cohort::set_allocated_date_range(::google::analytics::data::v1alpha::DateRange* date_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete date_range_;
  }
  if (date_range) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date_range, submessage_arena);
    }
    
  } else {
    
  }
  date_range_ = date_range;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.Cohort.date_range)
}

// -------------------------------------------------------------------

// CohortsRange

// .google.analytics.data.v1alpha.CohortsRange.Granularity granularity = 1;
inline void CohortsRange::clear_granularity() {
  granularity_ = 0;
}
inline ::google::analytics::data::v1alpha::CohortsRange_Granularity CohortsRange::granularity() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.CohortsRange.granularity)
  return static_cast< ::google::analytics::data::v1alpha::CohortsRange_Granularity >(granularity_);
}
inline void CohortsRange::set_granularity(::google::analytics::data::v1alpha::CohortsRange_Granularity value) {
  
  granularity_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.CohortsRange.granularity)
}

// int32 start_offset = 2;
inline void CohortsRange::clear_start_offset() {
  start_offset_ = 0;
}
inline ::google::protobuf::int32 CohortsRange::start_offset() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.CohortsRange.start_offset)
  return start_offset_;
}
inline void CohortsRange::set_start_offset(::google::protobuf::int32 value) {
  
  start_offset_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.CohortsRange.start_offset)
}

// int32 end_offset = 3;
inline void CohortsRange::clear_end_offset() {
  end_offset_ = 0;
}
inline ::google::protobuf::int32 CohortsRange::end_offset() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.CohortsRange.end_offset)
  return end_offset_;
}
inline void CohortsRange::set_end_offset(::google::protobuf::int32 value) {
  
  end_offset_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.CohortsRange.end_offset)
}

// -------------------------------------------------------------------

// CohortReportSettings

// bool accumulate = 1;
inline void CohortReportSettings::clear_accumulate() {
  accumulate_ = false;
}
inline bool CohortReportSettings::accumulate() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.CohortReportSettings.accumulate)
  return accumulate_;
}
inline void CohortReportSettings::set_accumulate(bool value) {
  
  accumulate_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.CohortReportSettings.accumulate)
}

// -------------------------------------------------------------------

// ResponseMetaData

// bool data_loss_from_other_row = 3;
inline void ResponseMetaData::clear_data_loss_from_other_row() {
  data_loss_from_other_row_ = false;
}
inline bool ResponseMetaData::data_loss_from_other_row() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.ResponseMetaData.data_loss_from_other_row)
  return data_loss_from_other_row_;
}
inline void ResponseMetaData::set_data_loss_from_other_row(bool value) {
  
  data_loss_from_other_row_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.ResponseMetaData.data_loss_from_other_row)
}

// -------------------------------------------------------------------

// DimensionHeader

// string name = 1;
inline void DimensionHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DimensionHeader::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionHeader.name)
  return name_.GetNoArena();
}
inline void DimensionHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionHeader.name)
}
#if LANG_CXX11
inline void DimensionHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DimensionHeader.name)
}
#endif
inline void DimensionHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionHeader.name)
}
inline void DimensionHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionHeader.name)
}
inline ::std::string* DimensionHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DimensionHeader::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DimensionHeader::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DimensionHeader.name)
}

// -------------------------------------------------------------------

// MetricHeader

// string name = 1;
inline void MetricHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricHeader::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricHeader.name)
  return name_.GetNoArena();
}
inline void MetricHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricHeader.name)
}
#if LANG_CXX11
inline void MetricHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.MetricHeader.name)
}
#endif
inline void MetricHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.MetricHeader.name)
}
inline void MetricHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.MetricHeader.name)
}
inline ::std::string* MetricHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.MetricHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricHeader::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.MetricHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricHeader::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.MetricHeader.name)
}

// .google.analytics.data.v1alpha.MetricType type = 2;
inline void MetricHeader::clear_type() {
  type_ = 0;
}
inline ::google::analytics::data::v1alpha::MetricType MetricHeader::type() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricHeader.type)
  return static_cast< ::google::analytics::data::v1alpha::MetricType >(type_);
}
inline void MetricHeader::set_type(::google::analytics::data::v1alpha::MetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricHeader.type)
}

// -------------------------------------------------------------------

// PivotHeader

// repeated .google.analytics.data.v1alpha.PivotDimensionHeader pivot_dimension_headers = 1;
inline int PivotHeader::pivot_dimension_headers_size() const {
  return pivot_dimension_headers_.size();
}
inline void PivotHeader::clear_pivot_dimension_headers() {
  pivot_dimension_headers_.Clear();
}
inline ::google::analytics::data::v1alpha::PivotDimensionHeader* PivotHeader::mutable_pivot_dimension_headers(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.PivotHeader.pivot_dimension_headers)
  return pivot_dimension_headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::PivotDimensionHeader >*
PivotHeader::mutable_pivot_dimension_headers() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.PivotHeader.pivot_dimension_headers)
  return &pivot_dimension_headers_;
}
inline const ::google::analytics::data::v1alpha::PivotDimensionHeader& PivotHeader::pivot_dimension_headers(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.PivotHeader.pivot_dimension_headers)
  return pivot_dimension_headers_.Get(index);
}
inline ::google::analytics::data::v1alpha::PivotDimensionHeader* PivotHeader::add_pivot_dimension_headers() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.PivotHeader.pivot_dimension_headers)
  return pivot_dimension_headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::PivotDimensionHeader >&
PivotHeader::pivot_dimension_headers() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.PivotHeader.pivot_dimension_headers)
  return pivot_dimension_headers_;
}

// int32 row_count = 2;
inline void PivotHeader::clear_row_count() {
  row_count_ = 0;
}
inline ::google::protobuf::int32 PivotHeader::row_count() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.PivotHeader.row_count)
  return row_count_;
}
inline void PivotHeader::set_row_count(::google::protobuf::int32 value) {
  
  row_count_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.PivotHeader.row_count)
}

// -------------------------------------------------------------------

// PivotDimensionHeader

// repeated .google.analytics.data.v1alpha.DimensionValue dimension_values = 1;
inline int PivotDimensionHeader::dimension_values_size() const {
  return dimension_values_.size();
}
inline void PivotDimensionHeader::clear_dimension_values() {
  dimension_values_.Clear();
}
inline ::google::analytics::data::v1alpha::DimensionValue* PivotDimensionHeader::mutable_dimension_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.PivotDimensionHeader.dimension_values)
  return dimension_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >*
PivotDimensionHeader::mutable_dimension_values() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.PivotDimensionHeader.dimension_values)
  return &dimension_values_;
}
inline const ::google::analytics::data::v1alpha::DimensionValue& PivotDimensionHeader::dimension_values(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.PivotDimensionHeader.dimension_values)
  return dimension_values_.Get(index);
}
inline ::google::analytics::data::v1alpha::DimensionValue* PivotDimensionHeader::add_dimension_values() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.PivotDimensionHeader.dimension_values)
  return dimension_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >&
PivotDimensionHeader::dimension_values() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.PivotDimensionHeader.dimension_values)
  return dimension_values_;
}

// -------------------------------------------------------------------

// Row

// repeated .google.analytics.data.v1alpha.DimensionValue dimension_values = 1;
inline int Row::dimension_values_size() const {
  return dimension_values_.size();
}
inline void Row::clear_dimension_values() {
  dimension_values_.Clear();
}
inline ::google::analytics::data::v1alpha::DimensionValue* Row::mutable_dimension_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Row.dimension_values)
  return dimension_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >*
Row::mutable_dimension_values() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.Row.dimension_values)
  return &dimension_values_;
}
inline const ::google::analytics::data::v1alpha::DimensionValue& Row::dimension_values(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Row.dimension_values)
  return dimension_values_.Get(index);
}
inline ::google::analytics::data::v1alpha::DimensionValue* Row::add_dimension_values() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Row.dimension_values)
  return dimension_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::DimensionValue >&
Row::dimension_values() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.Row.dimension_values)
  return dimension_values_;
}

// repeated .google.analytics.data.v1alpha.MetricValue metric_values = 2;
inline int Row::metric_values_size() const {
  return metric_values_.size();
}
inline void Row::clear_metric_values() {
  metric_values_.Clear();
}
inline ::google::analytics::data::v1alpha::MetricValue* Row::mutable_metric_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.Row.metric_values)
  return metric_values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::MetricValue >*
Row::mutable_metric_values() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.Row.metric_values)
  return &metric_values_;
}
inline const ::google::analytics::data::v1alpha::MetricValue& Row::metric_values(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.Row.metric_values)
  return metric_values_.Get(index);
}
inline ::google::analytics::data::v1alpha::MetricValue* Row::add_metric_values() {
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.Row.metric_values)
  return metric_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::data::v1alpha::MetricValue >&
Row::metric_values() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.Row.metric_values)
  return metric_values_;
}

// -------------------------------------------------------------------

// DimensionValue

// string value = 1;
inline bool DimensionValue::has_value() const {
  return one_value_case() == kValue;
}
inline void DimensionValue::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void DimensionValue::clear_value() {
  if (has_value()) {
    one_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_one_value();
  }
}
inline const ::std::string& DimensionValue::value() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionValue.value)
  if (has_value()) {
    return one_value_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void DimensionValue::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionValue.value)
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionValue.value)
}
#if LANG_CXX11
inline void DimensionValue::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionValue.value)
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DimensionValue.value)
}
#endif
inline void DimensionValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionValue.value)
}
inline void DimensionValue::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionValue.value)
}
inline ::std::string* DimensionValue::mutable_value() {
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionValue.value)
  return one_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DimensionValue::release_value() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionValue.value)
  if (has_value()) {
    clear_has_one_value();
    return one_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void DimensionValue::set_allocated_value(::std::string* value) {
  if (has_one_value()) {
    clear_one_value();
  }
  if (value != nullptr) {
    set_has_value();
    one_value_.value_.UnsafeSetDefault(value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DimensionValue.value)
}

inline bool DimensionValue::has_one_value() const {
  return one_value_case() != ONE_VALUE_NOT_SET;
}
inline void DimensionValue::clear_has_one_value() {
  _oneof_case_[0] = ONE_VALUE_NOT_SET;
}
inline DimensionValue::OneValueCase DimensionValue::one_value_case() const {
  return DimensionValue::OneValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MetricValue

// string value = 4;
inline bool MetricValue::has_value() const {
  return one_value_case() == kValue;
}
inline void MetricValue::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void MetricValue::clear_value() {
  if (has_value()) {
    one_value_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_one_value();
  }
}
inline const ::std::string& MetricValue::value() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricValue.value)
  if (has_value()) {
    return one_value_.value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void MetricValue::set_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricValue.value)
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricValue.value)
}
#if LANG_CXX11
inline void MetricValue::set_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricValue.value)
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.MetricValue.value)
}
#endif
inline void MetricValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.MetricValue.value)
}
inline void MetricValue::set_value(const char* value, size_t size) {
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  one_value_.value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.MetricValue.value)
}
inline ::std::string* MetricValue::mutable_value() {
  if (!has_value()) {
    clear_one_value();
    set_has_value();
    one_value_.value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.MetricValue.value)
  return one_value_.value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricValue::release_value() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.MetricValue.value)
  if (has_value()) {
    clear_has_one_value();
    return one_value_.value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void MetricValue::set_allocated_value(::std::string* value) {
  if (has_one_value()) {
    clear_one_value();
  }
  if (value != nullptr) {
    set_has_value();
    one_value_.value_.UnsafeSetDefault(value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.MetricValue.value)
}

inline bool MetricValue::has_one_value() const {
  return one_value_case() != ONE_VALUE_NOT_SET;
}
inline void MetricValue::clear_has_one_value() {
  _oneof_case_[0] = ONE_VALUE_NOT_SET;
}
inline MetricValue::OneValueCase MetricValue::one_value_case() const {
  return MetricValue::OneValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NumericValue

// int64 int64_value = 1;
inline bool NumericValue::has_int64_value() const {
  return one_value_case() == kInt64Value;
}
inline void NumericValue::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void NumericValue::clear_int64_value() {
  if (has_int64_value()) {
    one_value_.int64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_one_value();
  }
}
inline ::google::protobuf::int64 NumericValue::int64_value() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.NumericValue.int64_value)
  if (has_int64_value()) {
    return one_value_.int64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void NumericValue::set_int64_value(::google::protobuf::int64 value) {
  if (!has_int64_value()) {
    clear_one_value();
    set_has_int64_value();
  }
  one_value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.NumericValue.int64_value)
}

// double double_value = 2;
inline bool NumericValue::has_double_value() const {
  return one_value_case() == kDoubleValue;
}
inline void NumericValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void NumericValue::clear_double_value() {
  if (has_double_value()) {
    one_value_.double_value_ = 0;
    clear_has_one_value();
  }
}
inline double NumericValue::double_value() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.NumericValue.double_value)
  if (has_double_value()) {
    return one_value_.double_value_;
  }
  return 0;
}
inline void NumericValue::set_double_value(double value) {
  if (!has_double_value()) {
    clear_one_value();
    set_has_double_value();
  }
  one_value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.NumericValue.double_value)
}

inline bool NumericValue::has_one_value() const {
  return one_value_case() != ONE_VALUE_NOT_SET;
}
inline void NumericValue::clear_has_one_value() {
  _oneof_case_[0] = ONE_VALUE_NOT_SET;
}
inline NumericValue::OneValueCase NumericValue::one_value_case() const {
  return NumericValue::OneValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PropertyQuota

// .google.analytics.data.v1alpha.QuotaStatus tokens_per_day = 1;
inline bool PropertyQuota::has_tokens_per_day() const {
  return this != internal_default_instance() && tokens_per_day_ != nullptr;
}
inline void PropertyQuota::clear_tokens_per_day() {
  if (GetArenaNoVirtual() == nullptr && tokens_per_day_ != nullptr) {
    delete tokens_per_day_;
  }
  tokens_per_day_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::QuotaStatus& PropertyQuota::tokens_per_day() const {
  const ::google::analytics::data::v1alpha::QuotaStatus* p = tokens_per_day_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.PropertyQuota.tokens_per_day)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::QuotaStatus*>(
      &::google::analytics::data::v1alpha::_QuotaStatus_default_instance_);
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::release_tokens_per_day() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.PropertyQuota.tokens_per_day)
  
  ::google::analytics::data::v1alpha::QuotaStatus* temp = tokens_per_day_;
  tokens_per_day_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::mutable_tokens_per_day() {
  
  if (tokens_per_day_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::QuotaStatus>(GetArenaNoVirtual());
    tokens_per_day_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.PropertyQuota.tokens_per_day)
  return tokens_per_day_;
}
inline void PropertyQuota::set_allocated_tokens_per_day(::google::analytics::data::v1alpha::QuotaStatus* tokens_per_day) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tokens_per_day_;
  }
  if (tokens_per_day) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tokens_per_day = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tokens_per_day, submessage_arena);
    }
    
  } else {
    
  }
  tokens_per_day_ = tokens_per_day;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.PropertyQuota.tokens_per_day)
}

// .google.analytics.data.v1alpha.QuotaStatus tokens_per_hour = 2;
inline bool PropertyQuota::has_tokens_per_hour() const {
  return this != internal_default_instance() && tokens_per_hour_ != nullptr;
}
inline void PropertyQuota::clear_tokens_per_hour() {
  if (GetArenaNoVirtual() == nullptr && tokens_per_hour_ != nullptr) {
    delete tokens_per_hour_;
  }
  tokens_per_hour_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::QuotaStatus& PropertyQuota::tokens_per_hour() const {
  const ::google::analytics::data::v1alpha::QuotaStatus* p = tokens_per_hour_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.PropertyQuota.tokens_per_hour)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::QuotaStatus*>(
      &::google::analytics::data::v1alpha::_QuotaStatus_default_instance_);
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::release_tokens_per_hour() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.PropertyQuota.tokens_per_hour)
  
  ::google::analytics::data::v1alpha::QuotaStatus* temp = tokens_per_hour_;
  tokens_per_hour_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::mutable_tokens_per_hour() {
  
  if (tokens_per_hour_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::QuotaStatus>(GetArenaNoVirtual());
    tokens_per_hour_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.PropertyQuota.tokens_per_hour)
  return tokens_per_hour_;
}
inline void PropertyQuota::set_allocated_tokens_per_hour(::google::analytics::data::v1alpha::QuotaStatus* tokens_per_hour) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tokens_per_hour_;
  }
  if (tokens_per_hour) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tokens_per_hour = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tokens_per_hour, submessage_arena);
    }
    
  } else {
    
  }
  tokens_per_hour_ = tokens_per_hour;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.PropertyQuota.tokens_per_hour)
}

// .google.analytics.data.v1alpha.QuotaStatus concurrent_requests = 3;
inline bool PropertyQuota::has_concurrent_requests() const {
  return this != internal_default_instance() && concurrent_requests_ != nullptr;
}
inline void PropertyQuota::clear_concurrent_requests() {
  if (GetArenaNoVirtual() == nullptr && concurrent_requests_ != nullptr) {
    delete concurrent_requests_;
  }
  concurrent_requests_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::QuotaStatus& PropertyQuota::concurrent_requests() const {
  const ::google::analytics::data::v1alpha::QuotaStatus* p = concurrent_requests_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.PropertyQuota.concurrent_requests)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::QuotaStatus*>(
      &::google::analytics::data::v1alpha::_QuotaStatus_default_instance_);
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::release_concurrent_requests() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.PropertyQuota.concurrent_requests)
  
  ::google::analytics::data::v1alpha::QuotaStatus* temp = concurrent_requests_;
  concurrent_requests_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::mutable_concurrent_requests() {
  
  if (concurrent_requests_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::QuotaStatus>(GetArenaNoVirtual());
    concurrent_requests_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.PropertyQuota.concurrent_requests)
  return concurrent_requests_;
}
inline void PropertyQuota::set_allocated_concurrent_requests(::google::analytics::data::v1alpha::QuotaStatus* concurrent_requests) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete concurrent_requests_;
  }
  if (concurrent_requests) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      concurrent_requests = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, concurrent_requests, submessage_arena);
    }
    
  } else {
    
  }
  concurrent_requests_ = concurrent_requests;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.PropertyQuota.concurrent_requests)
}

// .google.analytics.data.v1alpha.QuotaStatus server_errors_per_project_per_hour = 4;
inline bool PropertyQuota::has_server_errors_per_project_per_hour() const {
  return this != internal_default_instance() && server_errors_per_project_per_hour_ != nullptr;
}
inline void PropertyQuota::clear_server_errors_per_project_per_hour() {
  if (GetArenaNoVirtual() == nullptr && server_errors_per_project_per_hour_ != nullptr) {
    delete server_errors_per_project_per_hour_;
  }
  server_errors_per_project_per_hour_ = nullptr;
}
inline const ::google::analytics::data::v1alpha::QuotaStatus& PropertyQuota::server_errors_per_project_per_hour() const {
  const ::google::analytics::data::v1alpha::QuotaStatus* p = server_errors_per_project_per_hour_;
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.PropertyQuota.server_errors_per_project_per_hour)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::data::v1alpha::QuotaStatus*>(
      &::google::analytics::data::v1alpha::_QuotaStatus_default_instance_);
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::release_server_errors_per_project_per_hour() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.PropertyQuota.server_errors_per_project_per_hour)
  
  ::google::analytics::data::v1alpha::QuotaStatus* temp = server_errors_per_project_per_hour_;
  server_errors_per_project_per_hour_ = nullptr;
  return temp;
}
inline ::google::analytics::data::v1alpha::QuotaStatus* PropertyQuota::mutable_server_errors_per_project_per_hour() {
  
  if (server_errors_per_project_per_hour_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::data::v1alpha::QuotaStatus>(GetArenaNoVirtual());
    server_errors_per_project_per_hour_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.PropertyQuota.server_errors_per_project_per_hour)
  return server_errors_per_project_per_hour_;
}
inline void PropertyQuota::set_allocated_server_errors_per_project_per_hour(::google::analytics::data::v1alpha::QuotaStatus* server_errors_per_project_per_hour) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_errors_per_project_per_hour_;
  }
  if (server_errors_per_project_per_hour) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_errors_per_project_per_hour = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_errors_per_project_per_hour, submessage_arena);
    }
    
  } else {
    
  }
  server_errors_per_project_per_hour_ = server_errors_per_project_per_hour;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.PropertyQuota.server_errors_per_project_per_hour)
}

// -------------------------------------------------------------------

// QuotaStatus

// int32 consumed = 1;
inline void QuotaStatus::clear_consumed() {
  consumed_ = 0;
}
inline ::google::protobuf::int32 QuotaStatus::consumed() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.QuotaStatus.consumed)
  return consumed_;
}
inline void QuotaStatus::set_consumed(::google::protobuf::int32 value) {
  
  consumed_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.QuotaStatus.consumed)
}

// int32 remaining = 2;
inline void QuotaStatus::clear_remaining() {
  remaining_ = 0;
}
inline ::google::protobuf::int32 QuotaStatus::remaining() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.QuotaStatus.remaining)
  return remaining_;
}
inline void QuotaStatus::set_remaining(::google::protobuf::int32 value) {
  
  remaining_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.QuotaStatus.remaining)
}

// -------------------------------------------------------------------

// DimensionMetadata

// string api_name = 1;
inline void DimensionMetadata::clear_api_name() {
  api_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DimensionMetadata::api_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionMetadata.api_name)
  return api_name_.GetNoArena();
}
inline void DimensionMetadata::set_api_name(const ::std::string& value) {
  
  api_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionMetadata.api_name)
}
#if LANG_CXX11
inline void DimensionMetadata::set_api_name(::std::string&& value) {
  
  api_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DimensionMetadata.api_name)
}
#endif
inline void DimensionMetadata::set_api_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionMetadata.api_name)
}
inline void DimensionMetadata::set_api_name(const char* value, size_t size) {
  
  api_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionMetadata.api_name)
}
inline ::std::string* DimensionMetadata::mutable_api_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionMetadata.api_name)
  return api_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DimensionMetadata::release_api_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionMetadata.api_name)
  
  return api_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DimensionMetadata::set_allocated_api_name(::std::string* api_name) {
  if (api_name != nullptr) {
    
  } else {
    
  }
  api_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DimensionMetadata.api_name)
}

// string ui_name = 2;
inline void DimensionMetadata::clear_ui_name() {
  ui_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DimensionMetadata::ui_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
  return ui_name_.GetNoArena();
}
inline void DimensionMetadata::set_ui_name(const ::std::string& value) {
  
  ui_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
}
#if LANG_CXX11
inline void DimensionMetadata::set_ui_name(::std::string&& value) {
  
  ui_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
}
#endif
inline void DimensionMetadata::set_ui_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ui_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
}
inline void DimensionMetadata::set_ui_name(const char* value, size_t size) {
  
  ui_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
}
inline ::std::string* DimensionMetadata::mutable_ui_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
  return ui_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DimensionMetadata::release_ui_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
  
  return ui_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DimensionMetadata::set_allocated_ui_name(::std::string* ui_name) {
  if (ui_name != nullptr) {
    
  } else {
    
  }
  ui_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ui_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DimensionMetadata.ui_name)
}

// string description = 3;
inline void DimensionMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DimensionMetadata::description() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionMetadata.description)
  return description_.GetNoArena();
}
inline void DimensionMetadata::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionMetadata.description)
}
#if LANG_CXX11
inline void DimensionMetadata::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.DimensionMetadata.description)
}
#endif
inline void DimensionMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionMetadata.description)
}
inline void DimensionMetadata::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionMetadata.description)
}
inline ::std::string* DimensionMetadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DimensionMetadata::release_description() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.DimensionMetadata.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DimensionMetadata::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.DimensionMetadata.description)
}

// repeated string deprecated_api_names = 4;
inline int DimensionMetadata::deprecated_api_names_size() const {
  return deprecated_api_names_.size();
}
inline void DimensionMetadata::clear_deprecated_api_names() {
  deprecated_api_names_.Clear();
}
inline const ::std::string& DimensionMetadata::deprecated_api_names(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
  return deprecated_api_names_.Get(index);
}
inline ::std::string* DimensionMetadata::mutable_deprecated_api_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
  return deprecated_api_names_.Mutable(index);
}
inline void DimensionMetadata::set_deprecated_api_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
  deprecated_api_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DimensionMetadata::set_deprecated_api_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
  deprecated_api_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DimensionMetadata::set_deprecated_api_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deprecated_api_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
}
inline void DimensionMetadata::set_deprecated_api_names(int index, const char* value, size_t size) {
  deprecated_api_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
}
inline ::std::string* DimensionMetadata::add_deprecated_api_names() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
  return deprecated_api_names_.Add();
}
inline void DimensionMetadata::add_deprecated_api_names(const ::std::string& value) {
  deprecated_api_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
}
#if LANG_CXX11
inline void DimensionMetadata::add_deprecated_api_names(::std::string&& value) {
  deprecated_api_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
}
#endif
inline void DimensionMetadata::add_deprecated_api_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deprecated_api_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
}
inline void DimensionMetadata::add_deprecated_api_names(const char* value, size_t size) {
  deprecated_api_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
DimensionMetadata::deprecated_api_names() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
  return deprecated_api_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
DimensionMetadata::mutable_deprecated_api_names() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.DimensionMetadata.deprecated_api_names)
  return &deprecated_api_names_;
}

// bool custom_definition = 5;
inline void DimensionMetadata::clear_custom_definition() {
  custom_definition_ = false;
}
inline bool DimensionMetadata::custom_definition() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.DimensionMetadata.custom_definition)
  return custom_definition_;
}
inline void DimensionMetadata::set_custom_definition(bool value) {
  
  custom_definition_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.DimensionMetadata.custom_definition)
}

// -------------------------------------------------------------------

// MetricMetadata

// string api_name = 1;
inline void MetricMetadata::clear_api_name() {
  api_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricMetadata::api_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricMetadata.api_name)
  return api_name_.GetNoArena();
}
inline void MetricMetadata::set_api_name(const ::std::string& value) {
  
  api_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.api_name)
}
#if LANG_CXX11
inline void MetricMetadata::set_api_name(::std::string&& value) {
  
  api_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.MetricMetadata.api_name)
}
#endif
inline void MetricMetadata::set_api_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.MetricMetadata.api_name)
}
inline void MetricMetadata::set_api_name(const char* value, size_t size) {
  
  api_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.MetricMetadata.api_name)
}
inline ::std::string* MetricMetadata::mutable_api_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.MetricMetadata.api_name)
  return api_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricMetadata::release_api_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.MetricMetadata.api_name)
  
  return api_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricMetadata::set_allocated_api_name(::std::string* api_name) {
  if (api_name != nullptr) {
    
  } else {
    
  }
  api_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), api_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.MetricMetadata.api_name)
}

// string ui_name = 2;
inline void MetricMetadata::clear_ui_name() {
  ui_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricMetadata::ui_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricMetadata.ui_name)
  return ui_name_.GetNoArena();
}
inline void MetricMetadata::set_ui_name(const ::std::string& value) {
  
  ui_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.ui_name)
}
#if LANG_CXX11
inline void MetricMetadata::set_ui_name(::std::string&& value) {
  
  ui_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.MetricMetadata.ui_name)
}
#endif
inline void MetricMetadata::set_ui_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ui_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.MetricMetadata.ui_name)
}
inline void MetricMetadata::set_ui_name(const char* value, size_t size) {
  
  ui_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.MetricMetadata.ui_name)
}
inline ::std::string* MetricMetadata::mutable_ui_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.MetricMetadata.ui_name)
  return ui_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricMetadata::release_ui_name() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.MetricMetadata.ui_name)
  
  return ui_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricMetadata::set_allocated_ui_name(::std::string* ui_name) {
  if (ui_name != nullptr) {
    
  } else {
    
  }
  ui_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ui_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.MetricMetadata.ui_name)
}

// string description = 3;
inline void MetricMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricMetadata::description() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricMetadata.description)
  return description_.GetNoArena();
}
inline void MetricMetadata::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.description)
}
#if LANG_CXX11
inline void MetricMetadata::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.MetricMetadata.description)
}
#endif
inline void MetricMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.MetricMetadata.description)
}
inline void MetricMetadata::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.MetricMetadata.description)
}
inline ::std::string* MetricMetadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.MetricMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricMetadata::release_description() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.MetricMetadata.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricMetadata::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.MetricMetadata.description)
}

// repeated string deprecated_api_names = 4;
inline int MetricMetadata::deprecated_api_names_size() const {
  return deprecated_api_names_.size();
}
inline void MetricMetadata::clear_deprecated_api_names() {
  deprecated_api_names_.Clear();
}
inline const ::std::string& MetricMetadata::deprecated_api_names(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
  return deprecated_api_names_.Get(index);
}
inline ::std::string* MetricMetadata::mutable_deprecated_api_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
  return deprecated_api_names_.Mutable(index);
}
inline void MetricMetadata::set_deprecated_api_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
  deprecated_api_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MetricMetadata::set_deprecated_api_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
  deprecated_api_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MetricMetadata::set_deprecated_api_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deprecated_api_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
}
inline void MetricMetadata::set_deprecated_api_names(int index, const char* value, size_t size) {
  deprecated_api_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
}
inline ::std::string* MetricMetadata::add_deprecated_api_names() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
  return deprecated_api_names_.Add();
}
inline void MetricMetadata::add_deprecated_api_names(const ::std::string& value) {
  deprecated_api_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
}
#if LANG_CXX11
inline void MetricMetadata::add_deprecated_api_names(::std::string&& value) {
  deprecated_api_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
}
#endif
inline void MetricMetadata::add_deprecated_api_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deprecated_api_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
}
inline void MetricMetadata::add_deprecated_api_names(const char* value, size_t size) {
  deprecated_api_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
MetricMetadata::deprecated_api_names() const {
  // @@protoc_insertion_point(field_list:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
  return deprecated_api_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
MetricMetadata::mutable_deprecated_api_names() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.data.v1alpha.MetricMetadata.deprecated_api_names)
  return &deprecated_api_names_;
}

// .google.analytics.data.v1alpha.MetricType type = 5;
inline void MetricMetadata::clear_type() {
  type_ = 0;
}
inline ::google::analytics::data::v1alpha::MetricType MetricMetadata::type() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricMetadata.type)
  return static_cast< ::google::analytics::data::v1alpha::MetricType >(type_);
}
inline void MetricMetadata::set_type(::google::analytics::data::v1alpha::MetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.type)
}

// string expression = 6;
inline void MetricMetadata::clear_expression() {
  expression_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetricMetadata::expression() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricMetadata.expression)
  return expression_.GetNoArena();
}
inline void MetricMetadata::set_expression(const ::std::string& value) {
  
  expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.expression)
}
#if LANG_CXX11
inline void MetricMetadata::set_expression(::std::string&& value) {
  
  expression_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.data.v1alpha.MetricMetadata.expression)
}
#endif
inline void MetricMetadata::set_expression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.data.v1alpha.MetricMetadata.expression)
}
inline void MetricMetadata::set_expression(const char* value, size_t size) {
  
  expression_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.data.v1alpha.MetricMetadata.expression)
}
inline ::std::string* MetricMetadata::mutable_expression() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.data.v1alpha.MetricMetadata.expression)
  return expression_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetricMetadata::release_expression() {
  // @@protoc_insertion_point(field_release:google.analytics.data.v1alpha.MetricMetadata.expression)
  
  return expression_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetricMetadata::set_allocated_expression(::std::string* expression) {
  if (expression != nullptr) {
    
  } else {
    
  }
  expression_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expression);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.data.v1alpha.MetricMetadata.expression)
}

// bool custom_definition = 7;
inline void MetricMetadata::clear_custom_definition() {
  custom_definition_ = false;
}
inline bool MetricMetadata::custom_definition() const {
  // @@protoc_insertion_point(field_get:google.analytics.data.v1alpha.MetricMetadata.custom_definition)
  return custom_definition_;
}
inline void MetricMetadata::set_custom_definition(bool value) {
  
  custom_definition_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.data.v1alpha.MetricMetadata.custom_definition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace data
}  // namespace analytics
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::analytics::data::v1alpha::Filter_StringFilter_MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::data::v1alpha::Filter_StringFilter_MatchType>() {
  return ::google::analytics::data::v1alpha::Filter_StringFilter_MatchType_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::data::v1alpha::Filter_NumericFilter_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::data::v1alpha::Filter_NumericFilter_Operation>() {
  return ::google::analytics::data::v1alpha::Filter_NumericFilter_Operation_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType>() {
  return ::google::analytics::data::v1alpha::OrderBy_DimensionOrderBy_OrderType_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::data::v1alpha::CohortsRange_Granularity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::data::v1alpha::CohortsRange_Granularity>() {
  return ::google::analytics::data::v1alpha::CohortsRange_Granularity_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::data::v1alpha::MetricAggregation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::data::v1alpha::MetricAggregation>() {
  return ::google::analytics::data::v1alpha::MetricAggregation_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::data::v1alpha::MetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::data::v1alpha::MetricType>() {
  return ::google::analytics::data::v1alpha::MetricType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fanalytics_2fdata_2fv1alpha_2fdata_2eproto
