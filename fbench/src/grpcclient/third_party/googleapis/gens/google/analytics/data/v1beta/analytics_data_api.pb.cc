// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/analytics/data/v1beta/analytics_data_api.proto

#include "google/analytics/data/v1beta/analytics_data_api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_RunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Pivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto;
namespace google {
namespace analytics {
namespace data {
namespace v1beta {
class MetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class RunReportRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunReportRequest> _instance;
} _RunReportRequest_default_instance_;
class RunReportResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunReportResponse> _instance;
} _RunReportResponse_default_instance_;
class RunPivotReportRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunPivotReportRequest> _instance;
} _RunPivotReportRequest_default_instance_;
class RunPivotReportResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunPivotReportResponse> _instance;
} _RunPivotReportResponse_default_instance_;
class BatchRunReportsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchRunReportsRequest> _instance;
} _BatchRunReportsRequest_default_instance_;
class BatchRunReportsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchRunReportsResponse> _instance;
} _BatchRunReportsResponse_default_instance_;
class BatchRunPivotReportsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchRunPivotReportsRequest> _instance;
} _BatchRunPivotReportsRequest_default_instance_;
class BatchRunPivotReportsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchRunPivotReportsResponse> _instance;
} _BatchRunPivotReportsResponse_default_instance_;
class GetMetadataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMetadataRequest> _instance;
} _GetMetadataRequest_default_instance_;
class RunRealtimeReportRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunRealtimeReportRequest> _instance;
} _RunRealtimeReportRequest_default_instance_;
class RunRealtimeReportResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunRealtimeReportResponse> _instance;
} _RunRealtimeReportResponse_default_instance_;
}  // namespace v1beta
}  // namespace data
}  // namespace analytics
}  // namespace google
static void InitDefaultsMetadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_Metadata_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::Metadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::Metadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMetadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_DimensionMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_MetricMetadata_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsRunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_RunReportRequest_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::RunReportRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::RunReportRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_RunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsRunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_CohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsRunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_RunReportResponse_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::RunReportResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::RunReportResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_RunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_ResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsRunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_RunPivotReportRequest_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::RunPivotReportRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::RunPivotReportRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_RunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsRunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_DateRange_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Pivot_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_CohortSpec_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsRunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_RunPivotReportResponse_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::RunPivotReportResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::RunPivotReportResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_RunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsRunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_PivotHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_ResponseMetaData_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsBatchRunReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_BatchRunReportsRequest_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::BatchRunReportsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::BatchRunReportsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchRunReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchRunReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_RunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base,}};

static void InitDefaultsBatchRunReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_BatchRunReportsResponse_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::BatchRunReportsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::BatchRunReportsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchRunReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchRunReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_RunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base,}};

static void InitDefaultsBatchRunPivotReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_BatchRunPivotReportsRequest_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::BatchRunPivotReportsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::BatchRunPivotReportsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchRunPivotReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchRunPivotReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_RunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base,}};

static void InitDefaultsBatchRunPivotReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_BatchRunPivotReportsResponse_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::BatchRunPivotReportsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::BatchRunPivotReportsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchRunPivotReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchRunPivotReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_RunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base,}};

static void InitDefaultsGetMetadataRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_GetMetadataRequest_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::GetMetadataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::GetMetadataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetMetadataRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetMetadataRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {}};

static void InitDefaultsRunRealtimeReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_RunRealtimeReportRequest_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::RunRealtimeReportRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::RunRealtimeReportRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RunRealtimeReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRunRealtimeReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_Dimension_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Metric_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_FilterExpression_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_OrderBy_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

static void InitDefaultsRunRealtimeReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::analytics::data::v1beta::_RunRealtimeReportResponse_default_instance_;
    new (ptr) ::google::analytics::data::v1beta::RunRealtimeReportResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::analytics::data::v1beta::RunRealtimeReportResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RunRealtimeReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRunRealtimeReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto}, {
      &scc_info_DimensionHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_MetricHeader_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_Row_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,
      &scc_info_PropertyQuota_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto.base,}};

void InitDefaults_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchRunReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchRunReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchRunPivotReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchRunPivotReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMetadataRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunRealtimeReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunRealtimeReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[12];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metadata, name_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metadata, dimensions_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::Metadata, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, property_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, dimensions_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, metrics_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, date_ranges_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, dimension_filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, metric_filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, offset_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, metric_aggregations_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, order_bys_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, currency_code_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, cohort_spec_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, keep_empty_rows_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportRequest, return_property_quota_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, dimension_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, metric_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, rows_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, totals_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, maximums_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, minimums_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, row_count_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, property_quota_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunReportResponse, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, property_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, dimensions_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, metrics_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, date_ranges_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, pivots_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, dimension_filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, metric_filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, currency_code_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, cohort_spec_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, keep_empty_rows_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportRequest, return_property_quota_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, pivot_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, dimension_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, metric_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, rows_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, aggregates_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, property_quota_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunPivotReportResponse, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunReportsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunReportsRequest, property_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunReportsRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunReportsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunReportsResponse, reports_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunReportsResponse, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunPivotReportsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunPivotReportsRequest, property_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunPivotReportsRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunPivotReportsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunPivotReportsResponse, pivot_reports_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::BatchRunPivotReportsResponse, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::GetMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::GetMetadataRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, property_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, dimensions_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, metrics_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, dimension_filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, metric_filter_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, metric_aggregations_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, order_bys_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportRequest, return_property_quota_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, dimension_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, metric_headers_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, rows_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, totals_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, maximums_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, minimums_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, row_count_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, property_quota_),
  PROTOBUF_FIELD_OFFSET(::google::analytics::data::v1beta::RunRealtimeReportResponse, kind_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::analytics::data::v1beta::Metadata)},
  { 8, -1, sizeof(::google::analytics::data::v1beta::RunReportRequest)},
  { 27, -1, sizeof(::google::analytics::data::v1beta::RunReportResponse)},
  { 42, -1, sizeof(::google::analytics::data::v1beta::RunPivotReportRequest)},
  { 58, -1, sizeof(::google::analytics::data::v1beta::RunPivotReportResponse)},
  { 71, -1, sizeof(::google::analytics::data::v1beta::BatchRunReportsRequest)},
  { 78, -1, sizeof(::google::analytics::data::v1beta::BatchRunReportsResponse)},
  { 85, -1, sizeof(::google::analytics::data::v1beta::BatchRunPivotReportsRequest)},
  { 92, -1, sizeof(::google::analytics::data::v1beta::BatchRunPivotReportsResponse)},
  { 99, -1, sizeof(::google::analytics::data::v1beta::GetMetadataRequest)},
  { 105, -1, sizeof(::google::analytics::data::v1beta::RunRealtimeReportRequest)},
  { 119, -1, sizeof(::google::analytics::data::v1beta::RunRealtimeReportResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_Metadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_RunReportRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_RunReportResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_RunPivotReportRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_RunPivotReportResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_BatchRunReportsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_BatchRunReportsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_BatchRunPivotReportsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_BatchRunPivotReportsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_GetMetadataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_RunRealtimeReportRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::analytics::data::v1beta::_RunRealtimeReportResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto = {
  {}, AddDescriptors_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto, "google/analytics/data/v1beta/analytics_data_api.proto", schemas,
  file_default_instances, TableStruct_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto::offsets,
  file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto, 12, file_level_enum_descriptors_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto, file_level_service_descriptors_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto,
};

const char descriptor_table_protodef_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[] =
  "\n5google/analytics/data/v1beta/analytics"
  "_data_api.proto\022\034google.analytics.data.v"
  "1beta\032\'google/analytics/data/v1beta/data"
  ".proto\032\034google/api/annotations.proto\032\027go"
  "ogle/api/client.proto\032\037google/api/field_"
  "behavior.proto\032\031google/api/resource.prot"
  "o\"\350\001\n\010Metadata\022\014\n\004name\030\003 \001(\t\022C\n\ndimensio"
  "ns\030\001 \003(\0132/.google.analytics.data.v1beta."
  "DimensionMetadata\022=\n\007metrics\030\002 \003(\0132,.goo"
  "gle.analytics.data.v1beta.MetricMetadata"
  ":J\352AG\n%analyticsdata.googleapis.com/Meta"
  "data\022\036properties/{property}/metadata\"\234\005\n"
  "\020RunReportRequest\022\020\n\010property\030\001 \001(\t\022;\n\nd"
  "imensions\030\002 \003(\0132\'.google.analytics.data."
  "v1beta.Dimension\0225\n\007metrics\030\003 \003(\0132$.goog"
  "le.analytics.data.v1beta.Metric\022<\n\013date_"
  "ranges\030\004 \003(\0132\'.google.analytics.data.v1b"
  "eta.DateRange\022H\n\020dimension_filter\030\005 \001(\0132"
  "..google.analytics.data.v1beta.FilterExp"
  "ression\022E\n\rmetric_filter\030\006 \001(\0132..google."
  "analytics.data.v1beta.FilterExpression\022\016"
  "\n\006offset\030\007 \001(\003\022\r\n\005limit\030\010 \001(\003\022L\n\023metric_"
  "aggregations\030\t \003(\0162/.google.analytics.da"
  "ta.v1beta.MetricAggregation\0228\n\torder_bys"
  "\030\n \003(\0132%.google.analytics.data.v1beta.Or"
  "derBy\022\025\n\rcurrency_code\030\013 \001(\t\022=\n\013cohort_s"
  "pec\030\014 \001(\0132(.google.analytics.data.v1beta"
  ".CohortSpec\022\027\n\017keep_empty_rows\030\r \001(\010\022\035\n\025"
  "return_property_quota\030\016 \001(\010\"\227\004\n\021RunRepor"
  "tResponse\022H\n\021dimension_headers\030\001 \003(\0132-.g"
  "oogle.analytics.data.v1beta.DimensionHea"
  "der\022B\n\016metric_headers\030\002 \003(\0132*.google.ana"
  "lytics.data.v1beta.MetricHeader\022/\n\004rows\030"
  "\003 \003(\0132!.google.analytics.data.v1beta.Row"
  "\0221\n\006totals\030\004 \003(\0132!.google.analytics.data"
  ".v1beta.Row\0223\n\010maximums\030\005 \003(\0132!.google.a"
  "nalytics.data.v1beta.Row\0223\n\010minimums\030\006 \003"
  "(\0132!.google.analytics.data.v1beta.Row\022\021\n"
  "\trow_count\030\007 \001(\005\022@\n\010metadata\030\010 \001(\0132..goo"
  "gle.analytics.data.v1beta.ResponseMetaDa"
  "ta\022C\n\016property_quota\030\t \001(\0132+.google.anal"
  "ytics.data.v1beta.PropertyQuota\022\014\n\004kind\030"
  "\n \001(\t\"\257\004\n\025RunPivotReportRequest\022\020\n\010prope"
  "rty\030\001 \001(\t\022;\n\ndimensions\030\002 \003(\0132\'.google.a"
  "nalytics.data.v1beta.Dimension\0225\n\007metric"
  "s\030\003 \003(\0132$.google.analytics.data.v1beta.M"
  "etric\022<\n\013date_ranges\030\004 \003(\0132\'.google.anal"
  "ytics.data.v1beta.DateRange\0223\n\006pivots\030\005 "
  "\003(\0132#.google.analytics.data.v1beta.Pivot"
  "\022H\n\020dimension_filter\030\006 \001(\0132..google.anal"
  "ytics.data.v1beta.FilterExpression\022E\n\rme"
  "tric_filter\030\007 \001(\0132..google.analytics.dat"
  "a.v1beta.FilterExpression\022\025\n\rcurrency_co"
  "de\030\010 \001(\t\022=\n\013cohort_spec\030\t \001(\0132(.google.a"
  "nalytics.data.v1beta.CohortSpec\022\027\n\017keep_"
  "empty_rows\030\n \001(\010\022\035\n\025return_property_quot"
  "a\030\013 \001(\010\"\345\003\n\026RunPivotReportResponse\022@\n\rpi"
  "vot_headers\030\001 \003(\0132).google.analytics.dat"
  "a.v1beta.PivotHeader\022H\n\021dimension_header"
  "s\030\002 \003(\0132-.google.analytics.data.v1beta.D"
  "imensionHeader\022B\n\016metric_headers\030\003 \003(\0132*"
  ".google.analytics.data.v1beta.MetricHead"
  "er\022/\n\004rows\030\004 \003(\0132!.google.analytics.data"
  ".v1beta.Row\0225\n\naggregates\030\005 \003(\0132!.google"
  ".analytics.data.v1beta.Row\022@\n\010metadata\030\006"
  " \001(\0132..google.analytics.data.v1beta.Resp"
  "onseMetaData\022C\n\016property_quota\030\007 \001(\0132+.g"
  "oogle.analytics.data.v1beta.PropertyQuot"
  "a\022\014\n\004kind\030\010 \001(\t\"l\n\026BatchRunReportsReques"
  "t\022\020\n\010property\030\001 \001(\t\022@\n\010requests\030\002 \003(\0132.."
  "google.analytics.data.v1beta.RunReportRe"
  "quest\"i\n\027BatchRunReportsResponse\022@\n\007repo"
  "rts\030\001 \003(\0132/.google.analytics.data.v1beta"
  ".RunReportResponse\022\014\n\004kind\030\002 \001(\t\"v\n\033Batc"
  "hRunPivotReportsRequest\022\020\n\010property\030\001 \001("
  "\t\022E\n\010requests\030\002 \003(\01323.google.analytics.d"
  "ata.v1beta.RunPivotReportRequest\"y\n\034Batc"
  "hRunPivotReportsResponse\022K\n\rpivot_report"
  "s\030\001 \003(\01324.google.analytics.data.v1beta.R"
  "unPivotReportResponse\022\014\n\004kind\030\002 \001(\t\"Q\n\022G"
  "etMetadataRequest\022;\n\004name\030\001 \001(\tB-\340A\002\372A\'\n"
  "%analyticsdata.googleapis.com/Metadata\"\347"
  "\003\n\030RunRealtimeReportRequest\022\020\n\010property\030"
  "\001 \001(\t\022;\n\ndimensions\030\002 \003(\0132\'.google.analy"
  "tics.data.v1beta.Dimension\0225\n\007metrics\030\003 "
  "\003(\0132$.google.analytics.data.v1beta.Metri"
  "c\022H\n\020dimension_filter\030\004 \001(\0132..google.ana"
  "lytics.data.v1beta.FilterExpression\022E\n\rm"
  "etric_filter\030\005 \001(\0132..google.analytics.da"
  "ta.v1beta.FilterExpression\022\r\n\005limit\030\006 \001("
  "\003\022L\n\023metric_aggregations\030\007 \003(\0162/.google."
  "analytics.data.v1beta.MetricAggregation\022"
  "8\n\torder_bys\030\010 \003(\0132%.google.analytics.da"
  "ta.v1beta.OrderBy\022\035\n\025return_property_quo"
  "ta\030\t \001(\010\"\335\003\n\031RunRealtimeReportResponse\022H"
  "\n\021dimension_headers\030\001 \003(\0132-.google.analy"
  "tics.data.v1beta.DimensionHeader\022B\n\016metr"
  "ic_headers\030\002 \003(\0132*.google.analytics.data"
  ".v1beta.MetricHeader\022/\n\004rows\030\003 \003(\0132!.goo"
  "gle.analytics.data.v1beta.Row\0221\n\006totals\030"
  "\004 \003(\0132!.google.analytics.data.v1beta.Row"
  "\0223\n\010maximums\030\005 \003(\0132!.google.analytics.da"
  "ta.v1beta.Row\0223\n\010minimums\030\006 \003(\0132!.google"
  ".analytics.data.v1beta.Row\022\021\n\trow_count\030"
  "\007 \001(\005\022C\n\016property_quota\030\010 \001(\0132+.google.a"
  "nalytics.data.v1beta.PropertyQuota\022\014\n\004ki"
  "nd\030\t \001(\t2\343\t\n\021BetaAnalyticsData\022\242\001\n\tRunRe"
  "port\022..google.analytics.data.v1beta.RunR"
  "eportRequest\032/.google.analytics.data.v1b"
  "eta.RunReportResponse\"4\202\323\344\223\002.\")/v1beta/{"
  "property=properties/*}:runReport:\001*\022\266\001\n\016"
  "RunPivotReport\0223.google.analytics.data.v"
  "1beta.RunPivotReportRequest\0324.google.ana"
  "lytics.data.v1beta.RunPivotReportRespons"
  "e\"9\202\323\344\223\0023\"./v1beta/{property=properties/"
  "*}:runPivotReport:\001*\022\272\001\n\017BatchRunReports"
  "\0224.google.analytics.data.v1beta.BatchRun"
  "ReportsRequest\0325.google.analytics.data.v"
  "1beta.BatchRunReportsResponse\":\202\323\344\223\0024\"//"
  "v1beta/{property=properties/*}:batchRunR"
  "eports:\001*\022\316\001\n\024BatchRunPivotReports\0229.goo"
  "gle.analytics.data.v1beta.BatchRunPivotR"
  "eportsRequest\032:.google.analytics.data.v1"
  "beta.BatchRunPivotReportsResponse\"\?\202\323\344\223\002"
  "9\"4/v1beta/{property=properties/*}:batch"
  "RunPivotReports:\001*\022\234\001\n\013GetMetadata\0220.goo"
  "gle.analytics.data.v1beta.GetMetadataReq"
  "uest\032&.google.analytics.data.v1beta.Meta"
  "data\"3\202\323\344\223\002&\022$/v1beta/{name=properties/*"
  "/metadata}\332A\004name\022\302\001\n\021RunRealtimeReport\022"
  "6.google.analytics.data.v1beta.RunRealti"
  "meReportRequest\0327.google.analytics.data."
  "v1beta.RunRealtimeReportResponse\"<\202\323\344\223\0026"
  "\"1/v1beta/{property=properties/*}:runRea"
  "ltimeReport:\001*\032~\312A\034analyticsdata.googlea"
  "pis.com\322A\\https://www.googleapis.com/aut"
  "h/analytics,https://www.googleapis.com/a"
  "uth/analytics.readonlyB}\n com.google.ana"
  "lytics.data.v1betaB\025AnalyticsDataApiProt"
  "oP\001Z@google.golang.org/genproto/googleap"
  "is/analytics/data/v1beta;datab\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto = {
  false, InitDefaults_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto, 
  descriptor_table_protodef_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto,
  "google/analytics/data/v1beta/analytics_data_api.proto", &assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto, 5637,
};

void AddDescriptors_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[5] =
  {
    ::AddDescriptors_google_2fanalytics_2fdata_2fv1beta_2fdata_2eproto,
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
    ::AddDescriptors_google_2fapi_2fclient_2eproto,
    ::AddDescriptors_google_2fapi_2ffield_5fbehavior_2eproto,
    ::AddDescriptors_google_2fapi_2fresource_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto, deps, 5);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto = []() { AddDescriptors_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto(); return true; }();
namespace google {
namespace analytics {
namespace data {
namespace v1beta {

// ===================================================================

void Metadata::InitAsDefaultInstance() {
}
class Metadata::HasBitSetters {
 public:
};

void Metadata::clear_dimensions() {
  dimensions_.Clear();
}
void Metadata::clear_metrics() {
  metrics_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kNameFieldNumber;
const int Metadata::kDimensionsFieldNumber;
const int Metadata::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.Metadata)
}

void Metadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  metrics_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Metadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Metadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.DimensionMetadata dimensions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DimensionMetadata::_InternalParse;
          object = msg->add_dimensions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricMetadata metrics = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::MetricMetadata::_InternalParse;
          object = msg->add_metrics();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.Metadata.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.Metadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.DimensionMetadata dimensions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricMetadata metrics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.Metadata.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.Metadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionMetadata dimensions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dimensions(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.MetricMetadata metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->metrics(static_cast<int>(i)),
      output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Metadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.Metadata)
}

::google::protobuf::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionMetadata dimensions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dimensions(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.MetricMetadata metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->metrics(static_cast<int>(i)), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.Metadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.Metadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionMetadata dimensions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimensions(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricMetadata metrics = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metrics(static_cast<int>(i)));
    }
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::google::protobuf::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.Metadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  metrics_.MergeFrom(from.metrics_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimensions_)->InternalSwap(CastToBase(&other->dimensions_));
  CastToBase(&metrics_)->InternalSwap(CastToBase(&other->metrics_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunReportRequest::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_RunReportRequest_default_instance_._instance.get_mutable()->dimension_filter_ = const_cast< ::google::analytics::data::v1beta::FilterExpression*>(
      ::google::analytics::data::v1beta::FilterExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_RunReportRequest_default_instance_._instance.get_mutable()->metric_filter_ = const_cast< ::google::analytics::data::v1beta::FilterExpression*>(
      ::google::analytics::data::v1beta::FilterExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_RunReportRequest_default_instance_._instance.get_mutable()->cohort_spec_ = const_cast< ::google::analytics::data::v1beta::CohortSpec*>(
      ::google::analytics::data::v1beta::CohortSpec::internal_default_instance());
}
class RunReportRequest::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::FilterExpression& dimension_filter(const RunReportRequest* msg);
  static const ::google::analytics::data::v1beta::FilterExpression& metric_filter(const RunReportRequest* msg);
  static const ::google::analytics::data::v1beta::CohortSpec& cohort_spec(const RunReportRequest* msg);
};

const ::google::analytics::data::v1beta::FilterExpression&
RunReportRequest::HasBitSetters::dimension_filter(const RunReportRequest* msg) {
  return *msg->dimension_filter_;
}
const ::google::analytics::data::v1beta::FilterExpression&
RunReportRequest::HasBitSetters::metric_filter(const RunReportRequest* msg) {
  return *msg->metric_filter_;
}
const ::google::analytics::data::v1beta::CohortSpec&
RunReportRequest::HasBitSetters::cohort_spec(const RunReportRequest* msg) {
  return *msg->cohort_spec_;
}
void RunReportRequest::clear_dimensions() {
  dimensions_.Clear();
}
void RunReportRequest::clear_metrics() {
  metrics_.Clear();
}
void RunReportRequest::clear_date_ranges() {
  date_ranges_.Clear();
}
void RunReportRequest::clear_dimension_filter() {
  if (GetArenaNoVirtual() == nullptr && dimension_filter_ != nullptr) {
    delete dimension_filter_;
  }
  dimension_filter_ = nullptr;
}
void RunReportRequest::clear_metric_filter() {
  if (GetArenaNoVirtual() == nullptr && metric_filter_ != nullptr) {
    delete metric_filter_;
  }
  metric_filter_ = nullptr;
}
void RunReportRequest::clear_order_bys() {
  order_bys_.Clear();
}
void RunReportRequest::clear_cohort_spec() {
  if (GetArenaNoVirtual() == nullptr && cohort_spec_ != nullptr) {
    delete cohort_spec_;
  }
  cohort_spec_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunReportRequest::kPropertyFieldNumber;
const int RunReportRequest::kDimensionsFieldNumber;
const int RunReportRequest::kMetricsFieldNumber;
const int RunReportRequest::kDateRangesFieldNumber;
const int RunReportRequest::kDimensionFilterFieldNumber;
const int RunReportRequest::kMetricFilterFieldNumber;
const int RunReportRequest::kOffsetFieldNumber;
const int RunReportRequest::kLimitFieldNumber;
const int RunReportRequest::kMetricAggregationsFieldNumber;
const int RunReportRequest::kOrderBysFieldNumber;
const int RunReportRequest::kCurrencyCodeFieldNumber;
const int RunReportRequest::kCohortSpecFieldNumber;
const int RunReportRequest::kKeepEmptyRowsFieldNumber;
const int RunReportRequest::kReturnPropertyQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunReportRequest::RunReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.RunReportRequest)
}
RunReportRequest::RunReportRequest(const RunReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_),
      metrics_(from.metrics_),
      date_ranges_(from.date_ranges_),
      metric_aggregations_(from.metric_aggregations_),
      order_bys_(from.order_bys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.property().size() > 0) {
    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currency_code().size() > 0) {
    currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
  }
  if (from.has_dimension_filter()) {
    dimension_filter_ = new ::google::analytics::data::v1beta::FilterExpression(*from.dimension_filter_);
  } else {
    dimension_filter_ = nullptr;
  }
  if (from.has_metric_filter()) {
    metric_filter_ = new ::google::analytics::data::v1beta::FilterExpression(*from.metric_filter_);
  } else {
    metric_filter_ = nullptr;
  }
  if (from.has_cohort_spec()) {
    cohort_spec_ = new ::google::analytics::data::v1beta::CohortSpec(*from.cohort_spec_);
  } else {
    cohort_spec_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_property_quota_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(return_property_quota_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.RunReportRequest)
}

void RunReportRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dimension_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_property_quota_) -
      reinterpret_cast<char*>(&dimension_filter_)) + sizeof(return_property_quota_));
}

RunReportRequest::~RunReportRequest() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.RunReportRequest)
  SharedDtor();
}

void RunReportRequest::SharedDtor() {
  property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dimension_filter_;
  if (this != internal_default_instance()) delete metric_filter_;
  if (this != internal_default_instance()) delete cohort_spec_;
}

void RunReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunReportRequest& RunReportRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void RunReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.RunReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  metrics_.Clear();
  date_ranges_.Clear();
  metric_aggregations_.Clear();
  order_bys_.Clear();
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dimension_filter_ != nullptr) {
    delete dimension_filter_;
  }
  dimension_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metric_filter_ != nullptr) {
    delete metric_filter_;
  }
  metric_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cohort_spec_ != nullptr) {
    delete cohort_spec_;
  }
  cohort_spec_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_property_quota_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(return_property_quota_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunReportRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunReportRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string property = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunReportRequest.property");
        object = msg->mutable_property();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Dimension::_InternalParse;
          object = msg->add_dimensions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Metric metrics = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Metric::_InternalParse;
          object = msg->add_metrics();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DateRange::_InternalParse;
          object = msg->add_date_ranges();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpression dimension_filter = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
        object = msg->mutable_dimension_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpression metric_filter = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
        object = msg->mutable_metric_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 offset = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 limit = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 74) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_metric_aggregations();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_metric_aggregations(static_cast<::google::analytics::data::v1beta::MetricAggregation>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.OrderBy order_bys = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::OrderBy::_InternalParse;
          object = msg->add_order_bys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // string currency_code = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunReportRequest.currency_code");
        object = msg->mutable_currency_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.analytics.data.v1beta.CohortSpec cohort_spec = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::CohortSpec::_InternalParse;
        object = msg->mutable_cohort_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool keep_empty_rows = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_keep_empty_rows(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool return_property_quota = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_return_property_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.RunReportRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->property().data(), static_cast<int>(this->property().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunReportRequest.property"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Metric metrics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_date_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpression dimension_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dimension_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpression metric_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_metric_aggregations(static_cast< ::google::analytics::data::v1beta::MetricAggregation >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_metric_aggregations(static_cast< ::google::analytics::data::v1beta::MetricAggregation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.OrderBy order_bys = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_bys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currency_code = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency_code().data(), static_cast<int>(this->currency_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunReportRequest.currency_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.CohortSpec cohort_spec = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cohort_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_empty_rows = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_empty_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_property_quota = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_property_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.RunReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.RunReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.RunReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunReportRequest.property");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property(), output);
  }

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dimensions(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->metrics(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->date_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->date_ranges(static_cast<int>(i)),
      output);
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 5;
  if (this->has_dimension_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::dimension_filter(this), output);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 6;
  if (this->has_metric_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::metric_filter(this), output);
  }

  // int64 offset = 7;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->offset(), output);
  }

  // int64 limit = 8;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->limit(), output);
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 9;
  if (this->metric_aggregations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_metric_aggregations_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->metric_aggregations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->metric_aggregations(i), output);
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_bys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->order_bys(static_cast<int>(i)),
      output);
  }

  // string currency_code = 11;
  if (this->currency_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_code().data(), static_cast<int>(this->currency_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunReportRequest.currency_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->currency_code(), output);
  }

  // .google.analytics.data.v1beta.CohortSpec cohort_spec = 12;
  if (this->has_cohort_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::cohort_spec(this), output);
  }

  // bool keep_empty_rows = 13;
  if (this->keep_empty_rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->keep_empty_rows(), output);
  }

  // bool return_property_quota = 14;
  if (this->return_property_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->return_property_quota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.RunReportRequest)
}

::google::protobuf::uint8* RunReportRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.RunReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunReportRequest.property");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->property(), target);
  }

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dimensions(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->metrics(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->date_ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->date_ranges(static_cast<int>(i)), target);
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 5;
  if (this->has_dimension_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::dimension_filter(this), target);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 6;
  if (this->has_metric_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::metric_filter(this), target);
  }

  // int64 offset = 7;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->offset(), target);
  }

  // int64 limit = 8;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->limit(), target);
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 9;
  if (this->metric_aggregations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _metric_aggregations_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->metric_aggregations_, target);
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_bys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->order_bys(static_cast<int>(i)), target);
  }

  // string currency_code = 11;
  if (this->currency_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_code().data(), static_cast<int>(this->currency_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunReportRequest.currency_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->currency_code(), target);
  }

  // .google.analytics.data.v1beta.CohortSpec cohort_spec = 12;
  if (this->has_cohort_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::cohort_spec(this), target);
  }

  // bool keep_empty_rows = 13;
  if (this->keep_empty_rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->keep_empty_rows(), target);
  }

  // bool return_property_quota = 14;
  if (this->return_property_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->return_property_quota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.RunReportRequest)
  return target;
}

size_t RunReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.RunReportRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimensions(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metrics(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->date_ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->date_ranges(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->metric_aggregations_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->metric_aggregations(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _metric_aggregations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->order_bys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_bys(static_cast<int>(i)));
    }
  }

  // string property = 1;
  if (this->property().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->property());
  }

  // string currency_code = 11;
  if (this->currency_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency_code());
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 5;
  if (this->has_dimension_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dimension_filter_);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 6;
  if (this->has_metric_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metric_filter_);
  }

  // .google.analytics.data.v1beta.CohortSpec cohort_spec = 12;
  if (this->has_cohort_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cohort_spec_);
  }

  // int64 offset = 7;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int64 limit = 8;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // bool keep_empty_rows = 13;
  if (this->keep_empty_rows() != 0) {
    total_size += 1 + 1;
  }

  // bool return_property_quota = 14;
  if (this->return_property_quota() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.RunReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunReportRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RunReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.RunReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.RunReportRequest)
    MergeFrom(*source);
  }
}

void RunReportRequest::MergeFrom(const RunReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.RunReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  metrics_.MergeFrom(from.metrics_);
  date_ranges_.MergeFrom(from.date_ranges_);
  metric_aggregations_.MergeFrom(from.metric_aggregations_);
  order_bys_.MergeFrom(from.order_bys_);
  if (from.property().size() > 0) {

    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  if (from.currency_code().size() > 0) {

    currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
  }
  if (from.has_dimension_filter()) {
    mutable_dimension_filter()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.dimension_filter());
  }
  if (from.has_metric_filter()) {
    mutable_metric_filter()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.metric_filter());
  }
  if (from.has_cohort_spec()) {
    mutable_cohort_spec()->::google::analytics::data::v1beta::CohortSpec::MergeFrom(from.cohort_spec());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.keep_empty_rows() != 0) {
    set_keep_empty_rows(from.keep_empty_rows());
  }
  if (from.return_property_quota() != 0) {
    set_return_property_quota(from.return_property_quota());
  }
}

void RunReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.RunReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunReportRequest::CopyFrom(const RunReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.RunReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunReportRequest::IsInitialized() const {
  return true;
}

void RunReportRequest::Swap(RunReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunReportRequest::InternalSwap(RunReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimensions_)->InternalSwap(CastToBase(&other->dimensions_));
  CastToBase(&metrics_)->InternalSwap(CastToBase(&other->metrics_));
  CastToBase(&date_ranges_)->InternalSwap(CastToBase(&other->date_ranges_));
  metric_aggregations_.InternalSwap(&other->metric_aggregations_);
  CastToBase(&order_bys_)->InternalSwap(CastToBase(&other->order_bys_));
  property_.Swap(&other->property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_code_.Swap(&other->currency_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dimension_filter_, other->dimension_filter_);
  swap(metric_filter_, other->metric_filter_);
  swap(cohort_spec_, other->cohort_spec_);
  swap(offset_, other->offset_);
  swap(limit_, other->limit_);
  swap(keep_empty_rows_, other->keep_empty_rows_);
  swap(return_property_quota_, other->return_property_quota_);
}

::google::protobuf::Metadata RunReportRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunReportResponse::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_RunReportResponse_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::google::analytics::data::v1beta::ResponseMetaData*>(
      ::google::analytics::data::v1beta::ResponseMetaData::internal_default_instance());
  ::google::analytics::data::v1beta::_RunReportResponse_default_instance_._instance.get_mutable()->property_quota_ = const_cast< ::google::analytics::data::v1beta::PropertyQuota*>(
      ::google::analytics::data::v1beta::PropertyQuota::internal_default_instance());
}
class RunReportResponse::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::ResponseMetaData& metadata(const RunReportResponse* msg);
  static const ::google::analytics::data::v1beta::PropertyQuota& property_quota(const RunReportResponse* msg);
};

const ::google::analytics::data::v1beta::ResponseMetaData&
RunReportResponse::HasBitSetters::metadata(const RunReportResponse* msg) {
  return *msg->metadata_;
}
const ::google::analytics::data::v1beta::PropertyQuota&
RunReportResponse::HasBitSetters::property_quota(const RunReportResponse* msg) {
  return *msg->property_quota_;
}
void RunReportResponse::clear_dimension_headers() {
  dimension_headers_.Clear();
}
void RunReportResponse::clear_metric_headers() {
  metric_headers_.Clear();
}
void RunReportResponse::clear_rows() {
  rows_.Clear();
}
void RunReportResponse::clear_totals() {
  totals_.Clear();
}
void RunReportResponse::clear_maximums() {
  maximums_.Clear();
}
void RunReportResponse::clear_minimums() {
  minimums_.Clear();
}
void RunReportResponse::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void RunReportResponse::clear_property_quota() {
  if (GetArenaNoVirtual() == nullptr && property_quota_ != nullptr) {
    delete property_quota_;
  }
  property_quota_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunReportResponse::kDimensionHeadersFieldNumber;
const int RunReportResponse::kMetricHeadersFieldNumber;
const int RunReportResponse::kRowsFieldNumber;
const int RunReportResponse::kTotalsFieldNumber;
const int RunReportResponse::kMaximumsFieldNumber;
const int RunReportResponse::kMinimumsFieldNumber;
const int RunReportResponse::kRowCountFieldNumber;
const int RunReportResponse::kMetadataFieldNumber;
const int RunReportResponse::kPropertyQuotaFieldNumber;
const int RunReportResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunReportResponse::RunReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.RunReportResponse)
}
RunReportResponse::RunReportResponse(const RunReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimension_headers_(from.dimension_headers_),
      metric_headers_(from.metric_headers_),
      rows_(from.rows_),
      totals_(from.totals_),
      maximums_(from.maximums_),
      minimums_(from.minimums_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::google::analytics::data::v1beta::ResponseMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_property_quota()) {
    property_quota_ = new ::google::analytics::data::v1beta::PropertyQuota(*from.property_quota_);
  } else {
    property_quota_ = nullptr;
  }
  row_count_ = from.row_count_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.RunReportResponse)
}

void RunReportResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(row_count_));
}

RunReportResponse::~RunReportResponse() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.RunReportResponse)
  SharedDtor();
}

void RunReportResponse::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete property_quota_;
}

void RunReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunReportResponse& RunReportResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void RunReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.RunReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_headers_.Clear();
  metric_headers_.Clear();
  rows_.Clear();
  totals_.Clear();
  maximums_.Clear();
  minimums_.Clear();
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && property_quota_ != nullptr) {
    delete property_quota_;
  }
  property_quota_ = nullptr;
  row_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunReportResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunReportResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DimensionHeader::_InternalParse;
          object = msg->add_dimension_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::MetricHeader::_InternalParse;
          object = msg->add_metric_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row rows = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_rows();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row totals = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_totals();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row maximums = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_maximums();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row minimums = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_minimums();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // int32 row_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_row_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.analytics.data.v1beta.ResponseMetaData metadata = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::ResponseMetaData::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.PropertyQuota property_quota = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::PropertyQuota::_InternalParse;
        object = msg->mutable_property_quota();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string kind = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunReportResponse.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.RunReportResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimension_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metric_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row rows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row totals = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_totals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row maximums = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_maximums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row minimums = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_minimums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 row_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.ResponseMetaData metadata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.PropertyQuota property_quota = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunReportResponse.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.RunReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.RunReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.RunReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dimension_headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->metric_headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row rows = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->rows(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row totals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->totals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->totals(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row maximums = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->maximums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->maximums(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row minimums = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->minimums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->minimums(static_cast<int>(i)),
      output);
  }

  // int32 row_count = 7;
  if (this->row_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->row_count(), output);
  }

  // .google.analytics.data.v1beta.ResponseMetaData metadata = 8;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::metadata(this), output);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 9;
  if (this->has_property_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::property_quota(this), output);
  }

  // string kind = 10;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunReportResponse.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.RunReportResponse)
}

::google::protobuf::uint8* RunReportResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.RunReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dimension_headers(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->metric_headers(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row rows = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->rows(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row totals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->totals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->totals(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row maximums = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->maximums_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->maximums(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row minimums = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->minimums_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->minimums(static_cast<int>(i)), target);
  }

  // int32 row_count = 7;
  if (this->row_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->row_count(), target);
  }

  // .google.analytics.data.v1beta.ResponseMetaData metadata = 8;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::metadata(this), target);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 9;
  if (this->has_property_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::property_quota(this), target);
  }

  // string kind = 10;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunReportResponse.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.RunReportResponse)
  return target;
}

size_t RunReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.RunReportResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dimension_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimension_headers(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metric_headers(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row rows = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row totals = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->totals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->totals(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row maximums = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->maximums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->maximums(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row minimums = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->minimums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->minimums(static_cast<int>(i)));
    }
  }

  // string kind = 10;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // .google.analytics.data.v1beta.ResponseMetaData metadata = 8;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 9;
  if (this->has_property_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_quota_);
  }

  // int32 row_count = 7;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.RunReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunReportResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RunReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.RunReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.RunReportResponse)
    MergeFrom(*source);
  }
}

void RunReportResponse::MergeFrom(const RunReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.RunReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_headers_.MergeFrom(from.dimension_headers_);
  metric_headers_.MergeFrom(from.metric_headers_);
  rows_.MergeFrom(from.rows_);
  totals_.MergeFrom(from.totals_);
  maximums_.MergeFrom(from.maximums_);
  minimums_.MergeFrom(from.minimums_);
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::google::analytics::data::v1beta::ResponseMetaData::MergeFrom(from.metadata());
  }
  if (from.has_property_quota()) {
    mutable_property_quota()->::google::analytics::data::v1beta::PropertyQuota::MergeFrom(from.property_quota());
  }
  if (from.row_count() != 0) {
    set_row_count(from.row_count());
  }
}

void RunReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.RunReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunReportResponse::CopyFrom(const RunReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.RunReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunReportResponse::IsInitialized() const {
  return true;
}

void RunReportResponse::Swap(RunReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunReportResponse::InternalSwap(RunReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimension_headers_)->InternalSwap(CastToBase(&other->dimension_headers_));
  CastToBase(&metric_headers_)->InternalSwap(CastToBase(&other->metric_headers_));
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
  CastToBase(&totals_)->InternalSwap(CastToBase(&other->totals_));
  CastToBase(&maximums_)->InternalSwap(CastToBase(&other->maximums_));
  CastToBase(&minimums_)->InternalSwap(CastToBase(&other->minimums_));
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(property_quota_, other->property_quota_);
  swap(row_count_, other->row_count_);
}

::google::protobuf::Metadata RunReportResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunPivotReportRequest::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_RunPivotReportRequest_default_instance_._instance.get_mutable()->dimension_filter_ = const_cast< ::google::analytics::data::v1beta::FilterExpression*>(
      ::google::analytics::data::v1beta::FilterExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_RunPivotReportRequest_default_instance_._instance.get_mutable()->metric_filter_ = const_cast< ::google::analytics::data::v1beta::FilterExpression*>(
      ::google::analytics::data::v1beta::FilterExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_RunPivotReportRequest_default_instance_._instance.get_mutable()->cohort_spec_ = const_cast< ::google::analytics::data::v1beta::CohortSpec*>(
      ::google::analytics::data::v1beta::CohortSpec::internal_default_instance());
}
class RunPivotReportRequest::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::FilterExpression& dimension_filter(const RunPivotReportRequest* msg);
  static const ::google::analytics::data::v1beta::FilterExpression& metric_filter(const RunPivotReportRequest* msg);
  static const ::google::analytics::data::v1beta::CohortSpec& cohort_spec(const RunPivotReportRequest* msg);
};

const ::google::analytics::data::v1beta::FilterExpression&
RunPivotReportRequest::HasBitSetters::dimension_filter(const RunPivotReportRequest* msg) {
  return *msg->dimension_filter_;
}
const ::google::analytics::data::v1beta::FilterExpression&
RunPivotReportRequest::HasBitSetters::metric_filter(const RunPivotReportRequest* msg) {
  return *msg->metric_filter_;
}
const ::google::analytics::data::v1beta::CohortSpec&
RunPivotReportRequest::HasBitSetters::cohort_spec(const RunPivotReportRequest* msg) {
  return *msg->cohort_spec_;
}
void RunPivotReportRequest::clear_dimensions() {
  dimensions_.Clear();
}
void RunPivotReportRequest::clear_metrics() {
  metrics_.Clear();
}
void RunPivotReportRequest::clear_date_ranges() {
  date_ranges_.Clear();
}
void RunPivotReportRequest::clear_pivots() {
  pivots_.Clear();
}
void RunPivotReportRequest::clear_dimension_filter() {
  if (GetArenaNoVirtual() == nullptr && dimension_filter_ != nullptr) {
    delete dimension_filter_;
  }
  dimension_filter_ = nullptr;
}
void RunPivotReportRequest::clear_metric_filter() {
  if (GetArenaNoVirtual() == nullptr && metric_filter_ != nullptr) {
    delete metric_filter_;
  }
  metric_filter_ = nullptr;
}
void RunPivotReportRequest::clear_cohort_spec() {
  if (GetArenaNoVirtual() == nullptr && cohort_spec_ != nullptr) {
    delete cohort_spec_;
  }
  cohort_spec_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunPivotReportRequest::kPropertyFieldNumber;
const int RunPivotReportRequest::kDimensionsFieldNumber;
const int RunPivotReportRequest::kMetricsFieldNumber;
const int RunPivotReportRequest::kDateRangesFieldNumber;
const int RunPivotReportRequest::kPivotsFieldNumber;
const int RunPivotReportRequest::kDimensionFilterFieldNumber;
const int RunPivotReportRequest::kMetricFilterFieldNumber;
const int RunPivotReportRequest::kCurrencyCodeFieldNumber;
const int RunPivotReportRequest::kCohortSpecFieldNumber;
const int RunPivotReportRequest::kKeepEmptyRowsFieldNumber;
const int RunPivotReportRequest::kReturnPropertyQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunPivotReportRequest::RunPivotReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.RunPivotReportRequest)
}
RunPivotReportRequest::RunPivotReportRequest(const RunPivotReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_),
      metrics_(from.metrics_),
      date_ranges_(from.date_ranges_),
      pivots_(from.pivots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.property().size() > 0) {
    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currency_code().size() > 0) {
    currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
  }
  if (from.has_dimension_filter()) {
    dimension_filter_ = new ::google::analytics::data::v1beta::FilterExpression(*from.dimension_filter_);
  } else {
    dimension_filter_ = nullptr;
  }
  if (from.has_metric_filter()) {
    metric_filter_ = new ::google::analytics::data::v1beta::FilterExpression(*from.metric_filter_);
  } else {
    metric_filter_ = nullptr;
  }
  if (from.has_cohort_spec()) {
    cohort_spec_ = new ::google::analytics::data::v1beta::CohortSpec(*from.cohort_spec_);
  } else {
    cohort_spec_ = nullptr;
  }
  ::memcpy(&keep_empty_rows_, &from.keep_empty_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_property_quota_) -
    reinterpret_cast<char*>(&keep_empty_rows_)) + sizeof(return_property_quota_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.RunPivotReportRequest)
}

void RunPivotReportRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dimension_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_property_quota_) -
      reinterpret_cast<char*>(&dimension_filter_)) + sizeof(return_property_quota_));
}

RunPivotReportRequest::~RunPivotReportRequest() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.RunPivotReportRequest)
  SharedDtor();
}

void RunPivotReportRequest::SharedDtor() {
  property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dimension_filter_;
  if (this != internal_default_instance()) delete metric_filter_;
  if (this != internal_default_instance()) delete cohort_spec_;
}

void RunPivotReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunPivotReportRequest& RunPivotReportRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunPivotReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void RunPivotReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.RunPivotReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  metrics_.Clear();
  date_ranges_.Clear();
  pivots_.Clear();
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dimension_filter_ != nullptr) {
    delete dimension_filter_;
  }
  dimension_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metric_filter_ != nullptr) {
    delete metric_filter_;
  }
  metric_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cohort_spec_ != nullptr) {
    delete cohort_spec_;
  }
  cohort_spec_ = nullptr;
  ::memset(&keep_empty_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_property_quota_) -
      reinterpret_cast<char*>(&keep_empty_rows_)) + sizeof(return_property_quota_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunPivotReportRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunPivotReportRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string property = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunPivotReportRequest.property");
        object = msg->mutable_property();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Dimension::_InternalParse;
          object = msg->add_dimensions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Metric metrics = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Metric::_InternalParse;
          object = msg->add_metrics();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DateRange::_InternalParse;
          object = msg->add_date_ranges();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Pivot pivots = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Pivot::_InternalParse;
          object = msg->add_pivots();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpression dimension_filter = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
        object = msg->mutable_dimension_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpression metric_filter = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
        object = msg->mutable_metric_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string currency_code = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunPivotReportRequest.currency_code");
        object = msg->mutable_currency_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.analytics.data.v1beta.CohortSpec cohort_spec = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::CohortSpec::_InternalParse;
        object = msg->mutable_cohort_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool keep_empty_rows = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_keep_empty_rows(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool return_property_quota = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_return_property_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunPivotReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.RunPivotReportRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->property().data(), static_cast<int>(this->property().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunPivotReportRequest.property"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Metric metrics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_date_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Pivot pivots = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pivots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpression dimension_filter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dimension_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpression metric_filter = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currency_code = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency_code().data(), static_cast<int>(this->currency_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunPivotReportRequest.currency_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.CohortSpec cohort_spec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cohort_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_empty_rows = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_empty_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_property_quota = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_property_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.RunPivotReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.RunPivotReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunPivotReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.RunPivotReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunPivotReportRequest.property");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property(), output);
  }

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dimensions(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->metrics(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->date_ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->date_ranges(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Pivot pivots = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->pivots(static_cast<int>(i)),
      output);
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 6;
  if (this->has_dimension_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::dimension_filter(this), output);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 7;
  if (this->has_metric_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::metric_filter(this), output);
  }

  // string currency_code = 8;
  if (this->currency_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_code().data(), static_cast<int>(this->currency_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunPivotReportRequest.currency_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->currency_code(), output);
  }

  // .google.analytics.data.v1beta.CohortSpec cohort_spec = 9;
  if (this->has_cohort_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::cohort_spec(this), output);
  }

  // bool keep_empty_rows = 10;
  if (this->keep_empty_rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->keep_empty_rows(), output);
  }

  // bool return_property_quota = 11;
  if (this->return_property_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->return_property_quota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.RunPivotReportRequest)
}

::google::protobuf::uint8* RunPivotReportRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.RunPivotReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunPivotReportRequest.property");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->property(), target);
  }

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dimensions(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->metrics(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->date_ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->date_ranges(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Pivot pivots = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->pivots(static_cast<int>(i)), target);
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 6;
  if (this->has_dimension_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::dimension_filter(this), target);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 7;
  if (this->has_metric_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::metric_filter(this), target);
  }

  // string currency_code = 8;
  if (this->currency_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_code().data(), static_cast<int>(this->currency_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunPivotReportRequest.currency_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->currency_code(), target);
  }

  // .google.analytics.data.v1beta.CohortSpec cohort_spec = 9;
  if (this->has_cohort_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::cohort_spec(this), target);
  }

  // bool keep_empty_rows = 10;
  if (this->keep_empty_rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->keep_empty_rows(), target);
  }

  // bool return_property_quota = 11;
  if (this->return_property_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->return_property_quota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.RunPivotReportRequest)
  return target;
}

size_t RunPivotReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.RunPivotReportRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimensions(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metrics(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.DateRange date_ranges = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->date_ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->date_ranges(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Pivot pivots = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pivots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pivots(static_cast<int>(i)));
    }
  }

  // string property = 1;
  if (this->property().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->property());
  }

  // string currency_code = 8;
  if (this->currency_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency_code());
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 6;
  if (this->has_dimension_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dimension_filter_);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 7;
  if (this->has_metric_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metric_filter_);
  }

  // .google.analytics.data.v1beta.CohortSpec cohort_spec = 9;
  if (this->has_cohort_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cohort_spec_);
  }

  // bool keep_empty_rows = 10;
  if (this->keep_empty_rows() != 0) {
    total_size += 1 + 1;
  }

  // bool return_property_quota = 11;
  if (this->return_property_quota() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunPivotReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.RunPivotReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunPivotReportRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RunPivotReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.RunPivotReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.RunPivotReportRequest)
    MergeFrom(*source);
  }
}

void RunPivotReportRequest::MergeFrom(const RunPivotReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.RunPivotReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  metrics_.MergeFrom(from.metrics_);
  date_ranges_.MergeFrom(from.date_ranges_);
  pivots_.MergeFrom(from.pivots_);
  if (from.property().size() > 0) {

    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  if (from.currency_code().size() > 0) {

    currency_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_code_);
  }
  if (from.has_dimension_filter()) {
    mutable_dimension_filter()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.dimension_filter());
  }
  if (from.has_metric_filter()) {
    mutable_metric_filter()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.metric_filter());
  }
  if (from.has_cohort_spec()) {
    mutable_cohort_spec()->::google::analytics::data::v1beta::CohortSpec::MergeFrom(from.cohort_spec());
  }
  if (from.keep_empty_rows() != 0) {
    set_keep_empty_rows(from.keep_empty_rows());
  }
  if (from.return_property_quota() != 0) {
    set_return_property_quota(from.return_property_quota());
  }
}

void RunPivotReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.RunPivotReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPivotReportRequest::CopyFrom(const RunPivotReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.RunPivotReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPivotReportRequest::IsInitialized() const {
  return true;
}

void RunPivotReportRequest::Swap(RunPivotReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunPivotReportRequest::InternalSwap(RunPivotReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimensions_)->InternalSwap(CastToBase(&other->dimensions_));
  CastToBase(&metrics_)->InternalSwap(CastToBase(&other->metrics_));
  CastToBase(&date_ranges_)->InternalSwap(CastToBase(&other->date_ranges_));
  CastToBase(&pivots_)->InternalSwap(CastToBase(&other->pivots_));
  property_.Swap(&other->property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_code_.Swap(&other->currency_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dimension_filter_, other->dimension_filter_);
  swap(metric_filter_, other->metric_filter_);
  swap(cohort_spec_, other->cohort_spec_);
  swap(keep_empty_rows_, other->keep_empty_rows_);
  swap(return_property_quota_, other->return_property_quota_);
}

::google::protobuf::Metadata RunPivotReportRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunPivotReportResponse::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_RunPivotReportResponse_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::google::analytics::data::v1beta::ResponseMetaData*>(
      ::google::analytics::data::v1beta::ResponseMetaData::internal_default_instance());
  ::google::analytics::data::v1beta::_RunPivotReportResponse_default_instance_._instance.get_mutable()->property_quota_ = const_cast< ::google::analytics::data::v1beta::PropertyQuota*>(
      ::google::analytics::data::v1beta::PropertyQuota::internal_default_instance());
}
class RunPivotReportResponse::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::ResponseMetaData& metadata(const RunPivotReportResponse* msg);
  static const ::google::analytics::data::v1beta::PropertyQuota& property_quota(const RunPivotReportResponse* msg);
};

const ::google::analytics::data::v1beta::ResponseMetaData&
RunPivotReportResponse::HasBitSetters::metadata(const RunPivotReportResponse* msg) {
  return *msg->metadata_;
}
const ::google::analytics::data::v1beta::PropertyQuota&
RunPivotReportResponse::HasBitSetters::property_quota(const RunPivotReportResponse* msg) {
  return *msg->property_quota_;
}
void RunPivotReportResponse::clear_pivot_headers() {
  pivot_headers_.Clear();
}
void RunPivotReportResponse::clear_dimension_headers() {
  dimension_headers_.Clear();
}
void RunPivotReportResponse::clear_metric_headers() {
  metric_headers_.Clear();
}
void RunPivotReportResponse::clear_rows() {
  rows_.Clear();
}
void RunPivotReportResponse::clear_aggregates() {
  aggregates_.Clear();
}
void RunPivotReportResponse::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void RunPivotReportResponse::clear_property_quota() {
  if (GetArenaNoVirtual() == nullptr && property_quota_ != nullptr) {
    delete property_quota_;
  }
  property_quota_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunPivotReportResponse::kPivotHeadersFieldNumber;
const int RunPivotReportResponse::kDimensionHeadersFieldNumber;
const int RunPivotReportResponse::kMetricHeadersFieldNumber;
const int RunPivotReportResponse::kRowsFieldNumber;
const int RunPivotReportResponse::kAggregatesFieldNumber;
const int RunPivotReportResponse::kMetadataFieldNumber;
const int RunPivotReportResponse::kPropertyQuotaFieldNumber;
const int RunPivotReportResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunPivotReportResponse::RunPivotReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.RunPivotReportResponse)
}
RunPivotReportResponse::RunPivotReportResponse(const RunPivotReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pivot_headers_(from.pivot_headers_),
      dimension_headers_(from.dimension_headers_),
      metric_headers_(from.metric_headers_),
      rows_(from.rows_),
      aggregates_(from.aggregates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::google::analytics::data::v1beta::ResponseMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from.has_property_quota()) {
    property_quota_ = new ::google::analytics::data::v1beta::PropertyQuota(*from.property_quota_);
  } else {
    property_quota_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.RunPivotReportResponse)
}

void RunPivotReportResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_quota_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(property_quota_));
}

RunPivotReportResponse::~RunPivotReportResponse() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.RunPivotReportResponse)
  SharedDtor();
}

void RunPivotReportResponse::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete property_quota_;
}

void RunPivotReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunPivotReportResponse& RunPivotReportResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunPivotReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void RunPivotReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.RunPivotReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pivot_headers_.Clear();
  dimension_headers_.Clear();
  metric_headers_.Clear();
  rows_.Clear();
  aggregates_.Clear();
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && property_quota_ != nullptr) {
    delete property_quota_;
  }
  property_quota_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunPivotReportResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunPivotReportResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.PivotHeader pivot_headers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::PivotHeader::_InternalParse;
          object = msg->add_pivot_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DimensionHeader::_InternalParse;
          object = msg->add_dimension_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::MetricHeader::_InternalParse;
          object = msg->add_metric_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row rows = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_rows();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row aggregates = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_aggregates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // .google.analytics.data.v1beta.ResponseMetaData metadata = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::ResponseMetaData::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.PropertyQuota property_quota = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::PropertyQuota::_InternalParse;
        object = msg->mutable_property_quota();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string kind = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunPivotReportResponse.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunPivotReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.RunPivotReportResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.PivotHeader pivot_headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pivot_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimension_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metric_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row rows = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row aggregates = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_aggregates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.ResponseMetaData metadata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.PropertyQuota property_quota = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunPivotReportResponse.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.RunPivotReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.RunPivotReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunPivotReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.RunPivotReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.PivotHeader pivot_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pivot_headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dimension_headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->metric_headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row rows = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->rows(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row aggregates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aggregates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->aggregates(static_cast<int>(i)),
      output);
  }

  // .google.analytics.data.v1beta.ResponseMetaData metadata = 6;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::metadata(this), output);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 7;
  if (this->has_property_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::property_quota(this), output);
  }

  // string kind = 8;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunPivotReportResponse.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.RunPivotReportResponse)
}

::google::protobuf::uint8* RunPivotReportResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.RunPivotReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.PivotHeader pivot_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pivot_headers(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dimension_headers(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->metric_headers(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row rows = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->rows(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row aggregates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aggregates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->aggregates(static_cast<int>(i)), target);
  }

  // .google.analytics.data.v1beta.ResponseMetaData metadata = 6;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::metadata(this), target);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 7;
  if (this->has_property_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::property_quota(this), target);
  }

  // string kind = 8;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunPivotReportResponse.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.RunPivotReportResponse)
  return target;
}

size_t RunPivotReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.RunPivotReportResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.PivotHeader pivot_headers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pivot_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pivot_headers(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dimension_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimension_headers(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metric_headers(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row rows = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row aggregates = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->aggregates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->aggregates(static_cast<int>(i)));
    }
  }

  // string kind = 8;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // .google.analytics.data.v1beta.ResponseMetaData metadata = 6;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 7;
  if (this->has_property_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_quota_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunPivotReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.RunPivotReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunPivotReportResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RunPivotReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.RunPivotReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.RunPivotReportResponse)
    MergeFrom(*source);
  }
}

void RunPivotReportResponse::MergeFrom(const RunPivotReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.RunPivotReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pivot_headers_.MergeFrom(from.pivot_headers_);
  dimension_headers_.MergeFrom(from.dimension_headers_);
  metric_headers_.MergeFrom(from.metric_headers_);
  rows_.MergeFrom(from.rows_);
  aggregates_.MergeFrom(from.aggregates_);
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::google::analytics::data::v1beta::ResponseMetaData::MergeFrom(from.metadata());
  }
  if (from.has_property_quota()) {
    mutable_property_quota()->::google::analytics::data::v1beta::PropertyQuota::MergeFrom(from.property_quota());
  }
}

void RunPivotReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.RunPivotReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPivotReportResponse::CopyFrom(const RunPivotReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.RunPivotReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPivotReportResponse::IsInitialized() const {
  return true;
}

void RunPivotReportResponse::Swap(RunPivotReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunPivotReportResponse::InternalSwap(RunPivotReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pivot_headers_)->InternalSwap(CastToBase(&other->pivot_headers_));
  CastToBase(&dimension_headers_)->InternalSwap(CastToBase(&other->dimension_headers_));
  CastToBase(&metric_headers_)->InternalSwap(CastToBase(&other->metric_headers_));
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
  CastToBase(&aggregates_)->InternalSwap(CastToBase(&other->aggregates_));
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
  swap(property_quota_, other->property_quota_);
}

::google::protobuf::Metadata RunPivotReportResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchRunReportsRequest::InitAsDefaultInstance() {
}
class BatchRunReportsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRunReportsRequest::kPropertyFieldNumber;
const int BatchRunReportsRequest::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRunReportsRequest::BatchRunReportsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.BatchRunReportsRequest)
}
BatchRunReportsRequest::BatchRunReportsRequest(const BatchRunReportsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.property().size() > 0) {
    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.BatchRunReportsRequest)
}

void BatchRunReportsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchRunReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BatchRunReportsRequest::~BatchRunReportsRequest() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.BatchRunReportsRequest)
  SharedDtor();
}

void BatchRunReportsRequest::SharedDtor() {
  property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BatchRunReportsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRunReportsRequest& BatchRunReportsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchRunReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void BatchRunReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchRunReportsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchRunReportsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string property = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.BatchRunReportsRequest.property");
        object = msg->mutable_property();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.analytics.data.v1beta.RunReportRequest requests = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::RunReportRequest::_InternalParse;
          object = msg->add_requests();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchRunReportsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->property().data(), static_cast<int>(this->property().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.BatchRunReportsRequest.property"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.RunReportRequest requests = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.BatchRunReportsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.BatchRunReportsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchRunReportsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunReportsRequest.property");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property(), output);
  }

  // repeated .google.analytics.data.v1beta.RunReportRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->requests(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.BatchRunReportsRequest)
}

::google::protobuf::uint8* BatchRunReportsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunReportsRequest.property");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->property(), target);
  }

  // repeated .google.analytics.data.v1beta.RunReportRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->requests(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.BatchRunReportsRequest)
  return target;
}

size_t BatchRunReportsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunReportRequest requests = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // string property = 1;
  if (this->property().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->property());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRunReportsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRunReportsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BatchRunReportsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.BatchRunReportsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.BatchRunReportsRequest)
    MergeFrom(*source);
  }
}

void BatchRunReportsRequest::MergeFrom(const BatchRunReportsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.property().size() > 0) {

    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
}

void BatchRunReportsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRunReportsRequest::CopyFrom(const BatchRunReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.BatchRunReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRunReportsRequest::IsInitialized() const {
  return true;
}

void BatchRunReportsRequest::Swap(BatchRunReportsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRunReportsRequest::InternalSwap(BatchRunReportsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  property_.Swap(&other->property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BatchRunReportsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchRunReportsResponse::InitAsDefaultInstance() {
}
class BatchRunReportsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRunReportsResponse::kReportsFieldNumber;
const int BatchRunReportsResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRunReportsResponse::BatchRunReportsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.BatchRunReportsResponse)
}
BatchRunReportsResponse::BatchRunReportsResponse(const BatchRunReportsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.BatchRunReportsResponse)
}

void BatchRunReportsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchRunReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BatchRunReportsResponse::~BatchRunReportsResponse() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.BatchRunReportsResponse)
  SharedDtor();
}

void BatchRunReportsResponse::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BatchRunReportsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRunReportsResponse& BatchRunReportsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchRunReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void BatchRunReportsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchRunReportsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchRunReportsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.RunReportResponse reports = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::RunReportResponse::_InternalParse;
          object = msg->add_reports();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string kind = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.BatchRunReportsResponse.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchRunReportsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.RunReportResponse reports = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.BatchRunReportsResponse.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.BatchRunReportsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.BatchRunReportsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchRunReportsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunReportResponse reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->reports(static_cast<int>(i)),
      output);
  }

  // string kind = 2;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunReportsResponse.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.BatchRunReportsResponse)
}

::google::protobuf::uint8* BatchRunReportsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunReportResponse reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->reports(static_cast<int>(i)), target);
  }

  // string kind = 2;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunReportsResponse.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.BatchRunReportsResponse)
  return target;
}

size_t BatchRunReportsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunReportResponse reports = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->reports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reports(static_cast<int>(i)));
    }
  }

  // string kind = 2;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRunReportsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRunReportsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BatchRunReportsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.BatchRunReportsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.BatchRunReportsResponse)
    MergeFrom(*source);
  }
}

void BatchRunReportsResponse::MergeFrom(const BatchRunReportsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
}

void BatchRunReportsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRunReportsResponse::CopyFrom(const BatchRunReportsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.BatchRunReportsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRunReportsResponse::IsInitialized() const {
  return true;
}

void BatchRunReportsResponse::Swap(BatchRunReportsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRunReportsResponse::InternalSwap(BatchRunReportsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&reports_)->InternalSwap(CastToBase(&other->reports_));
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BatchRunReportsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchRunPivotReportsRequest::InitAsDefaultInstance() {
}
class BatchRunPivotReportsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRunPivotReportsRequest::kPropertyFieldNumber;
const int BatchRunPivotReportsRequest::kRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRunPivotReportsRequest::BatchRunPivotReportsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
}
BatchRunPivotReportsRequest::BatchRunPivotReportsRequest(const BatchRunPivotReportsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.property().size() > 0) {
    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
}

void BatchRunPivotReportsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchRunPivotReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BatchRunPivotReportsRequest::~BatchRunPivotReportsRequest() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  SharedDtor();
}

void BatchRunPivotReportsRequest::SharedDtor() {
  property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BatchRunPivotReportsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRunPivotReportsRequest& BatchRunPivotReportsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchRunPivotReportsRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void BatchRunPivotReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchRunPivotReportsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchRunPivotReportsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string property = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.BatchRunPivotReportsRequest.property");
        object = msg->mutable_property();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.analytics.data.v1beta.RunPivotReportRequest requests = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::RunPivotReportRequest::_InternalParse;
          object = msg->add_requests();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchRunPivotReportsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->property().data(), static_cast<int>(this->property().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.BatchRunPivotReportsRequest.property"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.RunPivotReportRequest requests = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchRunPivotReportsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunPivotReportsRequest.property");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property(), output);
  }

  // repeated .google.analytics.data.v1beta.RunPivotReportRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->requests(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
}

::google::protobuf::uint8* BatchRunPivotReportsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunPivotReportsRequest.property");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->property(), target);
  }

  // repeated .google.analytics.data.v1beta.RunPivotReportRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requests_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->requests(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  return target;
}

size_t BatchRunPivotReportsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunPivotReportRequest requests = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->requests_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->requests(static_cast<int>(i)));
    }
  }

  // string property = 1;
  if (this->property().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->property());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRunPivotReportsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRunPivotReportsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BatchRunPivotReportsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
    MergeFrom(*source);
  }
}

void BatchRunPivotReportsRequest::MergeFrom(const BatchRunPivotReportsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.property().size() > 0) {

    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
}

void BatchRunPivotReportsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRunPivotReportsRequest::CopyFrom(const BatchRunPivotReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.BatchRunPivotReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRunPivotReportsRequest::IsInitialized() const {
  return true;
}

void BatchRunPivotReportsRequest::Swap(BatchRunPivotReportsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRunPivotReportsRequest::InternalSwap(BatchRunPivotReportsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requests_)->InternalSwap(CastToBase(&other->requests_));
  property_.Swap(&other->property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BatchRunPivotReportsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BatchRunPivotReportsResponse::InitAsDefaultInstance() {
}
class BatchRunPivotReportsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRunPivotReportsResponse::kPivotReportsFieldNumber;
const int BatchRunPivotReportsResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRunPivotReportsResponse::BatchRunPivotReportsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
}
BatchRunPivotReportsResponse::BatchRunPivotReportsResponse(const BatchRunPivotReportsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pivot_reports_(from.pivot_reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
}

void BatchRunPivotReportsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BatchRunPivotReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BatchRunPivotReportsResponse::~BatchRunPivotReportsResponse() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  SharedDtor();
}

void BatchRunPivotReportsResponse::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BatchRunPivotReportsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRunPivotReportsResponse& BatchRunPivotReportsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BatchRunPivotReportsResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void BatchRunPivotReportsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pivot_reports_.Clear();
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchRunPivotReportsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BatchRunPivotReportsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.RunPivotReportResponse pivot_reports = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::RunPivotReportResponse::_InternalParse;
          object = msg->add_pivot_reports();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string kind = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.BatchRunPivotReportsResponse.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchRunPivotReportsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.RunPivotReportResponse pivot_reports = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pivot_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.BatchRunPivotReportsResponse.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchRunPivotReportsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunPivotReportResponse pivot_reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_reports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pivot_reports(static_cast<int>(i)),
      output);
  }

  // string kind = 2;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunPivotReportsResponse.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
}

::google::protobuf::uint8* BatchRunPivotReportsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunPivotReportResponse pivot_reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pivot_reports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pivot_reports(static_cast<int>(i)), target);
  }

  // string kind = 2;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.BatchRunPivotReportsResponse.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  return target;
}

size_t BatchRunPivotReportsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.RunPivotReportResponse pivot_reports = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pivot_reports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pivot_reports(static_cast<int>(i)));
    }
  }

  // string kind = 2;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRunPivotReportsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRunPivotReportsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<BatchRunPivotReportsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
    MergeFrom(*source);
  }
}

void BatchRunPivotReportsResponse::MergeFrom(const BatchRunPivotReportsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pivot_reports_.MergeFrom(from.pivot_reports_);
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
}

void BatchRunPivotReportsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRunPivotReportsResponse::CopyFrom(const BatchRunPivotReportsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.BatchRunPivotReportsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRunPivotReportsResponse::IsInitialized() const {
  return true;
}

void BatchRunPivotReportsResponse::Swap(BatchRunPivotReportsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRunPivotReportsResponse::InternalSwap(BatchRunPivotReportsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pivot_reports_)->InternalSwap(CastToBase(&other->pivot_reports_));
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BatchRunPivotReportsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetMetadataRequest::InitAsDefaultInstance() {
}
class GetMetadataRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMetadataRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMetadataRequest::GetMetadataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.GetMetadataRequest)
}
GetMetadataRequest::GetMetadataRequest(const GetMetadataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.GetMetadataRequest)
}

void GetMetadataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetMetadataRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetMetadataRequest::~GetMetadataRequest() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.GetMetadataRequest)
  SharedDtor();
}

void GetMetadataRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetMetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMetadataRequest& GetMetadataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetMetadataRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void GetMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.GetMetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMetadataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetMetadataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.GetMetadataRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMetadataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.GetMetadataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.GetMetadataRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.GetMetadataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.GetMetadataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMetadataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.GetMetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.GetMetadataRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.GetMetadataRequest)
}

::google::protobuf::uint8* GetMetadataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.GetMetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.GetMetadataRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.GetMetadataRequest)
  return target;
}

size_t GetMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.GetMetadataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMetadataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.GetMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMetadataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetMetadataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.GetMetadataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.GetMetadataRequest)
    MergeFrom(*source);
  }
}

void GetMetadataRequest::MergeFrom(const GetMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.GetMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetMetadataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.GetMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadataRequest::CopyFrom(const GetMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.GetMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadataRequest::IsInitialized() const {
  return true;
}

void GetMetadataRequest::Swap(GetMetadataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMetadataRequest::InternalSwap(GetMetadataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetMetadataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunRealtimeReportRequest::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_RunRealtimeReportRequest_default_instance_._instance.get_mutable()->dimension_filter_ = const_cast< ::google::analytics::data::v1beta::FilterExpression*>(
      ::google::analytics::data::v1beta::FilterExpression::internal_default_instance());
  ::google::analytics::data::v1beta::_RunRealtimeReportRequest_default_instance_._instance.get_mutable()->metric_filter_ = const_cast< ::google::analytics::data::v1beta::FilterExpression*>(
      ::google::analytics::data::v1beta::FilterExpression::internal_default_instance());
}
class RunRealtimeReportRequest::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::FilterExpression& dimension_filter(const RunRealtimeReportRequest* msg);
  static const ::google::analytics::data::v1beta::FilterExpression& metric_filter(const RunRealtimeReportRequest* msg);
};

const ::google::analytics::data::v1beta::FilterExpression&
RunRealtimeReportRequest::HasBitSetters::dimension_filter(const RunRealtimeReportRequest* msg) {
  return *msg->dimension_filter_;
}
const ::google::analytics::data::v1beta::FilterExpression&
RunRealtimeReportRequest::HasBitSetters::metric_filter(const RunRealtimeReportRequest* msg) {
  return *msg->metric_filter_;
}
void RunRealtimeReportRequest::clear_dimensions() {
  dimensions_.Clear();
}
void RunRealtimeReportRequest::clear_metrics() {
  metrics_.Clear();
}
void RunRealtimeReportRequest::clear_dimension_filter() {
  if (GetArenaNoVirtual() == nullptr && dimension_filter_ != nullptr) {
    delete dimension_filter_;
  }
  dimension_filter_ = nullptr;
}
void RunRealtimeReportRequest::clear_metric_filter() {
  if (GetArenaNoVirtual() == nullptr && metric_filter_ != nullptr) {
    delete metric_filter_;
  }
  metric_filter_ = nullptr;
}
void RunRealtimeReportRequest::clear_order_bys() {
  order_bys_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunRealtimeReportRequest::kPropertyFieldNumber;
const int RunRealtimeReportRequest::kDimensionsFieldNumber;
const int RunRealtimeReportRequest::kMetricsFieldNumber;
const int RunRealtimeReportRequest::kDimensionFilterFieldNumber;
const int RunRealtimeReportRequest::kMetricFilterFieldNumber;
const int RunRealtimeReportRequest::kLimitFieldNumber;
const int RunRealtimeReportRequest::kMetricAggregationsFieldNumber;
const int RunRealtimeReportRequest::kOrderBysFieldNumber;
const int RunRealtimeReportRequest::kReturnPropertyQuotaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunRealtimeReportRequest::RunRealtimeReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.RunRealtimeReportRequest)
}
RunRealtimeReportRequest::RunRealtimeReportRequest(const RunRealtimeReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_),
      metrics_(from.metrics_),
      metric_aggregations_(from.metric_aggregations_),
      order_bys_(from.order_bys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.property().size() > 0) {
    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  if (from.has_dimension_filter()) {
    dimension_filter_ = new ::google::analytics::data::v1beta::FilterExpression(*from.dimension_filter_);
  } else {
    dimension_filter_ = nullptr;
  }
  if (from.has_metric_filter()) {
    metric_filter_ = new ::google::analytics::data::v1beta::FilterExpression(*from.metric_filter_);
  } else {
    metric_filter_ = nullptr;
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_property_quota_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(return_property_quota_));
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.RunRealtimeReportRequest)
}

void RunRealtimeReportRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunRealtimeReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dimension_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_property_quota_) -
      reinterpret_cast<char*>(&dimension_filter_)) + sizeof(return_property_quota_));
}

RunRealtimeReportRequest::~RunRealtimeReportRequest() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.RunRealtimeReportRequest)
  SharedDtor();
}

void RunRealtimeReportRequest::SharedDtor() {
  property_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dimension_filter_;
  if (this != internal_default_instance()) delete metric_filter_;
}

void RunRealtimeReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunRealtimeReportRequest& RunRealtimeReportRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunRealtimeReportRequest_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void RunRealtimeReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  metrics_.Clear();
  metric_aggregations_.Clear();
  order_bys_.Clear();
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && dimension_filter_ != nullptr) {
    delete dimension_filter_;
  }
  dimension_filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metric_filter_ != nullptr) {
    delete metric_filter_;
  }
  metric_filter_ = nullptr;
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_property_quota_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(return_property_quota_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunRealtimeReportRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunRealtimeReportRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string property = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunRealtimeReportRequest.property");
        object = msg->mutable_property();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Dimension::_InternalParse;
          object = msg->add_dimensions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Metric metrics = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Metric::_InternalParse;
          object = msg->add_metrics();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpression dimension_filter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
        object = msg->mutable_dimension_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.analytics.data.v1beta.FilterExpression metric_filter = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::FilterExpression::_InternalParse;
        object = msg->mutable_metric_filter();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 limit = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 58) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_metric_aggregations();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_metric_aggregations(static_cast<::google::analytics::data::v1beta::MetricAggregation>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.OrderBy order_bys = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::OrderBy::_InternalParse;
          object = msg->add_order_bys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // bool return_property_quota = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_return_property_quota(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunRealtimeReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->property().data(), static_cast<int>(this->property().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunRealtimeReportRequest.property"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Metric metrics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpression dimension_filter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dimension_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.FilterExpression metric_filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_metric_aggregations(static_cast< ::google::analytics::data::v1beta::MetricAggregation >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_metric_aggregations(static_cast< ::google::analytics::data::v1beta::MetricAggregation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.OrderBy order_bys = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_bys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_property_quota = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_property_quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.RunRealtimeReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.RunRealtimeReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunRealtimeReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunRealtimeReportRequest.property");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->property(), output);
  }

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dimensions(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->metrics(static_cast<int>(i)),
      output);
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 4;
  if (this->has_dimension_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::dimension_filter(this), output);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 5;
  if (this->has_metric_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::metric_filter(this), output);
  }

  // int64 limit = 6;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->limit(), output);
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 7;
  if (this->metric_aggregations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_metric_aggregations_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->metric_aggregations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->metric_aggregations(i), output);
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_bys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->order_bys(static_cast<int>(i)),
      output);
  }

  // bool return_property_quota = 9;
  if (this->return_property_quota() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->return_property_quota(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.RunRealtimeReportRequest)
}

::google::protobuf::uint8* RunRealtimeReportRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property = 1;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->property().data(), static_cast<int>(this->property().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunRealtimeReportRequest.property");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->property(), target);
  }

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimensions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dimensions(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->metrics(static_cast<int>(i)), target);
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 4;
  if (this->has_dimension_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::dimension_filter(this), target);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 5;
  if (this->has_metric_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::metric_filter(this), target);
  }

  // int64 limit = 6;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->limit(), target);
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 7;
  if (this->metric_aggregations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _metric_aggregations_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->metric_aggregations_, target);
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_bys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->order_bys(static_cast<int>(i)), target);
  }

  // bool return_property_quota = 9;
  if (this->return_property_quota() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->return_property_quota(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.RunRealtimeReportRequest)
  return target;
}

size_t RunRealtimeReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.Dimension dimensions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dimensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimensions(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Metric metrics = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metrics(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricAggregation metric_aggregations = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->metric_aggregations_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->metric_aggregations(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _metric_aggregations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.analytics.data.v1beta.OrderBy order_bys = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->order_bys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_bys(static_cast<int>(i)));
    }
  }

  // string property = 1;
  if (this->property().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->property());
  }

  // .google.analytics.data.v1beta.FilterExpression dimension_filter = 4;
  if (this->has_dimension_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dimension_filter_);
  }

  // .google.analytics.data.v1beta.FilterExpression metric_filter = 5;
  if (this->has_metric_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metric_filter_);
  }

  // int64 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  // bool return_property_quota = 9;
  if (this->return_property_quota() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunRealtimeReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunRealtimeReportRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RunRealtimeReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.RunRealtimeReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.RunRealtimeReportRequest)
    MergeFrom(*source);
  }
}

void RunRealtimeReportRequest::MergeFrom(const RunRealtimeReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  metrics_.MergeFrom(from.metrics_);
  metric_aggregations_.MergeFrom(from.metric_aggregations_);
  order_bys_.MergeFrom(from.order_bys_);
  if (from.property().size() > 0) {

    property_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_);
  }
  if (from.has_dimension_filter()) {
    mutable_dimension_filter()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.dimension_filter());
  }
  if (from.has_metric_filter()) {
    mutable_metric_filter()->::google::analytics::data::v1beta::FilterExpression::MergeFrom(from.metric_filter());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.return_property_quota() != 0) {
    set_return_property_quota(from.return_property_quota());
  }
}

void RunRealtimeReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunRealtimeReportRequest::CopyFrom(const RunRealtimeReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.RunRealtimeReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunRealtimeReportRequest::IsInitialized() const {
  return true;
}

void RunRealtimeReportRequest::Swap(RunRealtimeReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunRealtimeReportRequest::InternalSwap(RunRealtimeReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimensions_)->InternalSwap(CastToBase(&other->dimensions_));
  CastToBase(&metrics_)->InternalSwap(CastToBase(&other->metrics_));
  metric_aggregations_.InternalSwap(&other->metric_aggregations_);
  CastToBase(&order_bys_)->InternalSwap(CastToBase(&other->order_bys_));
  property_.Swap(&other->property_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dimension_filter_, other->dimension_filter_);
  swap(metric_filter_, other->metric_filter_);
  swap(limit_, other->limit_);
  swap(return_property_quota_, other->return_property_quota_);
}

::google::protobuf::Metadata RunRealtimeReportRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RunRealtimeReportResponse::InitAsDefaultInstance() {
  ::google::analytics::data::v1beta::_RunRealtimeReportResponse_default_instance_._instance.get_mutable()->property_quota_ = const_cast< ::google::analytics::data::v1beta::PropertyQuota*>(
      ::google::analytics::data::v1beta::PropertyQuota::internal_default_instance());
}
class RunRealtimeReportResponse::HasBitSetters {
 public:
  static const ::google::analytics::data::v1beta::PropertyQuota& property_quota(const RunRealtimeReportResponse* msg);
};

const ::google::analytics::data::v1beta::PropertyQuota&
RunRealtimeReportResponse::HasBitSetters::property_quota(const RunRealtimeReportResponse* msg) {
  return *msg->property_quota_;
}
void RunRealtimeReportResponse::clear_dimension_headers() {
  dimension_headers_.Clear();
}
void RunRealtimeReportResponse::clear_metric_headers() {
  metric_headers_.Clear();
}
void RunRealtimeReportResponse::clear_rows() {
  rows_.Clear();
}
void RunRealtimeReportResponse::clear_totals() {
  totals_.Clear();
}
void RunRealtimeReportResponse::clear_maximums() {
  maximums_.Clear();
}
void RunRealtimeReportResponse::clear_minimums() {
  minimums_.Clear();
}
void RunRealtimeReportResponse::clear_property_quota() {
  if (GetArenaNoVirtual() == nullptr && property_quota_ != nullptr) {
    delete property_quota_;
  }
  property_quota_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunRealtimeReportResponse::kDimensionHeadersFieldNumber;
const int RunRealtimeReportResponse::kMetricHeadersFieldNumber;
const int RunRealtimeReportResponse::kRowsFieldNumber;
const int RunRealtimeReportResponse::kTotalsFieldNumber;
const int RunRealtimeReportResponse::kMaximumsFieldNumber;
const int RunRealtimeReportResponse::kMinimumsFieldNumber;
const int RunRealtimeReportResponse::kRowCountFieldNumber;
const int RunRealtimeReportResponse::kPropertyQuotaFieldNumber;
const int RunRealtimeReportResponse::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunRealtimeReportResponse::RunRealtimeReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.analytics.data.v1beta.RunRealtimeReportResponse)
}
RunRealtimeReportResponse::RunRealtimeReportResponse(const RunRealtimeReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dimension_headers_(from.dimension_headers_),
      metric_headers_(from.metric_headers_),
      rows_(from.rows_),
      totals_(from.totals_),
      maximums_(from.maximums_),
      minimums_(from.minimums_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_property_quota()) {
    property_quota_ = new ::google::analytics::data::v1beta::PropertyQuota(*from.property_quota_);
  } else {
    property_quota_ = nullptr;
  }
  row_count_ = from.row_count_;
  // @@protoc_insertion_point(copy_constructor:google.analytics.data.v1beta.RunRealtimeReportResponse)
}

void RunRealtimeReportResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RunRealtimeReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&property_quota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&property_quota_)) + sizeof(row_count_));
}

RunRealtimeReportResponse::~RunRealtimeReportResponse() {
  // @@protoc_insertion_point(destructor:google.analytics.data.v1beta.RunRealtimeReportResponse)
  SharedDtor();
}

void RunRealtimeReportResponse::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete property_quota_;
}

void RunRealtimeReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunRealtimeReportResponse& RunRealtimeReportResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RunRealtimeReportResponse_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto.base);
  return *internal_default_instance();
}


void RunRealtimeReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_headers_.Clear();
  metric_headers_.Clear();
  rows_.Clear();
  totals_.Clear();
  maximums_.Clear();
  minimums_.Clear();
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && property_quota_ != nullptr) {
    delete property_quota_;
  }
  property_quota_ = nullptr;
  row_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunRealtimeReportResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RunRealtimeReportResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::DimensionHeader::_InternalParse;
          object = msg->add_dimension_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::MetricHeader::_InternalParse;
          object = msg->add_metric_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row rows = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_rows();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row totals = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_totals();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row maximums = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_maximums();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .google.analytics.data.v1beta.Row minimums = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::analytics::data::v1beta::Row::_InternalParse;
          object = msg->add_minimums();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // int32 row_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_row_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.analytics.data.v1beta.PropertyQuota property_quota = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::analytics::data::v1beta::PropertyQuota::_InternalParse;
        object = msg->mutable_property_quota();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string kind = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.analytics.data.v1beta.RunRealtimeReportResponse.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunRealtimeReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dimension_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_metric_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row rows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row totals = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_totals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row maximums = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_maximums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.analytics.data.v1beta.Row minimums = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_minimums()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 row_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.analytics.data.v1beta.PropertyQuota property_quota = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_property_quota()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.analytics.data.v1beta.RunRealtimeReportResponse.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.analytics.data.v1beta.RunRealtimeReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.analytics.data.v1beta.RunRealtimeReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunRealtimeReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->dimension_headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->metric_headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row rows = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->rows(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row totals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->totals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->totals(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row maximums = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->maximums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->maximums(static_cast<int>(i)),
      output);
  }

  // repeated .google.analytics.data.v1beta.Row minimums = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->minimums_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->minimums(static_cast<int>(i)),
      output);
  }

  // int32 row_count = 7;
  if (this->row_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->row_count(), output);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 8;
  if (this->has_property_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::property_quota(this), output);
  }

  // string kind = 9;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunRealtimeReportResponse.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.analytics.data.v1beta.RunRealtimeReportResponse)
}

::google::protobuf::uint8* RunRealtimeReportResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dimension_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dimension_headers(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->metric_headers(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row rows = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->rows(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row totals = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->totals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->totals(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row maximums = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->maximums_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->maximums(static_cast<int>(i)), target);
  }

  // repeated .google.analytics.data.v1beta.Row minimums = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->minimums_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->minimums(static_cast<int>(i)), target);
  }

  // int32 row_count = 7;
  if (this->row_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->row_count(), target);
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 8;
  if (this->has_property_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::property_quota(this), target);
  }

  // string kind = 9;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.analytics.data.v1beta.RunRealtimeReportResponse.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.analytics.data.v1beta.RunRealtimeReportResponse)
  return target;
}

size_t RunRealtimeReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dimension_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dimension_headers(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.MetricHeader metric_headers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->metric_headers(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row rows = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row totals = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->totals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->totals(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row maximums = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->maximums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->maximums(static_cast<int>(i)));
    }
  }

  // repeated .google.analytics.data.v1beta.Row minimums = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->minimums_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->minimums(static_cast<int>(i)));
    }
  }

  // string kind = 9;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // .google.analytics.data.v1beta.PropertyQuota property_quota = 8;
  if (this->has_property_quota()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *property_quota_);
  }

  // int32 row_count = 7;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunRealtimeReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunRealtimeReportResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RunRealtimeReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.analytics.data.v1beta.RunRealtimeReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.analytics.data.v1beta.RunRealtimeReportResponse)
    MergeFrom(*source);
  }
}

void RunRealtimeReportResponse::MergeFrom(const RunRealtimeReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimension_headers_.MergeFrom(from.dimension_headers_);
  metric_headers_.MergeFrom(from.metric_headers_);
  rows_.MergeFrom(from.rows_);
  totals_.MergeFrom(from.totals_);
  maximums_.MergeFrom(from.maximums_);
  minimums_.MergeFrom(from.minimums_);
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.has_property_quota()) {
    mutable_property_quota()->::google::analytics::data::v1beta::PropertyQuota::MergeFrom(from.property_quota());
  }
  if (from.row_count() != 0) {
    set_row_count(from.row_count());
  }
}

void RunRealtimeReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunRealtimeReportResponse::CopyFrom(const RunRealtimeReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.analytics.data.v1beta.RunRealtimeReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunRealtimeReportResponse::IsInitialized() const {
  return true;
}

void RunRealtimeReportResponse::Swap(RunRealtimeReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunRealtimeReportResponse::InternalSwap(RunRealtimeReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&dimension_headers_)->InternalSwap(CastToBase(&other->dimension_headers_));
  CastToBase(&metric_headers_)->InternalSwap(CastToBase(&other->metric_headers_));
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
  CastToBase(&totals_)->InternalSwap(CastToBase(&other->totals_));
  CastToBase(&maximums_)->InternalSwap(CastToBase(&other->maximums_));
  CastToBase(&minimums_)->InternalSwap(CastToBase(&other->minimums_));
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(property_quota_, other->property_quota_);
  swap(row_count_, other->row_count_);
}

::google::protobuf::Metadata RunRealtimeReportResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto);
  return ::file_level_metadata_google_2fanalytics_2fdata_2fv1beta_2fanalytics_5fdata_5fapi_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta
}  // namespace data
}  // namespace analytics
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::Metadata* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::RunReportRequest* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::RunReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::RunReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::RunReportResponse* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::RunReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::RunReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::RunPivotReportRequest* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::RunPivotReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::RunPivotReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::RunPivotReportResponse* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::RunPivotReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::RunPivotReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::BatchRunReportsRequest* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::BatchRunReportsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::BatchRunReportsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::BatchRunReportsResponse* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::BatchRunReportsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::BatchRunReportsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::BatchRunPivotReportsRequest* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::BatchRunPivotReportsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::BatchRunPivotReportsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::BatchRunPivotReportsResponse* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::BatchRunPivotReportsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::BatchRunPivotReportsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::GetMetadataRequest* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::GetMetadataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::GetMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::RunRealtimeReportRequest* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::RunRealtimeReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::RunRealtimeReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::analytics::data::v1beta::RunRealtimeReportResponse* Arena::CreateMaybeMessage< ::google::analytics::data::v1beta::RunRealtimeReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::analytics::data::v1beta::RunRealtimeReportResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
