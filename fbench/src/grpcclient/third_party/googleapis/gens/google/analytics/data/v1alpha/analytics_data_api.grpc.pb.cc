// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/analytics/data/v1alpha/analytics_data_api.proto

#include "google/analytics/data/v1alpha/analytics_data_api.pb.h"
#include "google/analytics/data/v1alpha/analytics_data_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace analytics {
namespace data {
namespace v1alpha {

static const char* AlphaAnalyticsData_method_names[] = {
  "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunReport",
  "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunPivotReport",
  "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunReports",
  "/google.analytics.data.v1alpha.AlphaAnalyticsData/BatchRunPivotReports",
  "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetMetadata",
  "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunRealtimeReport",
};

std::unique_ptr< AlphaAnalyticsData::Stub> AlphaAnalyticsData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AlphaAnalyticsData::Stub> stub(new AlphaAnalyticsData::Stub(channel, options));
  return stub;
}

AlphaAnalyticsData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RunReport_(AlphaAnalyticsData_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunPivotReport_(AlphaAnalyticsData_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchRunReports_(AlphaAnalyticsData_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchRunPivotReports_(AlphaAnalyticsData_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetadata_(AlphaAnalyticsData_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunRealtimeReport_(AlphaAnalyticsData_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AlphaAnalyticsData::Stub::RunReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunReportRequest& request, ::google::analytics::data::v1alpha::RunReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::analytics::data::v1alpha::RunReportRequest, ::google::analytics::data::v1alpha::RunReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunReport_, context, request, response);
}

void AlphaAnalyticsData::Stub::async::RunReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunReportRequest* request, ::google::analytics::data::v1alpha::RunReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::analytics::data::v1alpha::RunReportRequest, ::google::analytics::data::v1alpha::RunReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunReport_, context, request, response, std::move(f));
}

void AlphaAnalyticsData::Stub::async::RunReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunReportRequest* request, ::google::analytics::data::v1alpha::RunReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::RunReportResponse>* AlphaAnalyticsData::Stub::PrepareAsyncRunReportRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::analytics::data::v1alpha::RunReportResponse, ::google::analytics::data::v1alpha::RunReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::RunReportResponse>* AlphaAnalyticsData::Stub::AsyncRunReportRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AlphaAnalyticsData::Stub::RunPivotReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunPivotReportRequest& request, ::google::analytics::data::v1alpha::RunPivotReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::analytics::data::v1alpha::RunPivotReportRequest, ::google::analytics::data::v1alpha::RunPivotReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunPivotReport_, context, request, response);
}

void AlphaAnalyticsData::Stub::async::RunPivotReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunPivotReportRequest* request, ::google::analytics::data::v1alpha::RunPivotReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::analytics::data::v1alpha::RunPivotReportRequest, ::google::analytics::data::v1alpha::RunPivotReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunPivotReport_, context, request, response, std::move(f));
}

void AlphaAnalyticsData::Stub::async::RunPivotReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunPivotReportRequest* request, ::google::analytics::data::v1alpha::RunPivotReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunPivotReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::RunPivotReportResponse>* AlphaAnalyticsData::Stub::PrepareAsyncRunPivotReportRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunPivotReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::analytics::data::v1alpha::RunPivotReportResponse, ::google::analytics::data::v1alpha::RunPivotReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunPivotReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::RunPivotReportResponse>* AlphaAnalyticsData::Stub::AsyncRunPivotReportRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunPivotReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunPivotReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AlphaAnalyticsData::Stub::BatchRunReports(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunReportsRequest& request, ::google::analytics::data::v1alpha::BatchRunReportsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::analytics::data::v1alpha::BatchRunReportsRequest, ::google::analytics::data::v1alpha::BatchRunReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchRunReports_, context, request, response);
}

void AlphaAnalyticsData::Stub::async::BatchRunReports(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunReportsRequest* request, ::google::analytics::data::v1alpha::BatchRunReportsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::analytics::data::v1alpha::BatchRunReportsRequest, ::google::analytics::data::v1alpha::BatchRunReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRunReports_, context, request, response, std::move(f));
}

void AlphaAnalyticsData::Stub::async::BatchRunReports(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunReportsRequest* request, ::google::analytics::data::v1alpha::BatchRunReportsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRunReports_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::BatchRunReportsResponse>* AlphaAnalyticsData::Stub::PrepareAsyncBatchRunReportsRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunReportsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::analytics::data::v1alpha::BatchRunReportsResponse, ::google::analytics::data::v1alpha::BatchRunReportsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchRunReports_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::BatchRunReportsResponse>* AlphaAnalyticsData::Stub::AsyncBatchRunReportsRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunReportsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchRunReportsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AlphaAnalyticsData::Stub::BatchRunPivotReports(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest& request, ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest, ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchRunPivotReports_, context, request, response);
}

void AlphaAnalyticsData::Stub::async::BatchRunPivotReports(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest* request, ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest, ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRunPivotReports_, context, request, response, std::move(f));
}

void AlphaAnalyticsData::Stub::async::BatchRunPivotReports(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest* request, ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchRunPivotReports_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse>* AlphaAnalyticsData::Stub::PrepareAsyncBatchRunPivotReportsRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse, ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchRunPivotReports_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse>* AlphaAnalyticsData::Stub::AsyncBatchRunPivotReportsRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchRunPivotReportsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AlphaAnalyticsData::Stub::GetMetadata(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::GetMetadataRequest& request, ::google::analytics::data::v1alpha::Metadata* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::analytics::data::v1alpha::GetMetadataRequest, ::google::analytics::data::v1alpha::Metadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMetadata_, context, request, response);
}

void AlphaAnalyticsData::Stub::async::GetMetadata(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::GetMetadataRequest* request, ::google::analytics::data::v1alpha::Metadata* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::analytics::data::v1alpha::GetMetadataRequest, ::google::analytics::data::v1alpha::Metadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetadata_, context, request, response, std::move(f));
}

void AlphaAnalyticsData::Stub::async::GetMetadata(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::GetMetadataRequest* request, ::google::analytics::data::v1alpha::Metadata* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::Metadata>* AlphaAnalyticsData::Stub::PrepareAsyncGetMetadataRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::analytics::data::v1alpha::Metadata, ::google::analytics::data::v1alpha::GetMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::Metadata>* AlphaAnalyticsData::Stub::AsyncGetMetadataRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::GetMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AlphaAnalyticsData::Stub::RunRealtimeReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunRealtimeReportRequest& request, ::google::analytics::data::v1alpha::RunRealtimeReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::analytics::data::v1alpha::RunRealtimeReportRequest, ::google::analytics::data::v1alpha::RunRealtimeReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunRealtimeReport_, context, request, response);
}

void AlphaAnalyticsData::Stub::async::RunRealtimeReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunRealtimeReportRequest* request, ::google::analytics::data::v1alpha::RunRealtimeReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::analytics::data::v1alpha::RunRealtimeReportRequest, ::google::analytics::data::v1alpha::RunRealtimeReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunRealtimeReport_, context, request, response, std::move(f));
}

void AlphaAnalyticsData::Stub::async::RunRealtimeReport(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunRealtimeReportRequest* request, ::google::analytics::data::v1alpha::RunRealtimeReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunRealtimeReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::RunRealtimeReportResponse>* AlphaAnalyticsData::Stub::PrepareAsyncRunRealtimeReportRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunRealtimeReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::analytics::data::v1alpha::RunRealtimeReportResponse, ::google::analytics::data::v1alpha::RunRealtimeReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunRealtimeReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::analytics::data::v1alpha::RunRealtimeReportResponse>* AlphaAnalyticsData::Stub::AsyncRunRealtimeReportRaw(::grpc::ClientContext* context, const ::google::analytics::data::v1alpha::RunRealtimeReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunRealtimeReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

AlphaAnalyticsData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlphaAnalyticsData_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlphaAnalyticsData::Service, ::google::analytics::data::v1alpha::RunReportRequest, ::google::analytics::data::v1alpha::RunReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlphaAnalyticsData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::analytics::data::v1alpha::RunReportRequest* req,
             ::google::analytics::data::v1alpha::RunReportResponse* resp) {
               return service->RunReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlphaAnalyticsData_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlphaAnalyticsData::Service, ::google::analytics::data::v1alpha::RunPivotReportRequest, ::google::analytics::data::v1alpha::RunPivotReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlphaAnalyticsData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::analytics::data::v1alpha::RunPivotReportRequest* req,
             ::google::analytics::data::v1alpha::RunPivotReportResponse* resp) {
               return service->RunPivotReport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlphaAnalyticsData_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlphaAnalyticsData::Service, ::google::analytics::data::v1alpha::BatchRunReportsRequest, ::google::analytics::data::v1alpha::BatchRunReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlphaAnalyticsData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::analytics::data::v1alpha::BatchRunReportsRequest* req,
             ::google::analytics::data::v1alpha::BatchRunReportsResponse* resp) {
               return service->BatchRunReports(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlphaAnalyticsData_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlphaAnalyticsData::Service, ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest, ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlphaAnalyticsData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest* req,
             ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse* resp) {
               return service->BatchRunPivotReports(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlphaAnalyticsData_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlphaAnalyticsData::Service, ::google::analytics::data::v1alpha::GetMetadataRequest, ::google::analytics::data::v1alpha::Metadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlphaAnalyticsData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::analytics::data::v1alpha::GetMetadataRequest* req,
             ::google::analytics::data::v1alpha::Metadata* resp) {
               return service->GetMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AlphaAnalyticsData_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AlphaAnalyticsData::Service, ::google::analytics::data::v1alpha::RunRealtimeReportRequest, ::google::analytics::data::v1alpha::RunRealtimeReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AlphaAnalyticsData::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::analytics::data::v1alpha::RunRealtimeReportRequest* req,
             ::google::analytics::data::v1alpha::RunRealtimeReportResponse* resp) {
               return service->RunRealtimeReport(ctx, req, resp);
             }, this)));
}

AlphaAnalyticsData::Service::~Service() {
}

::grpc::Status AlphaAnalyticsData::Service::RunReport(::grpc::ServerContext* context, const ::google::analytics::data::v1alpha::RunReportRequest* request, ::google::analytics::data::v1alpha::RunReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlphaAnalyticsData::Service::RunPivotReport(::grpc::ServerContext* context, const ::google::analytics::data::v1alpha::RunPivotReportRequest* request, ::google::analytics::data::v1alpha::RunPivotReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlphaAnalyticsData::Service::BatchRunReports(::grpc::ServerContext* context, const ::google::analytics::data::v1alpha::BatchRunReportsRequest* request, ::google::analytics::data::v1alpha::BatchRunReportsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlphaAnalyticsData::Service::BatchRunPivotReports(::grpc::ServerContext* context, const ::google::analytics::data::v1alpha::BatchRunPivotReportsRequest* request, ::google::analytics::data::v1alpha::BatchRunPivotReportsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlphaAnalyticsData::Service::GetMetadata(::grpc::ServerContext* context, const ::google::analytics::data::v1alpha::GetMetadataRequest* request, ::google::analytics::data::v1alpha::Metadata* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AlphaAnalyticsData::Service::RunRealtimeReport(::grpc::ServerContext* context, const ::google::analytics::data::v1alpha::RunRealtimeReportRequest* request, ::google::analytics::data::v1alpha::RunRealtimeReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace analytics
}  // namespace data
}  // namespace v1alpha

