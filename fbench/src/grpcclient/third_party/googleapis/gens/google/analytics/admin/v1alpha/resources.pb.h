// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/analytics/admin/v1alpha/resources.proto

#ifndef PROTOBUF_INCLUDED_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto
#define PROTOBUF_INCLUDED_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto();
namespace google {
namespace analytics {
namespace admin {
namespace v1alpha {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountSummary;
class AccountSummaryDefaultTypeInternal;
extern AccountSummaryDefaultTypeInternal _AccountSummary_default_instance_;
class AndroidAppDataStream;
class AndroidAppDataStreamDefaultTypeInternal;
extern AndroidAppDataStreamDefaultTypeInternal _AndroidAppDataStream_default_instance_;
class AuditUserLink;
class AuditUserLinkDefaultTypeInternal;
extern AuditUserLinkDefaultTypeInternal _AuditUserLink_default_instance_;
class ChangeHistoryChange;
class ChangeHistoryChangeDefaultTypeInternal;
extern ChangeHistoryChangeDefaultTypeInternal _ChangeHistoryChange_default_instance_;
class ChangeHistoryChange_ChangeHistoryResource;
class ChangeHistoryChange_ChangeHistoryResourceDefaultTypeInternal;
extern ChangeHistoryChange_ChangeHistoryResourceDefaultTypeInternal _ChangeHistoryChange_ChangeHistoryResource_default_instance_;
class ChangeHistoryEvent;
class ChangeHistoryEventDefaultTypeInternal;
extern ChangeHistoryEventDefaultTypeInternal _ChangeHistoryEvent_default_instance_;
class ConversionEvent;
class ConversionEventDefaultTypeInternal;
extern ConversionEventDefaultTypeInternal _ConversionEvent_default_instance_;
class CustomDimension;
class CustomDimensionDefaultTypeInternal;
extern CustomDimensionDefaultTypeInternal _CustomDimension_default_instance_;
class CustomMetric;
class CustomMetricDefaultTypeInternal;
extern CustomMetricDefaultTypeInternal _CustomMetric_default_instance_;
class DataSharingSettings;
class DataSharingSettingsDefaultTypeInternal;
extern DataSharingSettingsDefaultTypeInternal _DataSharingSettings_default_instance_;
class EnhancedMeasurementSettings;
class EnhancedMeasurementSettingsDefaultTypeInternal;
extern EnhancedMeasurementSettingsDefaultTypeInternal _EnhancedMeasurementSettings_default_instance_;
class FirebaseLink;
class FirebaseLinkDefaultTypeInternal;
extern FirebaseLinkDefaultTypeInternal _FirebaseLink_default_instance_;
class GlobalSiteTag;
class GlobalSiteTagDefaultTypeInternal;
extern GlobalSiteTagDefaultTypeInternal _GlobalSiteTag_default_instance_;
class GoogleAdsLink;
class GoogleAdsLinkDefaultTypeInternal;
extern GoogleAdsLinkDefaultTypeInternal _GoogleAdsLink_default_instance_;
class GoogleSignalsSettings;
class GoogleSignalsSettingsDefaultTypeInternal;
extern GoogleSignalsSettingsDefaultTypeInternal _GoogleSignalsSettings_default_instance_;
class IosAppDataStream;
class IosAppDataStreamDefaultTypeInternal;
extern IosAppDataStreamDefaultTypeInternal _IosAppDataStream_default_instance_;
class MeasurementProtocolSecret;
class MeasurementProtocolSecretDefaultTypeInternal;
extern MeasurementProtocolSecretDefaultTypeInternal _MeasurementProtocolSecret_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class PropertySummary;
class PropertySummaryDefaultTypeInternal;
extern PropertySummaryDefaultTypeInternal _PropertySummary_default_instance_;
class UserLink;
class UserLinkDefaultTypeInternal;
extern UserLinkDefaultTypeInternal _UserLink_default_instance_;
class WebDataStream;
class WebDataStreamDefaultTypeInternal;
extern WebDataStreamDefaultTypeInternal _WebDataStream_default_instance_;
}  // namespace v1alpha
}  // namespace admin
}  // namespace analytics
namespace protobuf {
template<> ::google::analytics::admin::v1alpha::Account* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::Account>(Arena*);
template<> ::google::analytics::admin::v1alpha::AccountSummary* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::AccountSummary>(Arena*);
template<> ::google::analytics::admin::v1alpha::AndroidAppDataStream* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::AndroidAppDataStream>(Arena*);
template<> ::google::analytics::admin::v1alpha::AuditUserLink* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::AuditUserLink>(Arena*);
template<> ::google::analytics::admin::v1alpha::ChangeHistoryChange* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::ChangeHistoryChange>(Arena*);
template<> ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource>(Arena*);
template<> ::google::analytics::admin::v1alpha::ChangeHistoryEvent* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::ChangeHistoryEvent>(Arena*);
template<> ::google::analytics::admin::v1alpha::ConversionEvent* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::ConversionEvent>(Arena*);
template<> ::google::analytics::admin::v1alpha::CustomDimension* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::CustomDimension>(Arena*);
template<> ::google::analytics::admin::v1alpha::CustomMetric* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::CustomMetric>(Arena*);
template<> ::google::analytics::admin::v1alpha::DataSharingSettings* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::DataSharingSettings>(Arena*);
template<> ::google::analytics::admin::v1alpha::EnhancedMeasurementSettings* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::EnhancedMeasurementSettings>(Arena*);
template<> ::google::analytics::admin::v1alpha::FirebaseLink* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::FirebaseLink>(Arena*);
template<> ::google::analytics::admin::v1alpha::GlobalSiteTag* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::GlobalSiteTag>(Arena*);
template<> ::google::analytics::admin::v1alpha::GoogleAdsLink* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::GoogleAdsLink>(Arena*);
template<> ::google::analytics::admin::v1alpha::GoogleSignalsSettings* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::GoogleSignalsSettings>(Arena*);
template<> ::google::analytics::admin::v1alpha::IosAppDataStream* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::IosAppDataStream>(Arena*);
template<> ::google::analytics::admin::v1alpha::MeasurementProtocolSecret* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::MeasurementProtocolSecret>(Arena*);
template<> ::google::analytics::admin::v1alpha::Property* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::Property>(Arena*);
template<> ::google::analytics::admin::v1alpha::PropertySummary* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::PropertySummary>(Arena*);
template<> ::google::analytics::admin::v1alpha::UserLink* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::UserLink>(Arena*);
template<> ::google::analytics::admin::v1alpha::WebDataStream* Arena::CreateMaybeMessage<::google::analytics::admin::v1alpha::WebDataStream>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace analytics {
namespace admin {
namespace v1alpha {

enum CustomDimension_DimensionScope {
  CustomDimension_DimensionScope_DIMENSION_SCOPE_UNSPECIFIED = 0,
  CustomDimension_DimensionScope_EVENT = 1,
  CustomDimension_DimensionScope_USER = 2,
  CustomDimension_DimensionScope_CustomDimension_DimensionScope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CustomDimension_DimensionScope_CustomDimension_DimensionScope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CustomDimension_DimensionScope_IsValid(int value);
const CustomDimension_DimensionScope CustomDimension_DimensionScope_DimensionScope_MIN = CustomDimension_DimensionScope_DIMENSION_SCOPE_UNSPECIFIED;
const CustomDimension_DimensionScope CustomDimension_DimensionScope_DimensionScope_MAX = CustomDimension_DimensionScope_USER;
const int CustomDimension_DimensionScope_DimensionScope_ARRAYSIZE = CustomDimension_DimensionScope_DimensionScope_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomDimension_DimensionScope_descriptor();
inline const ::std::string& CustomDimension_DimensionScope_Name(CustomDimension_DimensionScope value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomDimension_DimensionScope_descriptor(), value);
}
inline bool CustomDimension_DimensionScope_Parse(
    const ::std::string& name, CustomDimension_DimensionScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomDimension_DimensionScope>(
    CustomDimension_DimensionScope_descriptor(), name, value);
}
enum CustomMetric_MeasurementUnit {
  CustomMetric_MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED = 0,
  CustomMetric_MeasurementUnit_STANDARD = 1,
  CustomMetric_MeasurementUnit_CURRENCY = 2,
  CustomMetric_MeasurementUnit_FEET = 3,
  CustomMetric_MeasurementUnit_METERS = 4,
  CustomMetric_MeasurementUnit_KILOMETERS = 5,
  CustomMetric_MeasurementUnit_MILES = 6,
  CustomMetric_MeasurementUnit_MILLISECONDS = 7,
  CustomMetric_MeasurementUnit_SECONDS = 8,
  CustomMetric_MeasurementUnit_MINUTES = 9,
  CustomMetric_MeasurementUnit_HOURS = 10,
  CustomMetric_MeasurementUnit_CustomMetric_MeasurementUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CustomMetric_MeasurementUnit_CustomMetric_MeasurementUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CustomMetric_MeasurementUnit_IsValid(int value);
const CustomMetric_MeasurementUnit CustomMetric_MeasurementUnit_MeasurementUnit_MIN = CustomMetric_MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED;
const CustomMetric_MeasurementUnit CustomMetric_MeasurementUnit_MeasurementUnit_MAX = CustomMetric_MeasurementUnit_HOURS;
const int CustomMetric_MeasurementUnit_MeasurementUnit_ARRAYSIZE = CustomMetric_MeasurementUnit_MeasurementUnit_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomMetric_MeasurementUnit_descriptor();
inline const ::std::string& CustomMetric_MeasurementUnit_Name(CustomMetric_MeasurementUnit value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomMetric_MeasurementUnit_descriptor(), value);
}
inline bool CustomMetric_MeasurementUnit_Parse(
    const ::std::string& name, CustomMetric_MeasurementUnit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomMetric_MeasurementUnit>(
    CustomMetric_MeasurementUnit_descriptor(), name, value);
}
enum CustomMetric_MetricScope {
  CustomMetric_MetricScope_METRIC_SCOPE_UNSPECIFIED = 0,
  CustomMetric_MetricScope_EVENT = 1,
  CustomMetric_MetricScope_CustomMetric_MetricScope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CustomMetric_MetricScope_CustomMetric_MetricScope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CustomMetric_MetricScope_IsValid(int value);
const CustomMetric_MetricScope CustomMetric_MetricScope_MetricScope_MIN = CustomMetric_MetricScope_METRIC_SCOPE_UNSPECIFIED;
const CustomMetric_MetricScope CustomMetric_MetricScope_MetricScope_MAX = CustomMetric_MetricScope_EVENT;
const int CustomMetric_MetricScope_MetricScope_ARRAYSIZE = CustomMetric_MetricScope_MetricScope_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomMetric_MetricScope_descriptor();
inline const ::std::string& CustomMetric_MetricScope_Name(CustomMetric_MetricScope value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomMetric_MetricScope_descriptor(), value);
}
inline bool CustomMetric_MetricScope_Parse(
    const ::std::string& name, CustomMetric_MetricScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomMetric_MetricScope>(
    CustomMetric_MetricScope_descriptor(), name, value);
}
enum MaximumUserAccess {
  MAXIMUM_USER_ACCESS_UNSPECIFIED = 0,
  NO_ACCESS = 1,
  READ_AND_ANALYZE = 2,
  EDITOR_WITHOUT_LINK_MANAGEMENT = 3,
  EDITOR_INCLUDING_LINK_MANAGEMENT = 4,
  MaximumUserAccess_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MaximumUserAccess_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MaximumUserAccess_IsValid(int value);
const MaximumUserAccess MaximumUserAccess_MIN = MAXIMUM_USER_ACCESS_UNSPECIFIED;
const MaximumUserAccess MaximumUserAccess_MAX = EDITOR_INCLUDING_LINK_MANAGEMENT;
const int MaximumUserAccess_ARRAYSIZE = MaximumUserAccess_MAX + 1;

const ::google::protobuf::EnumDescriptor* MaximumUserAccess_descriptor();
inline const ::std::string& MaximumUserAccess_Name(MaximumUserAccess value) {
  return ::google::protobuf::internal::NameOfEnum(
    MaximumUserAccess_descriptor(), value);
}
inline bool MaximumUserAccess_Parse(
    const ::std::string& name, MaximumUserAccess* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MaximumUserAccess>(
    MaximumUserAccess_descriptor(), name, value);
}
enum IndustryCategory {
  INDUSTRY_CATEGORY_UNSPECIFIED = 0,
  AUTOMOTIVE = 1,
  BUSINESS_AND_INDUSTRIAL_MARKETS = 2,
  FINANCE = 3,
  HEALTHCARE = 4,
  TECHNOLOGY = 5,
  TRAVEL = 6,
  OTHER = 7,
  ARTS_AND_ENTERTAINMENT = 8,
  BEAUTY_AND_FITNESS = 9,
  BOOKS_AND_LITERATURE = 10,
  FOOD_AND_DRINK = 11,
  GAMES = 12,
  HOBBIES_AND_LEISURE = 13,
  HOME_AND_GARDEN = 14,
  INTERNET_AND_TELECOM = 15,
  LAW_AND_GOVERNMENT = 16,
  NEWS = 17,
  ONLINE_COMMUNITIES = 18,
  PEOPLE_AND_SOCIETY = 19,
  PETS_AND_ANIMALS = 20,
  REAL_ESTATE = 21,
  REFERENCE = 22,
  SCIENCE = 23,
  SPORTS = 24,
  JOBS_AND_EDUCATION = 25,
  SHOPPING = 26,
  IndustryCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  IndustryCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool IndustryCategory_IsValid(int value);
const IndustryCategory IndustryCategory_MIN = INDUSTRY_CATEGORY_UNSPECIFIED;
const IndustryCategory IndustryCategory_MAX = SHOPPING;
const int IndustryCategory_ARRAYSIZE = IndustryCategory_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndustryCategory_descriptor();
inline const ::std::string& IndustryCategory_Name(IndustryCategory value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndustryCategory_descriptor(), value);
}
inline bool IndustryCategory_Parse(
    const ::std::string& name, IndustryCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndustryCategory>(
    IndustryCategory_descriptor(), name, value);
}
enum ActorType {
  ACTOR_TYPE_UNSPECIFIED = 0,
  USER = 1,
  SYSTEM = 2,
  SUPPORT = 3,
  ActorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ActorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ActorType_IsValid(int value);
const ActorType ActorType_MIN = ACTOR_TYPE_UNSPECIFIED;
const ActorType ActorType_MAX = SUPPORT;
const int ActorType_ARRAYSIZE = ActorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorType_descriptor();
inline const ::std::string& ActorType_Name(ActorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorType_descriptor(), value);
}
inline bool ActorType_Parse(
    const ::std::string& name, ActorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorType>(
    ActorType_descriptor(), name, value);
}
enum ActionType {
  ACTION_TYPE_UNSPECIFIED = 0,
  CREATED = 1,
  UPDATED = 2,
  DELETED = 3,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = ACTION_TYPE_UNSPECIFIED;
const ActionType ActionType_MAX = DELETED;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum ChangeHistoryResourceType {
  CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED = 0,
  ACCOUNT = 1,
  PROPERTY = 2,
  WEB_DATA_STREAM = 3,
  ANDROID_APP_DATA_STREAM = 4,
  IOS_APP_DATA_STREAM = 5,
  FIREBASE_LINK = 6,
  GOOGLE_ADS_LINK = 7,
  GOOGLE_SIGNALS_SETTINGS = 8,
  CONVERSION_EVENT = 9,
  MEASUREMENT_PROTOCOL_SECRET = 10,
  CUSTOM_DIMENSION = 11,
  CUSTOM_METRIC = 12,
  ChangeHistoryResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ChangeHistoryResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ChangeHistoryResourceType_IsValid(int value);
const ChangeHistoryResourceType ChangeHistoryResourceType_MIN = CHANGE_HISTORY_RESOURCE_TYPE_UNSPECIFIED;
const ChangeHistoryResourceType ChangeHistoryResourceType_MAX = CUSTOM_METRIC;
const int ChangeHistoryResourceType_ARRAYSIZE = ChangeHistoryResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeHistoryResourceType_descriptor();
inline const ::std::string& ChangeHistoryResourceType_Name(ChangeHistoryResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeHistoryResourceType_descriptor(), value);
}
inline bool ChangeHistoryResourceType_Parse(
    const ::std::string& name, ChangeHistoryResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeHistoryResourceType>(
    ChangeHistoryResourceType_descriptor(), name, value);
}
enum GoogleSignalsState {
  GOOGLE_SIGNALS_STATE_UNSPECIFIED = 0,
  GOOGLE_SIGNALS_ENABLED = 1,
  GOOGLE_SIGNALS_DISABLED = 2,
  GoogleSignalsState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  GoogleSignalsState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool GoogleSignalsState_IsValid(int value);
const GoogleSignalsState GoogleSignalsState_MIN = GOOGLE_SIGNALS_STATE_UNSPECIFIED;
const GoogleSignalsState GoogleSignalsState_MAX = GOOGLE_SIGNALS_DISABLED;
const int GoogleSignalsState_ARRAYSIZE = GoogleSignalsState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GoogleSignalsState_descriptor();
inline const ::std::string& GoogleSignalsState_Name(GoogleSignalsState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GoogleSignalsState_descriptor(), value);
}
inline bool GoogleSignalsState_Parse(
    const ::std::string& name, GoogleSignalsState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoogleSignalsState>(
    GoogleSignalsState_descriptor(), name, value);
}
enum GoogleSignalsConsent {
  GOOGLE_SIGNALS_CONSENT_UNSPECIFIED = 0,
  GOOGLE_SIGNALS_CONSENT_CONSENTED = 2,
  GOOGLE_SIGNALS_CONSENT_NOT_CONSENTED = 1,
  GoogleSignalsConsent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  GoogleSignalsConsent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool GoogleSignalsConsent_IsValid(int value);
const GoogleSignalsConsent GoogleSignalsConsent_MIN = GOOGLE_SIGNALS_CONSENT_UNSPECIFIED;
const GoogleSignalsConsent GoogleSignalsConsent_MAX = GOOGLE_SIGNALS_CONSENT_CONSENTED;
const int GoogleSignalsConsent_ARRAYSIZE = GoogleSignalsConsent_MAX + 1;

const ::google::protobuf::EnumDescriptor* GoogleSignalsConsent_descriptor();
inline const ::std::string& GoogleSignalsConsent_Name(GoogleSignalsConsent value) {
  return ::google::protobuf::internal::NameOfEnum(
    GoogleSignalsConsent_descriptor(), value);
}
inline bool GoogleSignalsConsent_Parse(
    const ::std::string& name, GoogleSignalsConsent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoogleSignalsConsent>(
    GoogleSignalsConsent_descriptor(), name, value);
}
// ===================================================================

class Account final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Account* other);
  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 4;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string region_code = 5;
  void clear_region_code();
  static const int kRegionCodeFieldNumber = 5;
  const ::std::string& region_code() const;
  void set_region_code(const ::std::string& value);
  #if LANG_CXX11
  void set_region_code(::std::string&& value);
  #endif
  void set_region_code(const char* value);
  void set_region_code(const char* value, size_t size);
  ::std::string* mutable_region_code();
  ::std::string* release_region_code();
  void set_allocated_region_code(::std::string* region_code);

  // .google.protobuf.Timestamp create_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // bool deleted = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_deleted();
  static const int kDeletedFieldNumber = 6;
  bool deleted() const;
  void set_deleted(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.Account)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr region_code_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  bool deleted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Property final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Property* other);
  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(nullptr);
  }

  Property* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_parent();
  static const int kParentFieldNumber = 2;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string display_name = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 5;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string time_zone = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 7;
  const ::std::string& time_zone() const;
  void set_time_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_time_zone(::std::string&& value);
  #endif
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  ::std::string* mutable_time_zone();
  ::std::string* release_time_zone();
  void set_allocated_time_zone(::std::string* time_zone);

  // string currency_code = 8;
  void clear_currency_code();
  static const int kCurrencyCodeFieldNumber = 8;
  const ::std::string& currency_code() const;
  void set_currency_code(const ::std::string& value);
  #if LANG_CXX11
  void set_currency_code(::std::string&& value);
  #endif
  void set_currency_code(const char* value);
  void set_currency_code(const char* value, size_t size);
  ::std::string* mutable_currency_code();
  ::std::string* release_currency_code();
  void set_allocated_currency_code(::std::string* currency_code);

  // .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.protobuf.Timestamp delete_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_delete_time() const;
  void clear_delete_time();
  static const int kDeleteTimeFieldNumber = 11;
  const ::google::protobuf::Timestamp& delete_time() const;
  ::google::protobuf::Timestamp* release_delete_time();
  ::google::protobuf::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::google::protobuf::Timestamp* delete_time);

  // .google.protobuf.Timestamp expire_time = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 12;
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);

  // .google.analytics.admin.v1alpha.IndustryCategory industry_category = 6;
  void clear_industry_category();
  static const int kIndustryCategoryFieldNumber = 6;
  ::google::analytics::admin::v1alpha::IndustryCategory industry_category() const;
  void set_industry_category(::google::analytics::admin::v1alpha::IndustryCategory value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.Property)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr time_zone_;
  ::google::protobuf::internal::ArenaStringPtr currency_code_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::protobuf::Timestamp* delete_time_;
  ::google::protobuf::Timestamp* expire_time_;
  int industry_category_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AndroidAppDataStream final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.AndroidAppDataStream) */ {
 public:
  AndroidAppDataStream();
  virtual ~AndroidAppDataStream();

  AndroidAppDataStream(const AndroidAppDataStream& from);

  inline AndroidAppDataStream& operator=(const AndroidAppDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AndroidAppDataStream(AndroidAppDataStream&& from) noexcept
    : AndroidAppDataStream() {
    *this = ::std::move(from);
  }

  inline AndroidAppDataStream& operator=(AndroidAppDataStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AndroidAppDataStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidAppDataStream* internal_default_instance() {
    return reinterpret_cast<const AndroidAppDataStream*>(
               &_AndroidAppDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AndroidAppDataStream* other);
  friend void swap(AndroidAppDataStream& a, AndroidAppDataStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AndroidAppDataStream* New() const final {
    return CreateMaybeMessage<AndroidAppDataStream>(nullptr);
  }

  AndroidAppDataStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AndroidAppDataStream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AndroidAppDataStream& from);
  void MergeFrom(const AndroidAppDataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidAppDataStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string firebase_app_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_firebase_app_id();
  static const int kFirebaseAppIdFieldNumber = 2;
  const ::std::string& firebase_app_id() const;
  void set_firebase_app_id(const ::std::string& value);
  #if LANG_CXX11
  void set_firebase_app_id(::std::string&& value);
  #endif
  void set_firebase_app_id(const char* value);
  void set_firebase_app_id(const char* value, size_t size);
  ::std::string* mutable_firebase_app_id();
  ::std::string* release_firebase_app_id();
  void set_allocated_firebase_app_id(::std::string* firebase_app_id);

  // string package_name = 5 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_package_name();
  static const int kPackageNameFieldNumber = 5;
  const ::std::string& package_name() const;
  void set_package_name(const ::std::string& value);
  #if LANG_CXX11
  void set_package_name(::std::string&& value);
  #endif
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  ::std::string* mutable_package_name();
  ::std::string* release_package_name();
  void set_allocated_package_name(::std::string* package_name);

  // string display_name = 6;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 6;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.AndroidAppDataStream)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr firebase_app_id_;
  ::google::protobuf::internal::ArenaStringPtr package_name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class IosAppDataStream final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.IosAppDataStream) */ {
 public:
  IosAppDataStream();
  virtual ~IosAppDataStream();

  IosAppDataStream(const IosAppDataStream& from);

  inline IosAppDataStream& operator=(const IosAppDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IosAppDataStream(IosAppDataStream&& from) noexcept
    : IosAppDataStream() {
    *this = ::std::move(from);
  }

  inline IosAppDataStream& operator=(IosAppDataStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IosAppDataStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IosAppDataStream* internal_default_instance() {
    return reinterpret_cast<const IosAppDataStream*>(
               &_IosAppDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IosAppDataStream* other);
  friend void swap(IosAppDataStream& a, IosAppDataStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IosAppDataStream* New() const final {
    return CreateMaybeMessage<IosAppDataStream>(nullptr);
  }

  IosAppDataStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IosAppDataStream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IosAppDataStream& from);
  void MergeFrom(const IosAppDataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IosAppDataStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string firebase_app_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_firebase_app_id();
  static const int kFirebaseAppIdFieldNumber = 2;
  const ::std::string& firebase_app_id() const;
  void set_firebase_app_id(const ::std::string& value);
  #if LANG_CXX11
  void set_firebase_app_id(::std::string&& value);
  #endif
  void set_firebase_app_id(const char* value);
  void set_firebase_app_id(const char* value, size_t size);
  ::std::string* mutable_firebase_app_id();
  ::std::string* release_firebase_app_id();
  void set_allocated_firebase_app_id(::std::string* firebase_app_id);

  // string bundle_id = 5 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];
  void clear_bundle_id();
  static const int kBundleIdFieldNumber = 5;
  const ::std::string& bundle_id() const;
  void set_bundle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bundle_id(::std::string&& value);
  #endif
  void set_bundle_id(const char* value);
  void set_bundle_id(const char* value, size_t size);
  ::std::string* mutable_bundle_id();
  ::std::string* release_bundle_id();
  void set_allocated_bundle_id(::std::string* bundle_id);

  // string display_name = 6;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 6;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.IosAppDataStream)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr firebase_app_id_;
  ::google::protobuf::internal::ArenaStringPtr bundle_id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class WebDataStream final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.WebDataStream) */ {
 public:
  WebDataStream();
  virtual ~WebDataStream();

  WebDataStream(const WebDataStream& from);

  inline WebDataStream& operator=(const WebDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WebDataStream(WebDataStream&& from) noexcept
    : WebDataStream() {
    *this = ::std::move(from);
  }

  inline WebDataStream& operator=(WebDataStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WebDataStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebDataStream* internal_default_instance() {
    return reinterpret_cast<const WebDataStream*>(
               &_WebDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(WebDataStream* other);
  friend void swap(WebDataStream& a, WebDataStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WebDataStream* New() const final {
    return CreateMaybeMessage<WebDataStream>(nullptr);
  }

  WebDataStream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WebDataStream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WebDataStream& from);
  void MergeFrom(const WebDataStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebDataStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string measurement_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_measurement_id();
  static const int kMeasurementIdFieldNumber = 2;
  const ::std::string& measurement_id() const;
  void set_measurement_id(const ::std::string& value);
  #if LANG_CXX11
  void set_measurement_id(::std::string&& value);
  #endif
  void set_measurement_id(const char* value);
  void set_measurement_id(const char* value, size_t size);
  ::std::string* mutable_measurement_id();
  ::std::string* release_measurement_id();
  void set_allocated_measurement_id(::std::string* measurement_id);

  // string firebase_app_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_firebase_app_id();
  static const int kFirebaseAppIdFieldNumber = 3;
  const ::std::string& firebase_app_id() const;
  void set_firebase_app_id(const ::std::string& value);
  #if LANG_CXX11
  void set_firebase_app_id(::std::string&& value);
  #endif
  void set_firebase_app_id(const char* value);
  void set_firebase_app_id(const char* value, size_t size);
  ::std::string* mutable_firebase_app_id();
  ::std::string* release_firebase_app_id();
  void set_allocated_firebase_app_id(::std::string* firebase_app_id);

  // string default_uri = 6 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_default_uri();
  static const int kDefaultUriFieldNumber = 6;
  const ::std::string& default_uri() const;
  void set_default_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_default_uri(::std::string&& value);
  #endif
  void set_default_uri(const char* value);
  void set_default_uri(const char* value, size_t size);
  ::std::string* mutable_default_uri();
  ::std::string* release_default_uri();
  void set_allocated_default_uri(::std::string* default_uri);

  // string display_name = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 7;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.WebDataStream)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr measurement_id_;
  ::google::protobuf::internal::ArenaStringPtr firebase_app_id_;
  ::google::protobuf::internal::ArenaStringPtr default_uri_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UserLink final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.UserLink) */ {
 public:
  UserLink();
  virtual ~UserLink();

  UserLink(const UserLink& from);

  inline UserLink& operator=(const UserLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLink(UserLink&& from) noexcept
    : UserLink() {
    *this = ::std::move(from);
  }

  inline UserLink& operator=(UserLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLink* internal_default_instance() {
    return reinterpret_cast<const UserLink*>(
               &_UserLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UserLink* other);
  friend void swap(UserLink& a, UserLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLink* New() const final {
    return CreateMaybeMessage<UserLink>(nullptr);
  }

  UserLink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLink& from);
  void MergeFrom(const UserLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string direct_roles = 3;
  int direct_roles_size() const;
  void clear_direct_roles();
  static const int kDirectRolesFieldNumber = 3;
  const ::std::string& direct_roles(int index) const;
  ::std::string* mutable_direct_roles(int index);
  void set_direct_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_direct_roles(int index, ::std::string&& value);
  #endif
  void set_direct_roles(int index, const char* value);
  void set_direct_roles(int index, const char* value, size_t size);
  ::std::string* add_direct_roles();
  void add_direct_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_direct_roles(::std::string&& value);
  #endif
  void add_direct_roles(const char* value);
  void add_direct_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& direct_roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_direct_roles();

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email_address = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_email_address();
  static const int kEmailAddressFieldNumber = 2;
  const ::std::string& email_address() const;
  void set_email_address(const ::std::string& value);
  #if LANG_CXX11
  void set_email_address(::std::string&& value);
  #endif
  void set_email_address(const char* value);
  void set_email_address(const char* value, size_t size);
  ::std::string* mutable_email_address();
  ::std::string* release_email_address();
  void set_allocated_email_address(::std::string* email_address);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.UserLink)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> direct_roles_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AuditUserLink final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.AuditUserLink) */ {
 public:
  AuditUserLink();
  virtual ~AuditUserLink();

  AuditUserLink(const AuditUserLink& from);

  inline AuditUserLink& operator=(const AuditUserLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditUserLink(AuditUserLink&& from) noexcept
    : AuditUserLink() {
    *this = ::std::move(from);
  }

  inline AuditUserLink& operator=(AuditUserLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuditUserLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditUserLink* internal_default_instance() {
    return reinterpret_cast<const AuditUserLink*>(
               &_AuditUserLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AuditUserLink* other);
  friend void swap(AuditUserLink& a, AuditUserLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditUserLink* New() const final {
    return CreateMaybeMessage<AuditUserLink>(nullptr);
  }

  AuditUserLink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditUserLink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditUserLink& from);
  void MergeFrom(const AuditUserLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditUserLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string direct_roles = 3;
  int direct_roles_size() const;
  void clear_direct_roles();
  static const int kDirectRolesFieldNumber = 3;
  const ::std::string& direct_roles(int index) const;
  ::std::string* mutable_direct_roles(int index);
  void set_direct_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_direct_roles(int index, ::std::string&& value);
  #endif
  void set_direct_roles(int index, const char* value);
  void set_direct_roles(int index, const char* value, size_t size);
  ::std::string* add_direct_roles();
  void add_direct_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_direct_roles(::std::string&& value);
  #endif
  void add_direct_roles(const char* value);
  void add_direct_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& direct_roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_direct_roles();

  // repeated string effective_roles = 4;
  int effective_roles_size() const;
  void clear_effective_roles();
  static const int kEffectiveRolesFieldNumber = 4;
  const ::std::string& effective_roles(int index) const;
  ::std::string* mutable_effective_roles(int index);
  void set_effective_roles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_effective_roles(int index, ::std::string&& value);
  #endif
  void set_effective_roles(int index, const char* value);
  void set_effective_roles(int index, const char* value, size_t size);
  ::std::string* add_effective_roles();
  void add_effective_roles(const ::std::string& value);
  #if LANG_CXX11
  void add_effective_roles(::std::string&& value);
  #endif
  void add_effective_roles(const char* value);
  void add_effective_roles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& effective_roles() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_effective_roles();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email_address = 2;
  void clear_email_address();
  static const int kEmailAddressFieldNumber = 2;
  const ::std::string& email_address() const;
  void set_email_address(const ::std::string& value);
  #if LANG_CXX11
  void set_email_address(::std::string&& value);
  #endif
  void set_email_address(const char* value);
  void set_email_address(const char* value, size_t size);
  ::std::string* mutable_email_address();
  ::std::string* release_email_address();
  void set_allocated_email_address(::std::string* email_address);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.AuditUserLink)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> direct_roles_;
  ::google::protobuf::RepeatedPtrField<::std::string> effective_roles_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class EnhancedMeasurementSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.EnhancedMeasurementSettings) */ {
 public:
  EnhancedMeasurementSettings();
  virtual ~EnhancedMeasurementSettings();

  EnhancedMeasurementSettings(const EnhancedMeasurementSettings& from);

  inline EnhancedMeasurementSettings& operator=(const EnhancedMeasurementSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnhancedMeasurementSettings(EnhancedMeasurementSettings&& from) noexcept
    : EnhancedMeasurementSettings() {
    *this = ::std::move(from);
  }

  inline EnhancedMeasurementSettings& operator=(EnhancedMeasurementSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EnhancedMeasurementSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnhancedMeasurementSettings* internal_default_instance() {
    return reinterpret_cast<const EnhancedMeasurementSettings*>(
               &_EnhancedMeasurementSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(EnhancedMeasurementSettings* other);
  friend void swap(EnhancedMeasurementSettings& a, EnhancedMeasurementSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnhancedMeasurementSettings* New() const final {
    return CreateMaybeMessage<EnhancedMeasurementSettings>(nullptr);
  }

  EnhancedMeasurementSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnhancedMeasurementSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnhancedMeasurementSettings& from);
  void MergeFrom(const EnhancedMeasurementSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnhancedMeasurementSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string search_query_parameter = 16 [(.google.api.field_behavior) = REQUIRED];
  void clear_search_query_parameter();
  static const int kSearchQueryParameterFieldNumber = 16;
  const ::std::string& search_query_parameter() const;
  void set_search_query_parameter(const ::std::string& value);
  #if LANG_CXX11
  void set_search_query_parameter(::std::string&& value);
  #endif
  void set_search_query_parameter(const char* value);
  void set_search_query_parameter(const char* value, size_t size);
  ::std::string* mutable_search_query_parameter();
  ::std::string* release_search_query_parameter();
  void set_allocated_search_query_parameter(::std::string* search_query_parameter);

  // string uri_query_parameter = 17;
  void clear_uri_query_parameter();
  static const int kUriQueryParameterFieldNumber = 17;
  const ::std::string& uri_query_parameter() const;
  void set_uri_query_parameter(const ::std::string& value);
  #if LANG_CXX11
  void set_uri_query_parameter(::std::string&& value);
  #endif
  void set_uri_query_parameter(const char* value);
  void set_uri_query_parameter(const char* value, size_t size);
  ::std::string* mutable_uri_query_parameter();
  ::std::string* release_uri_query_parameter();
  void set_allocated_uri_query_parameter(::std::string* uri_query_parameter);

  // bool stream_enabled = 2;
  void clear_stream_enabled();
  static const int kStreamEnabledFieldNumber = 2;
  bool stream_enabled() const;
  void set_stream_enabled(bool value);

  // bool page_views_enabled = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_page_views_enabled();
  static const int kPageViewsEnabledFieldNumber = 3;
  bool page_views_enabled() const;
  void set_page_views_enabled(bool value);

  // bool scrolls_enabled = 4;
  void clear_scrolls_enabled();
  static const int kScrollsEnabledFieldNumber = 4;
  bool scrolls_enabled() const;
  void set_scrolls_enabled(bool value);

  // bool outbound_clicks_enabled = 5;
  void clear_outbound_clicks_enabled();
  static const int kOutboundClicksEnabledFieldNumber = 5;
  bool outbound_clicks_enabled() const;
  void set_outbound_clicks_enabled(bool value);

  // bool site_search_enabled = 7;
  void clear_site_search_enabled();
  static const int kSiteSearchEnabledFieldNumber = 7;
  bool site_search_enabled() const;
  void set_site_search_enabled(bool value);

  // bool video_engagement_enabled = 9;
  void clear_video_engagement_enabled();
  static const int kVideoEngagementEnabledFieldNumber = 9;
  bool video_engagement_enabled() const;
  void set_video_engagement_enabled(bool value);

  // bool file_downloads_enabled = 10;
  void clear_file_downloads_enabled();
  static const int kFileDownloadsEnabledFieldNumber = 10;
  bool file_downloads_enabled() const;
  void set_file_downloads_enabled(bool value);

  // bool page_loads_enabled = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_page_loads_enabled();
  static const int kPageLoadsEnabledFieldNumber = 12;
  bool page_loads_enabled() const;
  void set_page_loads_enabled(bool value);

  // bool page_changes_enabled = 13;
  void clear_page_changes_enabled();
  static const int kPageChangesEnabledFieldNumber = 13;
  bool page_changes_enabled() const;
  void set_page_changes_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.EnhancedMeasurementSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr search_query_parameter_;
  ::google::protobuf::internal::ArenaStringPtr uri_query_parameter_;
  bool stream_enabled_;
  bool page_views_enabled_;
  bool scrolls_enabled_;
  bool outbound_clicks_enabled_;
  bool site_search_enabled_;
  bool video_engagement_enabled_;
  bool file_downloads_enabled_;
  bool page_loads_enabled_;
  bool page_changes_enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class FirebaseLink final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.FirebaseLink) */ {
 public:
  FirebaseLink();
  virtual ~FirebaseLink();

  FirebaseLink(const FirebaseLink& from);

  inline FirebaseLink& operator=(const FirebaseLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FirebaseLink(FirebaseLink&& from) noexcept
    : FirebaseLink() {
    *this = ::std::move(from);
  }

  inline FirebaseLink& operator=(FirebaseLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FirebaseLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirebaseLink* internal_default_instance() {
    return reinterpret_cast<const FirebaseLink*>(
               &_FirebaseLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(FirebaseLink* other);
  friend void swap(FirebaseLink& a, FirebaseLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FirebaseLink* New() const final {
    return CreateMaybeMessage<FirebaseLink>(nullptr);
  }

  FirebaseLink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FirebaseLink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FirebaseLink& from);
  void MergeFrom(const FirebaseLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirebaseLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string project = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_project();
  static const int kProjectFieldNumber = 2;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.analytics.admin.v1alpha.MaximumUserAccess maximum_user_access = 4;
  void clear_maximum_user_access();
  static const int kMaximumUserAccessFieldNumber = 4;
  ::google::analytics::admin::v1alpha::MaximumUserAccess maximum_user_access() const;
  void set_maximum_user_access(::google::analytics::admin::v1alpha::MaximumUserAccess value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.FirebaseLink)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::Timestamp* create_time_;
  int maximum_user_access_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GlobalSiteTag final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.GlobalSiteTag) */ {
 public:
  GlobalSiteTag();
  virtual ~GlobalSiteTag();

  GlobalSiteTag(const GlobalSiteTag& from);

  inline GlobalSiteTag& operator=(const GlobalSiteTag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalSiteTag(GlobalSiteTag&& from) noexcept
    : GlobalSiteTag() {
    *this = ::std::move(from);
  }

  inline GlobalSiteTag& operator=(GlobalSiteTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GlobalSiteTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSiteTag* internal_default_instance() {
    return reinterpret_cast<const GlobalSiteTag*>(
               &_GlobalSiteTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GlobalSiteTag* other);
  friend void swap(GlobalSiteTag& a, GlobalSiteTag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalSiteTag* New() const final {
    return CreateMaybeMessage<GlobalSiteTag>(nullptr);
  }

  GlobalSiteTag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSiteTag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalSiteTag& from);
  void MergeFrom(const GlobalSiteTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSiteTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string snippet = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_snippet();
  static const int kSnippetFieldNumber = 2;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.GlobalSiteTag)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GoogleAdsLink final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.GoogleAdsLink) */ {
 public:
  GoogleAdsLink();
  virtual ~GoogleAdsLink();

  GoogleAdsLink(const GoogleAdsLink& from);

  inline GoogleAdsLink& operator=(const GoogleAdsLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoogleAdsLink(GoogleAdsLink&& from) noexcept
    : GoogleAdsLink() {
    *this = ::std::move(from);
  }

  inline GoogleAdsLink& operator=(GoogleAdsLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GoogleAdsLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoogleAdsLink* internal_default_instance() {
    return reinterpret_cast<const GoogleAdsLink*>(
               &_GoogleAdsLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GoogleAdsLink* other);
  friend void swap(GoogleAdsLink& a, GoogleAdsLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoogleAdsLink* New() const final {
    return CreateMaybeMessage<GoogleAdsLink>(nullptr);
  }

  GoogleAdsLink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GoogleAdsLink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GoogleAdsLink& from);
  void MergeFrom(const GoogleAdsLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleAdsLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string customer_id = 3 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 3;
  const ::std::string& customer_id() const;
  void set_customer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_id(::std::string&& value);
  #endif
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  ::std::string* mutable_customer_id();
  ::std::string* release_customer_id();
  void set_allocated_customer_id(::std::string* customer_id);

  // string email_address = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_email_address();
  static const int kEmailAddressFieldNumber = 6;
  const ::std::string& email_address() const;
  void set_email_address(const ::std::string& value);
  #if LANG_CXX11
  void set_email_address(::std::string&& value);
  #endif
  void set_email_address(const char* value);
  void set_email_address(const char* value, size_t size);
  ::std::string* mutable_email_address();
  ::std::string* release_email_address();
  void set_allocated_email_address(::std::string* email_address);

  // .google.protobuf.BoolValue ads_personalization_enabled = 5;
  bool has_ads_personalization_enabled() const;
  void clear_ads_personalization_enabled();
  static const int kAdsPersonalizationEnabledFieldNumber = 5;
  const ::google::protobuf::BoolValue& ads_personalization_enabled() const;
  ::google::protobuf::BoolValue* release_ads_personalization_enabled();
  ::google::protobuf::BoolValue* mutable_ads_personalization_enabled();
  void set_allocated_ads_personalization_enabled(::google::protobuf::BoolValue* ads_personalization_enabled);

  // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 8;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // bool can_manage_clients = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_can_manage_clients();
  static const int kCanManageClientsFieldNumber = 4;
  bool can_manage_clients() const;
  void set_can_manage_clients(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.GoogleAdsLink)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr customer_id_;
  ::google::protobuf::internal::ArenaStringPtr email_address_;
  ::google::protobuf::BoolValue* ads_personalization_enabled_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  bool can_manage_clients_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class DataSharingSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.DataSharingSettings) */ {
 public:
  DataSharingSettings();
  virtual ~DataSharingSettings();

  DataSharingSettings(const DataSharingSettings& from);

  inline DataSharingSettings& operator=(const DataSharingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSharingSettings(DataSharingSettings&& from) noexcept
    : DataSharingSettings() {
    *this = ::std::move(from);
  }

  inline DataSharingSettings& operator=(DataSharingSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DataSharingSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSharingSettings* internal_default_instance() {
    return reinterpret_cast<const DataSharingSettings*>(
               &_DataSharingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DataSharingSettings* other);
  friend void swap(DataSharingSettings& a, DataSharingSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSharingSettings* New() const final {
    return CreateMaybeMessage<DataSharingSettings>(nullptr);
  }

  DataSharingSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSharingSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataSharingSettings& from);
  void MergeFrom(const DataSharingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSharingSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool sharing_with_google_support_enabled = 2;
  void clear_sharing_with_google_support_enabled();
  static const int kSharingWithGoogleSupportEnabledFieldNumber = 2;
  bool sharing_with_google_support_enabled() const;
  void set_sharing_with_google_support_enabled(bool value);

  // bool sharing_with_google_assigned_sales_enabled = 3;
  void clear_sharing_with_google_assigned_sales_enabled();
  static const int kSharingWithGoogleAssignedSalesEnabledFieldNumber = 3;
  bool sharing_with_google_assigned_sales_enabled() const;
  void set_sharing_with_google_assigned_sales_enabled(bool value);

  // bool sharing_with_google_any_sales_enabled = 4;
  void clear_sharing_with_google_any_sales_enabled();
  static const int kSharingWithGoogleAnySalesEnabledFieldNumber = 4;
  bool sharing_with_google_any_sales_enabled() const;
  void set_sharing_with_google_any_sales_enabled(bool value);

  // bool sharing_with_google_products_enabled = 5;
  void clear_sharing_with_google_products_enabled();
  static const int kSharingWithGoogleProductsEnabledFieldNumber = 5;
  bool sharing_with_google_products_enabled() const;
  void set_sharing_with_google_products_enabled(bool value);

  // bool sharing_with_others_enabled = 6;
  void clear_sharing_with_others_enabled();
  static const int kSharingWithOthersEnabledFieldNumber = 6;
  bool sharing_with_others_enabled() const;
  void set_sharing_with_others_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.DataSharingSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool sharing_with_google_support_enabled_;
  bool sharing_with_google_assigned_sales_enabled_;
  bool sharing_with_google_any_sales_enabled_;
  bool sharing_with_google_products_enabled_;
  bool sharing_with_others_enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class AccountSummary final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.AccountSummary) */ {
 public:
  AccountSummary();
  virtual ~AccountSummary();

  AccountSummary(const AccountSummary& from);

  inline AccountSummary& operator=(const AccountSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountSummary(AccountSummary&& from) noexcept
    : AccountSummary() {
    *this = ::std::move(from);
  }

  inline AccountSummary& operator=(AccountSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AccountSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountSummary* internal_default_instance() {
    return reinterpret_cast<const AccountSummary*>(
               &_AccountSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AccountSummary* other);
  friend void swap(AccountSummary& a, AccountSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountSummary* New() const final {
    return CreateMaybeMessage<AccountSummary>(nullptr);
  }

  AccountSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountSummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountSummary& from);
  void MergeFrom(const AccountSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.analytics.admin.v1alpha.PropertySummary property_summaries = 4;
  int property_summaries_size() const;
  void clear_property_summaries();
  static const int kPropertySummariesFieldNumber = 4;
  ::google::analytics::admin::v1alpha::PropertySummary* mutable_property_summaries(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::PropertySummary >*
      mutable_property_summaries();
  const ::google::analytics::admin::v1alpha::PropertySummary& property_summaries(int index) const;
  ::google::analytics::admin::v1alpha::PropertySummary* add_property_summaries();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::PropertySummary >&
      property_summaries() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string account = 2 [(.google.api.resource_reference) = {
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string display_name = 3;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.AccountSummary)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::PropertySummary > property_summaries_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class PropertySummary final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.PropertySummary) */ {
 public:
  PropertySummary();
  virtual ~PropertySummary();

  PropertySummary(const PropertySummary& from);

  inline PropertySummary& operator=(const PropertySummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PropertySummary(PropertySummary&& from) noexcept
    : PropertySummary() {
    *this = ::std::move(from);
  }

  inline PropertySummary& operator=(PropertySummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PropertySummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PropertySummary* internal_default_instance() {
    return reinterpret_cast<const PropertySummary*>(
               &_PropertySummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(PropertySummary* other);
  friend void swap(PropertySummary& a, PropertySummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PropertySummary* New() const final {
    return CreateMaybeMessage<PropertySummary>(nullptr);
  }

  PropertySummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PropertySummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PropertySummary& from);
  void MergeFrom(const PropertySummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertySummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string property = 1 [(.google.api.resource_reference) = {
  void clear_property();
  static const int kPropertyFieldNumber = 1;
  const ::std::string& property() const;
  void set_property(const ::std::string& value);
  #if LANG_CXX11
  void set_property(::std::string&& value);
  #endif
  void set_property(const char* value);
  void set_property(const char* value, size_t size);
  ::std::string* mutable_property();
  ::std::string* release_property();
  void set_allocated_property(::std::string* property);

  // string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.PropertySummary)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr property_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class MeasurementProtocolSecret final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.MeasurementProtocolSecret) */ {
 public:
  MeasurementProtocolSecret();
  virtual ~MeasurementProtocolSecret();

  MeasurementProtocolSecret(const MeasurementProtocolSecret& from);

  inline MeasurementProtocolSecret& operator=(const MeasurementProtocolSecret& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeasurementProtocolSecret(MeasurementProtocolSecret&& from) noexcept
    : MeasurementProtocolSecret() {
    *this = ::std::move(from);
  }

  inline MeasurementProtocolSecret& operator=(MeasurementProtocolSecret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MeasurementProtocolSecret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasurementProtocolSecret* internal_default_instance() {
    return reinterpret_cast<const MeasurementProtocolSecret*>(
               &_MeasurementProtocolSecret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(MeasurementProtocolSecret* other);
  friend void swap(MeasurementProtocolSecret& a, MeasurementProtocolSecret& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeasurementProtocolSecret* New() const final {
    return CreateMaybeMessage<MeasurementProtocolSecret>(nullptr);
  }

  MeasurementProtocolSecret* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeasurementProtocolSecret>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeasurementProtocolSecret& from);
  void MergeFrom(const MeasurementProtocolSecret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementProtocolSecret* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string secret_value = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_secret_value();
  static const int kSecretValueFieldNumber = 3;
  const ::std::string& secret_value() const;
  void set_secret_value(const ::std::string& value);
  #if LANG_CXX11
  void set_secret_value(::std::string&& value);
  #endif
  void set_secret_value(const char* value);
  void set_secret_value(const char* value, size_t size);
  ::std::string* mutable_secret_value();
  ::std::string* release_secret_value();
  void set_allocated_secret_value(::std::string* secret_value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.MeasurementProtocolSecret)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr secret_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ChangeHistoryEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.ChangeHistoryEvent) */ {
 public:
  ChangeHistoryEvent();
  virtual ~ChangeHistoryEvent();

  ChangeHistoryEvent(const ChangeHistoryEvent& from);

  inline ChangeHistoryEvent& operator=(const ChangeHistoryEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeHistoryEvent(ChangeHistoryEvent&& from) noexcept
    : ChangeHistoryEvent() {
    *this = ::std::move(from);
  }

  inline ChangeHistoryEvent& operator=(ChangeHistoryEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChangeHistoryEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeHistoryEvent* internal_default_instance() {
    return reinterpret_cast<const ChangeHistoryEvent*>(
               &_ChangeHistoryEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ChangeHistoryEvent* other);
  friend void swap(ChangeHistoryEvent& a, ChangeHistoryEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeHistoryEvent* New() const final {
    return CreateMaybeMessage<ChangeHistoryEvent>(nullptr);
  }

  ChangeHistoryEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeHistoryEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeHistoryEvent& from);
  void MergeFrom(const ChangeHistoryEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeHistoryEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.analytics.admin.v1alpha.ChangeHistoryChange changes = 6;
  int changes_size() const;
  void clear_changes();
  static const int kChangesFieldNumber = 6;
  ::google::analytics::admin::v1alpha::ChangeHistoryChange* mutable_changes(int index);
  ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::ChangeHistoryChange >*
      mutable_changes();
  const ::google::analytics::admin::v1alpha::ChangeHistoryChange& changes(int index) const;
  ::google::analytics::admin::v1alpha::ChangeHistoryChange* add_changes();
  const ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::ChangeHistoryChange >&
      changes() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string user_actor_email = 4;
  void clear_user_actor_email();
  static const int kUserActorEmailFieldNumber = 4;
  const ::std::string& user_actor_email() const;
  void set_user_actor_email(const ::std::string& value);
  #if LANG_CXX11
  void set_user_actor_email(::std::string&& value);
  #endif
  void set_user_actor_email(const char* value);
  void set_user_actor_email(const char* value, size_t size);
  ::std::string* mutable_user_actor_email();
  ::std::string* release_user_actor_email();
  void set_allocated_user_actor_email(::std::string* user_actor_email);

  // .google.protobuf.Timestamp change_time = 2;
  bool has_change_time() const;
  void clear_change_time();
  static const int kChangeTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& change_time() const;
  ::google::protobuf::Timestamp* release_change_time();
  ::google::protobuf::Timestamp* mutable_change_time();
  void set_allocated_change_time(::google::protobuf::Timestamp* change_time);

  // .google.analytics.admin.v1alpha.ActorType actor_type = 3;
  void clear_actor_type();
  static const int kActorTypeFieldNumber = 3;
  ::google::analytics::admin::v1alpha::ActorType actor_type() const;
  void set_actor_type(::google::analytics::admin::v1alpha::ActorType value);

  // bool changes_filtered = 5;
  void clear_changes_filtered();
  static const int kChangesFilteredFieldNumber = 5;
  bool changes_filtered() const;
  void set_changes_filtered(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.ChangeHistoryEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::ChangeHistoryChange > changes_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr user_actor_email_;
  ::google::protobuf::Timestamp* change_time_;
  int actor_type_;
  bool changes_filtered_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ChangeHistoryChange_ChangeHistoryResource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource) */ {
 public:
  ChangeHistoryChange_ChangeHistoryResource();
  virtual ~ChangeHistoryChange_ChangeHistoryResource();

  ChangeHistoryChange_ChangeHistoryResource(const ChangeHistoryChange_ChangeHistoryResource& from);

  inline ChangeHistoryChange_ChangeHistoryResource& operator=(const ChangeHistoryChange_ChangeHistoryResource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeHistoryChange_ChangeHistoryResource(ChangeHistoryChange_ChangeHistoryResource&& from) noexcept
    : ChangeHistoryChange_ChangeHistoryResource() {
    *this = ::std::move(from);
  }

  inline ChangeHistoryChange_ChangeHistoryResource& operator=(ChangeHistoryChange_ChangeHistoryResource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChangeHistoryChange_ChangeHistoryResource& default_instance();

  enum ResourceCase {
    kAccount = 1,
    kProperty = 2,
    kWebDataStream = 3,
    kAndroidAppDataStream = 4,
    kIosAppDataStream = 5,
    kFirebaseLink = 6,
    kGoogleAdsLink = 7,
    kGoogleSignalsSettings = 8,
    kConversionEvent = 11,
    kMeasurementProtocolSecret = 12,
    kCustomDimension = 13,
    kCustomMetric = 14,
    RESOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeHistoryChange_ChangeHistoryResource* internal_default_instance() {
    return reinterpret_cast<const ChangeHistoryChange_ChangeHistoryResource*>(
               &_ChangeHistoryChange_ChangeHistoryResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ChangeHistoryChange_ChangeHistoryResource* other);
  friend void swap(ChangeHistoryChange_ChangeHistoryResource& a, ChangeHistoryChange_ChangeHistoryResource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeHistoryChange_ChangeHistoryResource* New() const final {
    return CreateMaybeMessage<ChangeHistoryChange_ChangeHistoryResource>(nullptr);
  }

  ChangeHistoryChange_ChangeHistoryResource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeHistoryChange_ChangeHistoryResource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeHistoryChange_ChangeHistoryResource& from);
  void MergeFrom(const ChangeHistoryChange_ChangeHistoryResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeHistoryChange_ChangeHistoryResource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.analytics.admin.v1alpha.Account account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::google::analytics::admin::v1alpha::Account& account() const;
  ::google::analytics::admin::v1alpha::Account* release_account();
  ::google::analytics::admin::v1alpha::Account* mutable_account();
  void set_allocated_account(::google::analytics::admin::v1alpha::Account* account);

  // .google.analytics.admin.v1alpha.Property property = 2;
  bool has_property() const;
  void clear_property();
  static const int kPropertyFieldNumber = 2;
  const ::google::analytics::admin::v1alpha::Property& property() const;
  ::google::analytics::admin::v1alpha::Property* release_property();
  ::google::analytics::admin::v1alpha::Property* mutable_property();
  void set_allocated_property(::google::analytics::admin::v1alpha::Property* property);

  // .google.analytics.admin.v1alpha.WebDataStream web_data_stream = 3;
  bool has_web_data_stream() const;
  void clear_web_data_stream();
  static const int kWebDataStreamFieldNumber = 3;
  const ::google::analytics::admin::v1alpha::WebDataStream& web_data_stream() const;
  ::google::analytics::admin::v1alpha::WebDataStream* release_web_data_stream();
  ::google::analytics::admin::v1alpha::WebDataStream* mutable_web_data_stream();
  void set_allocated_web_data_stream(::google::analytics::admin::v1alpha::WebDataStream* web_data_stream);

  // .google.analytics.admin.v1alpha.AndroidAppDataStream android_app_data_stream = 4;
  bool has_android_app_data_stream() const;
  void clear_android_app_data_stream();
  static const int kAndroidAppDataStreamFieldNumber = 4;
  const ::google::analytics::admin::v1alpha::AndroidAppDataStream& android_app_data_stream() const;
  ::google::analytics::admin::v1alpha::AndroidAppDataStream* release_android_app_data_stream();
  ::google::analytics::admin::v1alpha::AndroidAppDataStream* mutable_android_app_data_stream();
  void set_allocated_android_app_data_stream(::google::analytics::admin::v1alpha::AndroidAppDataStream* android_app_data_stream);

  // .google.analytics.admin.v1alpha.IosAppDataStream ios_app_data_stream = 5;
  bool has_ios_app_data_stream() const;
  void clear_ios_app_data_stream();
  static const int kIosAppDataStreamFieldNumber = 5;
  const ::google::analytics::admin::v1alpha::IosAppDataStream& ios_app_data_stream() const;
  ::google::analytics::admin::v1alpha::IosAppDataStream* release_ios_app_data_stream();
  ::google::analytics::admin::v1alpha::IosAppDataStream* mutable_ios_app_data_stream();
  void set_allocated_ios_app_data_stream(::google::analytics::admin::v1alpha::IosAppDataStream* ios_app_data_stream);

  // .google.analytics.admin.v1alpha.FirebaseLink firebase_link = 6;
  bool has_firebase_link() const;
  void clear_firebase_link();
  static const int kFirebaseLinkFieldNumber = 6;
  const ::google::analytics::admin::v1alpha::FirebaseLink& firebase_link() const;
  ::google::analytics::admin::v1alpha::FirebaseLink* release_firebase_link();
  ::google::analytics::admin::v1alpha::FirebaseLink* mutable_firebase_link();
  void set_allocated_firebase_link(::google::analytics::admin::v1alpha::FirebaseLink* firebase_link);

  // .google.analytics.admin.v1alpha.GoogleAdsLink google_ads_link = 7;
  bool has_google_ads_link() const;
  void clear_google_ads_link();
  static const int kGoogleAdsLinkFieldNumber = 7;
  const ::google::analytics::admin::v1alpha::GoogleAdsLink& google_ads_link() const;
  ::google::analytics::admin::v1alpha::GoogleAdsLink* release_google_ads_link();
  ::google::analytics::admin::v1alpha::GoogleAdsLink* mutable_google_ads_link();
  void set_allocated_google_ads_link(::google::analytics::admin::v1alpha::GoogleAdsLink* google_ads_link);

  // .google.analytics.admin.v1alpha.GoogleSignalsSettings google_signals_settings = 8;
  bool has_google_signals_settings() const;
  void clear_google_signals_settings();
  static const int kGoogleSignalsSettingsFieldNumber = 8;
  const ::google::analytics::admin::v1alpha::GoogleSignalsSettings& google_signals_settings() const;
  ::google::analytics::admin::v1alpha::GoogleSignalsSettings* release_google_signals_settings();
  ::google::analytics::admin::v1alpha::GoogleSignalsSettings* mutable_google_signals_settings();
  void set_allocated_google_signals_settings(::google::analytics::admin::v1alpha::GoogleSignalsSettings* google_signals_settings);

  // .google.analytics.admin.v1alpha.ConversionEvent conversion_event = 11;
  bool has_conversion_event() const;
  void clear_conversion_event();
  static const int kConversionEventFieldNumber = 11;
  const ::google::analytics::admin::v1alpha::ConversionEvent& conversion_event() const;
  ::google::analytics::admin::v1alpha::ConversionEvent* release_conversion_event();
  ::google::analytics::admin::v1alpha::ConversionEvent* mutable_conversion_event();
  void set_allocated_conversion_event(::google::analytics::admin::v1alpha::ConversionEvent* conversion_event);

  // .google.analytics.admin.v1alpha.MeasurementProtocolSecret measurement_protocol_secret = 12;
  bool has_measurement_protocol_secret() const;
  void clear_measurement_protocol_secret();
  static const int kMeasurementProtocolSecretFieldNumber = 12;
  const ::google::analytics::admin::v1alpha::MeasurementProtocolSecret& measurement_protocol_secret() const;
  ::google::analytics::admin::v1alpha::MeasurementProtocolSecret* release_measurement_protocol_secret();
  ::google::analytics::admin::v1alpha::MeasurementProtocolSecret* mutable_measurement_protocol_secret();
  void set_allocated_measurement_protocol_secret(::google::analytics::admin::v1alpha::MeasurementProtocolSecret* measurement_protocol_secret);

  // .google.analytics.admin.v1alpha.CustomDimension custom_dimension = 13;
  bool has_custom_dimension() const;
  void clear_custom_dimension();
  static const int kCustomDimensionFieldNumber = 13;
  const ::google::analytics::admin::v1alpha::CustomDimension& custom_dimension() const;
  ::google::analytics::admin::v1alpha::CustomDimension* release_custom_dimension();
  ::google::analytics::admin::v1alpha::CustomDimension* mutable_custom_dimension();
  void set_allocated_custom_dimension(::google::analytics::admin::v1alpha::CustomDimension* custom_dimension);

  // .google.analytics.admin.v1alpha.CustomMetric custom_metric = 14;
  bool has_custom_metric() const;
  void clear_custom_metric();
  static const int kCustomMetricFieldNumber = 14;
  const ::google::analytics::admin::v1alpha::CustomMetric& custom_metric() const;
  ::google::analytics::admin::v1alpha::CustomMetric* release_custom_metric();
  ::google::analytics::admin::v1alpha::CustomMetric* mutable_custom_metric();
  void set_allocated_custom_metric(::google::analytics::admin::v1alpha::CustomMetric* custom_metric);

  void clear_resource();
  ResourceCase resource_case() const;
  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource)
 private:
  class HasBitSetters;
  void set_has_account();
  void set_has_property();
  void set_has_web_data_stream();
  void set_has_android_app_data_stream();
  void set_has_ios_app_data_stream();
  void set_has_firebase_link();
  void set_has_google_ads_link();
  void set_has_google_signals_settings();
  void set_has_conversion_event();
  void set_has_measurement_protocol_secret();
  void set_has_custom_dimension();
  void set_has_custom_metric();

  inline bool has_resource() const;
  inline void clear_has_resource();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResourceUnion {
    ResourceUnion() {}
    ::google::analytics::admin::v1alpha::Account* account_;
    ::google::analytics::admin::v1alpha::Property* property_;
    ::google::analytics::admin::v1alpha::WebDataStream* web_data_stream_;
    ::google::analytics::admin::v1alpha::AndroidAppDataStream* android_app_data_stream_;
    ::google::analytics::admin::v1alpha::IosAppDataStream* ios_app_data_stream_;
    ::google::analytics::admin::v1alpha::FirebaseLink* firebase_link_;
    ::google::analytics::admin::v1alpha::GoogleAdsLink* google_ads_link_;
    ::google::analytics::admin::v1alpha::GoogleSignalsSettings* google_signals_settings_;
    ::google::analytics::admin::v1alpha::ConversionEvent* conversion_event_;
    ::google::analytics::admin::v1alpha::MeasurementProtocolSecret* measurement_protocol_secret_;
    ::google::analytics::admin::v1alpha::CustomDimension* custom_dimension_;
    ::google::analytics::admin::v1alpha::CustomMetric* custom_metric_;
  } resource_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ChangeHistoryChange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.ChangeHistoryChange) */ {
 public:
  ChangeHistoryChange();
  virtual ~ChangeHistoryChange();

  ChangeHistoryChange(const ChangeHistoryChange& from);

  inline ChangeHistoryChange& operator=(const ChangeHistoryChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeHistoryChange(ChangeHistoryChange&& from) noexcept
    : ChangeHistoryChange() {
    *this = ::std::move(from);
  }

  inline ChangeHistoryChange& operator=(ChangeHistoryChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChangeHistoryChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeHistoryChange* internal_default_instance() {
    return reinterpret_cast<const ChangeHistoryChange*>(
               &_ChangeHistoryChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ChangeHistoryChange* other);
  friend void swap(ChangeHistoryChange& a, ChangeHistoryChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeHistoryChange* New() const final {
    return CreateMaybeMessage<ChangeHistoryChange>(nullptr);
  }

  ChangeHistoryChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeHistoryChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeHistoryChange& from);
  void MergeFrom(const ChangeHistoryChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeHistoryChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChangeHistoryChange_ChangeHistoryResource ChangeHistoryResource;

  // accessors -------------------------------------------------------

  // string resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::std::string& resource() const;
  void set_resource(const ::std::string& value);
  #if LANG_CXX11
  void set_resource(::std::string&& value);
  #endif
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  ::std::string* mutable_resource();
  ::std::string* release_resource();
  void set_allocated_resource(::std::string* resource);

  // .google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource resource_before_change = 3;
  bool has_resource_before_change() const;
  void clear_resource_before_change();
  static const int kResourceBeforeChangeFieldNumber = 3;
  const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource& resource_before_change() const;
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* release_resource_before_change();
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* mutable_resource_before_change();
  void set_allocated_resource_before_change(::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* resource_before_change);

  // .google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource resource_after_change = 4;
  bool has_resource_after_change() const;
  void clear_resource_after_change();
  static const int kResourceAfterChangeFieldNumber = 4;
  const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource& resource_after_change() const;
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* release_resource_after_change();
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* mutable_resource_after_change();
  void set_allocated_resource_after_change(::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* resource_after_change);

  // .google.analytics.admin.v1alpha.ActionType action = 2;
  void clear_action();
  static const int kActionFieldNumber = 2;
  ::google::analytics::admin::v1alpha::ActionType action() const;
  void set_action(::google::analytics::admin::v1alpha::ActionType value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.ChangeHistoryChange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_;
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* resource_before_change_;
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* resource_after_change_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class ConversionEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.ConversionEvent) */ {
 public:
  ConversionEvent();
  virtual ~ConversionEvent();

  ConversionEvent(const ConversionEvent& from);

  inline ConversionEvent& operator=(const ConversionEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConversionEvent(ConversionEvent&& from) noexcept
    : ConversionEvent() {
    *this = ::std::move(from);
  }

  inline ConversionEvent& operator=(ConversionEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConversionEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConversionEvent* internal_default_instance() {
    return reinterpret_cast<const ConversionEvent*>(
               &_ConversionEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ConversionEvent* other);
  friend void swap(ConversionEvent& a, ConversionEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConversionEvent* New() const final {
    return CreateMaybeMessage<ConversionEvent>(nullptr);
  }

  ConversionEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConversionEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConversionEvent& from);
  void MergeFrom(const ConversionEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConversionEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string event_name = 2 [(.google.api.field_behavior) = IMMUTABLE];
  void clear_event_name();
  static const int kEventNameFieldNumber = 2;
  const ::std::string& event_name() const;
  void set_event_name(const ::std::string& value);
  #if LANG_CXX11
  void set_event_name(::std::string&& value);
  #endif
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  ::std::string* mutable_event_name();
  ::std::string* release_event_name();
  void set_allocated_event_name(::std::string* event_name);

  // .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // bool is_deletable = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_is_deletable();
  static const int kIsDeletableFieldNumber = 4;
  bool is_deletable() const;
  void set_is_deletable(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.ConversionEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr event_name_;
  ::google::protobuf::Timestamp* create_time_;
  bool is_deletable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class GoogleSignalsSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.GoogleSignalsSettings) */ {
 public:
  GoogleSignalsSettings();
  virtual ~GoogleSignalsSettings();

  GoogleSignalsSettings(const GoogleSignalsSettings& from);

  inline GoogleSignalsSettings& operator=(const GoogleSignalsSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoogleSignalsSettings(GoogleSignalsSettings&& from) noexcept
    : GoogleSignalsSettings() {
    *this = ::std::move(from);
  }

  inline GoogleSignalsSettings& operator=(GoogleSignalsSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GoogleSignalsSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoogleSignalsSettings* internal_default_instance() {
    return reinterpret_cast<const GoogleSignalsSettings*>(
               &_GoogleSignalsSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GoogleSignalsSettings* other);
  friend void swap(GoogleSignalsSettings& a, GoogleSignalsSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoogleSignalsSettings* New() const final {
    return CreateMaybeMessage<GoogleSignalsSettings>(nullptr);
  }

  GoogleSignalsSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GoogleSignalsSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GoogleSignalsSettings& from);
  void MergeFrom(const GoogleSignalsSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleSignalsSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.analytics.admin.v1alpha.GoogleSignalsState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::google::analytics::admin::v1alpha::GoogleSignalsState state() const;
  void set_state(::google::analytics::admin::v1alpha::GoogleSignalsState value);

  // .google.analytics.admin.v1alpha.GoogleSignalsConsent consent = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_consent();
  static const int kConsentFieldNumber = 4;
  ::google::analytics::admin::v1alpha::GoogleSignalsConsent consent() const;
  void set_consent(::google::analytics::admin::v1alpha::GoogleSignalsConsent value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.GoogleSignalsSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int state_;
  int consent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CustomDimension final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.CustomDimension) */ {
 public:
  CustomDimension();
  virtual ~CustomDimension();

  CustomDimension(const CustomDimension& from);

  inline CustomDimension& operator=(const CustomDimension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomDimension(CustomDimension&& from) noexcept
    : CustomDimension() {
    *this = ::std::move(from);
  }

  inline CustomDimension& operator=(CustomDimension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CustomDimension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomDimension* internal_default_instance() {
    return reinterpret_cast<const CustomDimension*>(
               &_CustomDimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CustomDimension* other);
  friend void swap(CustomDimension& a, CustomDimension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomDimension* New() const final {
    return CreateMaybeMessage<CustomDimension>(nullptr);
  }

  CustomDimension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomDimension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomDimension& from);
  void MergeFrom(const CustomDimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomDimension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CustomDimension_DimensionScope DimensionScope;
  static const DimensionScope DIMENSION_SCOPE_UNSPECIFIED =
    CustomDimension_DimensionScope_DIMENSION_SCOPE_UNSPECIFIED;
  static const DimensionScope EVENT =
    CustomDimension_DimensionScope_EVENT;
  static const DimensionScope USER =
    CustomDimension_DimensionScope_USER;
  static inline bool DimensionScope_IsValid(int value) {
    return CustomDimension_DimensionScope_IsValid(value);
  }
  static const DimensionScope DimensionScope_MIN =
    CustomDimension_DimensionScope_DimensionScope_MIN;
  static const DimensionScope DimensionScope_MAX =
    CustomDimension_DimensionScope_DimensionScope_MAX;
  static const int DimensionScope_ARRAYSIZE =
    CustomDimension_DimensionScope_DimensionScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimensionScope_descriptor() {
    return CustomDimension_DimensionScope_descriptor();
  }
  static inline const ::std::string& DimensionScope_Name(DimensionScope value) {
    return CustomDimension_DimensionScope_Name(value);
  }
  static inline bool DimensionScope_Parse(const ::std::string& name,
      DimensionScope* value) {
    return CustomDimension_DimensionScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parameter_name = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
  void clear_parameter_name();
  static const int kParameterNameFieldNumber = 2;
  const ::std::string& parameter_name() const;
  void set_parameter_name(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter_name(::std::string&& value);
  #endif
  void set_parameter_name(const char* value);
  void set_parameter_name(const char* value, size_t size);
  ::std::string* mutable_parameter_name();
  ::std::string* release_parameter_name();
  void set_allocated_parameter_name(::std::string* parameter_name);

  // string display_name = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.analytics.admin.v1alpha.CustomDimension.DimensionScope scope = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
  void clear_scope();
  static const int kScopeFieldNumber = 5;
  ::google::analytics::admin::v1alpha::CustomDimension_DimensionScope scope() const;
  void set_scope(::google::analytics::admin::v1alpha::CustomDimension_DimensionScope value);

  // bool disallow_ads_personalization = 6 [(.google.api.field_behavior) = OPTIONAL];
  void clear_disallow_ads_personalization();
  static const int kDisallowAdsPersonalizationFieldNumber = 6;
  bool disallow_ads_personalization() const;
  void set_disallow_ads_personalization(bool value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.CustomDimension)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parameter_name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int scope_;
  bool disallow_ads_personalization_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CustomMetric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.analytics.admin.v1alpha.CustomMetric) */ {
 public:
  CustomMetric();
  virtual ~CustomMetric();

  CustomMetric(const CustomMetric& from);

  inline CustomMetric& operator=(const CustomMetric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomMetric(CustomMetric&& from) noexcept
    : CustomMetric() {
    *this = ::std::move(from);
  }

  inline CustomMetric& operator=(CustomMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CustomMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomMetric* internal_default_instance() {
    return reinterpret_cast<const CustomMetric*>(
               &_CustomMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CustomMetric* other);
  friend void swap(CustomMetric& a, CustomMetric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomMetric* New() const final {
    return CreateMaybeMessage<CustomMetric>(nullptr);
  }

  CustomMetric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomMetric>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomMetric& from);
  void MergeFrom(const CustomMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomMetric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CustomMetric_MeasurementUnit MeasurementUnit;
  static const MeasurementUnit MEASUREMENT_UNIT_UNSPECIFIED =
    CustomMetric_MeasurementUnit_MEASUREMENT_UNIT_UNSPECIFIED;
  static const MeasurementUnit STANDARD =
    CustomMetric_MeasurementUnit_STANDARD;
  static const MeasurementUnit CURRENCY =
    CustomMetric_MeasurementUnit_CURRENCY;
  static const MeasurementUnit FEET =
    CustomMetric_MeasurementUnit_FEET;
  static const MeasurementUnit METERS =
    CustomMetric_MeasurementUnit_METERS;
  static const MeasurementUnit KILOMETERS =
    CustomMetric_MeasurementUnit_KILOMETERS;
  static const MeasurementUnit MILES =
    CustomMetric_MeasurementUnit_MILES;
  static const MeasurementUnit MILLISECONDS =
    CustomMetric_MeasurementUnit_MILLISECONDS;
  static const MeasurementUnit SECONDS =
    CustomMetric_MeasurementUnit_SECONDS;
  static const MeasurementUnit MINUTES =
    CustomMetric_MeasurementUnit_MINUTES;
  static const MeasurementUnit HOURS =
    CustomMetric_MeasurementUnit_HOURS;
  static inline bool MeasurementUnit_IsValid(int value) {
    return CustomMetric_MeasurementUnit_IsValid(value);
  }
  static const MeasurementUnit MeasurementUnit_MIN =
    CustomMetric_MeasurementUnit_MeasurementUnit_MIN;
  static const MeasurementUnit MeasurementUnit_MAX =
    CustomMetric_MeasurementUnit_MeasurementUnit_MAX;
  static const int MeasurementUnit_ARRAYSIZE =
    CustomMetric_MeasurementUnit_MeasurementUnit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MeasurementUnit_descriptor() {
    return CustomMetric_MeasurementUnit_descriptor();
  }
  static inline const ::std::string& MeasurementUnit_Name(MeasurementUnit value) {
    return CustomMetric_MeasurementUnit_Name(value);
  }
  static inline bool MeasurementUnit_Parse(const ::std::string& name,
      MeasurementUnit* value) {
    return CustomMetric_MeasurementUnit_Parse(name, value);
  }

  typedef CustomMetric_MetricScope MetricScope;
  static const MetricScope METRIC_SCOPE_UNSPECIFIED =
    CustomMetric_MetricScope_METRIC_SCOPE_UNSPECIFIED;
  static const MetricScope EVENT =
    CustomMetric_MetricScope_EVENT;
  static inline bool MetricScope_IsValid(int value) {
    return CustomMetric_MetricScope_IsValid(value);
  }
  static const MetricScope MetricScope_MIN =
    CustomMetric_MetricScope_MetricScope_MIN;
  static const MetricScope MetricScope_MAX =
    CustomMetric_MetricScope_MetricScope_MAX;
  static const int MetricScope_ARRAYSIZE =
    CustomMetric_MetricScope_MetricScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MetricScope_descriptor() {
    return CustomMetric_MetricScope_descriptor();
  }
  static inline const ::std::string& MetricScope_Name(MetricScope value) {
    return CustomMetric_MetricScope_Name(value);
  }
  static inline bool MetricScope_Parse(const ::std::string& name,
      MetricScope* value) {
    return CustomMetric_MetricScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parameter_name = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
  void clear_parameter_name();
  static const int kParameterNameFieldNumber = 2;
  const ::std::string& parameter_name() const;
  void set_parameter_name(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter_name(::std::string&& value);
  #endif
  void set_parameter_name(const char* value);
  void set_parameter_name(const char* value, size_t size);
  ::std::string* mutable_parameter_name();
  ::std::string* release_parameter_name();
  void set_allocated_parameter_name(::std::string* parameter_name);

  // string display_name = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string description = 4 [(.google.api.field_behavior) = OPTIONAL];
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.analytics.admin.v1alpha.CustomMetric.MeasurementUnit measurement_unit = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
  void clear_measurement_unit();
  static const int kMeasurementUnitFieldNumber = 5;
  ::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit measurement_unit() const;
  void set_measurement_unit(::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit value);

  // .google.analytics.admin.v1alpha.CustomMetric.MetricScope scope = 6 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
  void clear_scope();
  static const int kScopeFieldNumber = 6;
  ::google::analytics::admin::v1alpha::CustomMetric_MetricScope scope() const;
  void set_scope(::google::analytics::admin::v1alpha::CustomMetric_MetricScope value);

  // @@protoc_insertion_point(class_scope:google.analytics.admin.v1alpha.CustomMetric)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parameter_name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int measurement_unit_;
  int scope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Account::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Account.name)
  return name_.GetNoArena();
}
inline void Account::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Account.name)
}
#if LANG_CXX11
inline void Account::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Account.name)
}
#endif
inline void Account::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Account.name)
}
inline void Account::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Account.name)
}
inline ::std::string* Account::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Account.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Account.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Account.name)
}

// .google.protobuf.Timestamp create_time = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Account::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Account::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Account.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Account::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Account.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Account::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Account.create_time)
  return create_time_;
}
inline void Account::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Account.create_time)
}

// .google.protobuf.Timestamp update_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Account::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Account::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Account.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Account::release_update_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Account.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Account::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Account.update_time)
  return update_time_;
}
inline void Account::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Account.update_time)
}

// string display_name = 4 [(.google.api.field_behavior) = REQUIRED];
inline void Account::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Account.display_name)
  return display_name_.GetNoArena();
}
inline void Account::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Account.display_name)
}
#if LANG_CXX11
inline void Account::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Account.display_name)
}
#endif
inline void Account::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Account.display_name)
}
inline void Account::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Account.display_name)
}
inline ::std::string* Account::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Account.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Account.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Account.display_name)
}

// string region_code = 5;
inline void Account::clear_region_code() {
  region_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::region_code() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Account.region_code)
  return region_code_.GetNoArena();
}
inline void Account::set_region_code(const ::std::string& value) {
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Account.region_code)
}
#if LANG_CXX11
inline void Account::set_region_code(::std::string&& value) {
  
  region_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Account.region_code)
}
#endif
inline void Account::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Account.region_code)
}
inline void Account::set_region_code(const char* value, size_t size) {
  
  region_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Account.region_code)
}
inline ::std::string* Account::mutable_region_code() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Account.region_code)
  return region_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_region_code() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Account.region_code)
  
  return region_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_region_code(::std::string* region_code) {
  if (region_code != nullptr) {
    
  } else {
    
  }
  region_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_code);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Account.region_code)
}

// bool deleted = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Account::clear_deleted() {
  deleted_ = false;
}
inline bool Account::deleted() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Account.deleted)
  return deleted_;
}
inline void Account::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Account.deleted)
}

// -------------------------------------------------------------------

// Property

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Property::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.name)
  return name_.GetNoArena();
}
inline void Property::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Property.name)
}
#if LANG_CXX11
inline void Property::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Property.name)
}
#endif
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Property.name)
}
inline void Property::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Property.name)
}
inline ::std::string* Property::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.name)
}

// .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Property::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Property::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Property::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Property::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.create_time)
  return create_time_;
}
inline void Property::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.create_time)
}

// .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Property::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Property::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Property::release_update_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Property::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.update_time)
  return update_time_;
}
inline void Property::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.update_time)
}

// string parent = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void Property::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::parent() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.parent)
  return parent_.GetNoArena();
}
inline void Property::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Property.parent)
}
#if LANG_CXX11
inline void Property::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Property.parent)
}
#endif
inline void Property::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Property.parent)
}
inline void Property::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Property.parent)
}
inline ::std::string* Property::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_parent() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.parent)
}

// string display_name = 5 [(.google.api.field_behavior) = REQUIRED];
inline void Property::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.display_name)
  return display_name_.GetNoArena();
}
inline void Property::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Property.display_name)
}
#if LANG_CXX11
inline void Property::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Property.display_name)
}
#endif
inline void Property::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Property.display_name)
}
inline void Property::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Property.display_name)
}
inline ::std::string* Property::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.display_name)
}

// .google.analytics.admin.v1alpha.IndustryCategory industry_category = 6;
inline void Property::clear_industry_category() {
  industry_category_ = 0;
}
inline ::google::analytics::admin::v1alpha::IndustryCategory Property::industry_category() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.industry_category)
  return static_cast< ::google::analytics::admin::v1alpha::IndustryCategory >(industry_category_);
}
inline void Property::set_industry_category(::google::analytics::admin::v1alpha::IndustryCategory value) {
  
  industry_category_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Property.industry_category)
}

// string time_zone = 7 [(.google.api.field_behavior) = REQUIRED];
inline void Property::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::time_zone() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.time_zone)
  return time_zone_.GetNoArena();
}
inline void Property::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Property.time_zone)
}
#if LANG_CXX11
inline void Property::set_time_zone(::std::string&& value) {
  
  time_zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Property.time_zone)
}
#endif
inline void Property::set_time_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Property.time_zone)
}
inline void Property::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Property.time_zone)
}
inline ::std::string* Property::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_time_zone() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != nullptr) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.time_zone)
}

// string currency_code = 8;
inline void Property::clear_currency_code() {
  currency_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::currency_code() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.currency_code)
  return currency_code_.GetNoArena();
}
inline void Property::set_currency_code(const ::std::string& value) {
  
  currency_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.Property.currency_code)
}
#if LANG_CXX11
inline void Property::set_currency_code(::std::string&& value) {
  
  currency_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.Property.currency_code)
}
#endif
inline void Property::set_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.Property.currency_code)
}
inline void Property::set_currency_code(const char* value, size_t size) {
  
  currency_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.Property.currency_code)
}
inline ::std::string* Property::mutable_currency_code() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.currency_code)
  return currency_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_currency_code() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.currency_code)
  
  return currency_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_currency_code(::std::string* currency_code) {
  if (currency_code != nullptr) {
    
  } else {
    
  }
  currency_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency_code);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.currency_code)
}

// .google.protobuf.Timestamp delete_time = 11 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Property::has_delete_time() const {
  return this != internal_default_instance() && delete_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Property::delete_time() const {
  const ::google::protobuf::Timestamp* p = delete_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.delete_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Property::release_delete_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.delete_time)
  
  ::google::protobuf::Timestamp* temp = delete_time_;
  delete_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Property::mutable_delete_time() {
  
  if (delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    delete_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.delete_time)
  return delete_time_;
}
inline void Property::set_allocated_delete_time(::google::protobuf::Timestamp* delete_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(delete_time_);
  }
  if (delete_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(delete_time)->GetArena();
    if (message_arena != submessage_arena) {
      delete_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_time, submessage_arena);
    }
    
  } else {
    
  }
  delete_time_ = delete_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.delete_time)
}

// .google.protobuf.Timestamp expire_time = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Property::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Property::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.Property.expire_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Property::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.Property.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Property::mutable_expire_time() {
  
  if (expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expire_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.Property.expire_time)
  return expire_time_;
}
inline void Property::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.Property.expire_time)
}

// -------------------------------------------------------------------

// AndroidAppDataStream

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void AndroidAppDataStream::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AndroidAppDataStream::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
  return name_.GetNoArena();
}
inline void AndroidAppDataStream::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
}
#if LANG_CXX11
inline void AndroidAppDataStream::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
}
#endif
inline void AndroidAppDataStream::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
}
inline void AndroidAppDataStream::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
}
inline ::std::string* AndroidAppDataStream::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidAppDataStream::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidAppDataStream::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AndroidAppDataStream.name)
}

// string firebase_app_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void AndroidAppDataStream::clear_firebase_app_id() {
  firebase_app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AndroidAppDataStream::firebase_app_id() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
  return firebase_app_id_.GetNoArena();
}
inline void AndroidAppDataStream::set_firebase_app_id(const ::std::string& value) {
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
}
#if LANG_CXX11
inline void AndroidAppDataStream::set_firebase_app_id(::std::string&& value) {
  
  firebase_app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
}
#endif
inline void AndroidAppDataStream::set_firebase_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
}
inline void AndroidAppDataStream::set_firebase_app_id(const char* value, size_t size) {
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
}
inline ::std::string* AndroidAppDataStream::mutable_firebase_app_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
  return firebase_app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidAppDataStream::release_firebase_app_id() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
  
  return firebase_app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidAppDataStream::set_allocated_firebase_app_id(::std::string* firebase_app_id) {
  if (firebase_app_id != nullptr) {
    
  } else {
    
  }
  firebase_app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firebase_app_id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AndroidAppDataStream.firebase_app_id)
}

// .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool AndroidAppDataStream::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& AndroidAppDataStream::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AndroidAppDataStream.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AndroidAppDataStream::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AndroidAppDataStream.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AndroidAppDataStream::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AndroidAppDataStream.create_time)
  return create_time_;
}
inline void AndroidAppDataStream::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AndroidAppDataStream.create_time)
}

// .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool AndroidAppDataStream::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& AndroidAppDataStream::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AndroidAppDataStream.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AndroidAppDataStream::release_update_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AndroidAppDataStream.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AndroidAppDataStream::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AndroidAppDataStream.update_time)
  return update_time_;
}
inline void AndroidAppDataStream::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AndroidAppDataStream.update_time)
}

// string package_name = 5 [(.google.api.field_behavior) = IMMUTABLE];
inline void AndroidAppDataStream::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AndroidAppDataStream::package_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
  return package_name_.GetNoArena();
}
inline void AndroidAppDataStream::set_package_name(const ::std::string& value) {
  
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
}
#if LANG_CXX11
inline void AndroidAppDataStream::set_package_name(::std::string&& value) {
  
  package_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
}
#endif
inline void AndroidAppDataStream::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
}
inline void AndroidAppDataStream::set_package_name(const char* value, size_t size) {
  
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
}
inline ::std::string* AndroidAppDataStream::mutable_package_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
  return package_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidAppDataStream::release_package_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
  
  return package_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidAppDataStream::set_allocated_package_name(::std::string* package_name) {
  if (package_name != nullptr) {
    
  } else {
    
  }
  package_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AndroidAppDataStream.package_name)
}

// string display_name = 6;
inline void AndroidAppDataStream::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AndroidAppDataStream::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
  return display_name_.GetNoArena();
}
inline void AndroidAppDataStream::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
}
#if LANG_CXX11
inline void AndroidAppDataStream::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
}
#endif
inline void AndroidAppDataStream::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
}
inline void AndroidAppDataStream::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
}
inline ::std::string* AndroidAppDataStream::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AndroidAppDataStream::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidAppDataStream::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AndroidAppDataStream.display_name)
}

// -------------------------------------------------------------------

// IosAppDataStream

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void IosAppDataStream::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IosAppDataStream::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.IosAppDataStream.name)
  return name_.GetNoArena();
}
inline void IosAppDataStream::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.IosAppDataStream.name)
}
#if LANG_CXX11
inline void IosAppDataStream::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.IosAppDataStream.name)
}
#endif
inline void IosAppDataStream::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.IosAppDataStream.name)
}
inline void IosAppDataStream::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.IosAppDataStream.name)
}
inline ::std::string* IosAppDataStream::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.IosAppDataStream.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IosAppDataStream::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.IosAppDataStream.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IosAppDataStream::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.IosAppDataStream.name)
}

// string firebase_app_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void IosAppDataStream::clear_firebase_app_id() {
  firebase_app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IosAppDataStream::firebase_app_id() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
  return firebase_app_id_.GetNoArena();
}
inline void IosAppDataStream::set_firebase_app_id(const ::std::string& value) {
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
}
#if LANG_CXX11
inline void IosAppDataStream::set_firebase_app_id(::std::string&& value) {
  
  firebase_app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
}
#endif
inline void IosAppDataStream::set_firebase_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
}
inline void IosAppDataStream::set_firebase_app_id(const char* value, size_t size) {
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
}
inline ::std::string* IosAppDataStream::mutable_firebase_app_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
  return firebase_app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IosAppDataStream::release_firebase_app_id() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
  
  return firebase_app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IosAppDataStream::set_allocated_firebase_app_id(::std::string* firebase_app_id) {
  if (firebase_app_id != nullptr) {
    
  } else {
    
  }
  firebase_app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firebase_app_id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.IosAppDataStream.firebase_app_id)
}

// .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool IosAppDataStream::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& IosAppDataStream::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.IosAppDataStream.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* IosAppDataStream::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.IosAppDataStream.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* IosAppDataStream::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.IosAppDataStream.create_time)
  return create_time_;
}
inline void IosAppDataStream::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.IosAppDataStream.create_time)
}

// .google.protobuf.Timestamp update_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool IosAppDataStream::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& IosAppDataStream::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.IosAppDataStream.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* IosAppDataStream::release_update_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.IosAppDataStream.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* IosAppDataStream::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.IosAppDataStream.update_time)
  return update_time_;
}
inline void IosAppDataStream::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.IosAppDataStream.update_time)
}

// string bundle_id = 5 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];
inline void IosAppDataStream::clear_bundle_id() {
  bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IosAppDataStream::bundle_id() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
  return bundle_id_.GetNoArena();
}
inline void IosAppDataStream::set_bundle_id(const ::std::string& value) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
}
#if LANG_CXX11
inline void IosAppDataStream::set_bundle_id(::std::string&& value) {
  
  bundle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
}
#endif
inline void IosAppDataStream::set_bundle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
}
inline void IosAppDataStream::set_bundle_id(const char* value, size_t size) {
  
  bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
}
inline ::std::string* IosAppDataStream::mutable_bundle_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
  return bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IosAppDataStream::release_bundle_id() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
  
  return bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IosAppDataStream::set_allocated_bundle_id(::std::string* bundle_id) {
  if (bundle_id != nullptr) {
    
  } else {
    
  }
  bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle_id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.IosAppDataStream.bundle_id)
}

// string display_name = 6;
inline void IosAppDataStream::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IosAppDataStream::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
  return display_name_.GetNoArena();
}
inline void IosAppDataStream::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
}
#if LANG_CXX11
inline void IosAppDataStream::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
}
#endif
inline void IosAppDataStream::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
}
inline void IosAppDataStream::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
}
inline ::std::string* IosAppDataStream::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IosAppDataStream::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IosAppDataStream::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.IosAppDataStream.display_name)
}

// -------------------------------------------------------------------

// WebDataStream

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void WebDataStream::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebDataStream::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.WebDataStream.name)
  return name_.GetNoArena();
}
inline void WebDataStream::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.WebDataStream.name)
}
#if LANG_CXX11
inline void WebDataStream::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.WebDataStream.name)
}
#endif
inline void WebDataStream::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.WebDataStream.name)
}
inline void WebDataStream::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.WebDataStream.name)
}
inline ::std::string* WebDataStream::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.WebDataStream.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebDataStream::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.WebDataStream.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebDataStream::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.WebDataStream.name)
}

// string measurement_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void WebDataStream::clear_measurement_id() {
  measurement_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebDataStream::measurement_id() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
  return measurement_id_.GetNoArena();
}
inline void WebDataStream::set_measurement_id(const ::std::string& value) {
  
  measurement_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
}
#if LANG_CXX11
inline void WebDataStream::set_measurement_id(::std::string&& value) {
  
  measurement_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
}
#endif
inline void WebDataStream::set_measurement_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  measurement_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
}
inline void WebDataStream::set_measurement_id(const char* value, size_t size) {
  
  measurement_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
}
inline ::std::string* WebDataStream::mutable_measurement_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
  return measurement_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebDataStream::release_measurement_id() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
  
  return measurement_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebDataStream::set_allocated_measurement_id(::std::string* measurement_id) {
  if (measurement_id != nullptr) {
    
  } else {
    
  }
  measurement_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), measurement_id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.WebDataStream.measurement_id)
}

// string firebase_app_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void WebDataStream::clear_firebase_app_id() {
  firebase_app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebDataStream::firebase_app_id() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
  return firebase_app_id_.GetNoArena();
}
inline void WebDataStream::set_firebase_app_id(const ::std::string& value) {
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
}
#if LANG_CXX11
inline void WebDataStream::set_firebase_app_id(::std::string&& value) {
  
  firebase_app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
}
#endif
inline void WebDataStream::set_firebase_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
}
inline void WebDataStream::set_firebase_app_id(const char* value, size_t size) {
  
  firebase_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
}
inline ::std::string* WebDataStream::mutable_firebase_app_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
  return firebase_app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebDataStream::release_firebase_app_id() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
  
  return firebase_app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebDataStream::set_allocated_firebase_app_id(::std::string* firebase_app_id) {
  if (firebase_app_id != nullptr) {
    
  } else {
    
  }
  firebase_app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firebase_app_id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.WebDataStream.firebase_app_id)
}

// .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool WebDataStream::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& WebDataStream::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.WebDataStream.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* WebDataStream::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.WebDataStream.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* WebDataStream::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.WebDataStream.create_time)
  return create_time_;
}
inline void WebDataStream::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.WebDataStream.create_time)
}

// .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool WebDataStream::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& WebDataStream::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.WebDataStream.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* WebDataStream::release_update_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.WebDataStream.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* WebDataStream::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.WebDataStream.update_time)
  return update_time_;
}
inline void WebDataStream::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.WebDataStream.update_time)
}

// string default_uri = 6 [(.google.api.field_behavior) = IMMUTABLE];
inline void WebDataStream::clear_default_uri() {
  default_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebDataStream::default_uri() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.WebDataStream.default_uri)
  return default_uri_.GetNoArena();
}
inline void WebDataStream::set_default_uri(const ::std::string& value) {
  
  default_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.WebDataStream.default_uri)
}
#if LANG_CXX11
inline void WebDataStream::set_default_uri(::std::string&& value) {
  
  default_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.WebDataStream.default_uri)
}
#endif
inline void WebDataStream::set_default_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.WebDataStream.default_uri)
}
inline void WebDataStream::set_default_uri(const char* value, size_t size) {
  
  default_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.WebDataStream.default_uri)
}
inline ::std::string* WebDataStream::mutable_default_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.WebDataStream.default_uri)
  return default_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebDataStream::release_default_uri() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.WebDataStream.default_uri)
  
  return default_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebDataStream::set_allocated_default_uri(::std::string* default_uri) {
  if (default_uri != nullptr) {
    
  } else {
    
  }
  default_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_uri);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.WebDataStream.default_uri)
}

// string display_name = 7 [(.google.api.field_behavior) = REQUIRED];
inline void WebDataStream::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebDataStream::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.WebDataStream.display_name)
  return display_name_.GetNoArena();
}
inline void WebDataStream::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.WebDataStream.display_name)
}
#if LANG_CXX11
inline void WebDataStream::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.WebDataStream.display_name)
}
#endif
inline void WebDataStream::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.WebDataStream.display_name)
}
inline void WebDataStream::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.WebDataStream.display_name)
}
inline ::std::string* WebDataStream::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.WebDataStream.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebDataStream::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.WebDataStream.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebDataStream::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.WebDataStream.display_name)
}

// -------------------------------------------------------------------

// UserLink

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void UserLink::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLink::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.UserLink.name)
  return name_.GetNoArena();
}
inline void UserLink::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.UserLink.name)
}
#if LANG_CXX11
inline void UserLink::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.UserLink.name)
}
#endif
inline void UserLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.UserLink.name)
}
inline void UserLink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.UserLink.name)
}
inline ::std::string* UserLink::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.UserLink.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLink::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.UserLink.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLink::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.UserLink.name)
}

// string email_address = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void UserLink::clear_email_address() {
  email_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLink::email_address() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.UserLink.email_address)
  return email_address_.GetNoArena();
}
inline void UserLink::set_email_address(const ::std::string& value) {
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.UserLink.email_address)
}
#if LANG_CXX11
inline void UserLink::set_email_address(::std::string&& value) {
  
  email_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.UserLink.email_address)
}
#endif
inline void UserLink::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.UserLink.email_address)
}
inline void UserLink::set_email_address(const char* value, size_t size) {
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.UserLink.email_address)
}
inline ::std::string* UserLink::mutable_email_address() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.UserLink.email_address)
  return email_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLink::release_email_address() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.UserLink.email_address)
  
  return email_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLink::set_allocated_email_address(::std::string* email_address) {
  if (email_address != nullptr) {
    
  } else {
    
  }
  email_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_address);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.UserLink.email_address)
}

// repeated string direct_roles = 3;
inline int UserLink::direct_roles_size() const {
  return direct_roles_.size();
}
inline void UserLink::clear_direct_roles() {
  direct_roles_.Clear();
}
inline const ::std::string& UserLink::direct_roles(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.UserLink.direct_roles)
  return direct_roles_.Get(index);
}
inline ::std::string* UserLink::mutable_direct_roles(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.UserLink.direct_roles)
  return direct_roles_.Mutable(index);
}
inline void UserLink::set_direct_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.UserLink.direct_roles)
  direct_roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserLink::set_direct_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.UserLink.direct_roles)
  direct_roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserLink::set_direct_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  direct_roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.UserLink.direct_roles)
}
inline void UserLink::set_direct_roles(int index, const char* value, size_t size) {
  direct_roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.UserLink.direct_roles)
}
inline ::std::string* UserLink::add_direct_roles() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.admin.v1alpha.UserLink.direct_roles)
  return direct_roles_.Add();
}
inline void UserLink::add_direct_roles(const ::std::string& value) {
  direct_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.UserLink.direct_roles)
}
#if LANG_CXX11
inline void UserLink::add_direct_roles(::std::string&& value) {
  direct_roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.UserLink.direct_roles)
}
#endif
inline void UserLink::add_direct_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  direct_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.admin.v1alpha.UserLink.direct_roles)
}
inline void UserLink::add_direct_roles(const char* value, size_t size) {
  direct_roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.admin.v1alpha.UserLink.direct_roles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
UserLink::direct_roles() const {
  // @@protoc_insertion_point(field_list:google.analytics.admin.v1alpha.UserLink.direct_roles)
  return direct_roles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
UserLink::mutable_direct_roles() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.admin.v1alpha.UserLink.direct_roles)
  return &direct_roles_;
}

// -------------------------------------------------------------------

// AuditUserLink

// string name = 1;
inline void AuditUserLink::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuditUserLink::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AuditUserLink.name)
  return name_.GetNoArena();
}
inline void AuditUserLink::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AuditUserLink.name)
}
#if LANG_CXX11
inline void AuditUserLink::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AuditUserLink.name)
}
#endif
inline void AuditUserLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AuditUserLink.name)
}
inline void AuditUserLink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AuditUserLink.name)
}
inline ::std::string* AuditUserLink::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AuditUserLink.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuditUserLink::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AuditUserLink.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditUserLink::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AuditUserLink.name)
}

// string email_address = 2;
inline void AuditUserLink::clear_email_address() {
  email_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuditUserLink::email_address() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AuditUserLink.email_address)
  return email_address_.GetNoArena();
}
inline void AuditUserLink::set_email_address(const ::std::string& value) {
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AuditUserLink.email_address)
}
#if LANG_CXX11
inline void AuditUserLink::set_email_address(::std::string&& value) {
  
  email_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AuditUserLink.email_address)
}
#endif
inline void AuditUserLink::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AuditUserLink.email_address)
}
inline void AuditUserLink::set_email_address(const char* value, size_t size) {
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AuditUserLink.email_address)
}
inline ::std::string* AuditUserLink::mutable_email_address() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AuditUserLink.email_address)
  return email_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuditUserLink::release_email_address() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AuditUserLink.email_address)
  
  return email_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditUserLink::set_allocated_email_address(::std::string* email_address) {
  if (email_address != nullptr) {
    
  } else {
    
  }
  email_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_address);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AuditUserLink.email_address)
}

// repeated string direct_roles = 3;
inline int AuditUserLink::direct_roles_size() const {
  return direct_roles_.size();
}
inline void AuditUserLink::clear_direct_roles() {
  direct_roles_.Clear();
}
inline const ::std::string& AuditUserLink::direct_roles(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
  return direct_roles_.Get(index);
}
inline ::std::string* AuditUserLink::mutable_direct_roles(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
  return direct_roles_.Mutable(index);
}
inline void AuditUserLink::set_direct_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
  direct_roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AuditUserLink::set_direct_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
  direct_roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AuditUserLink::set_direct_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  direct_roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
}
inline void AuditUserLink::set_direct_roles(int index, const char* value, size_t size) {
  direct_roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
}
inline ::std::string* AuditUserLink::add_direct_roles() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
  return direct_roles_.Add();
}
inline void AuditUserLink::add_direct_roles(const ::std::string& value) {
  direct_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
}
#if LANG_CXX11
inline void AuditUserLink::add_direct_roles(::std::string&& value) {
  direct_roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
}
#endif
inline void AuditUserLink::add_direct_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  direct_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
}
inline void AuditUserLink::add_direct_roles(const char* value, size_t size) {
  direct_roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AuditUserLink::direct_roles() const {
  // @@protoc_insertion_point(field_list:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
  return direct_roles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AuditUserLink::mutable_direct_roles() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.admin.v1alpha.AuditUserLink.direct_roles)
  return &direct_roles_;
}

// repeated string effective_roles = 4;
inline int AuditUserLink::effective_roles_size() const {
  return effective_roles_.size();
}
inline void AuditUserLink::clear_effective_roles() {
  effective_roles_.Clear();
}
inline const ::std::string& AuditUserLink::effective_roles(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
  return effective_roles_.Get(index);
}
inline ::std::string* AuditUserLink::mutable_effective_roles(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
  return effective_roles_.Mutable(index);
}
inline void AuditUserLink::set_effective_roles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
  effective_roles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AuditUserLink::set_effective_roles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
  effective_roles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AuditUserLink::set_effective_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  effective_roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
}
inline void AuditUserLink::set_effective_roles(int index, const char* value, size_t size) {
  effective_roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
}
inline ::std::string* AuditUserLink::add_effective_roles() {
  // @@protoc_insertion_point(field_add_mutable:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
  return effective_roles_.Add();
}
inline void AuditUserLink::add_effective_roles(const ::std::string& value) {
  effective_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
}
#if LANG_CXX11
inline void AuditUserLink::add_effective_roles(::std::string&& value) {
  effective_roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
}
#endif
inline void AuditUserLink::add_effective_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  effective_roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
}
inline void AuditUserLink::add_effective_roles(const char* value, size_t size) {
  effective_roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AuditUserLink::effective_roles() const {
  // @@protoc_insertion_point(field_list:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
  return effective_roles_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AuditUserLink::mutable_effective_roles() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.admin.v1alpha.AuditUserLink.effective_roles)
  return &effective_roles_;
}

// -------------------------------------------------------------------

// EnhancedMeasurementSettings

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void EnhancedMeasurementSettings::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnhancedMeasurementSettings::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
  return name_.GetNoArena();
}
inline void EnhancedMeasurementSettings::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
}
#if LANG_CXX11
inline void EnhancedMeasurementSettings::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
}
#endif
inline void EnhancedMeasurementSettings::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
}
inline void EnhancedMeasurementSettings::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
}
inline ::std::string* EnhancedMeasurementSettings::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnhancedMeasurementSettings::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnhancedMeasurementSettings::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.name)
}

// bool stream_enabled = 2;
inline void EnhancedMeasurementSettings::clear_stream_enabled() {
  stream_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::stream_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.stream_enabled)
  return stream_enabled_;
}
inline void EnhancedMeasurementSettings::set_stream_enabled(bool value) {
  
  stream_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.stream_enabled)
}

// bool page_views_enabled = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void EnhancedMeasurementSettings::clear_page_views_enabled() {
  page_views_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::page_views_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.page_views_enabled)
  return page_views_enabled_;
}
inline void EnhancedMeasurementSettings::set_page_views_enabled(bool value) {
  
  page_views_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.page_views_enabled)
}

// bool scrolls_enabled = 4;
inline void EnhancedMeasurementSettings::clear_scrolls_enabled() {
  scrolls_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::scrolls_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.scrolls_enabled)
  return scrolls_enabled_;
}
inline void EnhancedMeasurementSettings::set_scrolls_enabled(bool value) {
  
  scrolls_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.scrolls_enabled)
}

// bool outbound_clicks_enabled = 5;
inline void EnhancedMeasurementSettings::clear_outbound_clicks_enabled() {
  outbound_clicks_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::outbound_clicks_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.outbound_clicks_enabled)
  return outbound_clicks_enabled_;
}
inline void EnhancedMeasurementSettings::set_outbound_clicks_enabled(bool value) {
  
  outbound_clicks_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.outbound_clicks_enabled)
}

// bool site_search_enabled = 7;
inline void EnhancedMeasurementSettings::clear_site_search_enabled() {
  site_search_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::site_search_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.site_search_enabled)
  return site_search_enabled_;
}
inline void EnhancedMeasurementSettings::set_site_search_enabled(bool value) {
  
  site_search_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.site_search_enabled)
}

// bool video_engagement_enabled = 9;
inline void EnhancedMeasurementSettings::clear_video_engagement_enabled() {
  video_engagement_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::video_engagement_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.video_engagement_enabled)
  return video_engagement_enabled_;
}
inline void EnhancedMeasurementSettings::set_video_engagement_enabled(bool value) {
  
  video_engagement_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.video_engagement_enabled)
}

// bool file_downloads_enabled = 10;
inline void EnhancedMeasurementSettings::clear_file_downloads_enabled() {
  file_downloads_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::file_downloads_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.file_downloads_enabled)
  return file_downloads_enabled_;
}
inline void EnhancedMeasurementSettings::set_file_downloads_enabled(bool value) {
  
  file_downloads_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.file_downloads_enabled)
}

// bool page_loads_enabled = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void EnhancedMeasurementSettings::clear_page_loads_enabled() {
  page_loads_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::page_loads_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.page_loads_enabled)
  return page_loads_enabled_;
}
inline void EnhancedMeasurementSettings::set_page_loads_enabled(bool value) {
  
  page_loads_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.page_loads_enabled)
}

// bool page_changes_enabled = 13;
inline void EnhancedMeasurementSettings::clear_page_changes_enabled() {
  page_changes_enabled_ = false;
}
inline bool EnhancedMeasurementSettings::page_changes_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.page_changes_enabled)
  return page_changes_enabled_;
}
inline void EnhancedMeasurementSettings::set_page_changes_enabled(bool value) {
  
  page_changes_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.page_changes_enabled)
}

// string search_query_parameter = 16 [(.google.api.field_behavior) = REQUIRED];
inline void EnhancedMeasurementSettings::clear_search_query_parameter() {
  search_query_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnhancedMeasurementSettings::search_query_parameter() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
  return search_query_parameter_.GetNoArena();
}
inline void EnhancedMeasurementSettings::set_search_query_parameter(const ::std::string& value) {
  
  search_query_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
}
#if LANG_CXX11
inline void EnhancedMeasurementSettings::set_search_query_parameter(::std::string&& value) {
  
  search_query_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
}
#endif
inline void EnhancedMeasurementSettings::set_search_query_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_query_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
}
inline void EnhancedMeasurementSettings::set_search_query_parameter(const char* value, size_t size) {
  
  search_query_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
}
inline ::std::string* EnhancedMeasurementSettings::mutable_search_query_parameter() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
  return search_query_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnhancedMeasurementSettings::release_search_query_parameter() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
  
  return search_query_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnhancedMeasurementSettings::set_allocated_search_query_parameter(::std::string* search_query_parameter) {
  if (search_query_parameter != nullptr) {
    
  } else {
    
  }
  search_query_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_query_parameter);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.search_query_parameter)
}

// string uri_query_parameter = 17;
inline void EnhancedMeasurementSettings::clear_uri_query_parameter() {
  uri_query_parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnhancedMeasurementSettings::uri_query_parameter() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
  return uri_query_parameter_.GetNoArena();
}
inline void EnhancedMeasurementSettings::set_uri_query_parameter(const ::std::string& value) {
  
  uri_query_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
}
#if LANG_CXX11
inline void EnhancedMeasurementSettings::set_uri_query_parameter(::std::string&& value) {
  
  uri_query_parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
}
#endif
inline void EnhancedMeasurementSettings::set_uri_query_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_query_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
}
inline void EnhancedMeasurementSettings::set_uri_query_parameter(const char* value, size_t size) {
  
  uri_query_parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
}
inline ::std::string* EnhancedMeasurementSettings::mutable_uri_query_parameter() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
  return uri_query_parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnhancedMeasurementSettings::release_uri_query_parameter() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
  
  return uri_query_parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnhancedMeasurementSettings::set_allocated_uri_query_parameter(::std::string* uri_query_parameter) {
  if (uri_query_parameter != nullptr) {
    
  } else {
    
  }
  uri_query_parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri_query_parameter);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.EnhancedMeasurementSettings.uri_query_parameter)
}

// -------------------------------------------------------------------

// FirebaseLink

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void FirebaseLink::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirebaseLink::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.FirebaseLink.name)
  return name_.GetNoArena();
}
inline void FirebaseLink::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.FirebaseLink.name)
}
#if LANG_CXX11
inline void FirebaseLink::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.FirebaseLink.name)
}
#endif
inline void FirebaseLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.FirebaseLink.name)
}
inline void FirebaseLink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.FirebaseLink.name)
}
inline ::std::string* FirebaseLink::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.FirebaseLink.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirebaseLink::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.FirebaseLink.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirebaseLink::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.FirebaseLink.name)
}

// string project = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void FirebaseLink::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FirebaseLink::project() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.FirebaseLink.project)
  return project_.GetNoArena();
}
inline void FirebaseLink::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.FirebaseLink.project)
}
#if LANG_CXX11
inline void FirebaseLink::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.FirebaseLink.project)
}
#endif
inline void FirebaseLink::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.FirebaseLink.project)
}
inline void FirebaseLink::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.FirebaseLink.project)
}
inline ::std::string* FirebaseLink::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.FirebaseLink.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FirebaseLink::release_project() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.FirebaseLink.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FirebaseLink::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.FirebaseLink.project)
}

// .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool FirebaseLink::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& FirebaseLink::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.FirebaseLink.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* FirebaseLink::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.FirebaseLink.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* FirebaseLink::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.FirebaseLink.create_time)
  return create_time_;
}
inline void FirebaseLink::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.FirebaseLink.create_time)
}

// .google.analytics.admin.v1alpha.MaximumUserAccess maximum_user_access = 4;
inline void FirebaseLink::clear_maximum_user_access() {
  maximum_user_access_ = 0;
}
inline ::google::analytics::admin::v1alpha::MaximumUserAccess FirebaseLink::maximum_user_access() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.FirebaseLink.maximum_user_access)
  return static_cast< ::google::analytics::admin::v1alpha::MaximumUserAccess >(maximum_user_access_);
}
inline void FirebaseLink::set_maximum_user_access(::google::analytics::admin::v1alpha::MaximumUserAccess value) {
  
  maximum_user_access_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.FirebaseLink.maximum_user_access)
}

// -------------------------------------------------------------------

// GlobalSiteTag

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void GlobalSiteTag::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GlobalSiteTag::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GlobalSiteTag.name)
  return name_.GetNoArena();
}
inline void GlobalSiteTag::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GlobalSiteTag.name)
}
#if LANG_CXX11
inline void GlobalSiteTag::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.GlobalSiteTag.name)
}
#endif
inline void GlobalSiteTag::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.GlobalSiteTag.name)
}
inline void GlobalSiteTag::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.GlobalSiteTag.name)
}
inline ::std::string* GlobalSiteTag::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GlobalSiteTag.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GlobalSiteTag::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GlobalSiteTag.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSiteTag::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GlobalSiteTag.name)
}

// string snippet = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void GlobalSiteTag::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GlobalSiteTag::snippet() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
  return snippet_.GetNoArena();
}
inline void GlobalSiteTag::set_snippet(const ::std::string& value) {
  
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
}
#if LANG_CXX11
inline void GlobalSiteTag::set_snippet(::std::string&& value) {
  
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
}
#endif
inline void GlobalSiteTag::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
}
inline void GlobalSiteTag::set_snippet(const char* value, size_t size) {
  
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
}
inline ::std::string* GlobalSiteTag::mutable_snippet() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GlobalSiteTag::release_snippet() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
  
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalSiteTag::set_allocated_snippet(::std::string* snippet) {
  if (snippet != nullptr) {
    
  } else {
    
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GlobalSiteTag.snippet)
}

// -------------------------------------------------------------------

// GoogleAdsLink

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void GoogleAdsLink::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoogleAdsLink::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleAdsLink.name)
  return name_.GetNoArena();
}
inline void GoogleAdsLink::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GoogleAdsLink.name)
}
#if LANG_CXX11
inline void GoogleAdsLink::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.GoogleAdsLink.name)
}
#endif
inline void GoogleAdsLink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.GoogleAdsLink.name)
}
inline void GoogleAdsLink::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.GoogleAdsLink.name)
}
inline ::std::string* GoogleAdsLink::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GoogleAdsLink.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleAdsLink::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GoogleAdsLink.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleAdsLink::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GoogleAdsLink.name)
}

// string customer_id = 3 [(.google.api.field_behavior) = IMMUTABLE];
inline void GoogleAdsLink::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoogleAdsLink::customer_id() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
  return customer_id_.GetNoArena();
}
inline void GoogleAdsLink::set_customer_id(const ::std::string& value) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
}
#if LANG_CXX11
inline void GoogleAdsLink::set_customer_id(::std::string&& value) {
  
  customer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
}
#endif
inline void GoogleAdsLink::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
}
inline void GoogleAdsLink::set_customer_id(const char* value, size_t size) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
}
inline ::std::string* GoogleAdsLink::mutable_customer_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleAdsLink::release_customer_id() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
  
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleAdsLink::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GoogleAdsLink.customer_id)
}

// bool can_manage_clients = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void GoogleAdsLink::clear_can_manage_clients() {
  can_manage_clients_ = false;
}
inline bool GoogleAdsLink::can_manage_clients() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleAdsLink.can_manage_clients)
  return can_manage_clients_;
}
inline void GoogleAdsLink::set_can_manage_clients(bool value) {
  
  can_manage_clients_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GoogleAdsLink.can_manage_clients)
}

// .google.protobuf.BoolValue ads_personalization_enabled = 5;
inline bool GoogleAdsLink::has_ads_personalization_enabled() const {
  return this != internal_default_instance() && ads_personalization_enabled_ != nullptr;
}
inline const ::google::protobuf::BoolValue& GoogleAdsLink::ads_personalization_enabled() const {
  const ::google::protobuf::BoolValue* p = ads_personalization_enabled_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleAdsLink.ads_personalization_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* GoogleAdsLink::release_ads_personalization_enabled() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GoogleAdsLink.ads_personalization_enabled)
  
  ::google::protobuf::BoolValue* temp = ads_personalization_enabled_;
  ads_personalization_enabled_ = nullptr;
  return temp;
}
inline ::google::protobuf::BoolValue* GoogleAdsLink::mutable_ads_personalization_enabled() {
  
  if (ads_personalization_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    ads_personalization_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GoogleAdsLink.ads_personalization_enabled)
  return ads_personalization_enabled_;
}
inline void GoogleAdsLink::set_allocated_ads_personalization_enabled(::google::protobuf::BoolValue* ads_personalization_enabled) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ads_personalization_enabled_);
  }
  if (ads_personalization_enabled) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ads_personalization_enabled)->GetArena();
    if (message_arena != submessage_arena) {
      ads_personalization_enabled = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ads_personalization_enabled, submessage_arena);
    }
    
  } else {
    
  }
  ads_personalization_enabled_ = ads_personalization_enabled;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GoogleAdsLink.ads_personalization_enabled)
}

// string email_address = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void GoogleAdsLink::clear_email_address() {
  email_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoogleAdsLink::email_address() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
  return email_address_.GetNoArena();
}
inline void GoogleAdsLink::set_email_address(const ::std::string& value) {
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
}
#if LANG_CXX11
inline void GoogleAdsLink::set_email_address(::std::string&& value) {
  
  email_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
}
#endif
inline void GoogleAdsLink::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
}
inline void GoogleAdsLink::set_email_address(const char* value, size_t size) {
  
  email_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
}
inline ::std::string* GoogleAdsLink::mutable_email_address() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
  return email_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleAdsLink::release_email_address() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
  
  return email_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleAdsLink::set_allocated_email_address(::std::string* email_address) {
  if (email_address != nullptr) {
    
  } else {
    
  }
  email_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email_address);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GoogleAdsLink.email_address)
}

// .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool GoogleAdsLink::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& GoogleAdsLink::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleAdsLink.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* GoogleAdsLink::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GoogleAdsLink.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GoogleAdsLink::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GoogleAdsLink.create_time)
  return create_time_;
}
inline void GoogleAdsLink::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GoogleAdsLink.create_time)
}

// .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool GoogleAdsLink::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& GoogleAdsLink::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleAdsLink.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* GoogleAdsLink::release_update_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GoogleAdsLink.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GoogleAdsLink::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GoogleAdsLink.update_time)
  return update_time_;
}
inline void GoogleAdsLink::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GoogleAdsLink.update_time)
}

// -------------------------------------------------------------------

// DataSharingSettings

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void DataSharingSettings::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataSharingSettings::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.DataSharingSettings.name)
  return name_.GetNoArena();
}
inline void DataSharingSettings::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.DataSharingSettings.name)
}
#if LANG_CXX11
inline void DataSharingSettings::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.DataSharingSettings.name)
}
#endif
inline void DataSharingSettings::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.DataSharingSettings.name)
}
inline void DataSharingSettings::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.DataSharingSettings.name)
}
inline ::std::string* DataSharingSettings::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.DataSharingSettings.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSharingSettings::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.DataSharingSettings.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSharingSettings::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.DataSharingSettings.name)
}

// bool sharing_with_google_support_enabled = 2;
inline void DataSharingSettings::clear_sharing_with_google_support_enabled() {
  sharing_with_google_support_enabled_ = false;
}
inline bool DataSharingSettings::sharing_with_google_support_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_support_enabled)
  return sharing_with_google_support_enabled_;
}
inline void DataSharingSettings::set_sharing_with_google_support_enabled(bool value) {
  
  sharing_with_google_support_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_support_enabled)
}

// bool sharing_with_google_assigned_sales_enabled = 3;
inline void DataSharingSettings::clear_sharing_with_google_assigned_sales_enabled() {
  sharing_with_google_assigned_sales_enabled_ = false;
}
inline bool DataSharingSettings::sharing_with_google_assigned_sales_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_assigned_sales_enabled)
  return sharing_with_google_assigned_sales_enabled_;
}
inline void DataSharingSettings::set_sharing_with_google_assigned_sales_enabled(bool value) {
  
  sharing_with_google_assigned_sales_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_assigned_sales_enabled)
}

// bool sharing_with_google_any_sales_enabled = 4;
inline void DataSharingSettings::clear_sharing_with_google_any_sales_enabled() {
  sharing_with_google_any_sales_enabled_ = false;
}
inline bool DataSharingSettings::sharing_with_google_any_sales_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_any_sales_enabled)
  return sharing_with_google_any_sales_enabled_;
}
inline void DataSharingSettings::set_sharing_with_google_any_sales_enabled(bool value) {
  
  sharing_with_google_any_sales_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_any_sales_enabled)
}

// bool sharing_with_google_products_enabled = 5;
inline void DataSharingSettings::clear_sharing_with_google_products_enabled() {
  sharing_with_google_products_enabled_ = false;
}
inline bool DataSharingSettings::sharing_with_google_products_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_products_enabled)
  return sharing_with_google_products_enabled_;
}
inline void DataSharingSettings::set_sharing_with_google_products_enabled(bool value) {
  
  sharing_with_google_products_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_google_products_enabled)
}

// bool sharing_with_others_enabled = 6;
inline void DataSharingSettings::clear_sharing_with_others_enabled() {
  sharing_with_others_enabled_ = false;
}
inline bool DataSharingSettings::sharing_with_others_enabled() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_others_enabled)
  return sharing_with_others_enabled_;
}
inline void DataSharingSettings::set_sharing_with_others_enabled(bool value) {
  
  sharing_with_others_enabled_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.DataSharingSettings.sharing_with_others_enabled)
}

// -------------------------------------------------------------------

// AccountSummary

// string name = 1;
inline void AccountSummary::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountSummary::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AccountSummary.name)
  return name_.GetNoArena();
}
inline void AccountSummary::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AccountSummary.name)
}
#if LANG_CXX11
inline void AccountSummary::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AccountSummary.name)
}
#endif
inline void AccountSummary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AccountSummary.name)
}
inline void AccountSummary::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AccountSummary.name)
}
inline ::std::string* AccountSummary::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AccountSummary.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountSummary::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AccountSummary.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountSummary::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AccountSummary.name)
}

// string account = 2 [(.google.api.resource_reference) = {
inline void AccountSummary::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountSummary::account() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AccountSummary.account)
  return account_.GetNoArena();
}
inline void AccountSummary::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AccountSummary.account)
}
#if LANG_CXX11
inline void AccountSummary::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AccountSummary.account)
}
#endif
inline void AccountSummary::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AccountSummary.account)
}
inline void AccountSummary::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AccountSummary.account)
}
inline ::std::string* AccountSummary::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AccountSummary.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountSummary::release_account() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AccountSummary.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountSummary::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AccountSummary.account)
}

// string display_name = 3;
inline void AccountSummary::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountSummary::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AccountSummary.display_name)
  return display_name_.GetNoArena();
}
inline void AccountSummary::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.AccountSummary.display_name)
}
#if LANG_CXX11
inline void AccountSummary::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.AccountSummary.display_name)
}
#endif
inline void AccountSummary::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.AccountSummary.display_name)
}
inline void AccountSummary::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.AccountSummary.display_name)
}
inline ::std::string* AccountSummary::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AccountSummary.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountSummary::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.AccountSummary.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountSummary::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.AccountSummary.display_name)
}

// repeated .google.analytics.admin.v1alpha.PropertySummary property_summaries = 4;
inline int AccountSummary::property_summaries_size() const {
  return property_summaries_.size();
}
inline void AccountSummary::clear_property_summaries() {
  property_summaries_.Clear();
}
inline ::google::analytics::admin::v1alpha::PropertySummary* AccountSummary::mutable_property_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.AccountSummary.property_summaries)
  return property_summaries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::PropertySummary >*
AccountSummary::mutable_property_summaries() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.admin.v1alpha.AccountSummary.property_summaries)
  return &property_summaries_;
}
inline const ::google::analytics::admin::v1alpha::PropertySummary& AccountSummary::property_summaries(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.AccountSummary.property_summaries)
  return property_summaries_.Get(index);
}
inline ::google::analytics::admin::v1alpha::PropertySummary* AccountSummary::add_property_summaries() {
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.AccountSummary.property_summaries)
  return property_summaries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::PropertySummary >&
AccountSummary::property_summaries() const {
  // @@protoc_insertion_point(field_list:google.analytics.admin.v1alpha.AccountSummary.property_summaries)
  return property_summaries_;
}

// -------------------------------------------------------------------

// PropertySummary

// string property = 1 [(.google.api.resource_reference) = {
inline void PropertySummary::clear_property() {
  property_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertySummary::property() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.PropertySummary.property)
  return property_.GetNoArena();
}
inline void PropertySummary::set_property(const ::std::string& value) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.PropertySummary.property)
}
#if LANG_CXX11
inline void PropertySummary::set_property(::std::string&& value) {
  
  property_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.PropertySummary.property)
}
#endif
inline void PropertySummary::set_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.PropertySummary.property)
}
inline void PropertySummary::set_property(const char* value, size_t size) {
  
  property_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.PropertySummary.property)
}
inline ::std::string* PropertySummary::mutable_property() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.PropertySummary.property)
  return property_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertySummary::release_property() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.PropertySummary.property)
  
  return property_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertySummary::set_allocated_property(::std::string* property) {
  if (property != nullptr) {
    
  } else {
    
  }
  property_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.PropertySummary.property)
}

// string display_name = 2;
inline void PropertySummary::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PropertySummary::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.PropertySummary.display_name)
  return display_name_.GetNoArena();
}
inline void PropertySummary::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.PropertySummary.display_name)
}
#if LANG_CXX11
inline void PropertySummary::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.PropertySummary.display_name)
}
#endif
inline void PropertySummary::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.PropertySummary.display_name)
}
inline void PropertySummary::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.PropertySummary.display_name)
}
inline ::std::string* PropertySummary::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.PropertySummary.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PropertySummary::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.PropertySummary.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PropertySummary::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.PropertySummary.display_name)
}

// -------------------------------------------------------------------

// MeasurementProtocolSecret

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void MeasurementProtocolSecret::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasurementProtocolSecret::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
  return name_.GetNoArena();
}
inline void MeasurementProtocolSecret::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
}
#if LANG_CXX11
inline void MeasurementProtocolSecret::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
}
#endif
inline void MeasurementProtocolSecret::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
}
inline void MeasurementProtocolSecret::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
}
inline ::std::string* MeasurementProtocolSecret::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasurementProtocolSecret::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasurementProtocolSecret::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.MeasurementProtocolSecret.name)
}

// string display_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void MeasurementProtocolSecret::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasurementProtocolSecret::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
  return display_name_.GetNoArena();
}
inline void MeasurementProtocolSecret::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
}
#if LANG_CXX11
inline void MeasurementProtocolSecret::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
}
#endif
inline void MeasurementProtocolSecret::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
}
inline void MeasurementProtocolSecret::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
}
inline ::std::string* MeasurementProtocolSecret::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasurementProtocolSecret::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasurementProtocolSecret::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.MeasurementProtocolSecret.display_name)
}

// string secret_value = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void MeasurementProtocolSecret::clear_secret_value() {
  secret_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasurementProtocolSecret::secret_value() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
  return secret_value_.GetNoArena();
}
inline void MeasurementProtocolSecret::set_secret_value(const ::std::string& value) {
  
  secret_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
}
#if LANG_CXX11
inline void MeasurementProtocolSecret::set_secret_value(::std::string&& value) {
  
  secret_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
}
#endif
inline void MeasurementProtocolSecret::set_secret_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
}
inline void MeasurementProtocolSecret::set_secret_value(const char* value, size_t size) {
  
  secret_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
}
inline ::std::string* MeasurementProtocolSecret::mutable_secret_value() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
  return secret_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasurementProtocolSecret::release_secret_value() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
  
  return secret_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasurementProtocolSecret::set_allocated_secret_value(::std::string* secret_value) {
  if (secret_value != nullptr) {
    
  } else {
    
  }
  secret_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret_value);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.MeasurementProtocolSecret.secret_value)
}

// -------------------------------------------------------------------

// ChangeHistoryEvent

// string id = 1;
inline void ChangeHistoryEvent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeHistoryEvent::id() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
  return id_.GetNoArena();
}
inline void ChangeHistoryEvent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
}
#if LANG_CXX11
inline void ChangeHistoryEvent::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
}
#endif
inline void ChangeHistoryEvent::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
}
inline void ChangeHistoryEvent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
}
inline ::std::string* ChangeHistoryEvent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeHistoryEvent::release_id() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeHistoryEvent::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ChangeHistoryEvent.id)
}

// .google.protobuf.Timestamp change_time = 2;
inline bool ChangeHistoryEvent::has_change_time() const {
  return this != internal_default_instance() && change_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ChangeHistoryEvent::change_time() const {
  const ::google::protobuf::Timestamp* p = change_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryEvent.change_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ChangeHistoryEvent::release_change_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryEvent.change_time)
  
  ::google::protobuf::Timestamp* temp = change_time_;
  change_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ChangeHistoryEvent::mutable_change_time() {
  
  if (change_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    change_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryEvent.change_time)
  return change_time_;
}
inline void ChangeHistoryEvent::set_allocated_change_time(::google::protobuf::Timestamp* change_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(change_time_);
  }
  if (change_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(change_time)->GetArena();
    if (message_arena != submessage_arena) {
      change_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_time, submessage_arena);
    }
    
  } else {
    
  }
  change_time_ = change_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ChangeHistoryEvent.change_time)
}

// .google.analytics.admin.v1alpha.ActorType actor_type = 3;
inline void ChangeHistoryEvent::clear_actor_type() {
  actor_type_ = 0;
}
inline ::google::analytics::admin::v1alpha::ActorType ChangeHistoryEvent::actor_type() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryEvent.actor_type)
  return static_cast< ::google::analytics::admin::v1alpha::ActorType >(actor_type_);
}
inline void ChangeHistoryEvent::set_actor_type(::google::analytics::admin::v1alpha::ActorType value) {
  
  actor_type_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ChangeHistoryEvent.actor_type)
}

// string user_actor_email = 4;
inline void ChangeHistoryEvent::clear_user_actor_email() {
  user_actor_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeHistoryEvent::user_actor_email() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
  return user_actor_email_.GetNoArena();
}
inline void ChangeHistoryEvent::set_user_actor_email(const ::std::string& value) {
  
  user_actor_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
}
#if LANG_CXX11
inline void ChangeHistoryEvent::set_user_actor_email(::std::string&& value) {
  
  user_actor_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
}
#endif
inline void ChangeHistoryEvent::set_user_actor_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_actor_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
}
inline void ChangeHistoryEvent::set_user_actor_email(const char* value, size_t size) {
  
  user_actor_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
}
inline ::std::string* ChangeHistoryEvent::mutable_user_actor_email() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
  return user_actor_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeHistoryEvent::release_user_actor_email() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
  
  return user_actor_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeHistoryEvent::set_allocated_user_actor_email(::std::string* user_actor_email) {
  if (user_actor_email != nullptr) {
    
  } else {
    
  }
  user_actor_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_actor_email);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ChangeHistoryEvent.user_actor_email)
}

// bool changes_filtered = 5;
inline void ChangeHistoryEvent::clear_changes_filtered() {
  changes_filtered_ = false;
}
inline bool ChangeHistoryEvent::changes_filtered() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryEvent.changes_filtered)
  return changes_filtered_;
}
inline void ChangeHistoryEvent::set_changes_filtered(bool value) {
  
  changes_filtered_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ChangeHistoryEvent.changes_filtered)
}

// repeated .google.analytics.admin.v1alpha.ChangeHistoryChange changes = 6;
inline int ChangeHistoryEvent::changes_size() const {
  return changes_.size();
}
inline void ChangeHistoryEvent::clear_changes() {
  changes_.Clear();
}
inline ::google::analytics::admin::v1alpha::ChangeHistoryChange* ChangeHistoryEvent::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryEvent.changes)
  return changes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::ChangeHistoryChange >*
ChangeHistoryEvent::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:google.analytics.admin.v1alpha.ChangeHistoryEvent.changes)
  return &changes_;
}
inline const ::google::analytics::admin::v1alpha::ChangeHistoryChange& ChangeHistoryEvent::changes(int index) const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryEvent.changes)
  return changes_.Get(index);
}
inline ::google::analytics::admin::v1alpha::ChangeHistoryChange* ChangeHistoryEvent::add_changes() {
  // @@protoc_insertion_point(field_add:google.analytics.admin.v1alpha.ChangeHistoryEvent.changes)
  return changes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::analytics::admin::v1alpha::ChangeHistoryChange >&
ChangeHistoryEvent::changes() const {
  // @@protoc_insertion_point(field_list:google.analytics.admin.v1alpha.ChangeHistoryEvent.changes)
  return changes_;
}

// -------------------------------------------------------------------

// ChangeHistoryChange_ChangeHistoryResource

// .google.analytics.admin.v1alpha.Account account = 1;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_account() const {
  return resource_case() == kAccount;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_account() {
  _oneof_case_[0] = kAccount;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_account() {
  if (has_account()) {
    delete resource_.account_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::Account* ChangeHistoryChange_ChangeHistoryResource::release_account() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.account)
  if (has_account()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::Account* temp = resource_.account_;
    resource_.account_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::Account& ChangeHistoryChange_ChangeHistoryResource::account() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.account)
  return has_account()
      ? *resource_.account_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::Account*>(&::google::analytics::admin::v1alpha::_Account_default_instance_);
}
inline ::google::analytics::admin::v1alpha::Account* ChangeHistoryChange_ChangeHistoryResource::mutable_account() {
  if (!has_account()) {
    clear_resource();
    set_has_account();
    resource_.account_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::Account >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.account)
  return resource_.account_;
}

// .google.analytics.admin.v1alpha.Property property = 2;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_property() const {
  return resource_case() == kProperty;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_property() {
  _oneof_case_[0] = kProperty;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_property() {
  if (has_property()) {
    delete resource_.property_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::Property* ChangeHistoryChange_ChangeHistoryResource::release_property() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.property)
  if (has_property()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::Property* temp = resource_.property_;
    resource_.property_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::Property& ChangeHistoryChange_ChangeHistoryResource::property() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.property)
  return has_property()
      ? *resource_.property_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::Property*>(&::google::analytics::admin::v1alpha::_Property_default_instance_);
}
inline ::google::analytics::admin::v1alpha::Property* ChangeHistoryChange_ChangeHistoryResource::mutable_property() {
  if (!has_property()) {
    clear_resource();
    set_has_property();
    resource_.property_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::Property >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.property)
  return resource_.property_;
}

// .google.analytics.admin.v1alpha.WebDataStream web_data_stream = 3;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_web_data_stream() const {
  return resource_case() == kWebDataStream;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_web_data_stream() {
  _oneof_case_[0] = kWebDataStream;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_web_data_stream() {
  if (has_web_data_stream()) {
    delete resource_.web_data_stream_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::WebDataStream* ChangeHistoryChange_ChangeHistoryResource::release_web_data_stream() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.web_data_stream)
  if (has_web_data_stream()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::WebDataStream* temp = resource_.web_data_stream_;
    resource_.web_data_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::WebDataStream& ChangeHistoryChange_ChangeHistoryResource::web_data_stream() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.web_data_stream)
  return has_web_data_stream()
      ? *resource_.web_data_stream_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::WebDataStream*>(&::google::analytics::admin::v1alpha::_WebDataStream_default_instance_);
}
inline ::google::analytics::admin::v1alpha::WebDataStream* ChangeHistoryChange_ChangeHistoryResource::mutable_web_data_stream() {
  if (!has_web_data_stream()) {
    clear_resource();
    set_has_web_data_stream();
    resource_.web_data_stream_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::WebDataStream >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.web_data_stream)
  return resource_.web_data_stream_;
}

// .google.analytics.admin.v1alpha.AndroidAppDataStream android_app_data_stream = 4;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_android_app_data_stream() const {
  return resource_case() == kAndroidAppDataStream;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_android_app_data_stream() {
  _oneof_case_[0] = kAndroidAppDataStream;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_android_app_data_stream() {
  if (has_android_app_data_stream()) {
    delete resource_.android_app_data_stream_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::AndroidAppDataStream* ChangeHistoryChange_ChangeHistoryResource::release_android_app_data_stream() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.android_app_data_stream)
  if (has_android_app_data_stream()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::AndroidAppDataStream* temp = resource_.android_app_data_stream_;
    resource_.android_app_data_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::AndroidAppDataStream& ChangeHistoryChange_ChangeHistoryResource::android_app_data_stream() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.android_app_data_stream)
  return has_android_app_data_stream()
      ? *resource_.android_app_data_stream_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::AndroidAppDataStream*>(&::google::analytics::admin::v1alpha::_AndroidAppDataStream_default_instance_);
}
inline ::google::analytics::admin::v1alpha::AndroidAppDataStream* ChangeHistoryChange_ChangeHistoryResource::mutable_android_app_data_stream() {
  if (!has_android_app_data_stream()) {
    clear_resource();
    set_has_android_app_data_stream();
    resource_.android_app_data_stream_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::AndroidAppDataStream >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.android_app_data_stream)
  return resource_.android_app_data_stream_;
}

// .google.analytics.admin.v1alpha.IosAppDataStream ios_app_data_stream = 5;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_ios_app_data_stream() const {
  return resource_case() == kIosAppDataStream;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_ios_app_data_stream() {
  _oneof_case_[0] = kIosAppDataStream;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_ios_app_data_stream() {
  if (has_ios_app_data_stream()) {
    delete resource_.ios_app_data_stream_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::IosAppDataStream* ChangeHistoryChange_ChangeHistoryResource::release_ios_app_data_stream() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.ios_app_data_stream)
  if (has_ios_app_data_stream()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::IosAppDataStream* temp = resource_.ios_app_data_stream_;
    resource_.ios_app_data_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::IosAppDataStream& ChangeHistoryChange_ChangeHistoryResource::ios_app_data_stream() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.ios_app_data_stream)
  return has_ios_app_data_stream()
      ? *resource_.ios_app_data_stream_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::IosAppDataStream*>(&::google::analytics::admin::v1alpha::_IosAppDataStream_default_instance_);
}
inline ::google::analytics::admin::v1alpha::IosAppDataStream* ChangeHistoryChange_ChangeHistoryResource::mutable_ios_app_data_stream() {
  if (!has_ios_app_data_stream()) {
    clear_resource();
    set_has_ios_app_data_stream();
    resource_.ios_app_data_stream_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::IosAppDataStream >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.ios_app_data_stream)
  return resource_.ios_app_data_stream_;
}

// .google.analytics.admin.v1alpha.FirebaseLink firebase_link = 6;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_firebase_link() const {
  return resource_case() == kFirebaseLink;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_firebase_link() {
  _oneof_case_[0] = kFirebaseLink;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_firebase_link() {
  if (has_firebase_link()) {
    delete resource_.firebase_link_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::FirebaseLink* ChangeHistoryChange_ChangeHistoryResource::release_firebase_link() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.firebase_link)
  if (has_firebase_link()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::FirebaseLink* temp = resource_.firebase_link_;
    resource_.firebase_link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::FirebaseLink& ChangeHistoryChange_ChangeHistoryResource::firebase_link() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.firebase_link)
  return has_firebase_link()
      ? *resource_.firebase_link_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::FirebaseLink*>(&::google::analytics::admin::v1alpha::_FirebaseLink_default_instance_);
}
inline ::google::analytics::admin::v1alpha::FirebaseLink* ChangeHistoryChange_ChangeHistoryResource::mutable_firebase_link() {
  if (!has_firebase_link()) {
    clear_resource();
    set_has_firebase_link();
    resource_.firebase_link_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::FirebaseLink >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.firebase_link)
  return resource_.firebase_link_;
}

// .google.analytics.admin.v1alpha.GoogleAdsLink google_ads_link = 7;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_google_ads_link() const {
  return resource_case() == kGoogleAdsLink;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_google_ads_link() {
  _oneof_case_[0] = kGoogleAdsLink;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_google_ads_link() {
  if (has_google_ads_link()) {
    delete resource_.google_ads_link_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::GoogleAdsLink* ChangeHistoryChange_ChangeHistoryResource::release_google_ads_link() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.google_ads_link)
  if (has_google_ads_link()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::GoogleAdsLink* temp = resource_.google_ads_link_;
    resource_.google_ads_link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::GoogleAdsLink& ChangeHistoryChange_ChangeHistoryResource::google_ads_link() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.google_ads_link)
  return has_google_ads_link()
      ? *resource_.google_ads_link_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::GoogleAdsLink*>(&::google::analytics::admin::v1alpha::_GoogleAdsLink_default_instance_);
}
inline ::google::analytics::admin::v1alpha::GoogleAdsLink* ChangeHistoryChange_ChangeHistoryResource::mutable_google_ads_link() {
  if (!has_google_ads_link()) {
    clear_resource();
    set_has_google_ads_link();
    resource_.google_ads_link_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::GoogleAdsLink >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.google_ads_link)
  return resource_.google_ads_link_;
}

// .google.analytics.admin.v1alpha.GoogleSignalsSettings google_signals_settings = 8;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_google_signals_settings() const {
  return resource_case() == kGoogleSignalsSettings;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_google_signals_settings() {
  _oneof_case_[0] = kGoogleSignalsSettings;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_google_signals_settings() {
  if (has_google_signals_settings()) {
    delete resource_.google_signals_settings_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::GoogleSignalsSettings* ChangeHistoryChange_ChangeHistoryResource::release_google_signals_settings() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.google_signals_settings)
  if (has_google_signals_settings()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::GoogleSignalsSettings* temp = resource_.google_signals_settings_;
    resource_.google_signals_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::GoogleSignalsSettings& ChangeHistoryChange_ChangeHistoryResource::google_signals_settings() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.google_signals_settings)
  return has_google_signals_settings()
      ? *resource_.google_signals_settings_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::GoogleSignalsSettings*>(&::google::analytics::admin::v1alpha::_GoogleSignalsSettings_default_instance_);
}
inline ::google::analytics::admin::v1alpha::GoogleSignalsSettings* ChangeHistoryChange_ChangeHistoryResource::mutable_google_signals_settings() {
  if (!has_google_signals_settings()) {
    clear_resource();
    set_has_google_signals_settings();
    resource_.google_signals_settings_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::GoogleSignalsSettings >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.google_signals_settings)
  return resource_.google_signals_settings_;
}

// .google.analytics.admin.v1alpha.ConversionEvent conversion_event = 11;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_conversion_event() const {
  return resource_case() == kConversionEvent;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_conversion_event() {
  _oneof_case_[0] = kConversionEvent;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_conversion_event() {
  if (has_conversion_event()) {
    delete resource_.conversion_event_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::ConversionEvent* ChangeHistoryChange_ChangeHistoryResource::release_conversion_event() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.conversion_event)
  if (has_conversion_event()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::ConversionEvent* temp = resource_.conversion_event_;
    resource_.conversion_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::ConversionEvent& ChangeHistoryChange_ChangeHistoryResource::conversion_event() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.conversion_event)
  return has_conversion_event()
      ? *resource_.conversion_event_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::ConversionEvent*>(&::google::analytics::admin::v1alpha::_ConversionEvent_default_instance_);
}
inline ::google::analytics::admin::v1alpha::ConversionEvent* ChangeHistoryChange_ChangeHistoryResource::mutable_conversion_event() {
  if (!has_conversion_event()) {
    clear_resource();
    set_has_conversion_event();
    resource_.conversion_event_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::ConversionEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.conversion_event)
  return resource_.conversion_event_;
}

// .google.analytics.admin.v1alpha.MeasurementProtocolSecret measurement_protocol_secret = 12;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_measurement_protocol_secret() const {
  return resource_case() == kMeasurementProtocolSecret;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_measurement_protocol_secret() {
  _oneof_case_[0] = kMeasurementProtocolSecret;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_measurement_protocol_secret() {
  if (has_measurement_protocol_secret()) {
    delete resource_.measurement_protocol_secret_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::MeasurementProtocolSecret* ChangeHistoryChange_ChangeHistoryResource::release_measurement_protocol_secret() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.measurement_protocol_secret)
  if (has_measurement_protocol_secret()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::MeasurementProtocolSecret* temp = resource_.measurement_protocol_secret_;
    resource_.measurement_protocol_secret_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::MeasurementProtocolSecret& ChangeHistoryChange_ChangeHistoryResource::measurement_protocol_secret() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.measurement_protocol_secret)
  return has_measurement_protocol_secret()
      ? *resource_.measurement_protocol_secret_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::MeasurementProtocolSecret*>(&::google::analytics::admin::v1alpha::_MeasurementProtocolSecret_default_instance_);
}
inline ::google::analytics::admin::v1alpha::MeasurementProtocolSecret* ChangeHistoryChange_ChangeHistoryResource::mutable_measurement_protocol_secret() {
  if (!has_measurement_protocol_secret()) {
    clear_resource();
    set_has_measurement_protocol_secret();
    resource_.measurement_protocol_secret_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::MeasurementProtocolSecret >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.measurement_protocol_secret)
  return resource_.measurement_protocol_secret_;
}

// .google.analytics.admin.v1alpha.CustomDimension custom_dimension = 13;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_custom_dimension() const {
  return resource_case() == kCustomDimension;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_custom_dimension() {
  _oneof_case_[0] = kCustomDimension;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_custom_dimension() {
  if (has_custom_dimension()) {
    delete resource_.custom_dimension_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::CustomDimension* ChangeHistoryChange_ChangeHistoryResource::release_custom_dimension() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.custom_dimension)
  if (has_custom_dimension()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::CustomDimension* temp = resource_.custom_dimension_;
    resource_.custom_dimension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::CustomDimension& ChangeHistoryChange_ChangeHistoryResource::custom_dimension() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.custom_dimension)
  return has_custom_dimension()
      ? *resource_.custom_dimension_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::CustomDimension*>(&::google::analytics::admin::v1alpha::_CustomDimension_default_instance_);
}
inline ::google::analytics::admin::v1alpha::CustomDimension* ChangeHistoryChange_ChangeHistoryResource::mutable_custom_dimension() {
  if (!has_custom_dimension()) {
    clear_resource();
    set_has_custom_dimension();
    resource_.custom_dimension_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::CustomDimension >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.custom_dimension)
  return resource_.custom_dimension_;
}

// .google.analytics.admin.v1alpha.CustomMetric custom_metric = 14;
inline bool ChangeHistoryChange_ChangeHistoryResource::has_custom_metric() const {
  return resource_case() == kCustomMetric;
}
inline void ChangeHistoryChange_ChangeHistoryResource::set_has_custom_metric() {
  _oneof_case_[0] = kCustomMetric;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_custom_metric() {
  if (has_custom_metric()) {
    delete resource_.custom_metric_;
    clear_has_resource();
  }
}
inline ::google::analytics::admin::v1alpha::CustomMetric* ChangeHistoryChange_ChangeHistoryResource::release_custom_metric() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.custom_metric)
  if (has_custom_metric()) {
    clear_has_resource();
      ::google::analytics::admin::v1alpha::CustomMetric* temp = resource_.custom_metric_;
    resource_.custom_metric_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::analytics::admin::v1alpha::CustomMetric& ChangeHistoryChange_ChangeHistoryResource::custom_metric() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.custom_metric)
  return has_custom_metric()
      ? *resource_.custom_metric_
      : *reinterpret_cast< ::google::analytics::admin::v1alpha::CustomMetric*>(&::google::analytics::admin::v1alpha::_CustomMetric_default_instance_);
}
inline ::google::analytics::admin::v1alpha::CustomMetric* ChangeHistoryChange_ChangeHistoryResource::mutable_custom_metric() {
  if (!has_custom_metric()) {
    clear_resource();
    set_has_custom_metric();
    resource_.custom_metric_ = CreateMaybeMessage< ::google::analytics::admin::v1alpha::CustomMetric >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource.custom_metric)
  return resource_.custom_metric_;
}

inline bool ChangeHistoryChange_ChangeHistoryResource::has_resource() const {
  return resource_case() != RESOURCE_NOT_SET;
}
inline void ChangeHistoryChange_ChangeHistoryResource::clear_has_resource() {
  _oneof_case_[0] = RESOURCE_NOT_SET;
}
inline ChangeHistoryChange_ChangeHistoryResource::ResourceCase ChangeHistoryChange_ChangeHistoryResource::resource_case() const {
  return ChangeHistoryChange_ChangeHistoryResource::ResourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChangeHistoryChange

// string resource = 1;
inline void ChangeHistoryChange::clear_resource() {
  resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeHistoryChange::resource() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
  return resource_.GetNoArena();
}
inline void ChangeHistoryChange::set_resource(const ::std::string& value) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
}
#if LANG_CXX11
inline void ChangeHistoryChange::set_resource(::std::string&& value) {
  
  resource_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
}
#endif
inline void ChangeHistoryChange::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
}
inline void ChangeHistoryChange::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
}
inline ::std::string* ChangeHistoryChange::mutable_resource() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
  return resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeHistoryChange::release_resource() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
  
  return resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeHistoryChange::set_allocated_resource(::std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ChangeHistoryChange.resource)
}

// .google.analytics.admin.v1alpha.ActionType action = 2;
inline void ChangeHistoryChange::clear_action() {
  action_ = 0;
}
inline ::google::analytics::admin::v1alpha::ActionType ChangeHistoryChange::action() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.action)
  return static_cast< ::google::analytics::admin::v1alpha::ActionType >(action_);
}
inline void ChangeHistoryChange::set_action(::google::analytics::admin::v1alpha::ActionType value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ChangeHistoryChange.action)
}

// .google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource resource_before_change = 3;
inline bool ChangeHistoryChange::has_resource_before_change() const {
  return this != internal_default_instance() && resource_before_change_ != nullptr;
}
inline void ChangeHistoryChange::clear_resource_before_change() {
  if (GetArenaNoVirtual() == nullptr && resource_before_change_ != nullptr) {
    delete resource_before_change_;
  }
  resource_before_change_ = nullptr;
}
inline const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource& ChangeHistoryChange::resource_before_change() const {
  const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* p = resource_before_change_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_before_change)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource*>(
      &::google::analytics::admin::v1alpha::_ChangeHistoryChange_ChangeHistoryResource_default_instance_);
}
inline ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* ChangeHistoryChange::release_resource_before_change() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_before_change)
  
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* temp = resource_before_change_;
  resource_before_change_ = nullptr;
  return temp;
}
inline ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* ChangeHistoryChange::mutable_resource_before_change() {
  
  if (resource_before_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource>(GetArenaNoVirtual());
    resource_before_change_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_before_change)
  return resource_before_change_;
}
inline void ChangeHistoryChange::set_allocated_resource_before_change(::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* resource_before_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_before_change_;
  }
  if (resource_before_change) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource_before_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_before_change, submessage_arena);
    }
    
  } else {
    
  }
  resource_before_change_ = resource_before_change;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_before_change)
}

// .google.analytics.admin.v1alpha.ChangeHistoryChange.ChangeHistoryResource resource_after_change = 4;
inline bool ChangeHistoryChange::has_resource_after_change() const {
  return this != internal_default_instance() && resource_after_change_ != nullptr;
}
inline void ChangeHistoryChange::clear_resource_after_change() {
  if (GetArenaNoVirtual() == nullptr && resource_after_change_ != nullptr) {
    delete resource_after_change_;
  }
  resource_after_change_ = nullptr;
}
inline const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource& ChangeHistoryChange::resource_after_change() const {
  const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* p = resource_after_change_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_after_change)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource*>(
      &::google::analytics::admin::v1alpha::_ChangeHistoryChange_ChangeHistoryResource_default_instance_);
}
inline ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* ChangeHistoryChange::release_resource_after_change() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_after_change)
  
  ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* temp = resource_after_change_;
  resource_after_change_ = nullptr;
  return temp;
}
inline ::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* ChangeHistoryChange::mutable_resource_after_change() {
  
  if (resource_after_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource>(GetArenaNoVirtual());
    resource_after_change_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_after_change)
  return resource_after_change_;
}
inline void ChangeHistoryChange::set_allocated_resource_after_change(::google::analytics::admin::v1alpha::ChangeHistoryChange_ChangeHistoryResource* resource_after_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_after_change_;
  }
  if (resource_after_change) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource_after_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_after_change, submessage_arena);
    }
    
  } else {
    
  }
  resource_after_change_ = resource_after_change;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ChangeHistoryChange.resource_after_change)
}

// -------------------------------------------------------------------

// ConversionEvent

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ConversionEvent::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConversionEvent::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ConversionEvent.name)
  return name_.GetNoArena();
}
inline void ConversionEvent::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ConversionEvent.name)
}
#if LANG_CXX11
inline void ConversionEvent::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.ConversionEvent.name)
}
#endif
inline void ConversionEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.ConversionEvent.name)
}
inline void ConversionEvent::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.ConversionEvent.name)
}
inline ::std::string* ConversionEvent::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ConversionEvent.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConversionEvent::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ConversionEvent.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConversionEvent::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ConversionEvent.name)
}

// string event_name = 2 [(.google.api.field_behavior) = IMMUTABLE];
inline void ConversionEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConversionEvent::event_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ConversionEvent.event_name)
  return event_name_.GetNoArena();
}
inline void ConversionEvent::set_event_name(const ::std::string& value) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ConversionEvent.event_name)
}
#if LANG_CXX11
inline void ConversionEvent::set_event_name(::std::string&& value) {
  
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.ConversionEvent.event_name)
}
#endif
inline void ConversionEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.ConversionEvent.event_name)
}
inline void ConversionEvent::set_event_name(const char* value, size_t size) {
  
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.ConversionEvent.event_name)
}
inline ::std::string* ConversionEvent::mutable_event_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ConversionEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConversionEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ConversionEvent.event_name)
  
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConversionEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ConversionEvent.event_name)
}

// .google.protobuf.Timestamp create_time = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool ConversionEvent::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ConversionEvent::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ConversionEvent.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ConversionEvent::release_create_time() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.ConversionEvent.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ConversionEvent::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.ConversionEvent.create_time)
  return create_time_;
}
inline void ConversionEvent::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.ConversionEvent.create_time)
}

// bool is_deletable = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void ConversionEvent::clear_is_deletable() {
  is_deletable_ = false;
}
inline bool ConversionEvent::is_deletable() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.ConversionEvent.is_deletable)
  return is_deletable_;
}
inline void ConversionEvent::set_is_deletable(bool value) {
  
  is_deletable_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.ConversionEvent.is_deletable)
}

// -------------------------------------------------------------------

// GoogleSignalsSettings

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void GoogleSignalsSettings::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoogleSignalsSettings::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
  return name_.GetNoArena();
}
inline void GoogleSignalsSettings::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
}
#if LANG_CXX11
inline void GoogleSignalsSettings::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
}
#endif
inline void GoogleSignalsSettings::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
}
inline void GoogleSignalsSettings::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
}
inline ::std::string* GoogleSignalsSettings::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoogleSignalsSettings::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleSignalsSettings::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.GoogleSignalsSettings.name)
}

// .google.analytics.admin.v1alpha.GoogleSignalsState state = 3;
inline void GoogleSignalsSettings::clear_state() {
  state_ = 0;
}
inline ::google::analytics::admin::v1alpha::GoogleSignalsState GoogleSignalsSettings::state() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleSignalsSettings.state)
  return static_cast< ::google::analytics::admin::v1alpha::GoogleSignalsState >(state_);
}
inline void GoogleSignalsSettings::set_state(::google::analytics::admin::v1alpha::GoogleSignalsState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GoogleSignalsSettings.state)
}

// .google.analytics.admin.v1alpha.GoogleSignalsConsent consent = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void GoogleSignalsSettings::clear_consent() {
  consent_ = 0;
}
inline ::google::analytics::admin::v1alpha::GoogleSignalsConsent GoogleSignalsSettings::consent() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.GoogleSignalsSettings.consent)
  return static_cast< ::google::analytics::admin::v1alpha::GoogleSignalsConsent >(consent_);
}
inline void GoogleSignalsSettings::set_consent(::google::analytics::admin::v1alpha::GoogleSignalsConsent value) {
  
  consent_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.GoogleSignalsSettings.consent)
}

// -------------------------------------------------------------------

// CustomDimension

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CustomDimension::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomDimension::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomDimension.name)
  return name_.GetNoArena();
}
inline void CustomDimension::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomDimension.name)
}
#if LANG_CXX11
inline void CustomDimension::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomDimension.name)
}
#endif
inline void CustomDimension::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomDimension.name)
}
inline void CustomDimension::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomDimension.name)
}
inline ::std::string* CustomDimension::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomDimension.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomDimension::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomDimension.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDimension::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomDimension.name)
}

// string parameter_name = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
inline void CustomDimension::clear_parameter_name() {
  parameter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomDimension::parameter_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
  return parameter_name_.GetNoArena();
}
inline void CustomDimension::set_parameter_name(const ::std::string& value) {
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
}
#if LANG_CXX11
inline void CustomDimension::set_parameter_name(::std::string&& value) {
  
  parameter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
}
#endif
inline void CustomDimension::set_parameter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
}
inline void CustomDimension::set_parameter_name(const char* value, size_t size) {
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
}
inline ::std::string* CustomDimension::mutable_parameter_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
  return parameter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomDimension::release_parameter_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
  
  return parameter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDimension::set_allocated_parameter_name(::std::string* parameter_name) {
  if (parameter_name != nullptr) {
    
  } else {
    
  }
  parameter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomDimension.parameter_name)
}

// string display_name = 3 [(.google.api.field_behavior) = REQUIRED];
inline void CustomDimension::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomDimension::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomDimension.display_name)
  return display_name_.GetNoArena();
}
inline void CustomDimension::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomDimension.display_name)
}
#if LANG_CXX11
inline void CustomDimension::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomDimension.display_name)
}
#endif
inline void CustomDimension::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomDimension.display_name)
}
inline void CustomDimension::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomDimension.display_name)
}
inline ::std::string* CustomDimension::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomDimension.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomDimension::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomDimension.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDimension::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomDimension.display_name)
}

// string description = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void CustomDimension::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomDimension::description() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomDimension.description)
  return description_.GetNoArena();
}
inline void CustomDimension::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomDimension.description)
}
#if LANG_CXX11
inline void CustomDimension::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomDimension.description)
}
#endif
inline void CustomDimension::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomDimension.description)
}
inline void CustomDimension::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomDimension.description)
}
inline ::std::string* CustomDimension::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomDimension.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomDimension::release_description() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomDimension.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDimension::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomDimension.description)
}

// .google.analytics.admin.v1alpha.CustomDimension.DimensionScope scope = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
inline void CustomDimension::clear_scope() {
  scope_ = 0;
}
inline ::google::analytics::admin::v1alpha::CustomDimension_DimensionScope CustomDimension::scope() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomDimension.scope)
  return static_cast< ::google::analytics::admin::v1alpha::CustomDimension_DimensionScope >(scope_);
}
inline void CustomDimension::set_scope(::google::analytics::admin::v1alpha::CustomDimension_DimensionScope value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomDimension.scope)
}

// bool disallow_ads_personalization = 6 [(.google.api.field_behavior) = OPTIONAL];
inline void CustomDimension::clear_disallow_ads_personalization() {
  disallow_ads_personalization_ = false;
}
inline bool CustomDimension::disallow_ads_personalization() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomDimension.disallow_ads_personalization)
  return disallow_ads_personalization_;
}
inline void CustomDimension::set_disallow_ads_personalization(bool value) {
  
  disallow_ads_personalization_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomDimension.disallow_ads_personalization)
}

// -------------------------------------------------------------------

// CustomMetric

// string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void CustomMetric::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomMetric::name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomMetric.name)
  return name_.GetNoArena();
}
inline void CustomMetric::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomMetric.name)
}
#if LANG_CXX11
inline void CustomMetric::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomMetric.name)
}
#endif
inline void CustomMetric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomMetric.name)
}
inline void CustomMetric::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomMetric.name)
}
inline ::std::string* CustomMetric::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomMetric.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomMetric::release_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomMetric.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomMetric::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomMetric.name)
}

// string parameter_name = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
inline void CustomMetric::clear_parameter_name() {
  parameter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomMetric::parameter_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
  return parameter_name_.GetNoArena();
}
inline void CustomMetric::set_parameter_name(const ::std::string& value) {
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
}
#if LANG_CXX11
inline void CustomMetric::set_parameter_name(::std::string&& value) {
  
  parameter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
}
#endif
inline void CustomMetric::set_parameter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
}
inline void CustomMetric::set_parameter_name(const char* value, size_t size) {
  
  parameter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
}
inline ::std::string* CustomMetric::mutable_parameter_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
  return parameter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomMetric::release_parameter_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
  
  return parameter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomMetric::set_allocated_parameter_name(::std::string* parameter_name) {
  if (parameter_name != nullptr) {
    
  } else {
    
  }
  parameter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomMetric.parameter_name)
}

// string display_name = 3 [(.google.api.field_behavior) = REQUIRED];
inline void CustomMetric::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomMetric::display_name() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomMetric.display_name)
  return display_name_.GetNoArena();
}
inline void CustomMetric::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomMetric.display_name)
}
#if LANG_CXX11
inline void CustomMetric::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomMetric.display_name)
}
#endif
inline void CustomMetric::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomMetric.display_name)
}
inline void CustomMetric::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomMetric.display_name)
}
inline ::std::string* CustomMetric::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomMetric.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomMetric::release_display_name() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomMetric.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomMetric::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomMetric.display_name)
}

// string description = 4 [(.google.api.field_behavior) = OPTIONAL];
inline void CustomMetric::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomMetric::description() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomMetric.description)
  return description_.GetNoArena();
}
inline void CustomMetric::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomMetric.description)
}
#if LANG_CXX11
inline void CustomMetric::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.analytics.admin.v1alpha.CustomMetric.description)
}
#endif
inline void CustomMetric::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.analytics.admin.v1alpha.CustomMetric.description)
}
inline void CustomMetric::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.analytics.admin.v1alpha.CustomMetric.description)
}
inline ::std::string* CustomMetric::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.analytics.admin.v1alpha.CustomMetric.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomMetric::release_description() {
  // @@protoc_insertion_point(field_release:google.analytics.admin.v1alpha.CustomMetric.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomMetric::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.analytics.admin.v1alpha.CustomMetric.description)
}

// .google.analytics.admin.v1alpha.CustomMetric.MeasurementUnit measurement_unit = 5 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
inline void CustomMetric::clear_measurement_unit() {
  measurement_unit_ = 0;
}
inline ::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit CustomMetric::measurement_unit() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomMetric.measurement_unit)
  return static_cast< ::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit >(measurement_unit_);
}
inline void CustomMetric::set_measurement_unit(::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit value) {
  
  measurement_unit_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomMetric.measurement_unit)
}

// .google.analytics.admin.v1alpha.CustomMetric.MetricScope scope = 6 [(.google.api.field_behavior) = REQUIRED, (.google.api.field_behavior) = IMMUTABLE];
inline void CustomMetric::clear_scope() {
  scope_ = 0;
}
inline ::google::analytics::admin::v1alpha::CustomMetric_MetricScope CustomMetric::scope() const {
  // @@protoc_insertion_point(field_get:google.analytics.admin.v1alpha.CustomMetric.scope)
  return static_cast< ::google::analytics::admin::v1alpha::CustomMetric_MetricScope >(scope_);
}
inline void CustomMetric::set_scope(::google::analytics::admin::v1alpha::CustomMetric_MetricScope value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:google.analytics.admin.v1alpha.CustomMetric.scope)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace admin
}  // namespace analytics
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::CustomDimension_DimensionScope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::CustomDimension_DimensionScope>() {
  return ::google::analytics::admin::v1alpha::CustomDimension_DimensionScope_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit>() {
  return ::google::analytics::admin::v1alpha::CustomMetric_MeasurementUnit_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::CustomMetric_MetricScope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::CustomMetric_MetricScope>() {
  return ::google::analytics::admin::v1alpha::CustomMetric_MetricScope_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::MaximumUserAccess> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::MaximumUserAccess>() {
  return ::google::analytics::admin::v1alpha::MaximumUserAccess_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::IndustryCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::IndustryCategory>() {
  return ::google::analytics::admin::v1alpha::IndustryCategory_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::ActorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::ActorType>() {
  return ::google::analytics::admin::v1alpha::ActorType_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::ActionType>() {
  return ::google::analytics::admin::v1alpha::ActionType_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::ChangeHistoryResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::ChangeHistoryResourceType>() {
  return ::google::analytics::admin::v1alpha::ChangeHistoryResourceType_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::GoogleSignalsState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::GoogleSignalsState>() {
  return ::google::analytics::admin::v1alpha::GoogleSignalsState_descriptor();
}
template <> struct is_proto_enum< ::google::analytics::admin::v1alpha::GoogleSignalsConsent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::analytics::admin::v1alpha::GoogleSignalsConsent>() {
  return ::google::analytics::admin::v1alpha::GoogleSignalsConsent_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fanalytics_2fadmin_2fv1alpha_2fresources_2eproto
