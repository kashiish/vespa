// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/datastore/admin/v1/datastore_admin.proto
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdatastore_2fadmin_2fv1_2fdatastore_5fadmin_2eproto__INCLUDED
#define GRPC_google_2fdatastore_2fadmin_2fv1_2fdatastore_5fadmin_2eproto__INCLUDED

#include "google/datastore/admin/v1/datastore_admin.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace datastore {
namespace admin {
namespace v1 {

// Google Cloud Datastore Admin API
//
//
// The Datastore Admin API provides several admin services for Cloud Datastore.
//
// -----------------------------------------------------------------------------
// ## Concepts
//
// Project, namespace, kind, and entity as defined in the Google Cloud Datastore
// API.
//
// Operation: An Operation represents work being performed in the background.
//
// EntityFilter: Allows specifying a subset of entities in a project. This is
// specified as a combination of kinds and namespaces (either or both of which
// may be all).
//
// -----------------------------------------------------------------------------
// ## Services
//
// # Export/Import
//
// The Export/Import service provides the ability to copy all or a subset of
// entities to/from Google Cloud Storage.
//
// Exported data may be imported into Cloud Datastore for any Google Cloud
// Platform project. It is not restricted to the export source project. It is
// possible to export from one project and then import into another.
//
// Exported data can also be loaded into Google BigQuery for analysis.
//
// Exports and imports are performed asynchronously. An Operation resource is
// created for each export/import. The state (including any errors encountered)
// of the export/import may be queried via the Operation resource.
//
// # Index
//
// The index service manages Cloud Datastore composite indexes.
//
// Index creation and deletion are performed asynchronously.
// An Operation resource is created for each such asynchronous operation.
// The state of the operation (including any errors encountered)
// may be queried via the Operation resource.
//
// # Operation
//
// The Operations collection provides a record of actions performed for the
// specified project (including any operations in progress). Operations are not
// created directly but through calls on other collections or resources.
//
// An operation that is not yet done may be cancelled. The request to cancel is
// asynchronous and the operation may continue to run for some time after the
// request to cancel is made.
//
// An operation that is done may be deleted so that it is no longer listed as
// part of the Operation collection.
//
// ListOperations returns all pending operations, but not completed operations.
//
// Operations are created by service DatastoreAdmin,
// but are accessed via service google.longrunning.Operations.
class DatastoreAdmin final {
 public:
  static constexpr char const* service_full_name() {
    return "google.datastore.admin.v1.DatastoreAdmin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Exports a copy of all or a subset of entities from Google Cloud Datastore
    // to another storage system, such as Google Cloud Storage. Recent updates to
    // entities may not be reflected in the export. The export occurs in the
    // background and its progress can be monitored and managed via the
    // Operation resource that is created. The output of an export may only be
    // used once the associated operation is done. If an export operation is
    // cancelled before completion it may leave partial data behind in Google
    // Cloud Storage.
    virtual ::grpc::Status ExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncExportEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncExportEntitiesRaw(context, request, cq));
    }
    // Imports entities into Google Cloud Datastore. Existing entities with the
    // same key are overwritten. The import occurs in the background and its
    // progress can be monitored and managed via the Operation resource that is
    // created. If an ImportEntities operation is cancelled, it is possible
    // that a subset of the data has already been imported to Cloud Datastore.
    virtual ::grpc::Status ImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncImportEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncImportEntitiesRaw(context, request, cq));
    }
    // Creates the specified index.
    // A newly created index's initial state is `CREATING`. On completion of the
    // returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
    // If the index already exists, the call will return an `ALREADY_EXISTS`
    // status.
    //
    // During index creation, the process could result in an error, in which
    // case the index will move to the `ERROR` state. The process can be recovered
    // by fixing the data that caused the error, removing the index with
    // [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex], then
    // re-creating the index with [create]
    // [google.datastore.admin.v1.DatastoreAdmin.CreateIndex].
    //
    // Indexes with a single property cannot be created.
    virtual ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    // Deletes an existing index.
    // An index can only be deleted if it is in a `READY` or `ERROR` state. On
    // successful execution of the request, the index will be in a `DELETING`
    // [state][google.datastore.admin.v1.Index.State]. And on completion of the
    // returned [google.longrunning.Operation][google.longrunning.Operation], the index will be removed.
    //
    // During index deletion, the process could result in an error, in which
    // case the index will move to the `ERROR` state. The process can be recovered
    // by fixing the data that caused the error, followed by calling
    // [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex] again.
    virtual ::grpc::Status DeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncDeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncDeleteIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncDeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncDeleteIndexRaw(context, request, cq));
    }
    // Gets an index.
    virtual ::grpc::Status GetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::google::datastore::admin::v1::Index* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::Index>> AsyncGetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::Index>>(AsyncGetIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::Index>> PrepareAsyncGetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::Index>>(PrepareAsyncGetIndexRaw(context, request, cq));
    }
    // Lists the indexes that match the specified filters.  Datastore uses an
    // eventually consistent query to fetch the list of indexes and may
    // occasionally return stale results.
    virtual ::grpc::Status ListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::google::datastore::admin::v1::ListIndexesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::ListIndexesResponse>> AsyncListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::ListIndexesResponse>>(AsyncListIndexesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::ListIndexesResponse>> PrepareAsyncListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::ListIndexesResponse>>(PrepareAsyncListIndexesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Exports a copy of all or a subset of entities from Google Cloud Datastore
      // to another storage system, such as Google Cloud Storage. Recent updates to
      // entities may not be reflected in the export. The export occurs in the
      // background and its progress can be monitored and managed via the
      // Operation resource that is created. The output of an export may only be
      // used once the associated operation is done. If an export operation is
      // cancelled before completion it may leave partial data behind in Google
      // Cloud Storage.
      virtual void ExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Imports entities into Google Cloud Datastore. Existing entities with the
      // same key are overwritten. The import occurs in the background and its
      // progress can be monitored and managed via the Operation resource that is
      // created. If an ImportEntities operation is cancelled, it is possible
      // that a subset of the data has already been imported to Cloud Datastore.
      virtual void ImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates the specified index.
      // A newly created index's initial state is `CREATING`. On completion of the
      // returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
      // If the index already exists, the call will return an `ALREADY_EXISTS`
      // status.
      //
      // During index creation, the process could result in an error, in which
      // case the index will move to the `ERROR` state. The process can be recovered
      // by fixing the data that caused the error, removing the index with
      // [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex], then
      // re-creating the index with [create]
      // [google.datastore.admin.v1.DatastoreAdmin.CreateIndex].
      //
      // Indexes with a single property cannot be created.
      virtual void CreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an existing index.
      // An index can only be deleted if it is in a `READY` or `ERROR` state. On
      // successful execution of the request, the index will be in a `DELETING`
      // [state][google.datastore.admin.v1.Index.State]. And on completion of the
      // returned [google.longrunning.Operation][google.longrunning.Operation], the index will be removed.
      //
      // During index deletion, the process could result in an error, in which
      // case the index will move to the `ERROR` state. The process can be recovered
      // by fixing the data that caused the error, followed by calling
      // [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex] again.
      virtual void DeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets an index.
      virtual void GetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest* request, ::google::datastore::admin::v1::Index* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest* request, ::google::datastore::admin::v1::Index* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists the indexes that match the specified filters.  Datastore uses an
      // eventually consistent query to fetch the list of indexes and may
      // occasionally return stale results.
      virtual void ListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest* request, ::google::datastore::admin::v1::ListIndexesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest* request, ::google::datastore::admin::v1::ListIndexesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncExportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncExportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncImportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncImportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::Index>* AsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::Index>* PrepareAsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::ListIndexesResponse>* AsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::admin::v1::ListIndexesResponse>* PrepareAsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncExportEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncExportEntitiesRaw(context, request, cq));
    }
    ::grpc::Status ImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncImportEntitiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncImportEntitiesRaw(context, request, cq));
    }
    ::grpc::Status CreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateIndexRaw(context, request, cq));
    }
    ::grpc::Status DeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncDeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncDeleteIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncDeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncDeleteIndexRaw(context, request, cq));
    }
    ::grpc::Status GetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::google::datastore::admin::v1::Index* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::Index>> AsyncGetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::Index>>(AsyncGetIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::Index>> PrepareAsyncGetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::Index>>(PrepareAsyncGetIndexRaw(context, request, cq));
    }
    ::grpc::Status ListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::google::datastore::admin::v1::ListIndexesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::ListIndexesResponse>> AsyncListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::ListIndexesResponse>>(AsyncListIndexesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::ListIndexesResponse>> PrepareAsyncListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::ListIndexesResponse>>(PrepareAsyncListIndexesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void ExportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void ImportEntities(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreateIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest* request, ::google::longrunning::Operation* response, std::function<void(::grpc::Status)>) override;
      void DeleteIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest* request, ::google::longrunning::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest* request, ::google::datastore::admin::v1::Index* response, std::function<void(::grpc::Status)>) override;
      void GetIndex(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest* request, ::google::datastore::admin::v1::Index* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest* request, ::google::datastore::admin::v1::ListIndexesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListIndexes(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest* request, ::google::datastore::admin::v1::ListIndexesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncExportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncExportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncImportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncImportEntitiesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncDeleteIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::Index>* AsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::Index>* PrepareAsyncGetIndexRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::GetIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::ListIndexesResponse>* AsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::admin::v1::ListIndexesResponse>* PrepareAsyncListIndexesRaw(::grpc::ClientContext* context, const ::google::datastore::admin::v1::ListIndexesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExportEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_ImportEntities_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_ListIndexes_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Exports a copy of all or a subset of entities from Google Cloud Datastore
    // to another storage system, such as Google Cloud Storage. Recent updates to
    // entities may not be reflected in the export. The export occurs in the
    // background and its progress can be monitored and managed via the
    // Operation resource that is created. The output of an export may only be
    // used once the associated operation is done. If an export operation is
    // cancelled before completion it may leave partial data behind in Google
    // Cloud Storage.
    virtual ::grpc::Status ExportEntities(::grpc::ServerContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest* request, ::google::longrunning::Operation* response);
    // Imports entities into Google Cloud Datastore. Existing entities with the
    // same key are overwritten. The import occurs in the background and its
    // progress can be monitored and managed via the Operation resource that is
    // created. If an ImportEntities operation is cancelled, it is possible
    // that a subset of the data has already been imported to Cloud Datastore.
    virtual ::grpc::Status ImportEntities(::grpc::ServerContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest* request, ::google::longrunning::Operation* response);
    // Creates the specified index.
    // A newly created index's initial state is `CREATING`. On completion of the
    // returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
    // If the index already exists, the call will return an `ALREADY_EXISTS`
    // status.
    //
    // During index creation, the process could result in an error, in which
    // case the index will move to the `ERROR` state. The process can be recovered
    // by fixing the data that caused the error, removing the index with
    // [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex], then
    // re-creating the index with [create]
    // [google.datastore.admin.v1.DatastoreAdmin.CreateIndex].
    //
    // Indexes with a single property cannot be created.
    virtual ::grpc::Status CreateIndex(::grpc::ServerContext* context, const ::google::datastore::admin::v1::CreateIndexRequest* request, ::google::longrunning::Operation* response);
    // Deletes an existing index.
    // An index can only be deleted if it is in a `READY` or `ERROR` state. On
    // successful execution of the request, the index will be in a `DELETING`
    // [state][google.datastore.admin.v1.Index.State]. And on completion of the
    // returned [google.longrunning.Operation][google.longrunning.Operation], the index will be removed.
    //
    // During index deletion, the process could result in an error, in which
    // case the index will move to the `ERROR` state. The process can be recovered
    // by fixing the data that caused the error, followed by calling
    // [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex] again.
    virtual ::grpc::Status DeleteIndex(::grpc::ServerContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest* request, ::google::longrunning::Operation* response);
    // Gets an index.
    virtual ::grpc::Status GetIndex(::grpc::ServerContext* context, const ::google::datastore::admin::v1::GetIndexRequest* request, ::google::datastore::admin::v1::Index* response);
    // Lists the indexes that match the specified filters.  Datastore uses an
    // eventually consistent query to fetch the list of indexes and may
    // occasionally return stale results.
    virtual ::grpc::Status ListIndexes(::grpc::ServerContext* context, const ::google::datastore::admin::v1::ListIndexesRequest* request, ::google::datastore::admin::v1::ListIndexesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExportEntities() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ExportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportEntities(::grpc::ServerContext* context, ::google::datastore::admin::v1::ExportEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ImportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ImportEntities() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ImportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ImportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImportEntities(::grpc::ServerContext* context, ::google::datastore::admin::v1::ImportEntitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateIndex() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::CreateIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::google::datastore::admin::v1::CreateIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::DeleteIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteIndex(::grpc::ServerContext* context, ::google::datastore::admin::v1::DeleteIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIndex() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::GetIndexRequest* /*request*/, ::google::datastore::admin::v1::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndex(::grpc::ServerContext* context, ::google::datastore::admin::v1::GetIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::admin::v1::Index>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListIndexes() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ListIndexesRequest* /*request*/, ::google::datastore::admin::v1::ListIndexesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIndexes(::grpc::ServerContext* context, ::google::datastore::admin::v1::ListIndexesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::admin::v1::ListIndexesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExportEntities<WithAsyncMethod_ImportEntities<WithAsyncMethod_CreateIndex<WithAsyncMethod_DeleteIndex<WithAsyncMethod_GetIndex<WithAsyncMethod_ListIndexes<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ExportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExportEntities() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::ExportEntitiesRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::admin::v1::ExportEntitiesRequest* request, ::google::longrunning::Operation* response) { return this->ExportEntities(context, request, response); }));}
    void SetMessageAllocatorFor_ExportEntities(
        ::grpc::MessageAllocator< ::google::datastore::admin::v1::ExportEntitiesRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::ExportEntitiesRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ExportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::admin::v1::ExportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ImportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ImportEntities() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::ImportEntitiesRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::admin::v1::ImportEntitiesRequest* request, ::google::longrunning::Operation* response) { return this->ImportEntities(context, request, response); }));}
    void SetMessageAllocatorFor_ImportEntities(
        ::grpc::MessageAllocator< ::google::datastore::admin::v1::ImportEntitiesRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::ImportEntitiesRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ImportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ImportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ImportEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::admin::v1::ImportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateIndex() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::CreateIndexRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::admin::v1::CreateIndexRequest* request, ::google::longrunning::Operation* response) { return this->CreateIndex(context, request, response); }));}
    void SetMessageAllocatorFor_CreateIndex(
        ::grpc::MessageAllocator< ::google::datastore::admin::v1::CreateIndexRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::CreateIndexRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::CreateIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::admin::v1::CreateIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::DeleteIndexRequest, ::google::longrunning::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::admin::v1::DeleteIndexRequest* request, ::google::longrunning::Operation* response) { return this->DeleteIndex(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteIndex(
        ::grpc::MessageAllocator< ::google::datastore::admin::v1::DeleteIndexRequest, ::google::longrunning::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::DeleteIndexRequest, ::google::longrunning::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::DeleteIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::admin::v1::DeleteIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIndex() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::GetIndexRequest, ::google::datastore::admin::v1::Index>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::admin::v1::GetIndexRequest* request, ::google::datastore::admin::v1::Index* response) { return this->GetIndex(context, request, response); }));}
    void SetMessageAllocatorFor_GetIndex(
        ::grpc::MessageAllocator< ::google::datastore::admin::v1::GetIndexRequest, ::google::datastore::admin::v1::Index>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::GetIndexRequest, ::google::datastore::admin::v1::Index>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::GetIndexRequest* /*request*/, ::google::datastore::admin::v1::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::admin::v1::GetIndexRequest* /*request*/, ::google::datastore::admin::v1::Index* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListIndexes() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::ListIndexesRequest, ::google::datastore::admin::v1::ListIndexesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::admin::v1::ListIndexesRequest* request, ::google::datastore::admin::v1::ListIndexesResponse* response) { return this->ListIndexes(context, request, response); }));}
    void SetMessageAllocatorFor_ListIndexes(
        ::grpc::MessageAllocator< ::google::datastore::admin::v1::ListIndexesRequest, ::google::datastore::admin::v1::ListIndexesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::admin::v1::ListIndexesRequest, ::google::datastore::admin::v1::ListIndexesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ListIndexesRequest* /*request*/, ::google::datastore::admin::v1::ListIndexesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListIndexes(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::admin::v1::ListIndexesRequest* /*request*/, ::google::datastore::admin::v1::ListIndexesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ExportEntities<WithCallbackMethod_ImportEntities<WithCallbackMethod_CreateIndex<WithCallbackMethod_DeleteIndex<WithCallbackMethod_GetIndex<WithCallbackMethod_ListIndexes<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExportEntities() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ExportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ImportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ImportEntities() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ImportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ImportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateIndex() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::CreateIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::DeleteIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIndex() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::GetIndexRequest* /*request*/, ::google::datastore::admin::v1::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListIndexes() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ListIndexesRequest* /*request*/, ::google::datastore::admin::v1::ListIndexesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExportEntities() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ExportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExportEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ImportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ImportEntities() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ImportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ImportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImportEntities(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateIndex() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::CreateIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::DeleteIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIndex() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::GetIndexRequest* /*request*/, ::google::datastore::admin::v1::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListIndexes() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ListIndexesRequest* /*request*/, ::google::datastore::admin::v1::ListIndexesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListIndexes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExportEntities() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExportEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ExportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExportEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ImportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ImportEntities() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ImportEntities(context, request, response); }));
    }
    ~WithRawCallbackMethod_ImportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ImportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ImportEntities(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateIndex() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::CreateIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::DeleteIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIndex() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::GetIndexRequest* /*request*/, ::google::datastore::admin::v1::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListIndexes() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListIndexes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ListIndexesRequest* /*request*/, ::google::datastore::admin::v1::ListIndexesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListIndexes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExportEntities() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::admin::v1::ExportEntitiesRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::admin::v1::ExportEntitiesRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedExportEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ExportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExportEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::admin::v1::ExportEntitiesRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ImportEntities : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ImportEntities() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::admin::v1::ImportEntitiesRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::admin::v1::ImportEntitiesRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedImportEntities(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ImportEntities() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ImportEntities(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ImportEntitiesRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedImportEntities(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::admin::v1::ImportEntitiesRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateIndex() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::admin::v1::CreateIndexRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::admin::v1::CreateIndexRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedCreateIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::CreateIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::admin::v1::CreateIndexRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteIndex() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::admin::v1::DeleteIndexRequest, ::google::longrunning::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::admin::v1::DeleteIndexRequest, ::google::longrunning::Operation>* streamer) {
                       return this->StreamedDeleteIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::DeleteIndexRequest* /*request*/, ::google::longrunning::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::admin::v1::DeleteIndexRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIndex() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::admin::v1::GetIndexRequest, ::google::datastore::admin::v1::Index>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::admin::v1::GetIndexRequest, ::google::datastore::admin::v1::Index>* streamer) {
                       return this->StreamedGetIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIndex(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::GetIndexRequest* /*request*/, ::google::datastore::admin::v1::Index* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::admin::v1::GetIndexRequest,::google::datastore::admin::v1::Index>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListIndexes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListIndexes() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::admin::v1::ListIndexesRequest, ::google::datastore::admin::v1::ListIndexesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::admin::v1::ListIndexesRequest, ::google::datastore::admin::v1::ListIndexesResponse>* streamer) {
                       return this->StreamedListIndexes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListIndexes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListIndexes(::grpc::ServerContext* /*context*/, const ::google::datastore::admin::v1::ListIndexesRequest* /*request*/, ::google::datastore::admin::v1::ListIndexesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListIndexes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::admin::v1::ListIndexesRequest,::google::datastore::admin::v1::ListIndexesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExportEntities<WithStreamedUnaryMethod_ImportEntities<WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_DeleteIndex<WithStreamedUnaryMethod_GetIndex<WithStreamedUnaryMethod_ListIndexes<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExportEntities<WithStreamedUnaryMethod_ImportEntities<WithStreamedUnaryMethod_CreateIndex<WithStreamedUnaryMethod_DeleteIndex<WithStreamedUnaryMethod_GetIndex<WithStreamedUnaryMethod_ListIndexes<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace admin
}  // namespace datastore
}  // namespace google


#endif  // GRPC_google_2fdatastore_2fadmin_2fv1_2fdatastore_5fadmin_2eproto__INCLUDED
