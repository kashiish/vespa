// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/datastore/v1/datastore.proto
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fdatastore_2fv1_2fdatastore_2eproto__INCLUDED
#define GRPC_google_2fdatastore_2fv1_2fdatastore_2eproto__INCLUDED

#include "google/datastore/v1/datastore.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace datastore {
namespace v1 {

// Each RPC normalizes the partition IDs of the keys in its input entities,
// and always returns entities with keys with normalized partition IDs.
// This applies to all keys and entities, including those in values, except keys
// with both an empty path and an empty or unset partition ID. Normalization of
// input keys sets the project ID (if not already set) to the project ID from
// the request.
//
class Datastore final {
 public:
  static constexpr char const* service_full_name() {
    return "google.datastore.v1.Datastore";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Looks up entities by key.
    virtual ::grpc::Status Lookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::google::datastore::v1::LookupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::LookupResponse>> AsyncLookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::LookupResponse>>(AsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::LookupResponse>> PrepareAsyncLookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::LookupResponse>>(PrepareAsyncLookupRaw(context, request, cq));
    }
    // Queries for entities.
    virtual ::grpc::Status RunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::google::datastore::v1::RunQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RunQueryResponse>> AsyncRunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RunQueryResponse>>(AsyncRunQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RunQueryResponse>> PrepareAsyncRunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RunQueryResponse>>(PrepareAsyncRunQueryRaw(context, request, cq));
    }
    // Begins a new transaction.
    virtual ::grpc::Status BeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::google::datastore::v1::BeginTransactionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::BeginTransactionResponse>> AsyncBeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::BeginTransactionResponse>>(AsyncBeginTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::BeginTransactionResponse>> PrepareAsyncBeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::BeginTransactionResponse>>(PrepareAsyncBeginTransactionRaw(context, request, cq));
    }
    // Commits a transaction, optionally creating, deleting or modifying some
    // entities.
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::google::datastore::v1::CommitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::CommitResponse>> AsyncCommit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::CommitResponse>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::CommitResponse>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::CommitResponse>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    // Rolls back a transaction.
    virtual ::grpc::Status Rollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::google::datastore::v1::RollbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RollbackResponse>> AsyncRollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RollbackResponse>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RollbackResponse>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RollbackResponse>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    // Allocates IDs for the given keys, which is useful for referencing an entity
    // before it is inserted.
    virtual ::grpc::Status AllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::google::datastore::v1::AllocateIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::AllocateIdsResponse>> AsyncAllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::AllocateIdsResponse>>(AsyncAllocateIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::AllocateIdsResponse>> PrepareAsyncAllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::AllocateIdsResponse>>(PrepareAsyncAllocateIdsRaw(context, request, cq));
    }
    // Prevents the supplied keys' IDs from being auto-allocated by Cloud
    // Datastore.
    virtual ::grpc::Status ReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::google::datastore::v1::ReserveIdsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::ReserveIdsResponse>> AsyncReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::ReserveIdsResponse>>(AsyncReserveIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::ReserveIdsResponse>> PrepareAsyncReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::ReserveIdsResponse>>(PrepareAsyncReserveIdsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Looks up entities by key.
      virtual void Lookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest* request, ::google::datastore::v1::LookupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Lookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest* request, ::google::datastore::v1::LookupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Queries for entities.
      virtual void RunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest* request, ::google::datastore::v1::RunQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest* request, ::google::datastore::v1::RunQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Begins a new transaction.
      virtual void BeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest* request, ::google::datastore::v1::BeginTransactionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest* request, ::google::datastore::v1::BeginTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Commits a transaction, optionally creating, deleting or modifying some
      // entities.
      virtual void Commit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest* request, ::google::datastore::v1::CommitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Commit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest* request, ::google::datastore::v1::CommitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Rolls back a transaction.
      virtual void Rollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest* request, ::google::datastore::v1::RollbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest* request, ::google::datastore::v1::RollbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Allocates IDs for the given keys, which is useful for referencing an entity
      // before it is inserted.
      virtual void AllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest* request, ::google::datastore::v1::AllocateIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest* request, ::google::datastore::v1::AllocateIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Prevents the supplied keys' IDs from being auto-allocated by Cloud
      // Datastore.
      virtual void ReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest* request, ::google::datastore::v1::ReserveIdsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest* request, ::google::datastore::v1::ReserveIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::LookupResponse>* AsyncLookupRaw(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::LookupResponse>* PrepareAsyncLookupRaw(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RunQueryResponse>* AsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RunQueryResponse>* PrepareAsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::BeginTransactionResponse>* AsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::BeginTransactionResponse>* PrepareAsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::CommitResponse>* AsyncCommitRaw(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::CommitResponse>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RollbackResponse>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::RollbackResponse>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::AllocateIdsResponse>* AsyncAllocateIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::AllocateIdsResponse>* PrepareAsyncAllocateIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::ReserveIdsResponse>* AsyncReserveIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::datastore::v1::ReserveIdsResponse>* PrepareAsyncReserveIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Lookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::google::datastore::v1::LookupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::LookupResponse>> AsyncLookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::LookupResponse>>(AsyncLookupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::LookupResponse>> PrepareAsyncLookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::LookupResponse>>(PrepareAsyncLookupRaw(context, request, cq));
    }
    ::grpc::Status RunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::google::datastore::v1::RunQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RunQueryResponse>> AsyncRunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RunQueryResponse>>(AsyncRunQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RunQueryResponse>> PrepareAsyncRunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RunQueryResponse>>(PrepareAsyncRunQueryRaw(context, request, cq));
    }
    ::grpc::Status BeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::google::datastore::v1::BeginTransactionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::BeginTransactionResponse>> AsyncBeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::BeginTransactionResponse>>(AsyncBeginTransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::BeginTransactionResponse>> PrepareAsyncBeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::BeginTransactionResponse>>(PrepareAsyncBeginTransactionRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::google::datastore::v1::CommitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::CommitResponse>> AsyncCommit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::CommitResponse>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::CommitResponse>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::CommitResponse>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    ::grpc::Status Rollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::google::datastore::v1::RollbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RollbackResponse>> AsyncRollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RollbackResponse>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RollbackResponse>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RollbackResponse>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    ::grpc::Status AllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::google::datastore::v1::AllocateIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::AllocateIdsResponse>> AsyncAllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::AllocateIdsResponse>>(AsyncAllocateIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::AllocateIdsResponse>> PrepareAsyncAllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::AllocateIdsResponse>>(PrepareAsyncAllocateIdsRaw(context, request, cq));
    }
    ::grpc::Status ReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::google::datastore::v1::ReserveIdsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::ReserveIdsResponse>> AsyncReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::ReserveIdsResponse>>(AsyncReserveIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::ReserveIdsResponse>> PrepareAsyncReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::ReserveIdsResponse>>(PrepareAsyncReserveIdsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Lookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest* request, ::google::datastore::v1::LookupResponse* response, std::function<void(::grpc::Status)>) override;
      void Lookup(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest* request, ::google::datastore::v1::LookupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest* request, ::google::datastore::v1::RunQueryResponse* response, std::function<void(::grpc::Status)>) override;
      void RunQuery(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest* request, ::google::datastore::v1::RunQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest* request, ::google::datastore::v1::BeginTransactionResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginTransaction(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest* request, ::google::datastore::v1::BeginTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Commit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest* request, ::google::datastore::v1::CommitResponse* response, std::function<void(::grpc::Status)>) override;
      void Commit(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest* request, ::google::datastore::v1::CommitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Rollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest* request, ::google::datastore::v1::RollbackResponse* response, std::function<void(::grpc::Status)>) override;
      void Rollback(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest* request, ::google::datastore::v1::RollbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest* request, ::google::datastore::v1::AllocateIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void AllocateIds(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest* request, ::google::datastore::v1::AllocateIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest* request, ::google::datastore::v1::ReserveIdsResponse* response, std::function<void(::grpc::Status)>) override;
      void ReserveIds(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest* request, ::google::datastore::v1::ReserveIdsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::LookupResponse>* AsyncLookupRaw(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::LookupResponse>* PrepareAsyncLookupRaw(::grpc::ClientContext* context, const ::google::datastore::v1::LookupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RunQueryResponse>* AsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RunQueryResponse>* PrepareAsyncRunQueryRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RunQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::BeginTransactionResponse>* AsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::BeginTransactionResponse>* PrepareAsyncBeginTransactionRaw(::grpc::ClientContext* context, const ::google::datastore::v1::BeginTransactionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::CommitResponse>* AsyncCommitRaw(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::CommitResponse>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::google::datastore::v1::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RollbackResponse>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::RollbackResponse>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::google::datastore::v1::RollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::AllocateIdsResponse>* AsyncAllocateIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::AllocateIdsResponse>* PrepareAsyncAllocateIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::AllocateIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::ReserveIdsResponse>* AsyncReserveIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::datastore::v1::ReserveIdsResponse>* PrepareAsyncReserveIdsRaw(::grpc::ClientContext* context, const ::google::datastore::v1::ReserveIdsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Lookup_;
    const ::grpc::internal::RpcMethod rpcmethod_RunQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginTransaction_;
    const ::grpc::internal::RpcMethod rpcmethod_Commit_;
    const ::grpc::internal::RpcMethod rpcmethod_Rollback_;
    const ::grpc::internal::RpcMethod rpcmethod_AllocateIds_;
    const ::grpc::internal::RpcMethod rpcmethod_ReserveIds_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Looks up entities by key.
    virtual ::grpc::Status Lookup(::grpc::ServerContext* context, const ::google::datastore::v1::LookupRequest* request, ::google::datastore::v1::LookupResponse* response);
    // Queries for entities.
    virtual ::grpc::Status RunQuery(::grpc::ServerContext* context, const ::google::datastore::v1::RunQueryRequest* request, ::google::datastore::v1::RunQueryResponse* response);
    // Begins a new transaction.
    virtual ::grpc::Status BeginTransaction(::grpc::ServerContext* context, const ::google::datastore::v1::BeginTransactionRequest* request, ::google::datastore::v1::BeginTransactionResponse* response);
    // Commits a transaction, optionally creating, deleting or modifying some
    // entities.
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::google::datastore::v1::CommitRequest* request, ::google::datastore::v1::CommitResponse* response);
    // Rolls back a transaction.
    virtual ::grpc::Status Rollback(::grpc::ServerContext* context, const ::google::datastore::v1::RollbackRequest* request, ::google::datastore::v1::RollbackResponse* response);
    // Allocates IDs for the given keys, which is useful for referencing an entity
    // before it is inserted.
    virtual ::grpc::Status AllocateIds(::grpc::ServerContext* context, const ::google::datastore::v1::AllocateIdsRequest* request, ::google::datastore::v1::AllocateIdsResponse* response);
    // Prevents the supplied keys' IDs from being auto-allocated by Cloud
    // Datastore.
    virtual ::grpc::Status ReserveIds(::grpc::ServerContext* context, const ::google::datastore::v1::ReserveIdsRequest* request, ::google::datastore::v1::ReserveIdsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Lookup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::LookupRequest* /*request*/, ::google::datastore::v1::LookupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookup(::grpc::ServerContext* context, ::google::datastore::v1::LookupRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::v1::LookupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunQuery() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RunQueryRequest* /*request*/, ::google::datastore::v1::RunQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunQuery(::grpc::ServerContext* context, ::google::datastore::v1::RunQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::v1::RunQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::BeginTransactionRequest* /*request*/, ::google::datastore::v1::BeginTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginTransaction(::grpc::ServerContext* context, ::google::datastore::v1::BeginTransactionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::v1::BeginTransactionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Commit() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::CommitRequest* /*request*/, ::google::datastore::v1::CommitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::google::datastore::v1::CommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::v1::CommitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rollback() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RollbackRequest* /*request*/, ::google::datastore::v1::RollbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::google::datastore::v1::RollbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::v1::RollbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllocateIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllocateIds() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AllocateIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::AllocateIdsRequest* /*request*/, ::google::datastore::v1::AllocateIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateIds(::grpc::ServerContext* context, ::google::datastore::v1::AllocateIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::v1::AllocateIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReserveIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReserveIds() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReserveIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReserveIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::ReserveIdsRequest* /*request*/, ::google::datastore::v1::ReserveIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReserveIds(::grpc::ServerContext* context, ::google::datastore::v1::ReserveIdsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::datastore::v1::ReserveIdsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Lookup<WithAsyncMethod_RunQuery<WithAsyncMethod_BeginTransaction<WithAsyncMethod_Commit<WithAsyncMethod_Rollback<WithAsyncMethod_AllocateIds<WithAsyncMethod_ReserveIds<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Lookup() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::LookupRequest, ::google::datastore::v1::LookupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::v1::LookupRequest* request, ::google::datastore::v1::LookupResponse* response) { return this->Lookup(context, request, response); }));}
    void SetMessageAllocatorFor_Lookup(
        ::grpc::MessageAllocator< ::google::datastore::v1::LookupRequest, ::google::datastore::v1::LookupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::LookupRequest, ::google::datastore::v1::LookupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::LookupRequest* /*request*/, ::google::datastore::v1::LookupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Lookup(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::v1::LookupRequest* /*request*/, ::google::datastore::v1::LookupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RunQuery() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::RunQueryRequest, ::google::datastore::v1::RunQueryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::v1::RunQueryRequest* request, ::google::datastore::v1::RunQueryResponse* response) { return this->RunQuery(context, request, response); }));}
    void SetMessageAllocatorFor_RunQuery(
        ::grpc::MessageAllocator< ::google::datastore::v1::RunQueryRequest, ::google::datastore::v1::RunQueryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::RunQueryRequest, ::google::datastore::v1::RunQueryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RunQueryRequest* /*request*/, ::google::datastore::v1::RunQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::v1::RunQueryRequest* /*request*/, ::google::datastore::v1::RunQueryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::BeginTransactionRequest, ::google::datastore::v1::BeginTransactionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::v1::BeginTransactionRequest* request, ::google::datastore::v1::BeginTransactionResponse* response) { return this->BeginTransaction(context, request, response); }));}
    void SetMessageAllocatorFor_BeginTransaction(
        ::grpc::MessageAllocator< ::google::datastore::v1::BeginTransactionRequest, ::google::datastore::v1::BeginTransactionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::BeginTransactionRequest, ::google::datastore::v1::BeginTransactionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::BeginTransactionRequest* /*request*/, ::google::datastore::v1::BeginTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::v1::BeginTransactionRequest* /*request*/, ::google::datastore::v1::BeginTransactionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Commit() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::CommitRequest, ::google::datastore::v1::CommitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::v1::CommitRequest* request, ::google::datastore::v1::CommitResponse* response) { return this->Commit(context, request, response); }));}
    void SetMessageAllocatorFor_Commit(
        ::grpc::MessageAllocator< ::google::datastore::v1::CommitRequest, ::google::datastore::v1::CommitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::CommitRequest, ::google::datastore::v1::CommitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::CommitRequest* /*request*/, ::google::datastore::v1::CommitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Commit(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::v1::CommitRequest* /*request*/, ::google::datastore::v1::CommitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rollback() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::RollbackRequest, ::google::datastore::v1::RollbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::v1::RollbackRequest* request, ::google::datastore::v1::RollbackResponse* response) { return this->Rollback(context, request, response); }));}
    void SetMessageAllocatorFor_Rollback(
        ::grpc::MessageAllocator< ::google::datastore::v1::RollbackRequest, ::google::datastore::v1::RollbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::RollbackRequest, ::google::datastore::v1::RollbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RollbackRequest* /*request*/, ::google::datastore::v1::RollbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rollback(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::v1::RollbackRequest* /*request*/, ::google::datastore::v1::RollbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AllocateIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AllocateIds() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::AllocateIdsRequest, ::google::datastore::v1::AllocateIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::v1::AllocateIdsRequest* request, ::google::datastore::v1::AllocateIdsResponse* response) { return this->AllocateIds(context, request, response); }));}
    void SetMessageAllocatorFor_AllocateIds(
        ::grpc::MessageAllocator< ::google::datastore::v1::AllocateIdsRequest, ::google::datastore::v1::AllocateIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::AllocateIdsRequest, ::google::datastore::v1::AllocateIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AllocateIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::AllocateIdsRequest* /*request*/, ::google::datastore::v1::AllocateIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllocateIds(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::v1::AllocateIdsRequest* /*request*/, ::google::datastore::v1::AllocateIdsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReserveIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReserveIds() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::ReserveIdsRequest, ::google::datastore::v1::ReserveIdsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::datastore::v1::ReserveIdsRequest* request, ::google::datastore::v1::ReserveIdsResponse* response) { return this->ReserveIds(context, request, response); }));}
    void SetMessageAllocatorFor_ReserveIds(
        ::grpc::MessageAllocator< ::google::datastore::v1::ReserveIdsRequest, ::google::datastore::v1::ReserveIdsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::datastore::v1::ReserveIdsRequest, ::google::datastore::v1::ReserveIdsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReserveIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReserveIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::ReserveIdsRequest* /*request*/, ::google::datastore::v1::ReserveIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReserveIds(
      ::grpc::CallbackServerContext* /*context*/, const ::google::datastore::v1::ReserveIdsRequest* /*request*/, ::google::datastore::v1::ReserveIdsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Lookup<WithCallbackMethod_RunQuery<WithCallbackMethod_BeginTransaction<WithCallbackMethod_Commit<WithCallbackMethod_Rollback<WithCallbackMethod_AllocateIds<WithCallbackMethod_ReserveIds<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Lookup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::LookupRequest* /*request*/, ::google::datastore::v1::LookupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunQuery() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RunQueryRequest* /*request*/, ::google::datastore::v1::RunQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::BeginTransactionRequest* /*request*/, ::google::datastore::v1::BeginTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Commit() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::CommitRequest* /*request*/, ::google::datastore::v1::CommitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rollback() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RollbackRequest* /*request*/, ::google::datastore::v1::RollbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllocateIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllocateIds() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AllocateIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::AllocateIdsRequest* /*request*/, ::google::datastore::v1::AllocateIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReserveIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReserveIds() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReserveIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReserveIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::ReserveIdsRequest* /*request*/, ::google::datastore::v1::ReserveIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Lookup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::LookupRequest* /*request*/, ::google::datastore::v1::LookupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunQuery() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RunQueryRequest* /*request*/, ::google::datastore::v1::RunQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::BeginTransactionRequest* /*request*/, ::google::datastore::v1::BeginTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginTransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Commit() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::CommitRequest* /*request*/, ::google::datastore::v1::CommitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rollback() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RollbackRequest* /*request*/, ::google::datastore::v1::RollbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllocateIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllocateIds() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AllocateIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::AllocateIdsRequest* /*request*/, ::google::datastore::v1::AllocateIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReserveIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReserveIds() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReserveIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReserveIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::ReserveIdsRequest* /*request*/, ::google::datastore::v1::ReserveIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReserveIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Lookup() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Lookup(context, request, response); }));
    }
    ~WithRawCallbackMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::LookupRequest* /*request*/, ::google::datastore::v1::LookupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Lookup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RunQuery() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RunQueryRequest* /*request*/, ::google::datastore::v1::RunQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BeginTransaction(context, request, response); }));
    }
    ~WithRawCallbackMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::BeginTransactionRequest* /*request*/, ::google::datastore::v1::BeginTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginTransaction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Commit() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Commit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::CommitRequest* /*request*/, ::google::datastore::v1::CommitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Commit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rollback() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rollback(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RollbackRequest* /*request*/, ::google::datastore::v1::RollbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rollback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AllocateIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AllocateIds() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllocateIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_AllocateIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::AllocateIdsRequest* /*request*/, ::google::datastore::v1::AllocateIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllocateIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReserveIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReserveIds() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReserveIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReserveIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReserveIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::ReserveIdsRequest* /*request*/, ::google::datastore::v1::ReserveIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReserveIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Lookup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::v1::LookupRequest, ::google::datastore::v1::LookupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::v1::LookupRequest, ::google::datastore::v1::LookupResponse>* streamer) {
                       return this->StreamedLookup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Lookup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Lookup(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::LookupRequest* /*request*/, ::google::datastore::v1::LookupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLookup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::v1::LookupRequest,::google::datastore::v1::LookupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunQuery() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::v1::RunQueryRequest, ::google::datastore::v1::RunQueryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::v1::RunQueryRequest, ::google::datastore::v1::RunQueryResponse>* streamer) {
                       return this->StreamedRunQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunQuery(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RunQueryRequest* /*request*/, ::google::datastore::v1::RunQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::v1::RunQueryRequest,::google::datastore::v1::RunQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginTransaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BeginTransaction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::v1::BeginTransactionRequest, ::google::datastore::v1::BeginTransactionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::v1::BeginTransactionRequest, ::google::datastore::v1::BeginTransactionResponse>* streamer) {
                       return this->StreamedBeginTransaction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BeginTransaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginTransaction(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::BeginTransactionRequest* /*request*/, ::google::datastore::v1::BeginTransactionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginTransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::v1::BeginTransactionRequest,::google::datastore::v1::BeginTransactionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Commit() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::v1::CommitRequest, ::google::datastore::v1::CommitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::v1::CommitRequest, ::google::datastore::v1::CommitResponse>* streamer) {
                       return this->StreamedCommit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::CommitRequest* /*request*/, ::google::datastore::v1::CommitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::v1::CommitRequest,::google::datastore::v1::CommitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rollback() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::v1::RollbackRequest, ::google::datastore::v1::RollbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::v1::RollbackRequest, ::google::datastore::v1::RollbackResponse>* streamer) {
                       return this->StreamedRollback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::RollbackRequest* /*request*/, ::google::datastore::v1::RollbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::v1::RollbackRequest,::google::datastore::v1::RollbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllocateIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllocateIds() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::v1::AllocateIdsRequest, ::google::datastore::v1::AllocateIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::v1::AllocateIdsRequest, ::google::datastore::v1::AllocateIdsResponse>* streamer) {
                       return this->StreamedAllocateIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllocateIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllocateIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::AllocateIdsRequest* /*request*/, ::google::datastore::v1::AllocateIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllocateIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::v1::AllocateIdsRequest,::google::datastore::v1::AllocateIdsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReserveIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReserveIds() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::datastore::v1::ReserveIdsRequest, ::google::datastore::v1::ReserveIdsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::datastore::v1::ReserveIdsRequest, ::google::datastore::v1::ReserveIdsResponse>* streamer) {
                       return this->StreamedReserveIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReserveIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReserveIds(::grpc::ServerContext* /*context*/, const ::google::datastore::v1::ReserveIdsRequest* /*request*/, ::google::datastore::v1::ReserveIdsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReserveIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::datastore::v1::ReserveIdsRequest,::google::datastore::v1::ReserveIdsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Lookup<WithStreamedUnaryMethod_RunQuery<WithStreamedUnaryMethod_BeginTransaction<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<WithStreamedUnaryMethod_AllocateIds<WithStreamedUnaryMethod_ReserveIds<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Lookup<WithStreamedUnaryMethod_RunQuery<WithStreamedUnaryMethod_BeginTransaction<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<WithStreamedUnaryMethod_AllocateIds<WithStreamedUnaryMethod_ReserveIds<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace datastore
}  // namespace google


#endif  // GRPC_google_2fdatastore_2fv1_2fdatastore_2eproto__INCLUDED
