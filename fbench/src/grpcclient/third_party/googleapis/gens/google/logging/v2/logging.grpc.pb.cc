// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging.proto

#include "google/logging/v2/logging.pb.h"
#include "google/logging/v2/logging.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace logging {
namespace v2 {

static const char* LoggingServiceV2_method_names[] = {
  "/google.logging.v2.LoggingServiceV2/DeleteLog",
  "/google.logging.v2.LoggingServiceV2/WriteLogEntries",
  "/google.logging.v2.LoggingServiceV2/ListLogEntries",
  "/google.logging.v2.LoggingServiceV2/ListMonitoredResourceDescriptors",
  "/google.logging.v2.LoggingServiceV2/ListLogs",
  "/google.logging.v2.LoggingServiceV2/TailLogEntries",
};

std::unique_ptr< LoggingServiceV2::Stub> LoggingServiceV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoggingServiceV2::Stub> stub(new LoggingServiceV2::Stub(channel, options));
  return stub;
}

LoggingServiceV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DeleteLog_(LoggingServiceV2_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteLogEntries_(LoggingServiceV2_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLogEntries_(LoggingServiceV2_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMonitoredResourceDescriptors_(LoggingServiceV2_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLogs_(LoggingServiceV2_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TailLogEntries_(LoggingServiceV2_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status LoggingServiceV2::Stub::DeleteLog(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::DeleteLogRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteLog_, context, request, response);
}

void LoggingServiceV2::Stub::async::DeleteLog(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::DeleteLogRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLog_, context, request, response, std::move(f));
}

void LoggingServiceV2::Stub::async::DeleteLog(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LoggingServiceV2::Stub::PrepareAsyncDeleteLogRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::logging::v2::DeleteLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* LoggingServiceV2::Stub::AsyncDeleteLogRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LoggingServiceV2::Stub::WriteLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::google::logging::v2::WriteLogEntriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::WriteLogEntriesRequest, ::google::logging::v2::WriteLogEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteLogEntries_, context, request, response);
}

void LoggingServiceV2::Stub::async::WriteLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest* request, ::google::logging::v2::WriteLogEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::WriteLogEntriesRequest, ::google::logging::v2::WriteLogEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteLogEntries_, context, request, response, std::move(f));
}

void LoggingServiceV2::Stub::async::WriteLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest* request, ::google::logging::v2::WriteLogEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteLogEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::WriteLogEntriesResponse>* LoggingServiceV2::Stub::PrepareAsyncWriteLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::WriteLogEntriesResponse, ::google::logging::v2::WriteLogEntriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteLogEntries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::WriteLogEntriesResponse>* LoggingServiceV2::Stub::AsyncWriteLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::WriteLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteLogEntriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LoggingServiceV2::Stub::ListLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::google::logging::v2::ListLogEntriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::ListLogEntriesRequest, ::google::logging::v2::ListLogEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListLogEntries_, context, request, response);
}

void LoggingServiceV2::Stub::async::ListLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest* request, ::google::logging::v2::ListLogEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::ListLogEntriesRequest, ::google::logging::v2::ListLogEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLogEntries_, context, request, response, std::move(f));
}

void LoggingServiceV2::Stub::async::ListLogEntries(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest* request, ::google::logging::v2::ListLogEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLogEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogEntriesResponse>* LoggingServiceV2::Stub::PrepareAsyncListLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::ListLogEntriesResponse, ::google::logging::v2::ListLogEntriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListLogEntries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogEntriesResponse>* LoggingServiceV2::Stub::AsyncListLogEntriesRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListLogEntriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LoggingServiceV2::Stub::ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::ListMonitoredResourceDescriptorsRequest, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListMonitoredResourceDescriptors_, context, request, response);
}

void LoggingServiceV2::Stub::async::ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::ListMonitoredResourceDescriptorsRequest, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMonitoredResourceDescriptors_, context, request, response, std::move(f));
}

void LoggingServiceV2::Stub::async::ListMonitoredResourceDescriptors(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMonitoredResourceDescriptors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>* LoggingServiceV2::Stub::PrepareAsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse, ::google::logging::v2::ListMonitoredResourceDescriptorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListMonitoredResourceDescriptors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListMonitoredResourceDescriptorsResponse>* LoggingServiceV2::Stub::AsyncListMonitoredResourceDescriptorsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListMonitoredResourceDescriptorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LoggingServiceV2::Stub::ListLogs(::grpc::ClientContext* context, const ::google::logging::v2::ListLogsRequest& request, ::google::logging::v2::ListLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::ListLogsRequest, ::google::logging::v2::ListLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListLogs_, context, request, response);
}

void LoggingServiceV2::Stub::async::ListLogs(::grpc::ClientContext* context, const ::google::logging::v2::ListLogsRequest* request, ::google::logging::v2::ListLogsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::ListLogsRequest, ::google::logging::v2::ListLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLogs_, context, request, response, std::move(f));
}

void LoggingServiceV2::Stub::async::ListLogs(::grpc::ClientContext* context, const ::google::logging::v2::ListLogsRequest* request, ::google::logging::v2::ListLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListLogs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogsResponse>* LoggingServiceV2::Stub::PrepareAsyncListLogsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::ListLogsResponse, ::google::logging::v2::ListLogsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListLogs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogsResponse>* LoggingServiceV2::Stub::AsyncListLogsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::google::logging::v2::TailLogEntriesRequest, ::google::logging::v2::TailLogEntriesResponse>* LoggingServiceV2::Stub::TailLogEntriesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::google::logging::v2::TailLogEntriesRequest, ::google::logging::v2::TailLogEntriesResponse>::Create(channel_.get(), rpcmethod_TailLogEntries_, context);
}

void LoggingServiceV2::Stub::async::TailLogEntries(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::logging::v2::TailLogEntriesRequest,::google::logging::v2::TailLogEntriesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::google::logging::v2::TailLogEntriesRequest,::google::logging::v2::TailLogEntriesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_TailLogEntries_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::google::logging::v2::TailLogEntriesRequest, ::google::logging::v2::TailLogEntriesResponse>* LoggingServiceV2::Stub::AsyncTailLogEntriesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::logging::v2::TailLogEntriesRequest, ::google::logging::v2::TailLogEntriesResponse>::Create(channel_.get(), cq, rpcmethod_TailLogEntries_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::google::logging::v2::TailLogEntriesRequest, ::google::logging::v2::TailLogEntriesResponse>* LoggingServiceV2::Stub::PrepareAsyncTailLogEntriesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::google::logging::v2::TailLogEntriesRequest, ::google::logging::v2::TailLogEntriesResponse>::Create(channel_.get(), cq, rpcmethod_TailLogEntries_, context, false, nullptr);
}

LoggingServiceV2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingServiceV2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingServiceV2::Service, ::google::logging::v2::DeleteLogRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoggingServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::DeleteLogRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingServiceV2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingServiceV2::Service, ::google::logging::v2::WriteLogEntriesRequest, ::google::logging::v2::WriteLogEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoggingServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::WriteLogEntriesRequest* req,
             ::google::logging::v2::WriteLogEntriesResponse* resp) {
               return service->WriteLogEntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingServiceV2_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingServiceV2::Service, ::google::logging::v2::ListLogEntriesRequest, ::google::logging::v2::ListLogEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoggingServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::ListLogEntriesRequest* req,
             ::google::logging::v2::ListLogEntriesResponse* resp) {
               return service->ListLogEntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingServiceV2_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingServiceV2::Service, ::google::logging::v2::ListMonitoredResourceDescriptorsRequest, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoggingServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* req,
             ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* resp) {
               return service->ListMonitoredResourceDescriptors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingServiceV2_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingServiceV2::Service, ::google::logging::v2::ListLogsRequest, ::google::logging::v2::ListLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LoggingServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::ListLogsRequest* req,
             ::google::logging::v2::ListLogsResponse* resp) {
               return service->ListLogs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingServiceV2_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< LoggingServiceV2::Service, ::google::logging::v2::TailLogEntriesRequest, ::google::logging::v2::TailLogEntriesResponse>(
          [](LoggingServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::google::logging::v2::TailLogEntriesResponse,
             ::google::logging::v2::TailLogEntriesRequest>* stream) {
               return service->TailLogEntries(ctx, stream);
             }, this)));
}

LoggingServiceV2::Service::~Service() {
}

::grpc::Status LoggingServiceV2::Service::DeleteLog(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingServiceV2::Service::WriteLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::WriteLogEntriesRequest* request, ::google::logging::v2::WriteLogEntriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingServiceV2::Service::ListLogEntries(::grpc::ServerContext* context, const ::google::logging::v2::ListLogEntriesRequest* request, ::google::logging::v2::ListLogEntriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingServiceV2::Service::ListMonitoredResourceDescriptors(::grpc::ServerContext* context, const ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* request, ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingServiceV2::Service::ListLogs(::grpc::ServerContext* context, const ::google::logging::v2::ListLogsRequest* request, ::google::logging::v2::ListLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingServiceV2::Service::TailLogEntries(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::logging::v2::TailLogEntriesResponse, ::google::logging::v2::TailLogEntriesRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace logging
}  // namespace v2

