// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging_config.proto

#include "google/logging/v2/logging_config.pb.h"
#include "google/logging/v2/logging_config.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace logging {
namespace v2 {

static const char* ConfigServiceV2_method_names[] = {
  "/google.logging.v2.ConfigServiceV2/ListBuckets",
  "/google.logging.v2.ConfigServiceV2/GetBucket",
  "/google.logging.v2.ConfigServiceV2/CreateBucket",
  "/google.logging.v2.ConfigServiceV2/UpdateBucket",
  "/google.logging.v2.ConfigServiceV2/DeleteBucket",
  "/google.logging.v2.ConfigServiceV2/UndeleteBucket",
  "/google.logging.v2.ConfigServiceV2/ListViews",
  "/google.logging.v2.ConfigServiceV2/GetView",
  "/google.logging.v2.ConfigServiceV2/CreateView",
  "/google.logging.v2.ConfigServiceV2/UpdateView",
  "/google.logging.v2.ConfigServiceV2/DeleteView",
  "/google.logging.v2.ConfigServiceV2/ListSinks",
  "/google.logging.v2.ConfigServiceV2/GetSink",
  "/google.logging.v2.ConfigServiceV2/CreateSink",
  "/google.logging.v2.ConfigServiceV2/UpdateSink",
  "/google.logging.v2.ConfigServiceV2/DeleteSink",
  "/google.logging.v2.ConfigServiceV2/ListExclusions",
  "/google.logging.v2.ConfigServiceV2/GetExclusion",
  "/google.logging.v2.ConfigServiceV2/CreateExclusion",
  "/google.logging.v2.ConfigServiceV2/UpdateExclusion",
  "/google.logging.v2.ConfigServiceV2/DeleteExclusion",
  "/google.logging.v2.ConfigServiceV2/GetCmekSettings",
  "/google.logging.v2.ConfigServiceV2/UpdateCmekSettings",
};

std::unique_ptr< ConfigServiceV2::Stub> ConfigServiceV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigServiceV2::Stub> stub(new ConfigServiceV2::Stub(channel, options));
  return stub;
}

ConfigServiceV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListBuckets_(ConfigServiceV2_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBucket_(ConfigServiceV2_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateBucket_(ConfigServiceV2_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBucket_(ConfigServiceV2_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteBucket_(ConfigServiceV2_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UndeleteBucket_(ConfigServiceV2_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListViews_(ConfigServiceV2_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetView_(ConfigServiceV2_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateView_(ConfigServiceV2_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateView_(ConfigServiceV2_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteView_(ConfigServiceV2_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSinks_(ConfigServiceV2_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSink_(ConfigServiceV2_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateSink_(ConfigServiceV2_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSink_(ConfigServiceV2_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSink_(ConfigServiceV2_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListExclusions_(ConfigServiceV2_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExclusion_(ConfigServiceV2_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateExclusion_(ConfigServiceV2_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateExclusion_(ConfigServiceV2_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteExclusion_(ConfigServiceV2_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCmekSettings_(ConfigServiceV2_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCmekSettings_(ConfigServiceV2_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigServiceV2::Stub::ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::google::logging::v2::ListBucketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBuckets_, context, request, response);
}

void ConfigServiceV2::Stub::async::ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBuckets_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::ListBuckets(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBuckets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>* ConfigServiceV2::Stub::PrepareAsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::ListBucketsResponse, ::google::logging::v2::ListBucketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBuckets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListBucketsResponse>* ConfigServiceV2::Stub::AsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBucketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::google::logging::v2::LogBucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBucket_, context, request, response);
}

void ConfigServiceV2::Stub::async::GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucket_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::GetBucket(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* ConfigServiceV2::Stub::PrepareAsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogBucket, ::google::logging::v2::GetBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* ConfigServiceV2::Stub::AsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::google::logging::v2::LogBucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBucket_, context, request, response);
}

void ConfigServiceV2::Stub::async::CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBucket_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::CreateBucket(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* ConfigServiceV2::Stub::PrepareAsyncCreateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogBucket, ::google::logging::v2::CreateBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* ConfigServiceV2::Stub::AsyncCreateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::google::logging::v2::LogBucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBucket_, context, request, response);
}

void ConfigServiceV2::Stub::async::UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBucket_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::UpdateBucket(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* ConfigServiceV2::Stub::PrepareAsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogBucket, ::google::logging::v2::UpdateBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogBucket>* ConfigServiceV2::Stub::AsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteBucket_, context, request, response);
}

void ConfigServiceV2::Stub::async::DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBucket_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::DeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::PrepareAsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::logging::v2::DeleteBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UndeleteBucket_, context, request, response);
}

void ConfigServiceV2::Stub::async::UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UndeleteBucket_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::UndeleteBucket(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UndeleteBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::PrepareAsyncUndeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::logging::v2::UndeleteBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UndeleteBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncUndeleteBucketRaw(::grpc::ClientContext* context, const ::google::logging::v2::UndeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUndeleteBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::google::logging::v2::ListViewsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListViews_, context, request, response);
}

void ConfigServiceV2::Stub::async::ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListViews_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::ListViews(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListViews_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>* ConfigServiceV2::Stub::PrepareAsyncListViewsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::ListViewsResponse, ::google::logging::v2::ListViewsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListViews_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListViewsResponse>* ConfigServiceV2::Stub::AsyncListViewsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListViewsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListViewsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::google::logging::v2::LogView* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetView_, context, request, response);
}

void ConfigServiceV2::Stub::async::GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetView_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::GetView(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* ConfigServiceV2::Stub::PrepareAsyncGetViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogView, ::google::logging::v2::GetViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* ConfigServiceV2::Stub::AsyncGetViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::google::logging::v2::LogView* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateView_, context, request, response);
}

void ConfigServiceV2::Stub::async::CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateView_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::CreateView(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* ConfigServiceV2::Stub::PrepareAsyncCreateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogView, ::google::logging::v2::CreateViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* ConfigServiceV2::Stub::AsyncCreateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::google::logging::v2::LogView* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateView_, context, request, response);
}

void ConfigServiceV2::Stub::async::UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateView_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::UpdateView(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* ConfigServiceV2::Stub::PrepareAsyncUpdateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogView, ::google::logging::v2::UpdateViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogView>* ConfigServiceV2::Stub::AsyncUpdateViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteView_, context, request, response);
}

void ConfigServiceV2::Stub::async::DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteView_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::DeleteView(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::PrepareAsyncDeleteViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::logging::v2::DeleteViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncDeleteViewRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::google::logging::v2::ListSinksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSinks_, context, request, response);
}

void ConfigServiceV2::Stub::async::ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSinks_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::ListSinks(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSinks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>* ConfigServiceV2::Stub::PrepareAsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::ListSinksResponse, ::google::logging::v2::ListSinksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSinks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListSinksResponse>* ConfigServiceV2::Stub::AsyncListSinksRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListSinksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSinksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSink_, context, request, response);
}

void ConfigServiceV2::Stub::async::GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSink_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::GetSink(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::PrepareAsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogSink, ::google::logging::v2::GetSinkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncGetSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetSinkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSink_, context, request, response);
}

void ConfigServiceV2::Stub::async::CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSink_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::CreateSink(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::PrepareAsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogSink, ::google::logging::v2::CreateSinkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncCreateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::google::logging::v2::LogSink* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSink_, context, request, response);
}

void ConfigServiceV2::Stub::async::UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSink_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::UpdateSink(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::PrepareAsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogSink, ::google::logging::v2::UpdateSinkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogSink>* ConfigServiceV2::Stub::AsyncUpdateSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateSinkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSink_, context, request, response);
}

void ConfigServiceV2::Stub::async::DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSink_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::DeleteSink(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::PrepareAsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::logging::v2::DeleteSinkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncDeleteSinkRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteSinkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::google::logging::v2::ListExclusionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListExclusions_, context, request, response);
}

void ConfigServiceV2::Stub::async::ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExclusions_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::ListExclusions(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListExclusions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>* ConfigServiceV2::Stub::PrepareAsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::ListExclusionsResponse, ::google::logging::v2::ListExclusionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListExclusions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListExclusionsResponse>* ConfigServiceV2::Stub::AsyncListExclusionsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListExclusionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListExclusionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::google::logging::v2::LogExclusion* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExclusion_, context, request, response);
}

void ConfigServiceV2::Stub::async::GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExclusion_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::GetExclusion(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExclusion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::PrepareAsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogExclusion, ::google::logging::v2::GetExclusionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExclusion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::AsyncGetExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExclusionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateExclusion_, context, request, response);
}

void ConfigServiceV2::Stub::async::CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateExclusion_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::CreateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateExclusion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::PrepareAsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogExclusion, ::google::logging::v2::CreateExclusionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateExclusion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::AsyncCreateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateExclusionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::google::logging::v2::LogExclusion* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateExclusion_, context, request, response);
}

void ConfigServiceV2::Stub::async::UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateExclusion_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::UpdateExclusion(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateExclusion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::PrepareAsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::LogExclusion, ::google::logging::v2::UpdateExclusionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateExclusion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogExclusion>* ConfigServiceV2::Stub::AsyncUpdateExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateExclusionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteExclusion_, context, request, response);
}

void ConfigServiceV2::Stub::async::DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteExclusion_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::DeleteExclusion(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteExclusion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::PrepareAsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::logging::v2::DeleteExclusionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteExclusion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ConfigServiceV2::Stub::AsyncDeleteExclusionRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteExclusionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteExclusionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::google::logging::v2::CmekSettings* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCmekSettings_, context, request, response);
}

void ConfigServiceV2::Stub::async::GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCmekSettings_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::GetCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCmekSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* ConfigServiceV2::Stub::PrepareAsyncGetCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::CmekSettings, ::google::logging::v2::GetCmekSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCmekSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* ConfigServiceV2::Stub::AsyncGetCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCmekSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigServiceV2::Stub::UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::google::logging::v2::CmekSettings* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCmekSettings_, context, request, response);
}

void ConfigServiceV2::Stub::async::UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCmekSettings_, context, request, response, std::move(f));
}

void ConfigServiceV2::Stub::async::UpdateCmekSettings(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCmekSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* ConfigServiceV2::Stub::PrepareAsyncUpdateCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::logging::v2::CmekSettings, ::google::logging::v2::UpdateCmekSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCmekSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::logging::v2::CmekSettings>* ConfigServiceV2::Stub::AsyncUpdateCmekSettingsRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCmekSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigServiceV2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::ListBucketsRequest, ::google::logging::v2::ListBucketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::ListBucketsRequest* req,
             ::google::logging::v2::ListBucketsResponse* resp) {
               return service->ListBuckets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::GetBucketRequest* req,
             ::google::logging::v2::LogBucket* resp) {
               return service->GetBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::CreateBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::CreateBucketRequest* req,
             ::google::logging::v2::LogBucket* resp) {
               return service->CreateBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateBucketRequest, ::google::logging::v2::LogBucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::UpdateBucketRequest* req,
             ::google::logging::v2::LogBucket* resp) {
               return service->UpdateBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::DeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::DeleteBucketRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UndeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::UndeleteBucketRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UndeleteBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::ListViewsRequest, ::google::logging::v2::ListViewsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::ListViewsRequest* req,
             ::google::logging::v2::ListViewsResponse* resp) {
               return service->ListViews(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::GetViewRequest* req,
             ::google::logging::v2::LogView* resp) {
               return service->GetView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::CreateViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::CreateViewRequest* req,
             ::google::logging::v2::LogView* resp) {
               return service->CreateView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateViewRequest, ::google::logging::v2::LogView, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::UpdateViewRequest* req,
             ::google::logging::v2::LogView* resp) {
               return service->UpdateView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::DeleteViewRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::DeleteViewRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::ListSinksRequest, ::google::logging::v2::ListSinksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::ListSinksRequest* req,
             ::google::logging::v2::ListSinksResponse* resp) {
               return service->ListSinks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::GetSinkRequest* req,
             ::google::logging::v2::LogSink* resp) {
               return service->GetSink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::CreateSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::CreateSinkRequest* req,
             ::google::logging::v2::LogSink* resp) {
               return service->CreateSink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateSinkRequest, ::google::logging::v2::LogSink, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::UpdateSinkRequest* req,
             ::google::logging::v2::LogSink* resp) {
               return service->UpdateSink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::DeleteSinkRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::DeleteSinkRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteSink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::ListExclusionsRequest, ::google::logging::v2::ListExclusionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::ListExclusionsRequest* req,
             ::google::logging::v2::ListExclusionsResponse* resp) {
               return service->ListExclusions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::GetExclusionRequest* req,
             ::google::logging::v2::LogExclusion* resp) {
               return service->GetExclusion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::CreateExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::CreateExclusionRequest* req,
             ::google::logging::v2::LogExclusion* resp) {
               return service->CreateExclusion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateExclusionRequest, ::google::logging::v2::LogExclusion, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::UpdateExclusionRequest* req,
             ::google::logging::v2::LogExclusion* resp) {
               return service->UpdateExclusion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::DeleteExclusionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::DeleteExclusionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteExclusion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::GetCmekSettingsRequest, ::google::logging::v2::CmekSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::GetCmekSettingsRequest* req,
             ::google::logging::v2::CmekSettings* resp) {
               return service->GetCmekSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigServiceV2_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigServiceV2::Service, ::google::logging::v2::UpdateCmekSettingsRequest, ::google::logging::v2::CmekSettings, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::logging::v2::UpdateCmekSettingsRequest* req,
             ::google::logging::v2::CmekSettings* resp) {
               return service->UpdateCmekSettings(ctx, req, resp);
             }, this)));
}

ConfigServiceV2::Service::~Service() {
}

::grpc::Status ConfigServiceV2::Service::ListBuckets(::grpc::ServerContext* context, const ::google::logging::v2::ListBucketsRequest* request, ::google::logging::v2::ListBucketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetBucket(::grpc::ServerContext* context, const ::google::logging::v2::GetBucketRequest* request, ::google::logging::v2::LogBucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::CreateBucket(::grpc::ServerContext* context, const ::google::logging::v2::CreateBucketRequest* request, ::google::logging::v2::LogBucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateBucket(::grpc::ServerContext* context, const ::google::logging::v2::UpdateBucketRequest* request, ::google::logging::v2::LogBucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::DeleteBucket(::grpc::ServerContext* context, const ::google::logging::v2::DeleteBucketRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UndeleteBucket(::grpc::ServerContext* context, const ::google::logging::v2::UndeleteBucketRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::ListViews(::grpc::ServerContext* context, const ::google::logging::v2::ListViewsRequest* request, ::google::logging::v2::ListViewsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetView(::grpc::ServerContext* context, const ::google::logging::v2::GetViewRequest* request, ::google::logging::v2::LogView* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::CreateView(::grpc::ServerContext* context, const ::google::logging::v2::CreateViewRequest* request, ::google::logging::v2::LogView* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateView(::grpc::ServerContext* context, const ::google::logging::v2::UpdateViewRequest* request, ::google::logging::v2::LogView* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::DeleteView(::grpc::ServerContext* context, const ::google::logging::v2::DeleteViewRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::ListSinks(::grpc::ServerContext* context, const ::google::logging::v2::ListSinksRequest* request, ::google::logging::v2::ListSinksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetSink(::grpc::ServerContext* context, const ::google::logging::v2::GetSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::CreateSink(::grpc::ServerContext* context, const ::google::logging::v2::CreateSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateSink(::grpc::ServerContext* context, const ::google::logging::v2::UpdateSinkRequest* request, ::google::logging::v2::LogSink* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::DeleteSink(::grpc::ServerContext* context, const ::google::logging::v2::DeleteSinkRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::ListExclusions(::grpc::ServerContext* context, const ::google::logging::v2::ListExclusionsRequest* request, ::google::logging::v2::ListExclusionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetExclusion(::grpc::ServerContext* context, const ::google::logging::v2::GetExclusionRequest* request, ::google::logging::v2::LogExclusion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::CreateExclusion(::grpc::ServerContext* context, const ::google::logging::v2::CreateExclusionRequest* request, ::google::logging::v2::LogExclusion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateExclusion(::grpc::ServerContext* context, const ::google::logging::v2::UpdateExclusionRequest* request, ::google::logging::v2::LogExclusion* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::DeleteExclusion(::grpc::ServerContext* context, const ::google::logging::v2::DeleteExclusionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::GetCmekSettings(::grpc::ServerContext* context, const ::google::logging::v2::GetCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigServiceV2::Service::UpdateCmekSettings(::grpc::ServerContext* context, const ::google::logging::v2::UpdateCmekSettingsRequest* request, ::google::logging::v2::CmekSettings* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace logging
}  // namespace v2

