// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/log_entry.proto

#include "google/logging/v2/log_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fmonitored_5fresource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MonitoredResource_google_2fapi_2fmonitored_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2ftype_2fhttp_5frequest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flog_5fentry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flog_5fentry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flog_5fentry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace google {
namespace logging {
namespace v2 {
class LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry_LabelsEntry_DoNotUse> _instance;
} _LogEntry_LabelsEntry_DoNotUse_default_instance_;
class LogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry> _instance;
  const ::google::protobuf::Any* proto_payload_;
  ::google::protobuf::internal::ArenaStringPtr text_payload_;
  const ::google::protobuf::Struct* json_payload_;
} _LogEntry_default_instance_;
class LogEntryOperationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntryOperation> _instance;
} _LogEntryOperation_default_instance_;
class LogEntrySourceLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntrySourceLocation> _instance;
} _LogEntrySourceLocation_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
static void InitDefaultsLogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntry_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse();
  }
  ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto}, {}};

static void InitDefaultsLogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntry_default_instance_;
    new (ptr) ::google::logging::v2::LogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsLogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto}, {
      &scc_info_MonitoredResource_google_2fapi_2fmonitored_5fresource_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto.base,
      &scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
      &scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
      &scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base,}};

static void InitDefaultsLogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntryOperation_default_instance_;
    new (ptr) ::google::logging::v2::LogEntryOperation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogEntryOperation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto}, {}};

static void InitDefaultsLogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntrySourceLocation_default_instance_;
    new (ptr) ::google::logging::v2::LogEntrySourceLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogEntrySourceLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto}, {}};

void InitDefaults_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, log_name_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, resource_),
  offsetof(::google::logging::v2::LogEntryDefaultTypeInternal, proto_payload_),
  offsetof(::google::logging::v2::LogEntryDefaultTypeInternal, text_payload_),
  offsetof(::google::logging::v2::LogEntryDefaultTypeInternal, json_payload_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, receive_timestamp_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, severity_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, insert_id_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, http_request_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, labels_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, operation_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, trace_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, span_id_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, trace_sampled_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, source_location_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, id_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, producer_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, first_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, file_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, line_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, function_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::google::logging::v2::LogEntry)},
  { 31, -1, sizeof(::google::logging::v2::LogEntryOperation)},
  { 40, -1, sizeof(::google::logging::v2::LogEntrySourceLocation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::logging::v2::_LogEntry_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::logging::v2::_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::logging::v2::_LogEntryOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::logging::v2::_LogEntrySourceLocation_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2flogging_2fv2_2flog_5fentry_2eproto = {
  {}, AddDescriptors_google_2flogging_2fv2_2flog_5fentry_2eproto, "google/logging/v2/log_entry.proto", schemas,
  file_default_instances, TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto::offsets,
  file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto, 4, file_level_enum_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto, file_level_service_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto,
};

const char descriptor_table_protodef_google_2flogging_2fv2_2flog_5fentry_2eproto[] =
  "\n!google/logging/v2/log_entry.proto\022\021goo"
  "gle.logging.v2\032\037google/api/field_behavio"
  "r.proto\032#google/api/monitored_resource.p"
  "roto\032\031google/api/resource.proto\032&google/"
  "logging/type/http_request.proto\032&google/"
  "logging/type/log_severity.proto\032\031google/"
  "protobuf/any.proto\032\034google/protobuf/stru"
  "ct.proto\032\037google/protobuf/timestamp.prot"
  "o\032\027google/rpc/status.proto\032\034google/api/a"
  "nnotations.proto\"\322\007\n\010LogEntry\022\025\n\010log_nam"
  "e\030\014 \001(\tB\003\340A\002\0224\n\010resource\030\010 \001(\0132\035.google."
  "api.MonitoredResourceB\003\340A\002\022-\n\rproto_payl"
  "oad\030\002 \001(\0132\024.google.protobuf.AnyH\000\022\026\n\014tex"
  "t_payload\030\003 \001(\tH\000\022/\n\014json_payload\030\006 \001(\0132"
  "\027.google.protobuf.StructH\000\0222\n\ttimestamp\030"
  "\t \001(\0132\032.google.protobuf.TimestampB\003\340A\001\022:"
  "\n\021receive_timestamp\030\030 \001(\0132\032.google.proto"
  "buf.TimestampB\003\340A\003\0227\n\010severity\030\n \001(\0162 .g"
  "oogle.logging.type.LogSeverityB\003\340A\001\022\026\n\ti"
  "nsert_id\030\004 \001(\tB\003\340A\001\022;\n\014http_request\030\007 \001("
  "\0132 .google.logging.type.HttpRequestB\003\340A\001"
  "\022<\n\006labels\030\013 \003(\0132\'.google.logging.v2.Log"
  "Entry.LabelsEntryB\003\340A\001\022<\n\toperation\030\017 \001("
  "\0132$.google.logging.v2.LogEntryOperationB"
  "\003\340A\001\022\022\n\005trace\030\026 \001(\tB\003\340A\001\022\024\n\007span_id\030\033 \001("
  "\tB\003\340A\001\022\032\n\rtrace_sampled\030\036 \001(\010B\003\340A\001\022G\n\017so"
  "urce_location\030\027 \001(\0132).google.logging.v2."
  "LogEntrySourceLocationB\003\340A\001\032-\n\013LabelsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001:\275\001\352A\271"
  "\001\n\032logging.googleapis.com/Log\022\035projects/"
  "{project}/logs/{log}\022\'organizations/{org"
  "anization}/logs/{log}\022\033folders/{folder}/"
  "logs/{log}\022,billingAccounts/{billing_acc"
  "ount}/logs/{log}\032\010log_nameB\t\n\007payload\"b\n"
  "\021LogEntryOperation\022\017\n\002id\030\001 \001(\tB\003\340A\001\022\025\n\010p"
  "roducer\030\002 \001(\tB\003\340A\001\022\022\n\005first\030\003 \001(\010B\003\340A\001\022\021"
  "\n\004last\030\004 \001(\010B\003\340A\001\"U\n\026LogEntrySourceLocat"
  "ion\022\021\n\004file\030\001 \001(\tB\003\340A\001\022\021\n\004line\030\002 \001(\003B\003\340A"
  "\001\022\025\n\010function\030\003 \001(\tB\003\340A\001B\266\001\n\025com.google."
  "logging.v2B\rLogEntryProtoP\001Z8google.gola"
  "ng.org/genproto/googleapis/logging/v2;lo"
  "gging\370\001\001\252\002\027Google.Cloud.Logging.V2\312\002\027Goo"
  "gle\\Cloud\\Logging\\V2\352\002\032Google::Cloud::Lo"
  "gging::V2b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto = {
  false, InitDefaults_google_2flogging_2fv2_2flog_5fentry_2eproto, 
  descriptor_table_protodef_google_2flogging_2fv2_2flog_5fentry_2eproto,
  "google/logging/v2/log_entry.proto", &assign_descriptors_table_google_2flogging_2fv2_2flog_5fentry_2eproto, 1737,
};

void AddDescriptors_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[10] =
  {
    ::AddDescriptors_google_2fapi_2ffield_5fbehavior_2eproto,
    ::AddDescriptors_google_2fapi_2fmonitored_5fresource_2eproto,
    ::AddDescriptors_google_2fapi_2fresource_2eproto,
    ::AddDescriptors_google_2flogging_2ftype_2fhttp_5frequest_2eproto,
    ::AddDescriptors_google_2flogging_2ftype_2flog_5fseverity_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fany_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fstruct_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2frpc_2fstatus_2eproto,
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto, deps, 10);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2flogging_2fv2_2flog_5fentry_2eproto = []() { AddDescriptors_google_2flogging_2fv2_2flog_5fentry_2eproto(); return true; }();
namespace google {
namespace logging {
namespace v2 {

// ===================================================================

LogEntry_LabelsEntry_DoNotUse::LogEntry_LabelsEntry_DoNotUse() {}
LogEntry_LabelsEntry_DoNotUse::LogEntry_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void LogEntry_LabelsEntry_DoNotUse::MergeFrom(const LogEntry_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata LogEntry_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
  return ::file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto[0];
}
void LogEntry_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogEntry_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      LogEntry_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.logging.v2.LogEntry.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.logging.v2.LogEntry.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void LogEntry::InitAsDefaultInstance() {
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->resource_ = const_cast< ::google::api::MonitoredResource*>(
      ::google::api::MonitoredResource::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_.proto_payload_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_.text_payload_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::logging::v2::_LogEntry_default_instance_.json_payload_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->receive_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->http_request_ = const_cast< ::google::logging::type::HttpRequest*>(
      ::google::logging::type::HttpRequest::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->operation_ = const_cast< ::google::logging::v2::LogEntryOperation*>(
      ::google::logging::v2::LogEntryOperation::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->source_location_ = const_cast< ::google::logging::v2::LogEntrySourceLocation*>(
      ::google::logging::v2::LogEntrySourceLocation::internal_default_instance());
}
class LogEntry::HasBitSetters {
 public:
  static const ::google::api::MonitoredResource& resource(const LogEntry* msg);
  static const ::google::protobuf::Any& proto_payload(const LogEntry* msg);
  static const ::google::protobuf::Struct& json_payload(const LogEntry* msg);
  static const ::google::protobuf::Timestamp& timestamp(const LogEntry* msg);
  static const ::google::protobuf::Timestamp& receive_timestamp(const LogEntry* msg);
  static const ::google::logging::type::HttpRequest& http_request(const LogEntry* msg);
  static const ::google::logging::v2::LogEntryOperation& operation(const LogEntry* msg);
  static const ::google::logging::v2::LogEntrySourceLocation& source_location(const LogEntry* msg);
};

const ::google::api::MonitoredResource&
LogEntry::HasBitSetters::resource(const LogEntry* msg) {
  return *msg->resource_;
}
const ::google::protobuf::Any&
LogEntry::HasBitSetters::proto_payload(const LogEntry* msg) {
  return *msg->payload_.proto_payload_;
}
const ::google::protobuf::Struct&
LogEntry::HasBitSetters::json_payload(const LogEntry* msg) {
  return *msg->payload_.json_payload_;
}
const ::google::protobuf::Timestamp&
LogEntry::HasBitSetters::timestamp(const LogEntry* msg) {
  return *msg->timestamp_;
}
const ::google::protobuf::Timestamp&
LogEntry::HasBitSetters::receive_timestamp(const LogEntry* msg) {
  return *msg->receive_timestamp_;
}
const ::google::logging::type::HttpRequest&
LogEntry::HasBitSetters::http_request(const LogEntry* msg) {
  return *msg->http_request_;
}
const ::google::logging::v2::LogEntryOperation&
LogEntry::HasBitSetters::operation(const LogEntry* msg) {
  return *msg->operation_;
}
const ::google::logging::v2::LogEntrySourceLocation&
LogEntry::HasBitSetters::source_location(const LogEntry* msg) {
  return *msg->source_location_;
}
void LogEntry::unsafe_arena_set_allocated_resource(
    ::google::api::MonitoredResource* resource) {
  if (GetArenaNoVirtual() == nullptr) {
    delete resource_;
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.resource)
}
void LogEntry::clear_resource() {
  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
void LogEntry::set_allocated_proto_payload(::google::protobuf::Any* proto_payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (proto_payload) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proto_payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proto_payload, submessage_arena);
    }
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.proto_payload)
}
void LogEntry::clear_proto_payload() {
  if (has_proto_payload()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.proto_payload_;
    }
    clear_has_payload();
  }
}
void LogEntry::set_allocated_json_payload(::google::protobuf::Struct* json_payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (json_payload) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(json_payload)->GetArena();
    if (message_arena != submessage_arena) {
      json_payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, json_payload, submessage_arena);
    }
    set_has_json_payload();
    payload_.json_payload_ = json_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.json_payload)
}
void LogEntry::clear_json_payload() {
  if (has_json_payload()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.json_payload_;
    }
    clear_has_payload();
  }
}
void LogEntry::unsafe_arena_set_allocated_timestamp(
    ::google::protobuf::Timestamp* timestamp) {
  if (GetArenaNoVirtual() == nullptr) {
    delete timestamp_;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.timestamp)
}
void LogEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void LogEntry::unsafe_arena_set_allocated_receive_timestamp(
    ::google::protobuf::Timestamp* receive_timestamp) {
  if (GetArenaNoVirtual() == nullptr) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = receive_timestamp;
  if (receive_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.receive_timestamp)
}
void LogEntry::clear_receive_timestamp() {
  if (GetArenaNoVirtual() == nullptr && receive_timestamp_ != nullptr) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = nullptr;
}
void LogEntry::unsafe_arena_set_allocated_http_request(
    ::google::logging::type::HttpRequest* http_request) {
  if (GetArenaNoVirtual() == nullptr) {
    delete http_request_;
  }
  http_request_ = http_request;
  if (http_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.http_request)
}
void LogEntry::clear_http_request() {
  if (GetArenaNoVirtual() == nullptr && http_request_ != nullptr) {
    delete http_request_;
  }
  http_request_ = nullptr;
}
void LogEntry::unsafe_arena_set_allocated_operation(
    ::google::logging::v2::LogEntryOperation* operation) {
  if (GetArenaNoVirtual() == nullptr) {
    delete operation_;
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.operation)
}
void LogEntry::unsafe_arena_set_allocated_source_location(
    ::google::logging::v2::LogEntrySourceLocation* source_location) {
  if (GetArenaNoVirtual() == nullptr) {
    delete source_location_;
  }
  source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.source_location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kLogNameFieldNumber;
const int LogEntry::kResourceFieldNumber;
const int LogEntry::kProtoPayloadFieldNumber;
const int LogEntry::kTextPayloadFieldNumber;
const int LogEntry::kJsonPayloadFieldNumber;
const int LogEntry::kTimestampFieldNumber;
const int LogEntry::kReceiveTimestampFieldNumber;
const int LogEntry::kSeverityFieldNumber;
const int LogEntry::kInsertIdFieldNumber;
const int LogEntry::kHttpRequestFieldNumber;
const int LogEntry::kLabelsFieldNumber;
const int LogEntry::kOperationFieldNumber;
const int LogEntry::kTraceFieldNumber;
const int LogEntry::kSpanIdFieldNumber;
const int LogEntry::kTraceSampledFieldNumber;
const int LogEntry::kSourceLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntry)
}
LogEntry::LogEntry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  insert_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.insert_id().size() > 0) {
    insert_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_id(),
      GetArenaNoVirtual());
  }
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_name().size() > 0) {
    log_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_name(),
      GetArenaNoVirtual());
  }
  trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace().size() > 0) {
    trace_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace(),
      GetArenaNoVirtual());
  }
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.span_id(),
      GetArenaNoVirtual());
  }
  if (from.has_http_request()) {
    http_request_ = new ::google::logging::type::HttpRequest(*from.http_request_);
  } else {
    http_request_ = nullptr;
  }
  if (from.has_resource()) {
    resource_ = new ::google::api::MonitoredResource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_operation()) {
    operation_ = new ::google::logging::v2::LogEntryOperation(*from.operation_);
  } else {
    operation_ = nullptr;
  }
  if (from.has_source_location()) {
    source_location_ = new ::google::logging::v2::LogEntrySourceLocation(*from.source_location_);
  } else {
    source_location_ = nullptr;
  }
  if (from.has_receive_timestamp()) {
    receive_timestamp_ = new ::google::protobuf::Timestamp(*from.receive_timestamp_);
  } else {
    receive_timestamp_ = nullptr;
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_sampled_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(trace_sampled_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kProtoPayload: {
      mutable_proto_payload()->::google::protobuf::Any::MergeFrom(from.proto_payload());
      break;
    }
    case kTextPayload: {
      set_text_payload(from.text_payload());
      break;
    }
    case kJsonPayload: {
      mutable_json_payload()->::google::protobuf::Struct::MergeFrom(from.json_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntry)
}

void LogEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  insert_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&http_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_sampled_) -
      reinterpret_cast<char*>(&http_request_)) + sizeof(trace_sampled_));
  clear_has_payload();
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  insert_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete http_request_;
  if (this != internal_default_instance()) delete resource_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete operation_;
  if (this != internal_default_instance()) delete source_location_;
  if (this != internal_default_instance()) delete receive_timestamp_;
  if (has_payload()) {
    clear_payload();
  }
}

void LogEntry::ArenaDtor(void* object) {
  LogEntry* _this = reinterpret_cast< LogEntry* >(object);
  (void)_this;
}
void LogEntry::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntry& LogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  return *internal_default_instance();
}


void LogEntry::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:google.logging.v2.LogEntry)
  switch (payload_case()) {
    case kProtoPayload: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.proto_payload_;
      }
      break;
    }
    case kTextPayload: {
      payload_.text_payload_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kJsonPayload: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.json_payload_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  insert_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  log_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  trace_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  span_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && http_request_ != nullptr) {
    delete http_request_;
  }
  http_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && operation_ != nullptr) {
    delete operation_;
  }
  operation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_location_ != nullptr) {
    delete source_location_;
  }
  source_location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && receive_timestamp_ != nullptr) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = nullptr;
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_sampled_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(trace_sampled_));
  clear_payload();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any proto_payload = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Any::_InternalParse;
        object = msg->mutable_proto_payload();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string text_payload = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntry.text_payload");
        object = msg->mutable_text_payload();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string insert_id = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntry.insert_id");
        object = msg->mutable_insert_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Struct json_payload = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Struct::_InternalParse;
        object = msg->mutable_json_payload();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.logging.type.HttpRequest http_request = 7 [(.google.api.field_behavior) = OPTIONAL];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::logging::type::HttpRequest::_InternalParse;
        object = msg->mutable_http_request();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.api.MonitoredResource resource = 8 [(.google.api.field_behavior) = REQUIRED];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::api::MonitoredResource::_InternalParse;
        object = msg->mutable_resource();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp timestamp = 9 [(.google.api.field_behavior) = OPTIONAL];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.logging.type.LogSeverity severity = 10 [(.google.api.field_behavior) = OPTIONAL];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_severity(static_cast<::google::logging::type::LogSeverity>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> labels = 11 [(.google.api.field_behavior) = OPTIONAL];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      // string log_name = 12 [(.google.api.field_behavior) = REQUIRED];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntry.log_name");
        object = msg->mutable_log_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.logging.v2.LogEntryOperation operation = 15 [(.google.api.field_behavior) = OPTIONAL];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::logging::v2::LogEntryOperation::_InternalParse;
        object = msg->mutable_operation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string trace = 22 [(.google.api.field_behavior) = OPTIONAL];
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntry.trace");
        object = msg->mutable_trace();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.logging.v2.LogEntrySourceLocation source_location = 23 [(.google.api.field_behavior) = OPTIONAL];
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::logging::v2::LogEntrySourceLocation::_InternalParse;
        object = msg->mutable_source_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp receive_timestamp = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_receive_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string span_id = 27 [(.google.api.field_behavior) = OPTIONAL];
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntry.span_id");
        object = msg->mutable_span_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool trace_sampled = 30 [(.google.api.field_behavior) = OPTIONAL];
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_trace_sampled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.LogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Any proto_payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proto_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text_payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text_payload().data(), static_cast<int>(this->text_payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.text_payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string insert_id = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->insert_id().data(), static_cast<int>(this->insert_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.insert_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct json_payload = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_json_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.type.HttpRequest http_request = 7 [(.google.api.field_behavior) = OPTIONAL];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_http_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.MonitoredResource resource = 8 [(.google.api.field_behavior) = REQUIRED];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp = 9 [(.google.api.field_behavior) = OPTIONAL];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.type.LogSeverity severity = 10 [(.google.api.field_behavior) = OPTIONAL];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_severity(static_cast< ::google::logging::type::LogSeverity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 11 [(.google.api.field_behavior) = OPTIONAL];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          LogEntry_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              LogEntry_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log_name = 12 [(.google.api.field_behavior) = REQUIRED];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_name().data(), static_cast<int>(this->log_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.log_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.v2.LogEntryOperation operation = 15 [(.google.api.field_behavior) = OPTIONAL];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trace = 22 [(.google.api.field_behavior) = OPTIONAL];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace().data(), static_cast<int>(this->trace().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.trace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.logging.v2.LogEntrySourceLocation source_location = 23 [(.google.api.field_behavior) = OPTIONAL];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp receive_timestamp = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_receive_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 27 [(.google.api.field_behavior) = OPTIONAL];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->span_id().data(), static_cast<int>(this->span_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntry.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool trace_sampled = 30 [(.google.api.field_behavior) = OPTIONAL];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trace_sampled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.LogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any proto_payload = 2;
  if (has_proto_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::proto_payload(this), output);
  }

  // string text_payload = 3;
  if (has_text_payload()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_payload().data(), static_cast<int>(this->text_payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.text_payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_payload(), output);
  }

  // string insert_id = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->insert_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insert_id().data(), static_cast<int>(this->insert_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.insert_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->insert_id(), output);
  }

  // .google.protobuf.Struct json_payload = 6;
  if (has_json_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::json_payload(this), output);
  }

  // .google.logging.type.HttpRequest http_request = 7 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_http_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::http_request(this), output);
  }

  // .google.api.MonitoredResource resource = 8 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::resource(this), output);
  }

  // .google.protobuf.Timestamp timestamp = 9 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::timestamp(this), output);
  }

  // .google.logging.type.LogSeverity severity = 10 [(.google.api.field_behavior) = OPTIONAL];
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->severity(), output);
  }

  // map<string, string> labels = 11 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LogEntry_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<LogEntry_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string log_name = 12 [(.google.api.field_behavior) = REQUIRED];
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), static_cast<int>(this->log_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.log_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->log_name(), output);
  }

  // .google.logging.v2.LogEntryOperation operation = 15 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::operation(this), output);
  }

  // string trace = 22 [(.google.api.field_behavior) = OPTIONAL];
  if (this->trace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace().data(), static_cast<int>(this->trace().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->trace(), output);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_source_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::source_location(this), output);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_receive_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::receive_timestamp(this), output);
  }

  // string span_id = 27 [(.google.api.field_behavior) = OPTIONAL];
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->span_id(), output);
  }

  // bool trace_sampled = 30 [(.google.api.field_behavior) = OPTIONAL];
  if (this->trace_sampled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->trace_sampled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.logging.v2.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any proto_payload = 2;
  if (has_proto_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::proto_payload(this), target);
  }

  // string text_payload = 3;
  if (has_text_payload()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text_payload().data(), static_cast<int>(this->text_payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.text_payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_payload(), target);
  }

  // string insert_id = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->insert_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->insert_id().data(), static_cast<int>(this->insert_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.insert_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->insert_id(), target);
  }

  // .google.protobuf.Struct json_payload = 6;
  if (has_json_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::json_payload(this), target);
  }

  // .google.logging.type.HttpRequest http_request = 7 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_http_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::http_request(this), target);
  }

  // .google.api.MonitoredResource resource = 8 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::resource(this), target);
  }

  // .google.protobuf.Timestamp timestamp = 9 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::timestamp(this), target);
  }

  // .google.logging.type.LogSeverity severity = 10 [(.google.api.field_behavior) = OPTIONAL];
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->severity(), target);
  }

  // map<string, string> labels = 11 [(.google.api.field_behavior) = OPTIONAL];
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<LogEntry_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<LogEntry_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(11, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string log_name = 12 [(.google.api.field_behavior) = REQUIRED];
  if (this->log_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_name().data(), static_cast<int>(this->log_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.log_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->log_name(), target);
  }

  // .google.logging.v2.LogEntryOperation operation = 15 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::operation(this), target);
  }

  // string trace = 22 [(.google.api.field_behavior) = OPTIONAL];
  if (this->trace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace().data(), static_cast<int>(this->trace().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->trace(), target);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_source_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::source_location(this), target);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_receive_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::receive_timestamp(this), target);
  }

  // string span_id = 27 [(.google.api.field_behavior) = OPTIONAL];
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->span_id().data(), static_cast<int>(this->span_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.span_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->span_id(), target);
  }

  // bool trace_sampled = 30 [(.google.api.field_behavior) = OPTIONAL];
  if (this->trace_sampled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->trace_sampled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 11 [(.google.api.field_behavior) = OPTIONAL];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<LogEntry_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != nullptr && entry->GetArena() != nullptr) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != nullptr && entry->GetArena() != nullptr) {
      entry.release();
    }
  }

  // string insert_id = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->insert_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->insert_id());
  }

  // string log_name = 12 [(.google.api.field_behavior) = REQUIRED];
  if (this->log_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_name());
  }

  // string trace = 22 [(.google.api.field_behavior) = OPTIONAL];
  if (this->trace().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace());
  }

  // string span_id = 27 [(.google.api.field_behavior) = OPTIONAL];
  if (this->span_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->span_id());
  }

  // .google.logging.type.HttpRequest http_request = 7 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_http_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *http_request_);
  }

  // .google.api.MonitoredResource resource = 8 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  // .google.protobuf.Timestamp timestamp = 9 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .google.logging.v2.LogEntryOperation operation = 15 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_operation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *operation_);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23 [(.google.api.field_behavior) = OPTIONAL];
  if (this->has_source_location()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_location_);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_receive_timestamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *receive_timestamp_);
  }

  // .google.logging.type.LogSeverity severity = 10 [(.google.api.field_behavior) = OPTIONAL];
  if (this->severity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  // bool trace_sampled = 30 [(.google.api.field_behavior) = OPTIONAL];
  if (this->trace_sampled() != 0) {
    total_size += 2 + 1;
  }

  switch (payload_case()) {
    // .google.protobuf.Any proto_payload = 2;
    case kProtoPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.proto_payload_);
      break;
    }
    // string text_payload = 3;
    case kTextPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_payload());
      break;
    }
    // .google.protobuf.Struct json_payload = 6;
    case kJsonPayload: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.json_payload_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::DynamicCastToGenerated<LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.insert_id().size() > 0) {
    set_insert_id(from.insert_id());
  }
  if (from.log_name().size() > 0) {
    set_log_name(from.log_name());
  }
  if (from.trace().size() > 0) {
    set_trace(from.trace());
  }
  if (from.span_id().size() > 0) {
    set_span_id(from.span_id());
  }
  if (from.has_http_request()) {
    mutable_http_request()->::google::logging::type::HttpRequest::MergeFrom(from.http_request());
  }
  if (from.has_resource()) {
    mutable_resource()->::google::api::MonitoredResource::MergeFrom(from.resource());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_operation()) {
    mutable_operation()->::google::logging::v2::LogEntryOperation::MergeFrom(from.operation());
  }
  if (from.has_source_location()) {
    mutable_source_location()->::google::logging::v2::LogEntrySourceLocation::MergeFrom(from.source_location());
  }
  if (from.has_receive_timestamp()) {
    mutable_receive_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.receive_timestamp());
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
  if (from.trace_sampled() != 0) {
    set_trace_sampled(from.trace_sampled());
  }
  switch (from.payload_case()) {
    case kProtoPayload: {
      mutable_proto_payload()->::google::protobuf::Any::MergeFrom(from.proto_payload());
      break;
    }
    case kTextPayload: {
      set_text_payload(from.text_payload());
      break;
    }
    case kJsonPayload: {
      mutable_json_payload()->::google::protobuf::Struct::MergeFrom(from.json_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogEntry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void LogEntry::UnsafeArenaSwap(LogEntry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  insert_id_.Swap(&other->insert_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_name_.Swap(&other->log_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trace_.Swap(&other->trace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(http_request_, other->http_request_);
  swap(resource_, other->resource_);
  swap(timestamp_, other->timestamp_);
  swap(operation_, other->operation_);
  swap(source_location_, other->source_location_);
  swap(receive_timestamp_, other->receive_timestamp_);
  swap(severity_, other->severity_);
  swap(trace_sampled_, other->trace_sampled_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
  return ::file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogEntryOperation::InitAsDefaultInstance() {
}
class LogEntryOperation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntryOperation::kIdFieldNumber;
const int LogEntryOperation::kProducerFieldNumber;
const int LogEntryOperation::kFirstFieldNumber;
const int LogEntryOperation::kLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntryOperation::LogEntryOperation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntryOperation)
}
LogEntryOperation::LogEntryOperation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntryOperation)
}
LogEntryOperation::LogEntryOperation(const LogEntryOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.producer().size() > 0) {
    producer_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.producer(),
      GetArenaNoVirtual());
  }
  ::memcpy(&first_, &from.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_) -
    reinterpret_cast<char*>(&first_)) + sizeof(last_));
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntryOperation)
}

void LogEntryOperation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_) -
      reinterpret_cast<char*>(&first_)) + sizeof(last_));
}

LogEntryOperation::~LogEntryOperation() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntryOperation)
  SharedDtor();
}

void LogEntryOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogEntryOperation::ArenaDtor(void* object) {
  LogEntryOperation* _this = reinterpret_cast< LogEntryOperation* >(object);
  (void)_this;
}
void LogEntryOperation::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void LogEntryOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntryOperation& LogEntryOperation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  return *internal_default_instance();
}


void LogEntryOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntryOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  producer_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_) -
      reinterpret_cast<char*>(&first_)) + sizeof(last_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogEntryOperation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogEntryOperation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1 [(.google.api.field_behavior) = OPTIONAL];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntryOperation.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string producer = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntryOperation.producer");
        object = msg->mutable_producer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool first = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_first(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool last = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogEntryOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.LogEntryOperation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1 [(.google.api.field_behavior) = OPTIONAL];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntryOperation.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string producer = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer().data(), static_cast<int>(this->producer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntryOperation.producer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool first = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool last = 4 [(.google.api.field_behavior) = OPTIONAL];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.LogEntryOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.LogEntryOperation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogEntryOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.LogEntryOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string producer = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->producer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer().data(), static_cast<int>(this->producer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.producer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->producer(), output);
  }

  // bool first = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->first() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->first(), output);
  }

  // bool last = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->last(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.logging.v2.LogEntryOperation)
}

::google::protobuf::uint8* LogEntryOperation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntryOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string producer = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->producer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer().data(), static_cast<int>(this->producer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.producer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->producer(), target);
  }

  // bool first = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->first() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->first(), target);
  }

  // bool last = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->last(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntryOperation)
  return target;
}

size_t LogEntryOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntryOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string producer = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->producer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->producer());
  }

  // bool first = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->first() != 0) {
    total_size += 1 + 1;
  }

  // bool last = 4 [(.google.api.field_behavior) = OPTIONAL];
  if (this->last() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntryOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntryOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntryOperation* source =
      ::google::protobuf::DynamicCastToGenerated<LogEntryOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntryOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntryOperation)
    MergeFrom(*source);
  }
}

void LogEntryOperation::MergeFrom(const LogEntryOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntryOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.producer().size() > 0) {
    set_producer(from.producer());
  }
  if (from.first() != 0) {
    set_first(from.first());
  }
  if (from.last() != 0) {
    set_last(from.last());
  }
}

void LogEntryOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntryOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryOperation::CopyFrom(const LogEntryOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntryOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryOperation::IsInitialized() const {
  return true;
}

void LogEntryOperation::Swap(LogEntryOperation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogEntryOperation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void LogEntryOperation::UnsafeArenaSwap(LogEntryOperation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogEntryOperation::InternalSwap(LogEntryOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  producer_.Swap(&other->producer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(first_, other->first_);
  swap(last_, other->last_);
}

::google::protobuf::Metadata LogEntryOperation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
  return ::file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LogEntrySourceLocation::InitAsDefaultInstance() {
}
class LogEntrySourceLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntrySourceLocation::kFileFieldNumber;
const int LogEntrySourceLocation::kLineFieldNumber;
const int LogEntrySourceLocation::kFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntrySourceLocation::LogEntrySourceLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntrySourceLocation)
}
LogEntrySourceLocation::LogEntrySourceLocation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntrySourceLocation)
}
LogEntrySourceLocation::LogEntrySourceLocation(const LogEntrySourceLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file(),
      GetArenaNoVirtual());
  }
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.function().size() > 0) {
    function_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function(),
      GetArenaNoVirtual());
  }
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntrySourceLocation)
}

void LogEntrySourceLocation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = PROTOBUF_LONGLONG(0);
}

LogEntrySourceLocation::~LogEntrySourceLocation() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntrySourceLocation)
  SharedDtor();
}

void LogEntrySourceLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogEntrySourceLocation::ArenaDtor(void* object) {
  LogEntrySourceLocation* _this = reinterpret_cast< LogEntrySourceLocation* >(object);
  (void)_this;
}
void LogEntrySourceLocation::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void LogEntrySourceLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntrySourceLocation& LogEntrySourceLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  return *internal_default_instance();
}


void LogEntrySourceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntrySourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  function_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  line_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogEntrySourceLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LogEntrySourceLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string file = 1 [(.google.api.field_behavior) = OPTIONAL];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntrySourceLocation.file");
        object = msg->mutable_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 line = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_line(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string function = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.logging.v2.LogEntrySourceLocation.function");
        object = msg->mutable_function();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogEntrySourceLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.v2.LogEntrySourceLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file = 1 [(.google.api.field_behavior) = OPTIONAL];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntrySourceLocation.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 line = 2 [(.google.api.field_behavior) = OPTIONAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string function = 3 [(.google.api.field_behavior) = OPTIONAL];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function().data(), static_cast<int>(this->function().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.v2.LogEntrySourceLocation.function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.v2.LogEntrySourceLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.v2.LogEntrySourceLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogEntrySourceLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.v2.LogEntrySourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // int64 line = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->line(), output);
  }

  // string function = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), static_cast<int>(this->function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.logging.v2.LogEntrySourceLocation)
}

::google::protobuf::uint8* LogEntrySourceLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntrySourceLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // int64 line = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->line(), target);
  }

  // string function = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), static_cast<int>(this->function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntrySourceLocation)
  return target;
}

size_t LogEntrySourceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntrySourceLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file = 1 [(.google.api.field_behavior) = OPTIONAL];
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string function = 3 [(.google.api.field_behavior) = OPTIONAL];
  if (this->function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function());
  }

  // int64 line = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (this->line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntrySourceLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntrySourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntrySourceLocation* source =
      ::google::protobuf::DynamicCastToGenerated<LogEntrySourceLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntrySourceLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntrySourceLocation)
    MergeFrom(*source);
  }
}

void LogEntrySourceLocation::MergeFrom(const LogEntrySourceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntrySourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {
    set_file(from.file());
  }
  if (from.function().size() > 0) {
    set_function(from.function());
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
}

void LogEntrySourceLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntrySourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntrySourceLocation::CopyFrom(const LogEntrySourceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntrySourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntrySourceLocation::IsInitialized() const {
  return true;
}

void LogEntrySourceLocation::Swap(LogEntrySourceLocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogEntrySourceLocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void LogEntrySourceLocation::UnsafeArenaSwap(LogEntrySourceLocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogEntrySourceLocation::InternalSwap(LogEntrySourceLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  function_.Swap(&other->function_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(line_, other->line_);
}

::google::protobuf::Metadata LogEntrySourceLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2flogging_2fv2_2flog_5fentry_2eproto);
  return ::file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace logging
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntry* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntryOperation* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntryOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntryOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntrySourceLocation* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntrySourceLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntrySourceLocation >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
