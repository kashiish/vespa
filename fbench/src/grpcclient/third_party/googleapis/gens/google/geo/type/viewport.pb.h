// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/geo/type/viewport.proto

#ifndef PROTOBUF_INCLUDED_google_2fgeo_2ftype_2fviewport_2eproto
#define PROTOBUF_INCLUDED_google_2fgeo_2ftype_2fviewport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fgeo_2ftype_2fviewport_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fgeo_2ftype_2fviewport_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fgeo_2ftype_2fviewport_2eproto();
namespace google {
namespace geo {
namespace type {
class Viewport;
class ViewportDefaultTypeInternal;
extern ViewportDefaultTypeInternal _Viewport_default_instance_;
}  // namespace type
}  // namespace geo
namespace protobuf {
template<> ::google::geo::type::Viewport* Arena::CreateMaybeMessage<::google::geo::type::Viewport>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace geo {
namespace type {

// ===================================================================

class Viewport final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.geo.type.Viewport) */ {
 public:
  Viewport();
  virtual ~Viewport();

  Viewport(const Viewport& from);

  inline Viewport& operator=(const Viewport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Viewport(Viewport&& from) noexcept
    : Viewport() {
    *this = ::std::move(from);
  }

  inline Viewport& operator=(Viewport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Viewport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Viewport* internal_default_instance() {
    return reinterpret_cast<const Viewport*>(
               &_Viewport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Viewport* other);
  friend void swap(Viewport& a, Viewport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Viewport* New() const final {
    return CreateMaybeMessage<Viewport>(nullptr);
  }

  Viewport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Viewport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Viewport& from);
  void MergeFrom(const Viewport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Viewport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.type.LatLng low = 1;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 1;
  const ::google::type::LatLng& low() const;
  ::google::type::LatLng* release_low();
  ::google::type::LatLng* mutable_low();
  void set_allocated_low(::google::type::LatLng* low);

  // .google.type.LatLng high = 2;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 2;
  const ::google::type::LatLng& high() const;
  ::google::type::LatLng* release_high();
  ::google::type::LatLng* mutable_high();
  void set_allocated_high(::google::type::LatLng* high);

  // @@protoc_insertion_point(class_scope:google.geo.type.Viewport)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::type::LatLng* low_;
  ::google::type::LatLng* high_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fgeo_2ftype_2fviewport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Viewport

// .google.type.LatLng low = 1;
inline bool Viewport::has_low() const {
  return this != internal_default_instance() && low_ != nullptr;
}
inline const ::google::type::LatLng& Viewport::low() const {
  const ::google::type::LatLng* p = low_;
  // @@protoc_insertion_point(field_get:google.geo.type.Viewport.low)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::type::LatLng*>(
      &::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* Viewport::release_low() {
  // @@protoc_insertion_point(field_release:google.geo.type.Viewport.low)
  
  ::google::type::LatLng* temp = low_;
  low_ = nullptr;
  return temp;
}
inline ::google::type::LatLng* Viewport::mutable_low() {
  
  if (low_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::LatLng>(GetArenaNoVirtual());
    low_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.geo.type.Viewport.low)
  return low_;
}
inline void Viewport::set_allocated_low(::google::type::LatLng* low) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(low_);
  }
  if (low) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(low)->GetArena();
    if (message_arena != submessage_arena) {
      low = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, low, submessage_arena);
    }
    
  } else {
    
  }
  low_ = low;
  // @@protoc_insertion_point(field_set_allocated:google.geo.type.Viewport.low)
}

// .google.type.LatLng high = 2;
inline bool Viewport::has_high() const {
  return this != internal_default_instance() && high_ != nullptr;
}
inline const ::google::type::LatLng& Viewport::high() const {
  const ::google::type::LatLng* p = high_;
  // @@protoc_insertion_point(field_get:google.geo.type.Viewport.high)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::type::LatLng*>(
      &::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* Viewport::release_high() {
  // @@protoc_insertion_point(field_release:google.geo.type.Viewport.high)
  
  ::google::type::LatLng* temp = high_;
  high_ = nullptr;
  return temp;
}
inline ::google::type::LatLng* Viewport::mutable_high() {
  
  if (high_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::type::LatLng>(GetArenaNoVirtual());
    high_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.geo.type.Viewport.high)
  return high_;
}
inline void Viewport::set_allocated_high(::google::type::LatLng* high) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(high_);
  }
  if (high) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(high)->GetArena();
    if (message_arena != submessage_arena) {
      high = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, high, submessage_arena);
    }
    
  } else {
    
  }
  high_ = high;
  // @@protoc_insertion_point(field_set_allocated:google.geo.type.Viewport.high)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace geo
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fgeo_2ftype_2fviewport_2eproto
