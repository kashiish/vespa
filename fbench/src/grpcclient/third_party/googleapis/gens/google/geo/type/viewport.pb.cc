// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/geo/type/viewport.proto

#include "google/geo/type/viewport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2ftype_2flatlng_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LatLng_google_2ftype_2flatlng_2eproto;
namespace google {
namespace geo {
namespace type {
class ViewportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Viewport> _instance;
} _Viewport_default_instance_;
}  // namespace type
}  // namespace geo
}  // namespace google
static void InitDefaultsViewport_google_2fgeo_2ftype_2fviewport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::geo::type::_Viewport_default_instance_;
    new (ptr) ::google::geo::type::Viewport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::geo::type::Viewport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Viewport_google_2fgeo_2ftype_2fviewport_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsViewport_google_2fgeo_2ftype_2fviewport_2eproto}, {
      &scc_info_LatLng_google_2ftype_2flatlng_2eproto.base,}};

void InitDefaults_google_2fgeo_2ftype_2fviewport_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Viewport_google_2fgeo_2ftype_2fviewport_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fgeo_2ftype_2fviewport_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_google_2fgeo_2ftype_2fviewport_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fgeo_2ftype_2fviewport_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fgeo_2ftype_2fviewport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::geo::type::Viewport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::geo::type::Viewport, low_),
  PROTOBUF_FIELD_OFFSET(::google::geo::type::Viewport, high_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::geo::type::Viewport)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::geo::type::_Viewport_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fgeo_2ftype_2fviewport_2eproto = {
  {}, AddDescriptors_google_2fgeo_2ftype_2fviewport_2eproto, "google/geo/type/viewport.proto", schemas,
  file_default_instances, TableStruct_google_2fgeo_2ftype_2fviewport_2eproto::offsets,
  file_level_metadata_google_2fgeo_2ftype_2fviewport_2eproto, 1, file_level_enum_descriptors_google_2fgeo_2ftype_2fviewport_2eproto, file_level_service_descriptors_google_2fgeo_2ftype_2fviewport_2eproto,
};

const char descriptor_table_protodef_google_2fgeo_2ftype_2fviewport_2eproto[] =
  "\n\036google/geo/type/viewport.proto\022\017google"
  ".geo.type\032\030google/type/latlng.proto\"O\n\010V"
  "iewport\022 \n\003low\030\001 \001(\0132\023.google.type.LatLn"
  "g\022!\n\004high\030\002 \001(\0132\023.google.type.LatLngBo\n\023"
  "com.google.geo.typeB\rViewportProtoP\001Z@go"
  "ogle.golang.org/genproto/googleapis/geo/"
  "type/viewport;viewport\242\002\004GGTPb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto = {
  false, InitDefaults_google_2fgeo_2ftype_2fviewport_2eproto, 
  descriptor_table_protodef_google_2fgeo_2ftype_2fviewport_2eproto,
  "google/geo/type/viewport.proto", &assign_descriptors_table_google_2fgeo_2ftype_2fviewport_2eproto, 277,
};

void AddDescriptors_google_2fgeo_2ftype_2fviewport_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2ftype_2flatlng_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fgeo_2ftype_2fviewport_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fgeo_2ftype_2fviewport_2eproto = []() { AddDescriptors_google_2fgeo_2ftype_2fviewport_2eproto(); return true; }();
namespace google {
namespace geo {
namespace type {

// ===================================================================

void Viewport::InitAsDefaultInstance() {
  ::google::geo::type::_Viewport_default_instance_._instance.get_mutable()->low_ = const_cast< ::google::type::LatLng*>(
      ::google::type::LatLng::internal_default_instance());
  ::google::geo::type::_Viewport_default_instance_._instance.get_mutable()->high_ = const_cast< ::google::type::LatLng*>(
      ::google::type::LatLng::internal_default_instance());
}
class Viewport::HasBitSetters {
 public:
  static const ::google::type::LatLng& low(const Viewport* msg);
  static const ::google::type::LatLng& high(const Viewport* msg);
};

const ::google::type::LatLng&
Viewport::HasBitSetters::low(const Viewport* msg) {
  return *msg->low_;
}
const ::google::type::LatLng&
Viewport::HasBitSetters::high(const Viewport* msg) {
  return *msg->high_;
}
void Viewport::clear_low() {
  if (GetArenaNoVirtual() == nullptr && low_ != nullptr) {
    delete low_;
  }
  low_ = nullptr;
}
void Viewport::clear_high() {
  if (GetArenaNoVirtual() == nullptr && high_ != nullptr) {
    delete high_;
  }
  high_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Viewport::kLowFieldNumber;
const int Viewport::kHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Viewport::Viewport()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.geo.type.Viewport)
}
Viewport::Viewport(const Viewport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_low()) {
    low_ = new ::google::type::LatLng(*from.low_);
  } else {
    low_ = nullptr;
  }
  if (from.has_high()) {
    high_ = new ::google::type::LatLng(*from.high_);
  } else {
    high_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.geo.type.Viewport)
}

void Viewport::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Viewport_google_2fgeo_2ftype_2fviewport_2eproto.base);
  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_) -
      reinterpret_cast<char*>(&low_)) + sizeof(high_));
}

Viewport::~Viewport() {
  // @@protoc_insertion_point(destructor:google.geo.type.Viewport)
  SharedDtor();
}

void Viewport::SharedDtor() {
  if (this != internal_default_instance()) delete low_;
  if (this != internal_default_instance()) delete high_;
}

void Viewport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Viewport& Viewport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Viewport_google_2fgeo_2ftype_2fviewport_2eproto.base);
  return *internal_default_instance();
}


void Viewport::Clear() {
// @@protoc_insertion_point(message_clear_start:google.geo.type.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && low_ != nullptr) {
    delete low_;
  }
  low_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_ != nullptr) {
    delete high_;
  }
  high_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Viewport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Viewport*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.type.LatLng low = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::type::LatLng::_InternalParse;
        object = msg->mutable_low();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.type.LatLng high = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::type::LatLng::_InternalParse;
        object = msg->mutable_high();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Viewport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.geo.type.Viewport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.type.LatLng low = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.LatLng high = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.geo.type.Viewport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.geo.type.Viewport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Viewport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.geo.type.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.LatLng low = 1;
  if (this->has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::low(this), output);
  }

  // .google.type.LatLng high = 2;
  if (this->has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::high(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.geo.type.Viewport)
}

::google::protobuf::uint8* Viewport::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.geo.type.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.LatLng low = 1;
  if (this->has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::low(this), target);
  }

  // .google.type.LatLng high = 2;
  if (this->has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::high(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.geo.type.Viewport)
  return target;
}

size_t Viewport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.geo.type.Viewport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.type.LatLng low = 1;
  if (this->has_low()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *low_);
  }

  // .google.type.LatLng high = 2;
  if (this->has_high()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *high_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Viewport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.geo.type.Viewport)
  GOOGLE_DCHECK_NE(&from, this);
  const Viewport* source =
      ::google::protobuf::DynamicCastToGenerated<Viewport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.geo.type.Viewport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.geo.type.Viewport)
    MergeFrom(*source);
  }
}

void Viewport::MergeFrom(const Viewport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.geo.type.Viewport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_low()) {
    mutable_low()->::google::type::LatLng::MergeFrom(from.low());
  }
  if (from.has_high()) {
    mutable_high()->::google::type::LatLng::MergeFrom(from.high());
  }
}

void Viewport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.geo.type.Viewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Viewport::CopyFrom(const Viewport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.geo.type.Viewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Viewport::IsInitialized() const {
  return true;
}

void Viewport::Swap(Viewport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Viewport::InternalSwap(Viewport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(low_, other->low_);
  swap(high_, other->high_);
}

::google::protobuf::Metadata Viewport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fgeo_2ftype_2fviewport_2eproto);
  return ::file_level_metadata_google_2fgeo_2ftype_2fviewport_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace geo
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::geo::type::Viewport* Arena::CreateMaybeMessage< ::google::geo::type::Viewport >(Arena* arena) {
  return Arena::CreateInternal< ::google::geo::type::Viewport >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
