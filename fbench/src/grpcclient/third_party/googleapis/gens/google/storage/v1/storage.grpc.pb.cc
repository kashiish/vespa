// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/storage/v1/storage.proto

#include "google/storage/v1/storage.pb.h"
#include "google/storage/v1/storage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace storage {
namespace v1 {

static const char* Storage_method_names[] = {
  "/google.storage.v1.Storage/DeleteBucketAccessControl",
  "/google.storage.v1.Storage/GetBucketAccessControl",
  "/google.storage.v1.Storage/InsertBucketAccessControl",
  "/google.storage.v1.Storage/ListBucketAccessControls",
  "/google.storage.v1.Storage/UpdateBucketAccessControl",
  "/google.storage.v1.Storage/PatchBucketAccessControl",
  "/google.storage.v1.Storage/DeleteBucket",
  "/google.storage.v1.Storage/GetBucket",
  "/google.storage.v1.Storage/InsertBucket",
  "/google.storage.v1.Storage/ListChannels",
  "/google.storage.v1.Storage/ListBuckets",
  "/google.storage.v1.Storage/LockBucketRetentionPolicy",
  "/google.storage.v1.Storage/GetBucketIamPolicy",
  "/google.storage.v1.Storage/SetBucketIamPolicy",
  "/google.storage.v1.Storage/TestBucketIamPermissions",
  "/google.storage.v1.Storage/PatchBucket",
  "/google.storage.v1.Storage/UpdateBucket",
  "/google.storage.v1.Storage/StopChannel",
  "/google.storage.v1.Storage/DeleteDefaultObjectAccessControl",
  "/google.storage.v1.Storage/GetDefaultObjectAccessControl",
  "/google.storage.v1.Storage/InsertDefaultObjectAccessControl",
  "/google.storage.v1.Storage/ListDefaultObjectAccessControls",
  "/google.storage.v1.Storage/PatchDefaultObjectAccessControl",
  "/google.storage.v1.Storage/UpdateDefaultObjectAccessControl",
  "/google.storage.v1.Storage/DeleteNotification",
  "/google.storage.v1.Storage/GetNotification",
  "/google.storage.v1.Storage/InsertNotification",
  "/google.storage.v1.Storage/ListNotifications",
  "/google.storage.v1.Storage/DeleteObjectAccessControl",
  "/google.storage.v1.Storage/GetObjectAccessControl",
  "/google.storage.v1.Storage/InsertObjectAccessControl",
  "/google.storage.v1.Storage/ListObjectAccessControls",
  "/google.storage.v1.Storage/PatchObjectAccessControl",
  "/google.storage.v1.Storage/UpdateObjectAccessControl",
  "/google.storage.v1.Storage/ComposeObject",
  "/google.storage.v1.Storage/CopyObject",
  "/google.storage.v1.Storage/DeleteObject",
  "/google.storage.v1.Storage/GetObject",
  "/google.storage.v1.Storage/GetObjectMedia",
  "/google.storage.v1.Storage/InsertObject",
  "/google.storage.v1.Storage/ListObjects",
  "/google.storage.v1.Storage/RewriteObject",
  "/google.storage.v1.Storage/StartResumableWrite",
  "/google.storage.v1.Storage/QueryWriteStatus",
  "/google.storage.v1.Storage/PatchObject",
  "/google.storage.v1.Storage/UpdateObject",
  "/google.storage.v1.Storage/GetObjectIamPolicy",
  "/google.storage.v1.Storage/SetObjectIamPolicy",
  "/google.storage.v1.Storage/TestObjectIamPermissions",
  "/google.storage.v1.Storage/WatchAllObjects",
  "/google.storage.v1.Storage/GetServiceAccount",
  "/google.storage.v1.Storage/CreateHmacKey",
  "/google.storage.v1.Storage/DeleteHmacKey",
  "/google.storage.v1.Storage/GetHmacKey",
  "/google.storage.v1.Storage/ListHmacKeys",
  "/google.storage.v1.Storage/UpdateHmacKey",
};

std::unique_ptr< Storage::Stub> Storage::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Storage::Stub> stub(new Storage::Stub(channel, options));
  return stub;
}

Storage::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DeleteBucketAccessControl_(Storage_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBucketAccessControl_(Storage_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertBucketAccessControl_(Storage_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListBucketAccessControls_(Storage_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBucketAccessControl_(Storage_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchBucketAccessControl_(Storage_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteBucket_(Storage_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBucket_(Storage_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertBucket_(Storage_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListChannels_(Storage_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListBuckets_(Storage_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockBucketRetentionPolicy_(Storage_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBucketIamPolicy_(Storage_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBucketIamPolicy_(Storage_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestBucketIamPermissions_(Storage_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchBucket_(Storage_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateBucket_(Storage_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopChannel_(Storage_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDefaultObjectAccessControl_(Storage_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDefaultObjectAccessControl_(Storage_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertDefaultObjectAccessControl_(Storage_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDefaultObjectAccessControls_(Storage_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchDefaultObjectAccessControl_(Storage_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDefaultObjectAccessControl_(Storage_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNotification_(Storage_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNotification_(Storage_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertNotification_(Storage_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNotifications_(Storage_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteObjectAccessControl_(Storage_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectAccessControl_(Storage_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertObjectAccessControl_(Storage_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListObjectAccessControls_(Storage_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchObjectAccessControl_(Storage_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateObjectAccessControl_(Storage_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ComposeObject_(Storage_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CopyObject_(Storage_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteObject_(Storage_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObject_(Storage_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectMedia_(Storage_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_InsertObject_(Storage_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ListObjects_(Storage_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RewriteObject_(Storage_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartResumableWrite_(Storage_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryWriteStatus_(Storage_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PatchObject_(Storage_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateObject_(Storage_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectIamPolicy_(Storage_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetObjectIamPolicy_(Storage_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestObjectIamPermissions_(Storage_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchAllObjects_(Storage_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServiceAccount_(Storage_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateHmacKey_(Storage_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteHmacKey_(Storage_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHmacKey_(Storage_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListHmacKeys_(Storage_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateHmacKey_(Storage_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Storage::Stub::DeleteBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketAccessControlRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::DeleteBucketAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteBucketAccessControl_, context, request, response);
}

void Storage::Stub::async::DeleteBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketAccessControlRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::DeleteBucketAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBucketAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::DeleteBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketAccessControlRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBucketAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncDeleteBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::DeleteBucketAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteBucketAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncDeleteBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteBucketAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketAccessControlRequest& request, ::google::storage::v1::BucketAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBucketAccessControl_, context, request, response);
}

void Storage::Stub::async::GetBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucketAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucketAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::PrepareAsyncGetBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::BucketAccessControl, ::google::storage::v1::GetBucketAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBucketAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::AsyncGetBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBucketAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::InsertBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketAccessControlRequest& request, ::google::storage::v1::BucketAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::InsertBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertBucketAccessControl_, context, request, response);
}

void Storage::Stub::async::InsertBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::InsertBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBucketAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::InsertBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBucketAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::PrepareAsyncInsertBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::BucketAccessControl, ::google::storage::v1::InsertBucketAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertBucketAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::AsyncInsertBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertBucketAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ListBucketAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketAccessControlsRequest& request, ::google::storage::v1::ListBucketAccessControlsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListBucketAccessControlsRequest, ::google::storage::v1::ListBucketAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBucketAccessControls_, context, request, response);
}

void Storage::Stub::async::ListBucketAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketAccessControlsRequest* request, ::google::storage::v1::ListBucketAccessControlsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListBucketAccessControlsRequest, ::google::storage::v1::ListBucketAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBucketAccessControls_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListBucketAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketAccessControlsRequest* request, ::google::storage::v1::ListBucketAccessControlsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBucketAccessControls_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListBucketAccessControlsResponse>* Storage::Stub::PrepareAsyncListBucketAccessControlsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketAccessControlsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListBucketAccessControlsResponse, ::google::storage::v1::ListBucketAccessControlsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBucketAccessControls_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListBucketAccessControlsResponse>* Storage::Stub::AsyncListBucketAccessControlsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketAccessControlsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBucketAccessControlsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::UpdateBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketAccessControlRequest& request, ::google::storage::v1::BucketAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::UpdateBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBucketAccessControl_, context, request, response);
}

void Storage::Stub::async::UpdateBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::UpdateBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBucketAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::UpdateBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBucketAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::PrepareAsyncUpdateBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::BucketAccessControl, ::google::storage::v1::UpdateBucketAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBucketAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::AsyncUpdateBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBucketAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::PatchBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketAccessControlRequest& request, ::google::storage::v1::BucketAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::PatchBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchBucketAccessControl_, context, request, response);
}

void Storage::Stub::async::PatchBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::PatchBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchBucketAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::PatchBucketAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchBucketAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::PrepareAsyncPatchBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::BucketAccessControl, ::google::storage::v1::PatchBucketAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchBucketAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::BucketAccessControl>* Storage::Stub::AsyncPatchBucketAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchBucketAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::DeleteBucket(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::DeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteBucket_, context, request, response);
}

void Storage::Stub::async::DeleteBucket(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::DeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBucket_, context, request, response, std::move(f));
}

void Storage::Stub::async::DeleteBucket(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::DeleteBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncDeleteBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetBucket(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketRequest& request, ::google::storage::v1::Bucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBucket_, context, request, response);
}

void Storage::Stub::async::GetBucket(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketRequest* request, ::google::storage::v1::Bucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucket_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetBucket(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketRequest* request, ::google::storage::v1::Bucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::PrepareAsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Bucket, ::google::storage::v1::GetBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::AsyncGetBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::InsertBucket(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketRequest& request, ::google::storage::v1::Bucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::InsertBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertBucket_, context, request, response);
}

void Storage::Stub::async::InsertBucket(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketRequest* request, ::google::storage::v1::Bucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::InsertBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBucket_, context, request, response, std::move(f));
}

void Storage::Stub::async::InsertBucket(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketRequest* request, ::google::storage::v1::Bucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::PrepareAsyncInsertBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Bucket, ::google::storage::v1::InsertBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::AsyncInsertBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ListChannels(::grpc::ClientContext* context, const ::google::storage::v1::ListChannelsRequest& request, ::google::storage::v1::ListChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListChannelsRequest, ::google::storage::v1::ListChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListChannels_, context, request, response);
}

void Storage::Stub::async::ListChannels(::grpc::ClientContext* context, const ::google::storage::v1::ListChannelsRequest* request, ::google::storage::v1::ListChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListChannelsRequest, ::google::storage::v1::ListChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListChannels(::grpc::ClientContext* context, const ::google::storage::v1::ListChannelsRequest* request, ::google::storage::v1::ListChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListChannelsResponse>* Storage::Stub::PrepareAsyncListChannelsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListChannelsResponse, ::google::storage::v1::ListChannelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListChannelsResponse>* Storage::Stub::AsyncListChannelsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ListBuckets(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketsRequest& request, ::google::storage::v1::ListBucketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListBucketsRequest, ::google::storage::v1::ListBucketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBuckets_, context, request, response);
}

void Storage::Stub::async::ListBuckets(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketsRequest* request, ::google::storage::v1::ListBucketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListBucketsRequest, ::google::storage::v1::ListBucketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBuckets_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListBuckets(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketsRequest* request, ::google::storage::v1::ListBucketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBuckets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListBucketsResponse>* Storage::Stub::PrepareAsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListBucketsResponse, ::google::storage::v1::ListBucketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBuckets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListBucketsResponse>* Storage::Stub::AsyncListBucketsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListBucketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBucketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::LockBucketRetentionPolicy(::grpc::ClientContext* context, const ::google::storage::v1::LockRetentionPolicyRequest& request, ::google::storage::v1::Bucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::LockRetentionPolicyRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LockBucketRetentionPolicy_, context, request, response);
}

void Storage::Stub::async::LockBucketRetentionPolicy(::grpc::ClientContext* context, const ::google::storage::v1::LockRetentionPolicyRequest* request, ::google::storage::v1::Bucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::LockRetentionPolicyRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockBucketRetentionPolicy_, context, request, response, std::move(f));
}

void Storage::Stub::async::LockBucketRetentionPolicy(::grpc::ClientContext* context, const ::google::storage::v1::LockRetentionPolicyRequest* request, ::google::storage::v1::Bucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockBucketRetentionPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::PrepareAsyncLockBucketRetentionPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::LockRetentionPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Bucket, ::google::storage::v1::LockRetentionPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LockBucketRetentionPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::AsyncLockBucketRetentionPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::LockRetentionPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockBucketRetentionPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetBucketIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBucketIamPolicy_, context, request, response);
}

void Storage::Stub::async::GetBucketIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucketIamPolicy_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetBucketIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBucketIamPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::PrepareAsyncGetBucketIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::iam::v1::Policy, ::google::storage::v1::GetIamPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBucketIamPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::AsyncGetBucketIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBucketIamPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::SetBucketIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::SetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBucketIamPolicy_, context, request, response);
}

void Storage::Stub::async::SetBucketIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::SetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBucketIamPolicy_, context, request, response, std::move(f));
}

void Storage::Stub::async::SetBucketIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBucketIamPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::PrepareAsyncSetBucketIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::iam::v1::Policy, ::google::storage::v1::SetIamPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBucketIamPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::AsyncSetBucketIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBucketIamPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::TestBucketIamPermissions(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestBucketIamPermissions_, context, request, response);
}

void Storage::Stub::async::TestBucketIamPermissions(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestBucketIamPermissions_, context, request, response, std::move(f));
}

void Storage::Stub::async::TestBucketIamPermissions(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestBucketIamPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* Storage::Stub::PrepareAsyncTestBucketIamPermissionsRaw(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::iam::v1::TestIamPermissionsResponse, ::google::storage::v1::TestIamPermissionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestBucketIamPermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* Storage::Stub::AsyncTestBucketIamPermissionsRaw(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestBucketIamPermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::PatchBucket(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketRequest& request, ::google::storage::v1::Bucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::PatchBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchBucket_, context, request, response);
}

void Storage::Stub::async::PatchBucket(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketRequest* request, ::google::storage::v1::Bucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::PatchBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchBucket_, context, request, response, std::move(f));
}

void Storage::Stub::async::PatchBucket(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketRequest* request, ::google::storage::v1::Bucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::PrepareAsyncPatchBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Bucket, ::google::storage::v1::PatchBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::AsyncPatchBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::UpdateBucket(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketRequest& request, ::google::storage::v1::Bucket* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::UpdateBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateBucket_, context, request, response);
}

void Storage::Stub::async::UpdateBucket(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketRequest* request, ::google::storage::v1::Bucket* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::UpdateBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBucket_, context, request, response, std::move(f));
}

void Storage::Stub::async::UpdateBucket(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketRequest* request, ::google::storage::v1::Bucket* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateBucket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::PrepareAsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Bucket, ::google::storage::v1::UpdateBucketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateBucket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Bucket>* Storage::Stub::AsyncUpdateBucketRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateBucketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateBucketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::StopChannel(::grpc::ClientContext* context, const ::google::storage::v1::StopChannelRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::StopChannelRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopChannel_, context, request, response);
}

void Storage::Stub::async::StopChannel(::grpc::ClientContext* context, const ::google::storage::v1::StopChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::StopChannelRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopChannel_, context, request, response, std::move(f));
}

void Storage::Stub::async::StopChannel(::grpc::ClientContext* context, const ::google::storage::v1::StopChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncStopChannelRaw(::grpc::ClientContext* context, const ::google::storage::v1::StopChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::StopChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncStopChannelRaw(::grpc::ClientContext* context, const ::google::storage::v1::StopChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::DeleteDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteDefaultObjectAccessControlRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::DeleteDefaultObjectAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDefaultObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::DeleteDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteDefaultObjectAccessControlRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::DeleteDefaultObjectAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDefaultObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::DeleteDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteDefaultObjectAccessControlRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDefaultObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncDeleteDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::DeleteDefaultObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDefaultObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncDeleteDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDefaultObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetDefaultObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDefaultObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::GetDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDefaultObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDefaultObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncGetDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::GetDefaultObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDefaultObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncGetDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDefaultObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::InsertDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertDefaultObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::InsertDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertDefaultObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::InsertDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::InsertDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertDefaultObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::InsertDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertDefaultObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncInsertDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::InsertDefaultObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertDefaultObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncInsertDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertDefaultObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ListDefaultObjectAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListDefaultObjectAccessControlsRequest& request, ::google::storage::v1::ListObjectAccessControlsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListDefaultObjectAccessControlsRequest, ::google::storage::v1::ListObjectAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDefaultObjectAccessControls_, context, request, response);
}

void Storage::Stub::async::ListDefaultObjectAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListDefaultObjectAccessControlsRequest* request, ::google::storage::v1::ListObjectAccessControlsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListDefaultObjectAccessControlsRequest, ::google::storage::v1::ListObjectAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDefaultObjectAccessControls_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListDefaultObjectAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListDefaultObjectAccessControlsRequest* request, ::google::storage::v1::ListObjectAccessControlsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDefaultObjectAccessControls_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListObjectAccessControlsResponse>* Storage::Stub::PrepareAsyncListDefaultObjectAccessControlsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListDefaultObjectAccessControlsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListObjectAccessControlsResponse, ::google::storage::v1::ListDefaultObjectAccessControlsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDefaultObjectAccessControls_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListObjectAccessControlsResponse>* Storage::Stub::AsyncListDefaultObjectAccessControlsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListDefaultObjectAccessControlsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDefaultObjectAccessControlsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::PatchDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchDefaultObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::PatchDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchDefaultObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::PatchDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::PatchDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchDefaultObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::PatchDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchDefaultObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncPatchDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::PatchDefaultObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchDefaultObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncPatchDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchDefaultObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::UpdateDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateDefaultObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::UpdateDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDefaultObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::UpdateDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::UpdateDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDefaultObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::UpdateDefaultObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDefaultObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncUpdateDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::UpdateDefaultObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDefaultObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncUpdateDefaultObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateDefaultObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDefaultObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::DeleteNotification(::grpc::ClientContext* context, const ::google::storage::v1::DeleteNotificationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::DeleteNotificationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNotification_, context, request, response);
}

void Storage::Stub::async::DeleteNotification(::grpc::ClientContext* context, const ::google::storage::v1::DeleteNotificationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::DeleteNotificationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNotification_, context, request, response, std::move(f));
}

void Storage::Stub::async::DeleteNotification(::grpc::ClientContext* context, const ::google::storage::v1::DeleteNotificationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncDeleteNotificationRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::DeleteNotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNotification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncDeleteNotificationRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNotificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetNotification(::grpc::ClientContext* context, const ::google::storage::v1::GetNotificationRequest& request, ::google::storage::v1::Notification* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetNotificationRequest, ::google::storage::v1::Notification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNotification_, context, request, response);
}

void Storage::Stub::async::GetNotification(::grpc::ClientContext* context, const ::google::storage::v1::GetNotificationRequest* request, ::google::storage::v1::Notification* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetNotificationRequest, ::google::storage::v1::Notification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotification_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetNotification(::grpc::ClientContext* context, const ::google::storage::v1::GetNotificationRequest* request, ::google::storage::v1::Notification* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Notification>* Storage::Stub::PrepareAsyncGetNotificationRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Notification, ::google::storage::v1::GetNotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNotification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Notification>* Storage::Stub::AsyncGetNotificationRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNotificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::InsertNotification(::grpc::ClientContext* context, const ::google::storage::v1::InsertNotificationRequest& request, ::google::storage::v1::Notification* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::InsertNotificationRequest, ::google::storage::v1::Notification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertNotification_, context, request, response);
}

void Storage::Stub::async::InsertNotification(::grpc::ClientContext* context, const ::google::storage::v1::InsertNotificationRequest* request, ::google::storage::v1::Notification* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::InsertNotificationRequest, ::google::storage::v1::Notification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertNotification_, context, request, response, std::move(f));
}

void Storage::Stub::async::InsertNotification(::grpc::ClientContext* context, const ::google::storage::v1::InsertNotificationRequest* request, ::google::storage::v1::Notification* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertNotification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Notification>* Storage::Stub::PrepareAsyncInsertNotificationRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Notification, ::google::storage::v1::InsertNotificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertNotification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Notification>* Storage::Stub::AsyncInsertNotificationRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertNotificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertNotificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ListNotifications(::grpc::ClientContext* context, const ::google::storage::v1::ListNotificationsRequest& request, ::google::storage::v1::ListNotificationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListNotificationsRequest, ::google::storage::v1::ListNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNotifications_, context, request, response);
}

void Storage::Stub::async::ListNotifications(::grpc::ClientContext* context, const ::google::storage::v1::ListNotificationsRequest* request, ::google::storage::v1::ListNotificationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListNotificationsRequest, ::google::storage::v1::ListNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNotifications_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListNotifications(::grpc::ClientContext* context, const ::google::storage::v1::ListNotificationsRequest* request, ::google::storage::v1::ListNotificationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNotifications_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListNotificationsResponse>* Storage::Stub::PrepareAsyncListNotificationsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListNotificationsResponse, ::google::storage::v1::ListNotificationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNotifications_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListNotificationsResponse>* Storage::Stub::AsyncListNotificationsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListNotificationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNotificationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::DeleteObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectAccessControlRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::DeleteObjectAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::DeleteObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectAccessControlRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::DeleteObjectAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::DeleteObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectAccessControlRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncDeleteObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::DeleteObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncDeleteObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::GetObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncGetObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::GetObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncGetObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::InsertObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::InsertObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::InsertObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::InsertObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::InsertObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::InsertObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncInsertObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::InsertObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncInsertObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::InsertObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ListObjectAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectAccessControlsRequest& request, ::google::storage::v1::ListObjectAccessControlsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListObjectAccessControlsRequest, ::google::storage::v1::ListObjectAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListObjectAccessControls_, context, request, response);
}

void Storage::Stub::async::ListObjectAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectAccessControlsRequest* request, ::google::storage::v1::ListObjectAccessControlsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListObjectAccessControlsRequest, ::google::storage::v1::ListObjectAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListObjectAccessControls_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListObjectAccessControls(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectAccessControlsRequest* request, ::google::storage::v1::ListObjectAccessControlsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListObjectAccessControls_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListObjectAccessControlsResponse>* Storage::Stub::PrepareAsyncListObjectAccessControlsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectAccessControlsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListObjectAccessControlsResponse, ::google::storage::v1::ListObjectAccessControlsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListObjectAccessControls_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListObjectAccessControlsResponse>* Storage::Stub::AsyncListObjectAccessControlsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectAccessControlsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListObjectAccessControlsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::PatchObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::PatchObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::PatchObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::PatchObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::PatchObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncPatchObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::PatchObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncPatchObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::UpdateObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectAccessControlRequest& request, ::google::storage::v1::ObjectAccessControl* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::UpdateObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateObjectAccessControl_, context, request, response);
}

void Storage::Stub::async::UpdateObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::UpdateObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectAccessControl_, context, request, response, std::move(f));
}

void Storage::Stub::async::UpdateObjectAccessControl(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectAccessControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::PrepareAsyncUpdateObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ObjectAccessControl, ::google::storage::v1::UpdateObjectAccessControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateObjectAccessControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ObjectAccessControl>* Storage::Stub::AsyncUpdateObjectAccessControlRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectAccessControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateObjectAccessControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ComposeObject(::grpc::ClientContext* context, const ::google::storage::v1::ComposeObjectRequest& request, ::google::storage::v1::Object* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ComposeObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ComposeObject_, context, request, response);
}

void Storage::Stub::async::ComposeObject(::grpc::ClientContext* context, const ::google::storage::v1::ComposeObjectRequest* request, ::google::storage::v1::Object* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ComposeObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComposeObject_, context, request, response, std::move(f));
}

void Storage::Stub::async::ComposeObject(::grpc::ClientContext* context, const ::google::storage::v1::ComposeObjectRequest* request, ::google::storage::v1::Object* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ComposeObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::PrepareAsyncComposeObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::ComposeObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Object, ::google::storage::v1::ComposeObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ComposeObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::AsyncComposeObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::ComposeObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncComposeObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::CopyObject(::grpc::ClientContext* context, const ::google::storage::v1::CopyObjectRequest& request, ::google::storage::v1::Object* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::CopyObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CopyObject_, context, request, response);
}

void Storage::Stub::async::CopyObject(::grpc::ClientContext* context, const ::google::storage::v1::CopyObjectRequest* request, ::google::storage::v1::Object* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::CopyObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyObject_, context, request, response, std::move(f));
}

void Storage::Stub::async::CopyObject(::grpc::ClientContext* context, const ::google::storage::v1::CopyObjectRequest* request, ::google::storage::v1::Object* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CopyObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::PrepareAsyncCopyObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::CopyObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Object, ::google::storage::v1::CopyObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CopyObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::AsyncCopyObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::CopyObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCopyObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::DeleteObject(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::DeleteObjectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteObject_, context, request, response);
}

void Storage::Stub::async::DeleteObject(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::DeleteObjectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteObject_, context, request, response, std::move(f));
}

void Storage::Stub::async::DeleteObject(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::DeleteObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncDeleteObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetObject(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectRequest& request, ::google::storage::v1::Object* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetObject_, context, request, response);
}

void Storage::Stub::async::GetObject(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectRequest* request, ::google::storage::v1::Object* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObject_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetObject(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectRequest* request, ::google::storage::v1::Object* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::PrepareAsyncGetObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Object, ::google::storage::v1::GetObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::AsyncGetObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::google::storage::v1::GetObjectMediaResponse>* Storage::Stub::GetObjectMediaRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectMediaRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::google::storage::v1::GetObjectMediaResponse>::Create(channel_.get(), rpcmethod_GetObjectMedia_, context, request);
}

void Storage::Stub::async::GetObjectMedia(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectMediaRequest* request, ::grpc::ClientReadReactor< ::google::storage::v1::GetObjectMediaResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::google::storage::v1::GetObjectMediaResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetObjectMedia_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::storage::v1::GetObjectMediaResponse>* Storage::Stub::AsyncGetObjectMediaRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectMediaRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::storage::v1::GetObjectMediaResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectMedia_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::storage::v1::GetObjectMediaResponse>* Storage::Stub::PrepareAsyncGetObjectMediaRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetObjectMediaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::google::storage::v1::GetObjectMediaResponse>::Create(channel_.get(), cq, rpcmethod_GetObjectMedia_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::google::storage::v1::InsertObjectRequest>* Storage::Stub::InsertObjectRaw(::grpc::ClientContext* context, ::google::storage::v1::Object* response) {
  return ::grpc::internal::ClientWriterFactory< ::google::storage::v1::InsertObjectRequest>::Create(channel_.get(), rpcmethod_InsertObject_, context, response);
}

void Storage::Stub::async::InsertObject(::grpc::ClientContext* context, ::google::storage::v1::Object* response, ::grpc::ClientWriteReactor< ::google::storage::v1::InsertObjectRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::google::storage::v1::InsertObjectRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_InsertObject_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::google::storage::v1::InsertObjectRequest>* Storage::Stub::AsyncInsertObjectRaw(::grpc::ClientContext* context, ::google::storage::v1::Object* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::google::storage::v1::InsertObjectRequest>::Create(channel_.get(), cq, rpcmethod_InsertObject_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::google::storage::v1::InsertObjectRequest>* Storage::Stub::PrepareAsyncInsertObjectRaw(::grpc::ClientContext* context, ::google::storage::v1::Object* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::google::storage::v1::InsertObjectRequest>::Create(channel_.get(), cq, rpcmethod_InsertObject_, context, response, false, nullptr);
}

::grpc::Status Storage::Stub::ListObjects(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectsRequest& request, ::google::storage::v1::ListObjectsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListObjectsRequest, ::google::storage::v1::ListObjectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListObjects_, context, request, response);
}

void Storage::Stub::async::ListObjects(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectsRequest* request, ::google::storage::v1::ListObjectsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListObjectsRequest, ::google::storage::v1::ListObjectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListObjects_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListObjects(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectsRequest* request, ::google::storage::v1::ListObjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListObjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListObjectsResponse>* Storage::Stub::PrepareAsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListObjectsResponse, ::google::storage::v1::ListObjectsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListObjects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListObjectsResponse>* Storage::Stub::AsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListObjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::RewriteObject(::grpc::ClientContext* context, const ::google::storage::v1::RewriteObjectRequest& request, ::google::storage::v1::RewriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::RewriteObjectRequest, ::google::storage::v1::RewriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RewriteObject_, context, request, response);
}

void Storage::Stub::async::RewriteObject(::grpc::ClientContext* context, const ::google::storage::v1::RewriteObjectRequest* request, ::google::storage::v1::RewriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::RewriteObjectRequest, ::google::storage::v1::RewriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RewriteObject_, context, request, response, std::move(f));
}

void Storage::Stub::async::RewriteObject(::grpc::ClientContext* context, const ::google::storage::v1::RewriteObjectRequest* request, ::google::storage::v1::RewriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RewriteObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::RewriteResponse>* Storage::Stub::PrepareAsyncRewriteObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::RewriteObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::RewriteResponse, ::google::storage::v1::RewriteObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RewriteObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::RewriteResponse>* Storage::Stub::AsyncRewriteObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::RewriteObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRewriteObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::StartResumableWrite(::grpc::ClientContext* context, const ::google::storage::v1::StartResumableWriteRequest& request, ::google::storage::v1::StartResumableWriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::StartResumableWriteRequest, ::google::storage::v1::StartResumableWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartResumableWrite_, context, request, response);
}

void Storage::Stub::async::StartResumableWrite(::grpc::ClientContext* context, const ::google::storage::v1::StartResumableWriteRequest* request, ::google::storage::v1::StartResumableWriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::StartResumableWriteRequest, ::google::storage::v1::StartResumableWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartResumableWrite_, context, request, response, std::move(f));
}

void Storage::Stub::async::StartResumableWrite(::grpc::ClientContext* context, const ::google::storage::v1::StartResumableWriteRequest* request, ::google::storage::v1::StartResumableWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartResumableWrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::StartResumableWriteResponse>* Storage::Stub::PrepareAsyncStartResumableWriteRaw(::grpc::ClientContext* context, const ::google::storage::v1::StartResumableWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::StartResumableWriteResponse, ::google::storage::v1::StartResumableWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartResumableWrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::StartResumableWriteResponse>* Storage::Stub::AsyncStartResumableWriteRaw(::grpc::ClientContext* context, const ::google::storage::v1::StartResumableWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartResumableWriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::QueryWriteStatus(::grpc::ClientContext* context, const ::google::storage::v1::QueryWriteStatusRequest& request, ::google::storage::v1::QueryWriteStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::QueryWriteStatusRequest, ::google::storage::v1::QueryWriteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryWriteStatus_, context, request, response);
}

void Storage::Stub::async::QueryWriteStatus(::grpc::ClientContext* context, const ::google::storage::v1::QueryWriteStatusRequest* request, ::google::storage::v1::QueryWriteStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::QueryWriteStatusRequest, ::google::storage::v1::QueryWriteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryWriteStatus_, context, request, response, std::move(f));
}

void Storage::Stub::async::QueryWriteStatus(::grpc::ClientContext* context, const ::google::storage::v1::QueryWriteStatusRequest* request, ::google::storage::v1::QueryWriteStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryWriteStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::QueryWriteStatusResponse>* Storage::Stub::PrepareAsyncQueryWriteStatusRaw(::grpc::ClientContext* context, const ::google::storage::v1::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::QueryWriteStatusResponse, ::google::storage::v1::QueryWriteStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryWriteStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::QueryWriteStatusResponse>* Storage::Stub::AsyncQueryWriteStatusRaw(::grpc::ClientContext* context, const ::google::storage::v1::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryWriteStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::PatchObject(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectRequest& request, ::google::storage::v1::Object* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::PatchObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PatchObject_, context, request, response);
}

void Storage::Stub::async::PatchObject(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectRequest* request, ::google::storage::v1::Object* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::PatchObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchObject_, context, request, response, std::move(f));
}

void Storage::Stub::async::PatchObject(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectRequest* request, ::google::storage::v1::Object* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PatchObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::PrepareAsyncPatchObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Object, ::google::storage::v1::PatchObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PatchObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::AsyncPatchObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::PatchObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPatchObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::UpdateObject(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectRequest& request, ::google::storage::v1::Object* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::UpdateObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateObject_, context, request, response);
}

void Storage::Stub::async::UpdateObject(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectRequest* request, ::google::storage::v1::Object* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::UpdateObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateObject_, context, request, response, std::move(f));
}

void Storage::Stub::async::UpdateObject(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectRequest* request, ::google::storage::v1::Object* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::PrepareAsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Object, ::google::storage::v1::UpdateObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Object>* Storage::Stub::AsyncUpdateObjectRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetObjectIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetObjectIamPolicy_, context, request, response);
}

void Storage::Stub::async::GetObjectIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectIamPolicy_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetObjectIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectIamPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::PrepareAsyncGetObjectIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::iam::v1::Policy, ::google::storage::v1::GetIamPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetObjectIamPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::AsyncGetObjectIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetObjectIamPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::SetObjectIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::SetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetObjectIamPolicy_, context, request, response);
}

void Storage::Stub::async::SetObjectIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::SetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetObjectIamPolicy_, context, request, response, std::move(f));
}

void Storage::Stub::async::SetObjectIamPolicy(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetObjectIamPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::PrepareAsyncSetObjectIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::iam::v1::Policy, ::google::storage::v1::SetIamPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetObjectIamPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* Storage::Stub::AsyncSetObjectIamPolicyRaw(::grpc::ClientContext* context, const ::google::storage::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetObjectIamPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::TestObjectIamPermissions(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TestObjectIamPermissions_, context, request, response);
}

void Storage::Stub::async::TestObjectIamPermissions(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestObjectIamPermissions_, context, request, response, std::move(f));
}

void Storage::Stub::async::TestObjectIamPermissions(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TestObjectIamPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* Storage::Stub::PrepareAsyncTestObjectIamPermissionsRaw(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::iam::v1::TestIamPermissionsResponse, ::google::storage::v1::TestIamPermissionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TestObjectIamPermissions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* Storage::Stub::AsyncTestObjectIamPermissionsRaw(::grpc::ClientContext* context, const ::google::storage::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTestObjectIamPermissionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::WatchAllObjects(::grpc::ClientContext* context, const ::google::storage::v1::WatchAllObjectsRequest& request, ::google::storage::v1::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::WatchAllObjectsRequest, ::google::storage::v1::Channel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WatchAllObjects_, context, request, response);
}

void Storage::Stub::async::WatchAllObjects(::grpc::ClientContext* context, const ::google::storage::v1::WatchAllObjectsRequest* request, ::google::storage::v1::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::WatchAllObjectsRequest, ::google::storage::v1::Channel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WatchAllObjects_, context, request, response, std::move(f));
}

void Storage::Stub::async::WatchAllObjects(::grpc::ClientContext* context, const ::google::storage::v1::WatchAllObjectsRequest* request, ::google::storage::v1::Channel* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WatchAllObjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Channel>* Storage::Stub::PrepareAsyncWatchAllObjectsRaw(::grpc::ClientContext* context, const ::google::storage::v1::WatchAllObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::Channel, ::google::storage::v1::WatchAllObjectsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WatchAllObjects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::Channel>* Storage::Stub::AsyncWatchAllObjectsRaw(::grpc::ClientContext* context, const ::google::storage::v1::WatchAllObjectsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWatchAllObjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetServiceAccount(::grpc::ClientContext* context, const ::google::storage::v1::GetProjectServiceAccountRequest& request, ::google::storage::v1::ServiceAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetProjectServiceAccountRequest, ::google::storage::v1::ServiceAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServiceAccount_, context, request, response);
}

void Storage::Stub::async::GetServiceAccount(::grpc::ClientContext* context, const ::google::storage::v1::GetProjectServiceAccountRequest* request, ::google::storage::v1::ServiceAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetProjectServiceAccountRequest, ::google::storage::v1::ServiceAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceAccount_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetServiceAccount(::grpc::ClientContext* context, const ::google::storage::v1::GetProjectServiceAccountRequest* request, ::google::storage::v1::ServiceAccount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServiceAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ServiceAccount>* Storage::Stub::PrepareAsyncGetServiceAccountRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetProjectServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ServiceAccount, ::google::storage::v1::GetProjectServiceAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServiceAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ServiceAccount>* Storage::Stub::AsyncGetServiceAccountRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetProjectServiceAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServiceAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::CreateHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::CreateHmacKeyRequest& request, ::google::storage::v1::CreateHmacKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::CreateHmacKeyRequest, ::google::storage::v1::CreateHmacKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateHmacKey_, context, request, response);
}

void Storage::Stub::async::CreateHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::CreateHmacKeyRequest* request, ::google::storage::v1::CreateHmacKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::CreateHmacKeyRequest, ::google::storage::v1::CreateHmacKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateHmacKey_, context, request, response, std::move(f));
}

void Storage::Stub::async::CreateHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::CreateHmacKeyRequest* request, ::google::storage::v1::CreateHmacKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateHmacKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::CreateHmacKeyResponse>* Storage::Stub::PrepareAsyncCreateHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::CreateHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::CreateHmacKeyResponse, ::google::storage::v1::CreateHmacKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateHmacKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::CreateHmacKeyResponse>* Storage::Stub::AsyncCreateHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::CreateHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateHmacKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::DeleteHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::DeleteHmacKeyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::DeleteHmacKeyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteHmacKey_, context, request, response);
}

void Storage::Stub::async::DeleteHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::DeleteHmacKeyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::DeleteHmacKeyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteHmacKey_, context, request, response, std::move(f));
}

void Storage::Stub::async::DeleteHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::DeleteHmacKeyRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteHmacKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::PrepareAsyncDeleteHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::storage::v1::DeleteHmacKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteHmacKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Storage::Stub::AsyncDeleteHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::DeleteHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteHmacKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::GetHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::GetHmacKeyRequest& request, ::google::storage::v1::HmacKeyMetadata* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::GetHmacKeyRequest, ::google::storage::v1::HmacKeyMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHmacKey_, context, request, response);
}

void Storage::Stub::async::GetHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::GetHmacKeyRequest* request, ::google::storage::v1::HmacKeyMetadata* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::GetHmacKeyRequest, ::google::storage::v1::HmacKeyMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHmacKey_, context, request, response, std::move(f));
}

void Storage::Stub::async::GetHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::GetHmacKeyRequest* request, ::google::storage::v1::HmacKeyMetadata* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHmacKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::HmacKeyMetadata>* Storage::Stub::PrepareAsyncGetHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::HmacKeyMetadata, ::google::storage::v1::GetHmacKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHmacKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::HmacKeyMetadata>* Storage::Stub::AsyncGetHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::GetHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHmacKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::ListHmacKeys(::grpc::ClientContext* context, const ::google::storage::v1::ListHmacKeysRequest& request, ::google::storage::v1::ListHmacKeysResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::ListHmacKeysRequest, ::google::storage::v1::ListHmacKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListHmacKeys_, context, request, response);
}

void Storage::Stub::async::ListHmacKeys(::grpc::ClientContext* context, const ::google::storage::v1::ListHmacKeysRequest* request, ::google::storage::v1::ListHmacKeysResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::ListHmacKeysRequest, ::google::storage::v1::ListHmacKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListHmacKeys_, context, request, response, std::move(f));
}

void Storage::Stub::async::ListHmacKeys(::grpc::ClientContext* context, const ::google::storage::v1::ListHmacKeysRequest* request, ::google::storage::v1::ListHmacKeysResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListHmacKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListHmacKeysResponse>* Storage::Stub::PrepareAsyncListHmacKeysRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListHmacKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::ListHmacKeysResponse, ::google::storage::v1::ListHmacKeysRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListHmacKeys_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::ListHmacKeysResponse>* Storage::Stub::AsyncListHmacKeysRaw(::grpc::ClientContext* context, const ::google::storage::v1::ListHmacKeysRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListHmacKeysRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Storage::Stub::UpdateHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::UpdateHmacKeyRequest& request, ::google::storage::v1::HmacKeyMetadata* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::storage::v1::UpdateHmacKeyRequest, ::google::storage::v1::HmacKeyMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateHmacKey_, context, request, response);
}

void Storage::Stub::async::UpdateHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::UpdateHmacKeyRequest* request, ::google::storage::v1::HmacKeyMetadata* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::storage::v1::UpdateHmacKeyRequest, ::google::storage::v1::HmacKeyMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateHmacKey_, context, request, response, std::move(f));
}

void Storage::Stub::async::UpdateHmacKey(::grpc::ClientContext* context, const ::google::storage::v1::UpdateHmacKeyRequest* request, ::google::storage::v1::HmacKeyMetadata* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateHmacKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::HmacKeyMetadata>* Storage::Stub::PrepareAsyncUpdateHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::storage::v1::HmacKeyMetadata, ::google::storage::v1::UpdateHmacKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateHmacKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::storage::v1::HmacKeyMetadata>* Storage::Stub::AsyncUpdateHmacKeyRaw(::grpc::ClientContext* context, const ::google::storage::v1::UpdateHmacKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateHmacKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

Storage::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::DeleteBucketAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::DeleteBucketAccessControlRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteBucketAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetBucketAccessControlRequest* req,
             ::google::storage::v1::BucketAccessControl* resp) {
               return service->GetBucketAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::InsertBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::InsertBucketAccessControlRequest* req,
             ::google::storage::v1::BucketAccessControl* resp) {
               return service->InsertBucketAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListBucketAccessControlsRequest, ::google::storage::v1::ListBucketAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListBucketAccessControlsRequest* req,
             ::google::storage::v1::ListBucketAccessControlsResponse* resp) {
               return service->ListBucketAccessControls(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::UpdateBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::UpdateBucketAccessControlRequest* req,
             ::google::storage::v1::BucketAccessControl* resp) {
               return service->UpdateBucketAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::PatchBucketAccessControlRequest, ::google::storage::v1::BucketAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::PatchBucketAccessControlRequest* req,
             ::google::storage::v1::BucketAccessControl* resp) {
               return service->PatchBucketAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::DeleteBucketRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::DeleteBucketRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetBucketRequest* req,
             ::google::storage::v1::Bucket* resp) {
               return service->GetBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::InsertBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::InsertBucketRequest* req,
             ::google::storage::v1::Bucket* resp) {
               return service->InsertBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListChannelsRequest, ::google::storage::v1::ListChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListChannelsRequest* req,
             ::google::storage::v1::ListChannelsResponse* resp) {
               return service->ListChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListBucketsRequest, ::google::storage::v1::ListBucketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListBucketsRequest* req,
             ::google::storage::v1::ListBucketsResponse* resp) {
               return service->ListBuckets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::LockRetentionPolicyRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::LockRetentionPolicyRequest* req,
             ::google::storage::v1::Bucket* resp) {
               return service->LockBucketRetentionPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetIamPolicyRequest* req,
             ::google::iam::v1::Policy* resp) {
               return service->GetBucketIamPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::SetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::SetIamPolicyRequest* req,
             ::google::iam::v1::Policy* resp) {
               return service->SetBucketIamPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::TestIamPermissionsRequest* req,
             ::google::iam::v1::TestIamPermissionsResponse* resp) {
               return service->TestBucketIamPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::PatchBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::PatchBucketRequest* req,
             ::google::storage::v1::Bucket* resp) {
               return service->PatchBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::UpdateBucketRequest, ::google::storage::v1::Bucket, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::UpdateBucketRequest* req,
             ::google::storage::v1::Bucket* resp) {
               return service->UpdateBucket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::StopChannelRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::StopChannelRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->StopChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::DeleteDefaultObjectAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::DeleteDefaultObjectAccessControlRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteDefaultObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetDefaultObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->GetDefaultObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::InsertDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::InsertDefaultObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->InsertDefaultObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListDefaultObjectAccessControlsRequest, ::google::storage::v1::ListObjectAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListDefaultObjectAccessControlsRequest* req,
             ::google::storage::v1::ListObjectAccessControlsResponse* resp) {
               return service->ListDefaultObjectAccessControls(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::PatchDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::PatchDefaultObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->PatchDefaultObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::UpdateDefaultObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::UpdateDefaultObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->UpdateDefaultObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::DeleteNotificationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::DeleteNotificationRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetNotificationRequest, ::google::storage::v1::Notification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetNotificationRequest* req,
             ::google::storage::v1::Notification* resp) {
               return service->GetNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::InsertNotificationRequest, ::google::storage::v1::Notification, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::InsertNotificationRequest* req,
             ::google::storage::v1::Notification* resp) {
               return service->InsertNotification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListNotificationsRequest, ::google::storage::v1::ListNotificationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListNotificationsRequest* req,
             ::google::storage::v1::ListNotificationsResponse* resp) {
               return service->ListNotifications(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::DeleteObjectAccessControlRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::DeleteObjectAccessControlRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->GetObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::InsertObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::InsertObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->InsertObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListObjectAccessControlsRequest, ::google::storage::v1::ListObjectAccessControlsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListObjectAccessControlsRequest* req,
             ::google::storage::v1::ListObjectAccessControlsResponse* resp) {
               return service->ListObjectAccessControls(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::PatchObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::PatchObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->PatchObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::UpdateObjectAccessControlRequest, ::google::storage::v1::ObjectAccessControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::UpdateObjectAccessControlRequest* req,
             ::google::storage::v1::ObjectAccessControl* resp) {
               return service->UpdateObjectAccessControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ComposeObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ComposeObjectRequest* req,
             ::google::storage::v1::Object* resp) {
               return service->ComposeObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::CopyObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::CopyObjectRequest* req,
             ::google::storage::v1::Object* resp) {
               return service->CopyObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::DeleteObjectRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::DeleteObjectRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetObjectRequest* req,
             ::google::storage::v1::Object* resp) {
               return service->GetObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[38],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Storage::Service, ::google::storage::v1::GetObjectMediaRequest, ::google::storage::v1::GetObjectMediaResponse>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetObjectMediaRequest* req,
             ::grpc::ServerWriter<::google::storage::v1::GetObjectMediaResponse>* writer) {
               return service->GetObjectMedia(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[39],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Storage::Service, ::google::storage::v1::InsertObjectRequest, ::google::storage::v1::Object>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::google::storage::v1::InsertObjectRequest>* reader,
             ::google::storage::v1::Object* resp) {
               return service->InsertObject(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListObjectsRequest, ::google::storage::v1::ListObjectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListObjectsRequest* req,
             ::google::storage::v1::ListObjectsResponse* resp) {
               return service->ListObjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::RewriteObjectRequest, ::google::storage::v1::RewriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::RewriteObjectRequest* req,
             ::google::storage::v1::RewriteResponse* resp) {
               return service->RewriteObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::StartResumableWriteRequest, ::google::storage::v1::StartResumableWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::StartResumableWriteRequest* req,
             ::google::storage::v1::StartResumableWriteResponse* resp) {
               return service->StartResumableWrite(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::QueryWriteStatusRequest, ::google::storage::v1::QueryWriteStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::QueryWriteStatusRequest* req,
             ::google::storage::v1::QueryWriteStatusResponse* resp) {
               return service->QueryWriteStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::PatchObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::PatchObjectRequest* req,
             ::google::storage::v1::Object* resp) {
               return service->PatchObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::UpdateObjectRequest, ::google::storage::v1::Object, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::UpdateObjectRequest* req,
             ::google::storage::v1::Object* resp) {
               return service->UpdateObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetIamPolicyRequest* req,
             ::google::iam::v1::Policy* resp) {
               return service->GetObjectIamPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::SetIamPolicyRequest, ::google::iam::v1::Policy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::SetIamPolicyRequest* req,
             ::google::iam::v1::Policy* resp) {
               return service->SetObjectIamPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::TestIamPermissionsRequest* req,
             ::google::iam::v1::TestIamPermissionsResponse* resp) {
               return service->TestObjectIamPermissions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::WatchAllObjectsRequest, ::google::storage::v1::Channel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::WatchAllObjectsRequest* req,
             ::google::storage::v1::Channel* resp) {
               return service->WatchAllObjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetProjectServiceAccountRequest, ::google::storage::v1::ServiceAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetProjectServiceAccountRequest* req,
             ::google::storage::v1::ServiceAccount* resp) {
               return service->GetServiceAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::CreateHmacKeyRequest, ::google::storage::v1::CreateHmacKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::CreateHmacKeyRequest* req,
             ::google::storage::v1::CreateHmacKeyResponse* resp) {
               return service->CreateHmacKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::DeleteHmacKeyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::DeleteHmacKeyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteHmacKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::GetHmacKeyRequest, ::google::storage::v1::HmacKeyMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::GetHmacKeyRequest* req,
             ::google::storage::v1::HmacKeyMetadata* resp) {
               return service->GetHmacKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::ListHmacKeysRequest, ::google::storage::v1::ListHmacKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::ListHmacKeysRequest* req,
             ::google::storage::v1::ListHmacKeysResponse* resp) {
               return service->ListHmacKeys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Storage_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Storage::Service, ::google::storage::v1::UpdateHmacKeyRequest, ::google::storage::v1::HmacKeyMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Storage::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::storage::v1::UpdateHmacKeyRequest* req,
             ::google::storage::v1::HmacKeyMetadata* resp) {
               return service->UpdateHmacKey(ctx, req, resp);
             }, this)));
}

Storage::Service::~Service() {
}

::grpc::Status Storage::Service::DeleteBucketAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::DeleteBucketAccessControlRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetBucketAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::GetBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::InsertBucketAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::InsertBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListBucketAccessControls(::grpc::ServerContext* context, const ::google::storage::v1::ListBucketAccessControlsRequest* request, ::google::storage::v1::ListBucketAccessControlsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::UpdateBucketAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::UpdateBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::PatchBucketAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::PatchBucketAccessControlRequest* request, ::google::storage::v1::BucketAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::DeleteBucket(::grpc::ServerContext* context, const ::google::storage::v1::DeleteBucketRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetBucket(::grpc::ServerContext* context, const ::google::storage::v1::GetBucketRequest* request, ::google::storage::v1::Bucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::InsertBucket(::grpc::ServerContext* context, const ::google::storage::v1::InsertBucketRequest* request, ::google::storage::v1::Bucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListChannels(::grpc::ServerContext* context, const ::google::storage::v1::ListChannelsRequest* request, ::google::storage::v1::ListChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListBuckets(::grpc::ServerContext* context, const ::google::storage::v1::ListBucketsRequest* request, ::google::storage::v1::ListBucketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::LockBucketRetentionPolicy(::grpc::ServerContext* context, const ::google::storage::v1::LockRetentionPolicyRequest* request, ::google::storage::v1::Bucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetBucketIamPolicy(::grpc::ServerContext* context, const ::google::storage::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetBucketIamPolicy(::grpc::ServerContext* context, const ::google::storage::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::TestBucketIamPermissions(::grpc::ServerContext* context, const ::google::storage::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::PatchBucket(::grpc::ServerContext* context, const ::google::storage::v1::PatchBucketRequest* request, ::google::storage::v1::Bucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::UpdateBucket(::grpc::ServerContext* context, const ::google::storage::v1::UpdateBucketRequest* request, ::google::storage::v1::Bucket* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::StopChannel(::grpc::ServerContext* context, const ::google::storage::v1::StopChannelRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::DeleteDefaultObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::DeleteDefaultObjectAccessControlRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetDefaultObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::GetDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::InsertDefaultObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::InsertDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListDefaultObjectAccessControls(::grpc::ServerContext* context, const ::google::storage::v1::ListDefaultObjectAccessControlsRequest* request, ::google::storage::v1::ListObjectAccessControlsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::PatchDefaultObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::PatchDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::UpdateDefaultObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::UpdateDefaultObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::DeleteNotification(::grpc::ServerContext* context, const ::google::storage::v1::DeleteNotificationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetNotification(::grpc::ServerContext* context, const ::google::storage::v1::GetNotificationRequest* request, ::google::storage::v1::Notification* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::InsertNotification(::grpc::ServerContext* context, const ::google::storage::v1::InsertNotificationRequest* request, ::google::storage::v1::Notification* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListNotifications(::grpc::ServerContext* context, const ::google::storage::v1::ListNotificationsRequest* request, ::google::storage::v1::ListNotificationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::DeleteObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::DeleteObjectAccessControlRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::GetObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::InsertObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::InsertObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListObjectAccessControls(::grpc::ServerContext* context, const ::google::storage::v1::ListObjectAccessControlsRequest* request, ::google::storage::v1::ListObjectAccessControlsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::PatchObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::PatchObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::UpdateObjectAccessControl(::grpc::ServerContext* context, const ::google::storage::v1::UpdateObjectAccessControlRequest* request, ::google::storage::v1::ObjectAccessControl* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ComposeObject(::grpc::ServerContext* context, const ::google::storage::v1::ComposeObjectRequest* request, ::google::storage::v1::Object* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::CopyObject(::grpc::ServerContext* context, const ::google::storage::v1::CopyObjectRequest* request, ::google::storage::v1::Object* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::DeleteObject(::grpc::ServerContext* context, const ::google::storage::v1::DeleteObjectRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetObject(::grpc::ServerContext* context, const ::google::storage::v1::GetObjectRequest* request, ::google::storage::v1::Object* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetObjectMedia(::grpc::ServerContext* context, const ::google::storage::v1::GetObjectMediaRequest* request, ::grpc::ServerWriter< ::google::storage::v1::GetObjectMediaResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::InsertObject(::grpc::ServerContext* context, ::grpc::ServerReader< ::google::storage::v1::InsertObjectRequest>* reader, ::google::storage::v1::Object* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListObjects(::grpc::ServerContext* context, const ::google::storage::v1::ListObjectsRequest* request, ::google::storage::v1::ListObjectsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::RewriteObject(::grpc::ServerContext* context, const ::google::storage::v1::RewriteObjectRequest* request, ::google::storage::v1::RewriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::StartResumableWrite(::grpc::ServerContext* context, const ::google::storage::v1::StartResumableWriteRequest* request, ::google::storage::v1::StartResumableWriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::QueryWriteStatus(::grpc::ServerContext* context, const ::google::storage::v1::QueryWriteStatusRequest* request, ::google::storage::v1::QueryWriteStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::PatchObject(::grpc::ServerContext* context, const ::google::storage::v1::PatchObjectRequest* request, ::google::storage::v1::Object* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::UpdateObject(::grpc::ServerContext* context, const ::google::storage::v1::UpdateObjectRequest* request, ::google::storage::v1::Object* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetObjectIamPolicy(::grpc::ServerContext* context, const ::google::storage::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::SetObjectIamPolicy(::grpc::ServerContext* context, const ::google::storage::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::TestObjectIamPermissions(::grpc::ServerContext* context, const ::google::storage::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::WatchAllObjects(::grpc::ServerContext* context, const ::google::storage::v1::WatchAllObjectsRequest* request, ::google::storage::v1::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetServiceAccount(::grpc::ServerContext* context, const ::google::storage::v1::GetProjectServiceAccountRequest* request, ::google::storage::v1::ServiceAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::CreateHmacKey(::grpc::ServerContext* context, const ::google::storage::v1::CreateHmacKeyRequest* request, ::google::storage::v1::CreateHmacKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::DeleteHmacKey(::grpc::ServerContext* context, const ::google::storage::v1::DeleteHmacKeyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::GetHmacKey(::grpc::ServerContext* context, const ::google::storage::v1::GetHmacKeyRequest* request, ::google::storage::v1::HmacKeyMetadata* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::ListHmacKeys(::grpc::ServerContext* context, const ::google::storage::v1::ListHmacKeysRequest* request, ::google::storage::v1::ListHmacKeysResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Storage::Service::UpdateHmacKey(::grpc::ServerContext* context, const ::google::storage::v1::UpdateHmacKeyRequest* request, ::google::storage::v1::HmacKeyMetadata* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace storage
}  // namespace v1

