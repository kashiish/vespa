// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/chromeos/moblab/v1beta1/resources.proto

#ifndef PROTOBUF_INCLUDED_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto
#define PROTOBUF_INCLUDED_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto();
namespace google {
namespace chromeos {
namespace moblab {
namespace v1beta1 {
class Build;
class BuildDefaultTypeInternal;
extern BuildDefaultTypeInternal _Build_default_instance_;
class BuildArtifact;
class BuildArtifactDefaultTypeInternal;
extern BuildArtifactDefaultTypeInternal _BuildArtifact_default_instance_;
class BuildTarget;
class BuildTargetDefaultTypeInternal;
extern BuildTargetDefaultTypeInternal _BuildTarget_default_instance_;
class Milestone;
class MilestoneDefaultTypeInternal;
extern MilestoneDefaultTypeInternal _Milestone_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
}  // namespace v1beta1
}  // namespace moblab
}  // namespace chromeos
namespace protobuf {
template<> ::google::chromeos::moblab::v1beta1::Build* Arena::CreateMaybeMessage<::google::chromeos::moblab::v1beta1::Build>(Arena*);
template<> ::google::chromeos::moblab::v1beta1::BuildArtifact* Arena::CreateMaybeMessage<::google::chromeos::moblab::v1beta1::BuildArtifact>(Arena*);
template<> ::google::chromeos::moblab::v1beta1::BuildTarget* Arena::CreateMaybeMessage<::google::chromeos::moblab::v1beta1::BuildTarget>(Arena*);
template<> ::google::chromeos::moblab::v1beta1::Milestone* Arena::CreateMaybeMessage<::google::chromeos::moblab::v1beta1::Milestone>(Arena*);
template<> ::google::chromeos::moblab::v1beta1::Model* Arena::CreateMaybeMessage<::google::chromeos::moblab::v1beta1::Model>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace chromeos {
namespace moblab {
namespace v1beta1 {

enum Build_BuildStatus {
  Build_BuildStatus_BUILD_STATUS_UNSPECIFIED = 0,
  Build_BuildStatus_PASS = 1,
  Build_BuildStatus_FAIL = 2,
  Build_BuildStatus_RUNNING = 3,
  Build_BuildStatus_ABORTED = 4,
  Build_BuildStatus_Build_BuildStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Build_BuildStatus_Build_BuildStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Build_BuildStatus_IsValid(int value);
const Build_BuildStatus Build_BuildStatus_BuildStatus_MIN = Build_BuildStatus_BUILD_STATUS_UNSPECIFIED;
const Build_BuildStatus Build_BuildStatus_BuildStatus_MAX = Build_BuildStatus_ABORTED;
const int Build_BuildStatus_BuildStatus_ARRAYSIZE = Build_BuildStatus_BuildStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Build_BuildStatus_descriptor();
inline const ::std::string& Build_BuildStatus_Name(Build_BuildStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Build_BuildStatus_descriptor(), value);
}
inline bool Build_BuildStatus_Parse(
    const ::std::string& name, Build_BuildStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Build_BuildStatus>(
    Build_BuildStatus_descriptor(), name, value);
}
enum Build_BuildType {
  Build_BuildType_BUILD_TYPE_UNSPECIFIED = 0,
  Build_BuildType_RELEASE = 1,
  Build_BuildType_FIRMWARE = 2,
  Build_BuildType_Build_BuildType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Build_BuildType_Build_BuildType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Build_BuildType_IsValid(int value);
const Build_BuildType Build_BuildType_BuildType_MIN = Build_BuildType_BUILD_TYPE_UNSPECIFIED;
const Build_BuildType Build_BuildType_BuildType_MAX = Build_BuildType_FIRMWARE;
const int Build_BuildType_BuildType_ARRAYSIZE = Build_BuildType_BuildType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Build_BuildType_descriptor();
inline const ::std::string& Build_BuildType_Name(Build_BuildType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Build_BuildType_descriptor(), value);
}
inline bool Build_BuildType_Parse(
    const ::std::string& name, Build_BuildType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Build_BuildType>(
    Build_BuildType_descriptor(), name, value);
}
// ===================================================================

class BuildTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.chromeos.moblab.v1beta1.BuildTarget) */ {
 public:
  BuildTarget();
  virtual ~BuildTarget();

  BuildTarget(const BuildTarget& from);

  inline BuildTarget& operator=(const BuildTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildTarget(BuildTarget&& from) noexcept
    : BuildTarget() {
    *this = ::std::move(from);
  }

  inline BuildTarget& operator=(BuildTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BuildTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildTarget* internal_default_instance() {
    return reinterpret_cast<const BuildTarget*>(
               &_BuildTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BuildTarget* other);
  friend void swap(BuildTarget& a, BuildTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildTarget* New() const final {
    return CreateMaybeMessage<BuildTarget>(nullptr);
  }

  BuildTarget* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuildTarget>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuildTarget& from);
  void MergeFrom(const BuildTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.chromeos.moblab.v1beta1.BuildTarget)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Model final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.chromeos.moblab.v1beta1.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Model* other);
  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.chromeos.moblab.v1beta1.Model)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Milestone final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.chromeos.moblab.v1beta1.Milestone) */ {
 public:
  Milestone();
  virtual ~Milestone();

  Milestone(const Milestone& from);

  inline Milestone& operator=(const Milestone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Milestone(Milestone&& from) noexcept
    : Milestone() {
    *this = ::std::move(from);
  }

  inline Milestone& operator=(Milestone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Milestone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Milestone* internal_default_instance() {
    return reinterpret_cast<const Milestone*>(
               &_Milestone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Milestone* other);
  friend void swap(Milestone& a, Milestone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Milestone* New() const final {
    return CreateMaybeMessage<Milestone>(nullptr);
  }

  Milestone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Milestone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Milestone& from);
  void MergeFrom(const Milestone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Milestone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.chromeos.moblab.v1beta1.Milestone)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class Build final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.chromeos.moblab.v1beta1.Build) */ {
 public:
  Build();
  virtual ~Build();

  Build(const Build& from);

  inline Build& operator=(const Build& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Build(Build&& from) noexcept
    : Build() {
    *this = ::std::move(from);
  }

  inline Build& operator=(Build&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Build& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Build* internal_default_instance() {
    return reinterpret_cast<const Build*>(
               &_Build_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Build* other);
  friend void swap(Build& a, Build& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Build* New() const final {
    return CreateMaybeMessage<Build>(nullptr);
  }

  Build* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Build>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Build& from);
  void MergeFrom(const Build& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Build* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Build_BuildStatus BuildStatus;
  static const BuildStatus BUILD_STATUS_UNSPECIFIED =
    Build_BuildStatus_BUILD_STATUS_UNSPECIFIED;
  static const BuildStatus PASS =
    Build_BuildStatus_PASS;
  static const BuildStatus FAIL =
    Build_BuildStatus_FAIL;
  static const BuildStatus RUNNING =
    Build_BuildStatus_RUNNING;
  static const BuildStatus ABORTED =
    Build_BuildStatus_ABORTED;
  static inline bool BuildStatus_IsValid(int value) {
    return Build_BuildStatus_IsValid(value);
  }
  static const BuildStatus BuildStatus_MIN =
    Build_BuildStatus_BuildStatus_MIN;
  static const BuildStatus BuildStatus_MAX =
    Build_BuildStatus_BuildStatus_MAX;
  static const int BuildStatus_ARRAYSIZE =
    Build_BuildStatus_BuildStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BuildStatus_descriptor() {
    return Build_BuildStatus_descriptor();
  }
  static inline const ::std::string& BuildStatus_Name(BuildStatus value) {
    return Build_BuildStatus_Name(value);
  }
  static inline bool BuildStatus_Parse(const ::std::string& name,
      BuildStatus* value) {
    return Build_BuildStatus_Parse(name, value);
  }

  typedef Build_BuildType BuildType;
  static const BuildType BUILD_TYPE_UNSPECIFIED =
    Build_BuildType_BUILD_TYPE_UNSPECIFIED;
  static const BuildType RELEASE =
    Build_BuildType_RELEASE;
  static const BuildType FIRMWARE =
    Build_BuildType_FIRMWARE;
  static inline bool BuildType_IsValid(int value) {
    return Build_BuildType_IsValid(value);
  }
  static const BuildType BuildType_MIN =
    Build_BuildType_BuildType_MIN;
  static const BuildType BuildType_MAX =
    Build_BuildType_BuildType_MAX;
  static const int BuildType_ARRAYSIZE =
    Build_BuildType_BuildType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BuildType_descriptor() {
    return Build_BuildType_descriptor();
  }
  static inline const ::std::string& BuildType_Name(BuildType value) {
    return Build_BuildType_Name(value);
  }
  static inline bool BuildType_Parse(const ::std::string& name,
      BuildType* value) {
    return Build_BuildType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string milestone = 2 [(.google.api.resource_reference) = {
  void clear_milestone();
  static const int kMilestoneFieldNumber = 2;
  const ::std::string& milestone() const;
  void set_milestone(const ::std::string& value);
  #if LANG_CXX11
  void set_milestone(::std::string&& value);
  #endif
  void set_milestone(const char* value);
  void set_milestone(const char* value, size_t size);
  ::std::string* mutable_milestone();
  ::std::string* release_milestone();
  void set_allocated_milestone(::std::string* milestone);

  // string build_version = 3;
  void clear_build_version();
  static const int kBuildVersionFieldNumber = 3;
  const ::std::string& build_version() const;
  void set_build_version(const ::std::string& value);
  #if LANG_CXX11
  void set_build_version(::std::string&& value);
  #endif
  void set_build_version(const char* value);
  void set_build_version(const char* value, size_t size);
  ::std::string* mutable_build_version();
  ::std::string* release_build_version();
  void set_allocated_build_version(::std::string* build_version);

  // string branch = 6;
  void clear_branch();
  static const int kBranchFieldNumber = 6;
  const ::std::string& branch() const;
  void set_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_branch(::std::string&& value);
  #endif
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  ::std::string* mutable_branch();
  ::std::string* release_branch();
  void set_allocated_branch(::std::string* branch);

  // .google.chromeos.moblab.v1beta1.Build.BuildStatus status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::chromeos::moblab::v1beta1::Build_BuildStatus status() const;
  void set_status(::google::chromeos::moblab::v1beta1::Build_BuildStatus value);

  // .google.chromeos.moblab.v1beta1.Build.BuildType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::chromeos::moblab::v1beta1::Build_BuildType type() const;
  void set_type(::google::chromeos::moblab::v1beta1::Build_BuildType value);

  // @@protoc_insertion_point(class_scope:google.chromeos.moblab.v1beta1.Build)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr milestone_;
  ::google::protobuf::internal::ArenaStringPtr build_version_;
  ::google::protobuf::internal::ArenaStringPtr branch_;
  int status_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto;
};
// -------------------------------------------------------------------

class BuildArtifact final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.chromeos.moblab.v1beta1.BuildArtifact) */ {
 public:
  BuildArtifact();
  virtual ~BuildArtifact();

  BuildArtifact(const BuildArtifact& from);

  inline BuildArtifact& operator=(const BuildArtifact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuildArtifact(BuildArtifact&& from) noexcept
    : BuildArtifact() {
    *this = ::std::move(from);
  }

  inline BuildArtifact& operator=(BuildArtifact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BuildArtifact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildArtifact* internal_default_instance() {
    return reinterpret_cast<const BuildArtifact*>(
               &_BuildArtifact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BuildArtifact* other);
  friend void swap(BuildArtifact& a, BuildArtifact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuildArtifact* New() const final {
    return CreateMaybeMessage<BuildArtifact>(nullptr);
  }

  BuildArtifact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuildArtifact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuildArtifact& from);
  void MergeFrom(const BuildArtifact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildArtifact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string build = 2 [(.google.api.resource_reference) = {
  void clear_build();
  static const int kBuildFieldNumber = 2;
  const ::std::string& build() const;
  void set_build(const ::std::string& value);
  #if LANG_CXX11
  void set_build(::std::string&& value);
  #endif
  void set_build(const char* value);
  void set_build(const char* value, size_t size);
  ::std::string* mutable_build();
  ::std::string* release_build();
  void set_allocated_build(::std::string* build);

  // string bucket = 3;
  void clear_bucket();
  static const int kBucketFieldNumber = 3;
  const ::std::string& bucket() const;
  void set_bucket(const ::std::string& value);
  #if LANG_CXX11
  void set_bucket(::std::string&& value);
  #endif
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  ::std::string* mutable_bucket();
  ::std::string* release_bucket();
  void set_allocated_bucket(::std::string* bucket);

  // string path = 4;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // uint32 object_count = 5;
  void clear_object_count();
  static const int kObjectCountFieldNumber = 5;
  ::google::protobuf::uint32 object_count() const;
  void set_object_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.chromeos.moblab.v1beta1.BuildArtifact)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr build_;
  ::google::protobuf::internal::ArenaStringPtr bucket_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint32 object_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuildTarget

// string name = 1;
inline void BuildTarget::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildTarget::name() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.BuildTarget.name)
  return name_.GetNoArena();
}
inline void BuildTarget::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.BuildTarget.name)
}
#if LANG_CXX11
inline void BuildTarget::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.BuildTarget.name)
}
#endif
inline void BuildTarget::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.BuildTarget.name)
}
inline void BuildTarget::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.BuildTarget.name)
}
inline ::std::string* BuildTarget::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.BuildTarget.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildTarget::release_name() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.BuildTarget.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildTarget::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.BuildTarget.name)
}

// -------------------------------------------------------------------

// Model

// string name = 1;
inline void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Model.name)
  return name_.GetNoArena();
}
inline void Model::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Model.name)
}
#if LANG_CXX11
inline void Model::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.Model.name)
}
#endif
inline void Model::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.Model.name)
}
inline void Model::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.Model.name)
}
inline ::std::string* Model::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.Model.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.Model.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.Model.name)
}

// -------------------------------------------------------------------

// Milestone

// string name = 1;
inline void Milestone::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Milestone::name() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Milestone.name)
  return name_.GetNoArena();
}
inline void Milestone::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Milestone.name)
}
#if LANG_CXX11
inline void Milestone::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.Milestone.name)
}
#endif
inline void Milestone::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.Milestone.name)
}
inline void Milestone::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.Milestone.name)
}
inline ::std::string* Milestone::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.Milestone.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Milestone::release_name() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.Milestone.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Milestone::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.Milestone.name)
}

// -------------------------------------------------------------------

// Build

// string name = 1;
inline void Build::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Build::name() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Build.name)
  return name_.GetNoArena();
}
inline void Build::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Build.name)
}
#if LANG_CXX11
inline void Build::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.Build.name)
}
#endif
inline void Build::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.Build.name)
}
inline void Build::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.Build.name)
}
inline ::std::string* Build::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.Build.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Build::release_name() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.Build.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.Build.name)
}

// string milestone = 2 [(.google.api.resource_reference) = {
inline void Build::clear_milestone() {
  milestone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Build::milestone() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Build.milestone)
  return milestone_.GetNoArena();
}
inline void Build::set_milestone(const ::std::string& value) {
  
  milestone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Build.milestone)
}
#if LANG_CXX11
inline void Build::set_milestone(::std::string&& value) {
  
  milestone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.Build.milestone)
}
#endif
inline void Build::set_milestone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  milestone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.Build.milestone)
}
inline void Build::set_milestone(const char* value, size_t size) {
  
  milestone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.Build.milestone)
}
inline ::std::string* Build::mutable_milestone() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.Build.milestone)
  return milestone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Build::release_milestone() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.Build.milestone)
  
  return milestone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_milestone(::std::string* milestone) {
  if (milestone != nullptr) {
    
  } else {
    
  }
  milestone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), milestone);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.Build.milestone)
}

// string build_version = 3;
inline void Build::clear_build_version() {
  build_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Build::build_version() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Build.build_version)
  return build_version_.GetNoArena();
}
inline void Build::set_build_version(const ::std::string& value) {
  
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Build.build_version)
}
#if LANG_CXX11
inline void Build::set_build_version(::std::string&& value) {
  
  build_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.Build.build_version)
}
#endif
inline void Build::set_build_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.Build.build_version)
}
inline void Build::set_build_version(const char* value, size_t size) {
  
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.Build.build_version)
}
inline ::std::string* Build::mutable_build_version() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.Build.build_version)
  return build_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Build::release_build_version() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.Build.build_version)
  
  return build_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_build_version(::std::string* build_version) {
  if (build_version != nullptr) {
    
  } else {
    
  }
  build_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_version);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.Build.build_version)
}

// .google.chromeos.moblab.v1beta1.Build.BuildStatus status = 4;
inline void Build::clear_status() {
  status_ = 0;
}
inline ::google::chromeos::moblab::v1beta1::Build_BuildStatus Build::status() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Build.status)
  return static_cast< ::google::chromeos::moblab::v1beta1::Build_BuildStatus >(status_);
}
inline void Build::set_status(::google::chromeos::moblab::v1beta1::Build_BuildStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Build.status)
}

// .google.chromeos.moblab.v1beta1.Build.BuildType type = 5;
inline void Build::clear_type() {
  type_ = 0;
}
inline ::google::chromeos::moblab::v1beta1::Build_BuildType Build::type() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Build.type)
  return static_cast< ::google::chromeos::moblab::v1beta1::Build_BuildType >(type_);
}
inline void Build::set_type(::google::chromeos::moblab::v1beta1::Build_BuildType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Build.type)
}

// string branch = 6;
inline void Build::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Build::branch() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.Build.branch)
  return branch_.GetNoArena();
}
inline void Build::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.Build.branch)
}
#if LANG_CXX11
inline void Build::set_branch(::std::string&& value) {
  
  branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.Build.branch)
}
#endif
inline void Build::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.Build.branch)
}
inline void Build::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.Build.branch)
}
inline ::std::string* Build::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.Build.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Build::release_branch() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.Build.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Build::set_allocated_branch(::std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.Build.branch)
}

// -------------------------------------------------------------------

// BuildArtifact

// string name = 1;
inline void BuildArtifact::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildArtifact::name() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.BuildArtifact.name)
  return name_.GetNoArena();
}
inline void BuildArtifact::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.BuildArtifact.name)
}
#if LANG_CXX11
inline void BuildArtifact::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.BuildArtifact.name)
}
#endif
inline void BuildArtifact::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.BuildArtifact.name)
}
inline void BuildArtifact::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.BuildArtifact.name)
}
inline ::std::string* BuildArtifact::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.BuildArtifact.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildArtifact::release_name() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.BuildArtifact.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildArtifact::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.BuildArtifact.name)
}

// string build = 2 [(.google.api.resource_reference) = {
inline void BuildArtifact::clear_build() {
  build_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildArtifact::build() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.BuildArtifact.build)
  return build_.GetNoArena();
}
inline void BuildArtifact::set_build(const ::std::string& value) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.BuildArtifact.build)
}
#if LANG_CXX11
inline void BuildArtifact::set_build(::std::string&& value) {
  
  build_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.BuildArtifact.build)
}
#endif
inline void BuildArtifact::set_build(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.BuildArtifact.build)
}
inline void BuildArtifact::set_build(const char* value, size_t size) {
  
  build_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.BuildArtifact.build)
}
inline ::std::string* BuildArtifact::mutable_build() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.BuildArtifact.build)
  return build_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildArtifact::release_build() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.BuildArtifact.build)
  
  return build_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildArtifact::set_allocated_build(::std::string* build) {
  if (build != nullptr) {
    
  } else {
    
  }
  build_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.BuildArtifact.build)
}

// string bucket = 3;
inline void BuildArtifact::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildArtifact::bucket() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
  return bucket_.GetNoArena();
}
inline void BuildArtifact::set_bucket(const ::std::string& value) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
}
#if LANG_CXX11
inline void BuildArtifact::set_bucket(::std::string&& value) {
  
  bucket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
}
#endif
inline void BuildArtifact::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
}
inline void BuildArtifact::set_bucket(const char* value, size_t size) {
  
  bucket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
}
inline ::std::string* BuildArtifact::mutable_bucket() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
  return bucket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildArtifact::release_bucket() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
  
  return bucket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildArtifact::set_allocated_bucket(::std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.BuildArtifact.bucket)
}

// string path = 4;
inline void BuildArtifact::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuildArtifact::path() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.BuildArtifact.path)
  return path_.GetNoArena();
}
inline void BuildArtifact::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.BuildArtifact.path)
}
#if LANG_CXX11
inline void BuildArtifact::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.chromeos.moblab.v1beta1.BuildArtifact.path)
}
#endif
inline void BuildArtifact::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.chromeos.moblab.v1beta1.BuildArtifact.path)
}
inline void BuildArtifact::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.chromeos.moblab.v1beta1.BuildArtifact.path)
}
inline ::std::string* BuildArtifact::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.chromeos.moblab.v1beta1.BuildArtifact.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuildArtifact::release_path() {
  // @@protoc_insertion_point(field_release:google.chromeos.moblab.v1beta1.BuildArtifact.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuildArtifact::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:google.chromeos.moblab.v1beta1.BuildArtifact.path)
}

// uint32 object_count = 5;
inline void BuildArtifact::clear_object_count() {
  object_count_ = 0u;
}
inline ::google::protobuf::uint32 BuildArtifact::object_count() const {
  // @@protoc_insertion_point(field_get:google.chromeos.moblab.v1beta1.BuildArtifact.object_count)
  return object_count_;
}
inline void BuildArtifact::set_object_count(::google::protobuf::uint32 value) {
  
  object_count_ = value;
  // @@protoc_insertion_point(field_set:google.chromeos.moblab.v1beta1.BuildArtifact.object_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace moblab
}  // namespace chromeos
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::chromeos::moblab::v1beta1::Build_BuildStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::chromeos::moblab::v1beta1::Build_BuildStatus>() {
  return ::google::chromeos::moblab::v1beta1::Build_BuildStatus_descriptor();
}
template <> struct is_proto_enum< ::google::chromeos::moblab::v1beta1::Build_BuildType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::chromeos::moblab::v1beta1::Build_BuildType>() {
  return ::google::chromeos::moblab::v1beta1::Build_BuildType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fchromeos_2fmoblab_2fv1beta1_2fresources_2eproto
