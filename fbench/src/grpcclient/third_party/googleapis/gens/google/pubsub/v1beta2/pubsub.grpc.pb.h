// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/pubsub/v1beta2/pubsub.proto
// Original file comments:
// Copyright (c) 2015, Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED
#define GRPC_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED

#include "google/pubsub/v1beta2/pubsub.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace pubsub {
namespace v1beta2 {

// The service that an application uses to manipulate subscriptions and to
// consume messages from a subscription via the Pull method.
class Subscriber final {
 public:
  static constexpr char const* service_full_name() {
    return "google.pubsub.v1beta2.Subscriber";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a subscription to a given topic for a given subscriber.
    // If the subscription already exists, returns ALREADY_EXISTS.
    // If the corresponding topic doesn't exist, returns NOT_FOUND.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic.
    virtual ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::google::pubsub::v1beta2::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>> PrepareAsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>>(PrepareAsyncCreateSubscriptionRaw(context, request, cq));
    }
    // Gets the configuration details of a subscription.
    virtual ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::google::pubsub::v1beta2::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>> AsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    // Lists matching subscriptions.
    virtual ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    // Deletes an existing subscription. All pending messages in the subscription
    // are immediately dropped. Calls to Pull after deletion will return
    // NOT_FOUND. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription, or its topic unless the same topic is specified.
    virtual ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    // Modifies the ack deadline for a specific message. This method is useful to
    // indicate that more time is needed to process a message by the subscriber,
    // or to make the message available for redelivery if the processing was
    // interrupted.
    virtual ::grpc::Status ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncModifyAckDeadlineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncModifyAckDeadlineRaw(context, request, cq));
    }
    // Acknowledges the messages associated with the ack tokens in the
    // AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    virtual ::grpc::Status Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAcknowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAcknowledgeRaw(context, request, cq));
    }
    // Pulls messages from the server. Returns an empty list if there are no
    // messages available in the backlog. The server may return UNAVAILABLE if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    virtual ::grpc::Status Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::google::pubsub::v1beta2::PullResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>>(AsyncPullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>> PrepareAsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>>(PrepareAsyncPullRaw(context, request, cq));
    }
    // Modifies the PushConfig for a specified subscription.
    //
    // This may be used to change a push subscription to a pull one (signified
    // by an empty PushConfig) or vice versa, or change the endpoint URL and other
    // attributes of a push subscription. Messages will accumulate for
    // delivery continuously through the call regardless of changes to the
    // PushConfig.
    virtual ::grpc::Status ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncModifyPushConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncModifyPushConfigRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Creates a subscription to a given topic for a given subscriber.
      // If the subscription already exists, returns ALREADY_EXISTS.
      // If the corresponding topic doesn't exist, returns NOT_FOUND.
      //
      // If the name is not provided in the request, the server will assign a random
      // name for this subscription on the same project as the topic.
      virtual void CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the configuration details of a subscription.
      virtual void GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists matching subscriptions.
      virtual void ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes an existing subscription. All pending messages in the subscription
      // are immediately dropped. Calls to Pull after deletion will return
      // NOT_FOUND. After a subscription is deleted, a new one may be created with
      // the same name, but the new one has no association with the old
      // subscription, or its topic unless the same topic is specified.
      virtual void DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Modifies the ack deadline for a specific message. This method is useful to
      // indicate that more time is needed to process a message by the subscriber,
      // or to make the message available for redelivery if the processing was
      // interrupted.
      virtual void ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Acknowledges the messages associated with the ack tokens in the
      // AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
      // from the subscription.
      //
      // Acknowledging a message whose ack deadline has expired may succeed,
      // but such a message may be redelivered later. Acknowledging a message more
      // than once will not result in an error.
      virtual void Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Pulls messages from the server. Returns an empty list if there are no
      // messages available in the backlog. The server may return UNAVAILABLE if
      // there are too many concurrent pull requests pending for the given
      // subscription.
      virtual void Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Modifies the PushConfig for a specified subscription.
      //
      // This may be used to change a push subscription to a pull one (signified
      // by an empty PushConfig) or vice versa, or change the endpoint URL and other
      // attributes of a push subscription. Messages will accumulate for
      // delivery continuously through the call regardless of changes to the
      // PushConfig.
      virtual void ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>* PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Subscription>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PullResponse>* PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::google::pubsub::v1beta2::Subscription* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>> AsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>>(AsyncCreateSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>> PrepareAsyncCreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>>(PrepareAsyncCreateSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::google::pubsub::v1beta2::Subscription* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>> AsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncModifyAckDeadlineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncModifyAckDeadlineRaw(context, request, cq));
    }
    ::grpc::Status Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAcknowledgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAcknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAcknowledgeRaw(context, request, cq));
    }
    ::grpc::Status Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::google::pubsub::v1beta2::PullResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>> AsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>>(AsyncPullRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>> PrepareAsyncPull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>>(PrepareAsyncPullRaw(context, request, cq));
    }
    ::grpc::Status ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncModifyPushConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncModifyPushConfigRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response, std::function<void(::grpc::Status)>) override;
      void CreateSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response, std::function<void(::grpc::Status)>) override;
      void GetSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteSubscription(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ModifyAckDeadline(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Acknowledge(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response, std::function<void(::grpc::Status)>) override;
      void Pull(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ModifyPushConfig(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* AsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* PrepareAsyncCreateSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Subscription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Subscription>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteSubscriptionRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncModifyAckDeadlineRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAcknowledgeRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>* AsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PullResponse>* PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PullRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncModifyPushConfigRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSubscriptions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyAckDeadline_;
    const ::grpc::internal::RpcMethod rpcmethod_Acknowledge_;
    const ::grpc::internal::RpcMethod rpcmethod_Pull_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyPushConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a subscription to a given topic for a given subscriber.
    // If the subscription already exists, returns ALREADY_EXISTS.
    // If the corresponding topic doesn't exist, returns NOT_FOUND.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic.
    virtual ::grpc::Status CreateSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response);
    // Gets the configuration details of a subscription.
    virtual ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response);
    // Lists matching subscriptions.
    virtual ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response);
    // Deletes an existing subscription. All pending messages in the subscription
    // are immediately dropped. Calls to Pull after deletion will return
    // NOT_FOUND. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription, or its topic unless the same topic is specified.
    virtual ::grpc::Status DeleteSubscription(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response);
    // Modifies the ack deadline for a specific message. This method is useful to
    // indicate that more time is needed to process a message by the subscriber,
    // or to make the message available for redelivery if the processing was
    // interrupted.
    virtual ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response);
    // Acknowledges the messages associated with the ack tokens in the
    // AcknowledgeRequest. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    virtual ::grpc::Status Acknowledge(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response);
    // Pulls messages from the server. Returns an empty list if there are no
    // messages available in the backlog. The server may return UNAVAILABLE if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    virtual ::grpc::Status Pull(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response);
    // Modifies the PushConfig for a specified subscription.
    //
    // This may be used to change a push subscription to a pull one (signified
    // by an empty PushConfig) or vice versa, or change the endpoint URL and other
    // attributes of a push subscription. Messages will accumulate for
    // delivery continuously through the call regardless of changes to the
    // PushConfig.
    virtual ::grpc::Status ModifyPushConfig(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Subscription* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubscription(::grpc::ServerContext* context, ::google::pubsub::v1beta2::Subscription* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscription() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetSubscriptionRequest* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::ListSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyAckDeadline(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Acknowledge() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::AcknowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledge(::grpc::ServerContext* context, ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Pull() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PullRequest* /*request*/, ::google::pubsub::v1beta2::PullResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPull(::grpc::ServerContext* context, ::google::pubsub::v1beta2::PullRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::PullResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyPushConfig(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSubscription<WithAsyncMethod_GetSubscription<WithAsyncMethod_ListSubscriptions<WithAsyncMethod_DeleteSubscription<WithAsyncMethod_ModifyAckDeadline<WithAsyncMethod_Acknowledge<WithAsyncMethod_Pull<WithAsyncMethod_ModifyPushConfig<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::Subscription, ::google::pubsub::v1beta2::Subscription>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::Subscription* request, ::google::pubsub::v1beta2::Subscription* response) { return this->CreateSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSubscription(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::Subscription, ::google::pubsub::v1beta2::Subscription>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::Subscription, ::google::pubsub::v1beta2::Subscription>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Subscription* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::Subscription* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubscription() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::GetSubscriptionRequest, ::google::pubsub::v1beta2::Subscription>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::GetSubscriptionRequest* request, ::google::pubsub::v1beta2::Subscription* response) { return this->GetSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscription(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::GetSubscriptionRequest, ::google::pubsub::v1beta2::Subscription>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::GetSubscriptionRequest, ::google::pubsub::v1beta2::Subscription>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetSubscriptionRequest* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::GetSubscriptionRequest* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ListSubscriptionsRequest, ::google::pubsub::v1beta2::ListSubscriptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListSubscriptionsResponse* response) { return this->ListSubscriptions(context, request, response); }));}
    void SetMessageAllocatorFor_ListSubscriptions(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::ListSubscriptionsRequest, ::google::pubsub::v1beta2::ListSubscriptionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ListSubscriptionsRequest, ::google::pubsub::v1beta2::ListSubscriptionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListSubscriptionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::DeleteSubscriptionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* request, ::google::protobuf::Empty* response) { return this->DeleteSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSubscription(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::DeleteSubscriptionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::DeleteSubscriptionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ModifyAckDeadlineRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* request, ::google::protobuf::Empty* response) { return this->ModifyAckDeadline(context, request, response); }));}
    void SetMessageAllocatorFor_ModifyAckDeadline(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::ModifyAckDeadlineRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ModifyAckDeadlineRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModifyAckDeadline(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Acknowledge() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::AcknowledgeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::AcknowledgeRequest* request, ::google::protobuf::Empty* response) { return this->Acknowledge(context, request, response); }));}
    void SetMessageAllocatorFor_Acknowledge(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::AcknowledgeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::AcknowledgeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::AcknowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Acknowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::AcknowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Pull() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::PullRequest, ::google::pubsub::v1beta2::PullResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::PullRequest* request, ::google::pubsub::v1beta2::PullResponse* response) { return this->Pull(context, request, response); }));}
    void SetMessageAllocatorFor_Pull(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::PullRequest, ::google::pubsub::v1beta2::PullResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::PullRequest, ::google::pubsub::v1beta2::PullResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PullRequest* /*request*/, ::google::pubsub::v1beta2::PullResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pull(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::PullRequest* /*request*/, ::google::pubsub::v1beta2::PullResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ModifyPushConfigRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* request, ::google::protobuf::Empty* response) { return this->ModifyPushConfig(context, request, response); }));}
    void SetMessageAllocatorFor_ModifyPushConfig(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::ModifyPushConfigRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ModifyPushConfigRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModifyPushConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateSubscription<WithCallbackMethod_GetSubscription<WithCallbackMethod_ListSubscriptions<WithCallbackMethod_DeleteSubscription<WithCallbackMethod_ModifyAckDeadline<WithCallbackMethod_Acknowledge<WithCallbackMethod_Pull<WithCallbackMethod_ModifyPushConfig<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Subscription* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscription() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetSubscriptionRequest* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Acknowledge() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::AcknowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Pull() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PullRequest* /*request*/, ::google::pubsub::v1beta2::PullResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Subscription* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscription() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetSubscriptionRequest* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyAckDeadline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Acknowledge() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::AcknowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcknowledge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Pull() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PullRequest* /*request*/, ::google::pubsub::v1beta2::PullResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPull(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyPushConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Subscription* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubscription() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetSubscriptionRequest* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSubscriptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModifyAckDeadline(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModifyAckDeadline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Acknowledge() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Acknowledge(context, request, response); }));
    }
    ~WithRawCallbackMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::AcknowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Acknowledge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Pull() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Pull(context, request, response); }));
    }
    ~WithRawCallbackMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PullRequest* /*request*/, ::google::pubsub::v1beta2::PullResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pull(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModifyPushConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModifyPushConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSubscription() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::Subscription, ::google::pubsub::v1beta2::Subscription>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::Subscription, ::google::pubsub::v1beta2::Subscription>* streamer) {
                       return this->StreamedCreateSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Subscription* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::Subscription,::google::pubsub::v1beta2::Subscription>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscription() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::GetSubscriptionRequest, ::google::pubsub::v1beta2::Subscription>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::GetSubscriptionRequest, ::google::pubsub::v1beta2::Subscription>* streamer) {
                       return this->StreamedGetSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetSubscriptionRequest* /*request*/, ::google::pubsub::v1beta2::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::GetSubscriptionRequest,::google::pubsub::v1beta2::Subscription>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::ListSubscriptionsRequest, ::google::pubsub::v1beta2::ListSubscriptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::ListSubscriptionsRequest, ::google::pubsub::v1beta2::ListSubscriptionsResponse>* streamer) {
                       return this->StreamedListSubscriptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSubscriptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::ListSubscriptionsRequest,::google::pubsub::v1beta2::ListSubscriptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSubscription() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::DeleteSubscriptionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::DeleteSubscriptionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSubscription(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteSubscriptionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::DeleteSubscriptionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyAckDeadline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModifyAckDeadline() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::ModifyAckDeadlineRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::ModifyAckDeadlineRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedModifyAckDeadline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModifyAckDeadline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyAckDeadline(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyAckDeadlineRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyAckDeadline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::ModifyAckDeadlineRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Acknowledge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Acknowledge() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::AcknowledgeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::AcknowledgeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAcknowledge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Acknowledge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Acknowledge(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::AcknowledgeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcknowledge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::AcknowledgeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Pull : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Pull() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::PullRequest, ::google::pubsub::v1beta2::PullResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::PullRequest, ::google::pubsub::v1beta2::PullResponse>* streamer) {
                       return this->StreamedPull(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Pull() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Pull(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PullRequest* /*request*/, ::google::pubsub::v1beta2::PullResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPull(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::PullRequest,::google::pubsub::v1beta2::PullResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyPushConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModifyPushConfig() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::ModifyPushConfigRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::ModifyPushConfigRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedModifyPushConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModifyPushConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyPushConfig(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ModifyPushConfigRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyPushConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::ModifyPushConfigRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSubscription<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_ListSubscriptions<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_ModifyAckDeadline<WithStreamedUnaryMethod_Acknowledge<WithStreamedUnaryMethod_Pull<WithStreamedUnaryMethod_ModifyPushConfig<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSubscription<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_ListSubscriptions<WithStreamedUnaryMethod_DeleteSubscription<WithStreamedUnaryMethod_ModifyAckDeadline<WithStreamedUnaryMethod_Acknowledge<WithStreamedUnaryMethod_Pull<WithStreamedUnaryMethod_ModifyPushConfig<Service > > > > > > > > StreamedService;
};

// The service that an application uses to manipulate topics, and to send
// messages to a topic.
class Publisher final {
 public:
  static constexpr char const* service_full_name() {
    return "google.pubsub.v1beta2.Publisher";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates the given topic with the given name.
    virtual ::grpc::Status CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::google::pubsub::v1beta2::Topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>> AsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>>(AsyncCreateTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>> PrepareAsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>>(PrepareAsyncCreateTopicRaw(context, request, cq));
    }
    // Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
    // not exist.
    virtual ::grpc::Status Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::google::pubsub::v1beta2::PublishResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    // Gets the configuration of a topic.
    virtual ::grpc::Status GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::google::pubsub::v1beta2::Topic* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>> AsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>>(AsyncGetTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>> PrepareAsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>>(PrepareAsyncGetTopicRaw(context, request, cq));
    }
    // Lists matching topics.
    virtual ::grpc::Status ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::google::pubsub::v1beta2::ListTopicsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>> AsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>>(AsyncListTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>> PrepareAsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>>(PrepareAsyncListTopicsRaw(context, request, cq));
    }
    // Lists the name of the subscriptions for this topic.
    virtual ::grpc::Status ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>> AsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>>(AsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>> PrepareAsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>>(PrepareAsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    // Deletes the topic with the given name. Returns NOT_FOUND if the topic does
    // not exist. After a topic is deleted, a new topic may be created with the
    // same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted.
    virtual ::grpc::Status DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteTopicRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Creates the given topic with the given name.
      virtual void CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
      // not exist.
      virtual void Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the configuration of a topic.
      virtual void GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists matching topics.
      virtual void ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists the name of the subscriptions for this topic.
      virtual void ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes the topic with the given name. Returns NOT_FOUND if the topic does
      // not exist. After a topic is deleted, a new topic may be created with the
      // same name; this is an entirely new topic with none of the old
      // configuration or subscriptions. Existing subscriptions to this topic are
      // not deleted.
      virtual void DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>* AsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>* PrepareAsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::PublishResponse>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>* AsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::Topic>* PrepareAsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>* AsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicsResponse>* PrepareAsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* AsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* PrepareAsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::google::pubsub::v1beta2::Topic* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>> AsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>>(AsyncCreateTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>> PrepareAsyncCreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>>(PrepareAsyncCreateTopicRaw(context, request, cq));
    }
    ::grpc::Status Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::google::pubsub::v1beta2::PublishResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>> AsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>>(AsyncPublishRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    ::grpc::Status GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::google::pubsub::v1beta2::Topic* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>> AsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>>(AsyncGetTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>> PrepareAsyncGetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>>(PrepareAsyncGetTopicRaw(context, request, cq));
    }
    ::grpc::Status ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::google::pubsub::v1beta2::ListTopicsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>> AsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>>(AsyncListTopicsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>> PrepareAsyncListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>>(PrepareAsyncListTopicsRaw(context, request, cq));
    }
    ::grpc::Status ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>> AsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>>(AsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>> PrepareAsyncListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>>(PrepareAsyncListTopicSubscriptionsRaw(context, request, cq));
    }
    ::grpc::Status DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteTopicRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response, std::function<void(::grpc::Status)>) override;
      void CreateTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response, std::function<void(::grpc::Status)>) override;
      void Publish(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response, std::function<void(::grpc::Status)>) override;
      void GetTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTopics(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTopicSubscriptions(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteTopic(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* AsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* PrepareAsyncCreateTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::Topic& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>* AsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::PublishResponse>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::PublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* AsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::Topic>* PrepareAsyncGetTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::GetTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>* AsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicsResponse>* PrepareAsyncListTopicsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* AsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* PrepareAsyncListTopicSubscriptionsRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteTopicRaw(::grpc::ClientContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTopic_;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTopic_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTopics_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTopicSubscriptions_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTopic_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates the given topic with the given name.
    virtual ::grpc::Status CreateTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response);
    // Adds one or more messages to the topic. Returns NOT_FOUND if the topic does
    // not exist.
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response);
    // Gets the configuration of a topic.
    virtual ::grpc::Status GetTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response);
    // Lists matching topics.
    virtual ::grpc::Status ListTopics(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response);
    // Lists the name of the subscriptions for this topic.
    virtual ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response);
    // Deletes the topic with the given name. Returns NOT_FOUND if the topic does
    // not exist. After a topic is deleted, a new topic may be created with the
    // same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted.
    virtual ::grpc::Status DeleteTopic(::grpc::ServerContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTopic() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Topic* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTopic(::grpc::ServerContext* context, ::google::pubsub::v1beta2::Topic* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PublishRequest* /*request*/, ::google::pubsub::v1beta2::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::google::pubsub::v1beta2::PublishRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::PublishResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTopic() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetTopicRequest* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTopic(::grpc::ServerContext* context, ::google::pubsub::v1beta2::GetTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::Topic>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTopics() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopics(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ListTopicsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::ListTopicsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopicSubscriptions(::grpc::ServerContext* context, ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteTopicRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTopic(::grpc::ServerContext* context, ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateTopic<WithAsyncMethod_Publish<WithAsyncMethod_GetTopic<WithAsyncMethod_ListTopics<WithAsyncMethod_ListTopicSubscriptions<WithAsyncMethod_DeleteTopic<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateTopic() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::Topic, ::google::pubsub::v1beta2::Topic>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::Topic* request, ::google::pubsub::v1beta2::Topic* response) { return this->CreateTopic(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTopic(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::Topic, ::google::pubsub::v1beta2::Topic>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::Topic, ::google::pubsub::v1beta2::Topic>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Topic* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::Topic* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::PublishRequest, ::google::pubsub::v1beta2::PublishResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::PublishRequest* request, ::google::pubsub::v1beta2::PublishResponse* response) { return this->Publish(context, request, response); }));}
    void SetMessageAllocatorFor_Publish(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::PublishRequest, ::google::pubsub::v1beta2::PublishResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::PublishRequest, ::google::pubsub::v1beta2::PublishResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PublishRequest* /*request*/, ::google::pubsub::v1beta2::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Publish(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::PublishRequest* /*request*/, ::google::pubsub::v1beta2::PublishResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTopic() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::GetTopicRequest, ::google::pubsub::v1beta2::Topic>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::GetTopicRequest* request, ::google::pubsub::v1beta2::Topic* response) { return this->GetTopic(context, request, response); }));}
    void SetMessageAllocatorFor_GetTopic(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::GetTopicRequest, ::google::pubsub::v1beta2::Topic>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::GetTopicRequest, ::google::pubsub::v1beta2::Topic>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetTopicRequest* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::GetTopicRequest* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTopics() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ListTopicsRequest, ::google::pubsub::v1beta2::ListTopicsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::ListTopicsRequest* request, ::google::pubsub::v1beta2::ListTopicsResponse* response) { return this->ListTopics(context, request, response); }));}
    void SetMessageAllocatorFor_ListTopics(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::ListTopicsRequest, ::google::pubsub::v1beta2::ListTopicsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ListTopicsRequest, ::google::pubsub::v1beta2::ListTopicsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTopics(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* request, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* response) { return this->ListTopicSubscriptions(context, request, response); }));}
    void SetMessageAllocatorFor_ListTopicSubscriptions(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTopicSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::DeleteTopicRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::pubsub::v1beta2::DeleteTopicRequest* request, ::google::protobuf::Empty* response) { return this->DeleteTopic(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTopic(
        ::grpc::MessageAllocator< ::google::pubsub::v1beta2::DeleteTopicRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::pubsub::v1beta2::DeleteTopicRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteTopicRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteTopicRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateTopic<WithCallbackMethod_Publish<WithCallbackMethod_GetTopic<WithCallbackMethod_ListTopics<WithCallbackMethod_ListTopicSubscriptions<WithCallbackMethod_DeleteTopic<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTopic() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Topic* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PublishRequest* /*request*/, ::google::pubsub::v1beta2::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTopic() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetTopicRequest* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTopics() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteTopicRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTopic() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Topic* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTopic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Publish() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PublishRequest* /*request*/, ::google::pubsub::v1beta2::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTopic() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetTopicRequest* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTopic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTopics() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTopicSubscriptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteTopicRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTopic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateTopic() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTopic(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Topic* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Publish(context, request, response); }));
    }
    ~WithRawCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PublishRequest* /*request*/, ::google::pubsub::v1beta2::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Publish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTopic() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTopic(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetTopicRequest* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTopics() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTopics(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTopics(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTopicSubscriptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListTopicSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTopic(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteTopicRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTopic() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::Topic, ::google::pubsub::v1beta2::Topic>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::Topic, ::google::pubsub::v1beta2::Topic>* streamer) {
                       return this->StreamedCreateTopic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::Topic* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::Topic,::google::pubsub::v1beta2::Topic>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::PublishRequest, ::google::pubsub::v1beta2::PublishResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::PublishRequest, ::google::pubsub::v1beta2::PublishResponse>* streamer) {
                       return this->StreamedPublish(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::PublishRequest* /*request*/, ::google::pubsub::v1beta2::PublishResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::PublishRequest,::google::pubsub::v1beta2::PublishResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTopic() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::GetTopicRequest, ::google::pubsub::v1beta2::Topic>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::GetTopicRequest, ::google::pubsub::v1beta2::Topic>* streamer) {
                       return this->StreamedGetTopic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::GetTopicRequest* /*request*/, ::google::pubsub::v1beta2::Topic* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::GetTopicRequest,::google::pubsub::v1beta2::Topic>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTopics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTopics() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::ListTopicsRequest, ::google::pubsub::v1beta2::ListTopicsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::ListTopicsRequest, ::google::pubsub::v1beta2::ListTopicsResponse>* streamer) {
                       return this->StreamedListTopics(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTopics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTopics(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTopics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::ListTopicsRequest,::google::pubsub::v1beta2::ListTopicsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTopicSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTopicSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* streamer) {
                       return this->StreamedListTopicSubscriptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListTopicSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTopicSubscriptions(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest* /*request*/, ::google::pubsub::v1beta2::ListTopicSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTopicSubscriptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::ListTopicSubscriptionsRequest,::google::pubsub::v1beta2::ListTopicSubscriptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTopic() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::pubsub::v1beta2::DeleteTopicRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::pubsub::v1beta2::DeleteTopicRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteTopic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTopic(::grpc::ServerContext* /*context*/, const ::google::pubsub::v1beta2::DeleteTopicRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::pubsub::v1beta2::DeleteTopicRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateTopic<WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_GetTopic<WithStreamedUnaryMethod_ListTopics<WithStreamedUnaryMethod_ListTopicSubscriptions<WithStreamedUnaryMethod_DeleteTopic<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateTopic<WithStreamedUnaryMethod_Publish<WithStreamedUnaryMethod_GetTopic<WithStreamedUnaryMethod_ListTopics<WithStreamedUnaryMethod_ListTopicSubscriptions<WithStreamedUnaryMethod_DeleteTopic<Service > > > > > > StreamedService;
};

}  // namespace v1beta2
}  // namespace pubsub
}  // namespace google


#endif  // GRPC_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED
