// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

#include "google/pubsub/v1/pubsub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto;
namespace google {
namespace pubsub {
namespace v1 {
class MessageStoragePolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageStoragePolicy> _instance;
} _MessageStoragePolicy_default_instance_;
class SchemaSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SchemaSettings> _instance;
} _SchemaSettings_default_instance_;
class Topic_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Topic_LabelsEntry_DoNotUse> _instance;
} _Topic_LabelsEntry_DoNotUse_default_instance_;
class TopicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Topic> _instance;
} _Topic_default_instance_;
class PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PubsubMessage_AttributesEntry_DoNotUse> _instance;
} _PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
class PubsubMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PubsubMessage> _instance;
} _PubsubMessage_default_instance_;
class GetTopicRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTopicRequest> _instance;
} _GetTopicRequest_default_instance_;
class UpdateTopicRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTopicRequest> _instance;
} _UpdateTopicRequest_default_instance_;
class PublishRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishRequest> _instance;
} _PublishRequest_default_instance_;
class PublishResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishResponse> _instance;
} _PublishResponse_default_instance_;
class ListTopicsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicsRequest> _instance;
} _ListTopicsRequest_default_instance_;
class ListTopicsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicsResponse> _instance;
} _ListTopicsResponse_default_instance_;
class ListTopicSubscriptionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicSubscriptionsRequest> _instance;
} _ListTopicSubscriptionsRequest_default_instance_;
class ListTopicSubscriptionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicSubscriptionsResponse> _instance;
} _ListTopicSubscriptionsResponse_default_instance_;
class ListTopicSnapshotsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicSnapshotsRequest> _instance;
} _ListTopicSnapshotsRequest_default_instance_;
class ListTopicSnapshotsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicSnapshotsResponse> _instance;
} _ListTopicSnapshotsResponse_default_instance_;
class DeleteTopicRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTopicRequest> _instance;
} _DeleteTopicRequest_default_instance_;
class DetachSubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetachSubscriptionRequest> _instance;
} _DetachSubscriptionRequest_default_instance_;
class DetachSubscriptionResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetachSubscriptionResponse> _instance;
} _DetachSubscriptionResponse_default_instance_;
class Subscription_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subscription_LabelsEntry_DoNotUse> _instance;
} _Subscription_LabelsEntry_DoNotUse_default_instance_;
class SubscriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subscription> _instance;
} _Subscription_default_instance_;
class RetryPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RetryPolicy> _instance;
} _RetryPolicy_default_instance_;
class DeadLetterPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeadLetterPolicy> _instance;
} _DeadLetterPolicy_default_instance_;
class ExpirationPolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExpirationPolicy> _instance;
} _ExpirationPolicy_default_instance_;
class PushConfig_OidcTokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushConfig_OidcToken> _instance;
} _PushConfig_OidcToken_default_instance_;
class PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushConfig_AttributesEntry_DoNotUse> _instance;
} _PushConfig_AttributesEntry_DoNotUse_default_instance_;
class PushConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushConfig> _instance;
  const ::google::pubsub::v1::PushConfig_OidcToken* oidc_token_;
} _PushConfig_default_instance_;
class ReceivedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReceivedMessage> _instance;
} _ReceivedMessage_default_instance_;
class GetSubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubscriptionRequest> _instance;
} _GetSubscriptionRequest_default_instance_;
class UpdateSubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateSubscriptionRequest> _instance;
} _UpdateSubscriptionRequest_default_instance_;
class ListSubscriptionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSubscriptionsRequest> _instance;
} _ListSubscriptionsRequest_default_instance_;
class ListSubscriptionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSubscriptionsResponse> _instance;
} _ListSubscriptionsResponse_default_instance_;
class DeleteSubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteSubscriptionRequest> _instance;
} _DeleteSubscriptionRequest_default_instance_;
class ModifyPushConfigRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifyPushConfigRequest> _instance;
} _ModifyPushConfigRequest_default_instance_;
class PullRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PullRequest> _instance;
} _PullRequest_default_instance_;
class PullResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PullResponse> _instance;
} _PullResponse_default_instance_;
class ModifyAckDeadlineRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifyAckDeadlineRequest> _instance;
} _ModifyAckDeadlineRequest_default_instance_;
class AcknowledgeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcknowledgeRequest> _instance;
} _AcknowledgeRequest_default_instance_;
class StreamingPullRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingPullRequest> _instance;
} _StreamingPullRequest_default_instance_;
class StreamingPullResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingPullResponse> _instance;
} _StreamingPullResponse_default_instance_;
class CreateSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateSnapshotRequest_LabelsEntry_DoNotUse> _instance;
} _CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
class CreateSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateSnapshotRequest> _instance;
} _CreateSnapshotRequest_default_instance_;
class UpdateSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateSnapshotRequest> _instance;
} _UpdateSnapshotRequest_default_instance_;
class Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snapshot_LabelsEntry_DoNotUse> _instance;
} _Snapshot_LabelsEntry_DoNotUse_default_instance_;
class SnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snapshot> _instance;
} _Snapshot_default_instance_;
class GetSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSnapshotRequest> _instance;
} _GetSnapshotRequest_default_instance_;
class ListSnapshotsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSnapshotsRequest> _instance;
} _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSnapshotsResponse> _instance;
} _ListSnapshotsResponse_default_instance_;
class DeleteSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteSnapshotRequest> _instance;
} _DeleteSnapshotRequest_default_instance_;
class SeekRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeekRequest> _instance;
  const ::google::protobuf::Timestamp* time_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_;
} _SeekRequest_default_instance_;
class SeekResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeekResponse> _instance;
} _SeekResponse_default_instance_;
}  // namespace v1
}  // namespace pubsub
}  // namespace google
static void InitDefaultsMessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_MessageStoragePolicy_default_instance_;
    new (ptr) ::google::pubsub::v1::MessageStoragePolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::MessageStoragePolicy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsSchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_SchemaSettings_default_instance_;
    new (ptr) ::google::pubsub::v1::SchemaSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::SchemaSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsTopic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Topic_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTopic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsTopic_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Topic_default_instance_;
    new (ptr) ::google::pubsub::v1::Topic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Topic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTopic_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_SchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsPubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse();
  }
  ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsPubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PubsubMessage_default_instance_;
    new (ptr) ::google::pubsub::v1::PubsubMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PubsubMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsGetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_GetTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetTopicRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetTopicRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsUpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_UpdateTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateTopicRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateTopicRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsPublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PublishRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::PublishRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PublishRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsPublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PublishResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::PublishResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PublishResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSubscriptionsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSubscriptionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSubscriptionsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSubscriptionsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSubscriptionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSubscriptionsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSnapshotsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSnapshotsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSnapshotsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSnapshotsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSnapshotsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSnapshotsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsDeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeleteTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteTopicRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteTopicRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsDetachSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DetachSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DetachSubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DetachSubscriptionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DetachSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDetachSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsDetachSubscriptionResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DetachSubscriptionResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::DetachSubscriptionResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DetachSubscriptionResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DetachSubscriptionResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDetachSubscriptionResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsSubscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Subscription_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsSubscription_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Subscription_default_instance_;
    new (ptr) ::google::pubsub::v1::Subscription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Subscription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsSubscription_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_RetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsRetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_RetryPolicy_default_instance_;
    new (ptr) ::google::pubsub::v1::RetryPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::RetryPolicy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsDeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeadLetterPolicy_default_instance_;
    new (ptr) ::google::pubsub::v1::DeadLetterPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeadLetterPolicy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ExpirationPolicy_default_instance_;
    new (ptr) ::google::pubsub::v1::ExpirationPolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ExpirationPolicy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsPushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PushConfig_OidcToken_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig_OidcToken();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PushConfig_OidcToken::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsPushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PushConfig_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse();
  }
  ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsPushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PushConfig_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PushConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ReceivedMessage_default_instance_;
    new (ptr) ::google::pubsub::v1::ReceivedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ReceivedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsGetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_GetSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetSubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetSubscriptionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsUpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateSubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateSubscriptionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSubscriptionsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSubscriptionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSubscriptionsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSubscriptionsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSubscriptionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSubscriptionsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsDeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeleteSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteSubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteSubscriptionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ModifyPushConfigRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ModifyPushConfigRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PullRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::PullRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PullRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PullResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::PullResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PullResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ModifyAckDeadlineRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ModifyAckDeadlineRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ModifyAckDeadlineRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsAcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_AcknowledgeRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::AcknowledgeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::AcknowledgeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsStreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_StreamingPullRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::StreamingPullRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::StreamingPullRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsStreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_StreamingPullResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::StreamingPullResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::StreamingPullResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsCreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsCreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_CreateSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::CreateSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::CreateSnapshotRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsUpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateSnapshotRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsSnapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Snapshot_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsSnapshot_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Snapshot_default_instance_;
    new (ptr) ::google::pubsub::v1::Snapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Snapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSnapshot_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsGetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_GetSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetSnapshotRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSnapshotsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSnapshotsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSnapshotsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSnapshotsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSnapshotsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSnapshotsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsDeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeleteSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteSnapshotRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsSeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_SeekRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::SeekRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::SeekRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsSeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_SeekResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::SeekResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::SeekResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

void InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DetachSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DetachSubscriptionResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[51];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::MessageStoragePolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::MessageStoragePolicy, allowed_persistence_regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SchemaSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SchemaSettings, schema_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SchemaSettings, encoding_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, labels_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, message_storage_policy_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, kms_key_name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, schema_settings_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, satisfies_pzs_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, data_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, attributes_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, message_id_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, publish_time_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, ordering_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetTopicRequest, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishResponse, message_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, project_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, topics_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsResponse, snapshots_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteTopicRequest, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DetachSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DetachSubscriptionRequest, subscription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DetachSubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, push_config_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, ack_deadline_seconds_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, retain_acked_messages_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, message_retention_duration_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, labels_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, enable_message_ordering_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, expiration_policy_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, filter_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, dead_letter_policy_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, retry_policy_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, detached_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::RetryPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::RetryPolicy, minimum_backoff_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::RetryPolicy, maximum_backoff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeadLetterPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeadLetterPolicy, dead_letter_topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeadLetterPolicy, max_delivery_attempts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ExpirationPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ExpirationPolicy, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_OidcToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_OidcToken, service_account_email_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_OidcToken, audience_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, push_endpoint_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, attributes_),
  offsetof(::google::pubsub::v1::PushConfigDefaultTypeInternal, oidc_token_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, authentication_method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, ack_id_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, message_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, delivery_attempt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSubscriptionRequest, subscription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, project_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSubscriptionRequest, subscription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, push_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, return_immediately_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, max_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullResponse, received_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, ack_ids_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, ack_deadline_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, ack_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, ack_ids_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, modify_deadline_seconds_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, modify_deadline_ack_ids_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, stream_ack_deadline_seconds_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, max_outstanding_messages_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, max_outstanding_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullResponse, received_messages_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, snapshot_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, update_mask_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, expire_time_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSnapshotRequest, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, project_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, snapshots_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSnapshotRequest, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, subscription_),
  offsetof(::google::pubsub::v1::SeekRequestDefaultTypeInternal, time_),
  offsetof(::google::pubsub::v1::SeekRequestDefaultTypeInternal, snapshot_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::pubsub::v1::MessageStoragePolicy)},
  { 6, -1, sizeof(::google::pubsub::v1::SchemaSettings)},
  { 13, 20, sizeof(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse)},
  { 22, -1, sizeof(::google::pubsub::v1::Topic)},
  { 33, 40, sizeof(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse)},
  { 42, -1, sizeof(::google::pubsub::v1::PubsubMessage)},
  { 52, -1, sizeof(::google::pubsub::v1::GetTopicRequest)},
  { 58, -1, sizeof(::google::pubsub::v1::UpdateTopicRequest)},
  { 65, -1, sizeof(::google::pubsub::v1::PublishRequest)},
  { 72, -1, sizeof(::google::pubsub::v1::PublishResponse)},
  { 78, -1, sizeof(::google::pubsub::v1::ListTopicsRequest)},
  { 86, -1, sizeof(::google::pubsub::v1::ListTopicsResponse)},
  { 93, -1, sizeof(::google::pubsub::v1::ListTopicSubscriptionsRequest)},
  { 101, -1, sizeof(::google::pubsub::v1::ListTopicSubscriptionsResponse)},
  { 108, -1, sizeof(::google::pubsub::v1::ListTopicSnapshotsRequest)},
  { 116, -1, sizeof(::google::pubsub::v1::ListTopicSnapshotsResponse)},
  { 123, -1, sizeof(::google::pubsub::v1::DeleteTopicRequest)},
  { 129, -1, sizeof(::google::pubsub::v1::DetachSubscriptionRequest)},
  { 135, -1, sizeof(::google::pubsub::v1::DetachSubscriptionResponse)},
  { 140, 147, sizeof(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse)},
  { 149, -1, sizeof(::google::pubsub::v1::Subscription)},
  { 167, -1, sizeof(::google::pubsub::v1::RetryPolicy)},
  { 174, -1, sizeof(::google::pubsub::v1::DeadLetterPolicy)},
  { 181, -1, sizeof(::google::pubsub::v1::ExpirationPolicy)},
  { 187, -1, sizeof(::google::pubsub::v1::PushConfig_OidcToken)},
  { 194, 201, sizeof(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse)},
  { 203, -1, sizeof(::google::pubsub::v1::PushConfig)},
  { 212, -1, sizeof(::google::pubsub::v1::ReceivedMessage)},
  { 220, -1, sizeof(::google::pubsub::v1::GetSubscriptionRequest)},
  { 226, -1, sizeof(::google::pubsub::v1::UpdateSubscriptionRequest)},
  { 233, -1, sizeof(::google::pubsub::v1::ListSubscriptionsRequest)},
  { 241, -1, sizeof(::google::pubsub::v1::ListSubscriptionsResponse)},
  { 248, -1, sizeof(::google::pubsub::v1::DeleteSubscriptionRequest)},
  { 254, -1, sizeof(::google::pubsub::v1::ModifyPushConfigRequest)},
  { 261, -1, sizeof(::google::pubsub::v1::PullRequest)},
  { 269, -1, sizeof(::google::pubsub::v1::PullResponse)},
  { 275, -1, sizeof(::google::pubsub::v1::ModifyAckDeadlineRequest)},
  { 283, -1, sizeof(::google::pubsub::v1::AcknowledgeRequest)},
  { 290, -1, sizeof(::google::pubsub::v1::StreamingPullRequest)},
  { 303, -1, sizeof(::google::pubsub::v1::StreamingPullResponse)},
  { 309, 316, sizeof(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse)},
  { 318, -1, sizeof(::google::pubsub::v1::CreateSnapshotRequest)},
  { 326, -1, sizeof(::google::pubsub::v1::UpdateSnapshotRequest)},
  { 333, 340, sizeof(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse)},
  { 342, -1, sizeof(::google::pubsub::v1::Snapshot)},
  { 351, -1, sizeof(::google::pubsub::v1::GetSnapshotRequest)},
  { 357, -1, sizeof(::google::pubsub::v1::ListSnapshotsRequest)},
  { 365, -1, sizeof(::google::pubsub::v1::ListSnapshotsResponse)},
  { 372, -1, sizeof(::google::pubsub::v1::DeleteSnapshotRequest)},
  { 378, -1, sizeof(::google::pubsub::v1::SeekRequest)},
  { 387, -1, sizeof(::google::pubsub::v1::SeekResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_MessageStoragePolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_SchemaSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Topic_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Topic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PubsubMessage_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PubsubMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_GetTopicRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_UpdateTopicRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PublishRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PublishResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicSnapshotsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicSnapshotsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DeleteTopicRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DetachSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DetachSubscriptionResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Subscription_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Subscription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_RetryPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DeadLetterPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ExpirationPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PushConfig_OidcToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PushConfig_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PushConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ReceivedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_GetSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DeleteSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PullRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PullResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ModifyAckDeadlineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_AcknowledgeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_StreamingPullRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_StreamingPullResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_CreateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Snapshot_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Snapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_GetSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSnapshotsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSnapshotsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DeleteSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_SeekRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_SeekResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto = {
  {}, AddDescriptors_google_2fpubsub_2fv1_2fpubsub_2eproto, "google/pubsub/v1/pubsub.proto", schemas,
  file_default_instances, TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto::offsets,
  file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto, 51, file_level_enum_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto, file_level_service_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto,
};

const char descriptor_table_protodef_google_2fpubsub_2fv1_2fpubsub_2eproto[] =
  "\n\035google/pubsub/v1/pubsub.proto\022\020google."
  "pubsub.v1\032\034google/api/annotations.proto\032"
  "\027google/api/client.proto\032\037google/api/fie"
  "ld_behavior.proto\032\031google/api/resource.p"
  "roto\032\036google/protobuf/duration.proto\032\033go"
  "ogle/protobuf/empty.proto\032 google/protob"
  "uf/field_mask.proto\032\037google/protobuf/tim"
  "estamp.proto\032\035google/pubsub/v1/schema.pr"
  "oto\";\n\024MessageStoragePolicy\022#\n\033allowed_p"
  "ersistence_regions\030\001 \003(\t\"t\n\016SchemaSettin"
  "gs\0224\n\006schema\030\001 \001(\tB$\340A\002\372A\036\n\034pubsub.googl"
  "eapis.com/Schema\022,\n\010encoding\030\002 \001(\0162\032.goo"
  "gle.pubsub.v1.Encoding\"\204\003\n\005Topic\022\021\n\004name"
  "\030\001 \001(\tB\003\340A\002\0223\n\006labels\030\002 \003(\0132#.google.pub"
  "sub.v1.Topic.LabelsEntry\022F\n\026message_stor"
  "age_policy\030\003 \001(\0132&.google.pubsub.v1.Mess"
  "ageStoragePolicy\022\024\n\014kms_key_name\030\005 \001(\t\0229"
  "\n\017schema_settings\030\006 \001(\0132 .google.pubsub."
  "v1.SchemaSettings\022\025\n\rsatisfies_pzs\030\007 \001(\010"
  "\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001:T\352AQ\n\033pubsub.googleapis.com/Topi"
  "c\022!projects/{project}/topics/{topic}\022\017_d"
  "eleted-topic_\"\361\001\n\rPubsubMessage\022\014\n\004data\030"
  "\001 \001(\014\022C\n\nattributes\030\002 \003(\0132/.google.pubsu"
  "b.v1.PubsubMessage.AttributesEntry\022\022\n\nme"
  "ssage_id\030\003 \001(\t\0220\n\014publish_time\030\004 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022\024\n\014ordering_key"
  "\030\005 \001(\t\0321\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001\"E\n\017GetTopicRequest\0222\n\005"
  "topic\030\001 \001(\tB#\340A\002\372A\035\n\033pubsub.googleapis.c"
  "om/Topic\"w\n\022UpdateTopicRequest\022+\n\005topic\030"
  "\001 \001(\0132\027.google.pubsub.v1.TopicB\003\340A\002\0224\n\013u"
  "pdate_mask\030\002 \001(\0132\032.google.protobuf.Field"
  "MaskB\003\340A\002\"|\n\016PublishRequest\0222\n\005topic\030\001 \001"
  "(\tB#\340A\002\372A\035\n\033pubsub.googleapis.com/Topic\022"
  "6\n\010messages\030\002 \003(\0132\037.google.pubsub.v1.Pub"
  "subMessageB\003\340A\002\"&\n\017PublishResponse\022\023\n\013me"
  "ssage_ids\030\001 \003(\t\"\200\001\n\021ListTopicsRequest\022D\n"
  "\007project\030\001 \001(\tB3\340A\002\372A-\n+cloudresourceman"
  "ager.googleapis.com/Project\022\021\n\tpage_size"
  "\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"V\n\022ListTopics"
  "Response\022\'\n\006topics\030\001 \003(\0132\027.google.pubsub"
  ".v1.Topic\022\027\n\017next_page_token\030\002 \001(\t\"z\n\035Li"
  "stTopicSubscriptionsRequest\0222\n\005topic\030\001 \001"
  "(\tB#\340A\002\372A\035\n\033pubsub.googleapis.com/Topic\022"
  "\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"y"
  "\n\036ListTopicSubscriptionsResponse\022>\n\rsubs"
  "criptions\030\001 \003(\tB\'\372A$\n\"pubsub.googleapis."
  "com/Subscription\022\027\n\017next_page_token\030\002 \001("
  "\t\"v\n\031ListTopicSnapshotsRequest\0222\n\005topic\030"
  "\001 \001(\tB#\340A\002\372A\035\n\033pubsub.googleapis.com/Top"
  "ic\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001("
  "\t\"H\n\032ListTopicSnapshotsResponse\022\021\n\tsnaps"
  "hots\030\001 \003(\t\022\027\n\017next_page_token\030\002 \001(\t\"H\n\022D"
  "eleteTopicRequest\0222\n\005topic\030\001 \001(\tB#\340A\002\372A\035"
  "\n\033pubsub.googleapis.com/Topic\"]\n\031DetachS"
  "ubscriptionRequest\022@\n\014subscription\030\001 \001(\t"
  "B*\340A\002\372A$\n\"pubsub.googleapis.com/Subscrip"
  "tion\"\034\n\032DetachSubscriptionResponse\"\300\005\n\014S"
  "ubscription\022\021\n\004name\030\001 \001(\tB\003\340A\002\0222\n\005topic\030"
  "\002 \001(\tB#\340A\002\372A\035\n\033pubsub.googleapis.com/Top"
  "ic\0221\n\013push_config\030\004 \001(\0132\034.google.pubsub."
  "v1.PushConfig\022\034\n\024ack_deadline_seconds\030\005 "
  "\001(\005\022\035\n\025retain_acked_messages\030\007 \001(\010\022=\n\032me"
  "ssage_retention_duration\030\010 \001(\0132\031.google."
  "protobuf.Duration\022:\n\006labels\030\t \003(\0132*.goog"
  "le.pubsub.v1.Subscription.LabelsEntry\022\037\n"
  "\027enable_message_ordering\030\n \001(\010\022=\n\021expira"
  "tion_policy\030\013 \001(\0132\".google.pubsub.v1.Exp"
  "irationPolicy\022\016\n\006filter\030\014 \001(\t\022>\n\022dead_le"
  "tter_policy\030\r \001(\0132\".google.pubsub.v1.Dea"
  "dLetterPolicy\0223\n\014retry_policy\030\016 \001(\0132\035.go"
  "ogle.pubsub.v1.RetryPolicy\022\020\n\010detached\030\017"
  " \001(\010\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001:X\352AU\n\"pubsub.googleapis.com/"
  "Subscription\022/projects/{project}/subscri"
  "ptions/{subscription}\"u\n\013RetryPolicy\0222\n\017"
  "minimum_backoff\030\001 \001(\0132\031.google.protobuf."
  "Duration\0222\n\017maximum_backoff\030\002 \001(\0132\031.goog"
  "le.protobuf.Duration\"L\n\020DeadLetterPolicy"
  "\022\031\n\021dead_letter_topic\030\001 \001(\t\022\035\n\025max_deliv"
  "ery_attempts\030\002 \001(\005\":\n\020ExpirationPolicy\022&"
  "\n\003ttl\030\001 \001(\0132\031.google.protobuf.Duration\"\255"
  "\002\n\nPushConfig\022\025\n\rpush_endpoint\030\001 \001(\t\022@\n\n"
  "attributes\030\002 \003(\0132,.google.pubsub.v1.Push"
  "Config.AttributesEntry\022<\n\noidc_token\030\003 \001"
  "(\0132&.google.pubsub.v1.PushConfig.OidcTok"
  "enH\000\032<\n\tOidcToken\022\035\n\025service_account_ema"
  "il\030\001 \001(\t\022\020\n\010audience\030\002 \001(\t\0321\n\017Attributes"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\027\n"
  "\025authentication_method\"m\n\017ReceivedMessag"
  "e\022\016\n\006ack_id\030\001 \001(\t\0220\n\007message\030\002 \001(\0132\037.goo"
  "gle.pubsub.v1.PubsubMessage\022\030\n\020delivery_"
  "attempt\030\003 \001(\005\"Z\n\026GetSubscriptionRequest\022"
  "@\n\014subscription\030\001 \001(\tB*\340A\002\372A$\n\"pubsub.go"
  "ogleapis.com/Subscription\"\214\001\n\031UpdateSubs"
  "criptionRequest\0229\n\014subscription\030\001 \001(\0132\036."
  "google.pubsub.v1.SubscriptionB\003\340A\002\0224\n\013up"
  "date_mask\030\002 \001(\0132\032.google.protobuf.FieldM"
  "askB\003\340A\002\"\207\001\n\030ListSubscriptionsRequest\022D\n"
  "\007project\030\001 \001(\tB3\340A\002\372A-\n+cloudresourceman"
  "ager.googleapis.com/Project\022\021\n\tpage_size"
  "\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"k\n\031ListSubscr"
  "iptionsResponse\0225\n\rsubscriptions\030\001 \003(\0132\036"
  ".google.pubsub.v1.Subscription\022\027\n\017next_p"
  "age_token\030\002 \001(\t\"]\n\031DeleteSubscriptionReq"
  "uest\022@\n\014subscription\030\001 \001(\tB*\340A\002\372A$\n\"pubs"
  "ub.googleapis.com/Subscription\"\223\001\n\027Modif"
  "yPushConfigRequest\022@\n\014subscription\030\001 \001(\t"
  "B*\340A\002\372A$\n\"pubsub.googleapis.com/Subscrip"
  "tion\0226\n\013push_config\030\002 \001(\0132\034.google.pubsu"
  "b.v1.PushConfigB\003\340A\002\"\215\001\n\013PullRequest\022@\n\014"
  "subscription\030\001 \001(\tB*\340A\002\372A$\n\"pubsub.googl"
  "eapis.com/Subscription\022!\n\022return_immedia"
  "tely\030\002 \001(\010B\005\030\001\340A\001\022\031\n\014max_messages\030\003 \001(\005B"
  "\003\340A\002\"L\n\014PullResponse\022<\n\021received_message"
  "s\030\001 \003(\0132!.google.pubsub.v1.ReceivedMessa"
  "ge\"\225\001\n\030ModifyAckDeadlineRequest\022@\n\014subsc"
  "ription\030\001 \001(\tB*\340A\002\372A$\n\"pubsub.googleapis"
  ".com/Subscription\022\024\n\007ack_ids\030\004 \003(\tB\003\340A\002\022"
  "!\n\024ack_deadline_seconds\030\003 \001(\005B\003\340A\002\"l\n\022Ac"
  "knowledgeRequest\022@\n\014subscription\030\001 \001(\tB*"
  "\340A\002\372A$\n\"pubsub.googleapis.com/Subscripti"
  "on\022\024\n\007ack_ids\030\002 \003(\tB\003\340A\002\"\251\002\n\024StreamingPu"
  "llRequest\022@\n\014subscription\030\001 \001(\tB*\340A\002\372A$\n"
  "\"pubsub.googleapis.com/Subscription\022\017\n\007a"
  "ck_ids\030\002 \003(\t\022\037\n\027modify_deadline_seconds\030"
  "\003 \003(\005\022\037\n\027modify_deadline_ack_ids\030\004 \003(\t\022("
  "\n\033stream_ack_deadline_seconds\030\005 \001(\005B\003\340A\002"
  "\022\021\n\tclient_id\030\006 \001(\t\022 \n\030max_outstanding_m"
  "essages\030\007 \001(\003\022\035\n\025max_outstanding_bytes\030\010"
  " \001(\003\"U\n\025StreamingPullResponse\022<\n\021receive"
  "d_messages\030\001 \003(\0132!.google.pubsub.v1.Rece"
  "ivedMessage\"\203\002\n\025CreateSnapshotRequest\0224\n"
  "\004name\030\001 \001(\tB&\340A\002\372A \n\036pubsub.googleapis.c"
  "om/Snapshot\022@\n\014subscription\030\002 \001(\tB*\340A\002\372A"
  "$\n\"pubsub.googleapis.com/Subscription\022C\n"
  "\006labels\030\003 \003(\01323.google.pubsub.v1.CreateS"
  "napshotRequest.LabelsEntry\032-\n\013LabelsEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\200\001\n\025Up"
  "dateSnapshotRequest\0221\n\010snapshot\030\001 \001(\0132\032."
  "google.pubsub.v1.SnapshotB\003\340A\002\0224\n\013update"
  "_mask\030\002 \001(\0132\032.google.protobuf.FieldMaskB"
  "\003\340A\002\"\257\002\n\010Snapshot\022\014\n\004name\030\001 \001(\t\022/\n\005topic"
  "\030\002 \001(\tB \372A\035\n\033pubsub.googleapis.com/Topic"
  "\022/\n\013expire_time\030\003 \001(\0132\032.google.protobuf."
  "Timestamp\0226\n\006labels\030\004 \003(\0132&.google.pubsu"
  "b.v1.Snapshot.LabelsEntry\032-\n\013LabelsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001:L\352AI\n\036p"
  "ubsub.googleapis.com/Snapshot\022\'projects/"
  "{project}/snapshots/{snapshot}\"N\n\022GetSna"
  "pshotRequest\0228\n\010snapshot\030\001 \001(\tB&\340A\002\372A \n\036"
  "pubsub.googleapis.com/Snapshot\"\203\001\n\024ListS"
  "napshotsRequest\022D\n\007project\030\001 \001(\tB3\340A\002\372A-"
  "\n+cloudresourcemanager.googleapis.com/Pr"
  "oject\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003"
  " \001(\t\"_\n\025ListSnapshotsResponse\022-\n\tsnapsho"
  "ts\030\001 \003(\0132\032.google.pubsub.v1.Snapshot\022\027\n\017"
  "next_page_token\030\002 \001(\t\"Q\n\025DeleteSnapshotR"
  "equest\0228\n\010snapshot\030\001 \001(\tB&\340A\002\372A \n\036pubsub"
  ".googleapis.com/Snapshot\"\276\001\n\013SeekRequest"
  "\022@\n\014subscription\030\001 \001(\tB*\340A\002\372A$\n\"pubsub.g"
  "oogleapis.com/Subscription\022*\n\004time\030\002 \001(\013"
  "2\032.google.protobuf.TimestampH\000\0227\n\010snapsh"
  "ot\030\003 \001(\tB#\372A \n\036pubsub.googleapis.com/Sna"
  "pshotH\000B\010\n\006target\"\016\n\014SeekResponse2\243\013\n\tPu"
  "blisher\022q\n\013CreateTopic\022\027.google.pubsub.v"
  "1.Topic\032\027.google.pubsub.v1.Topic\"0\202\323\344\223\002#"
  "\032\036/v1/{name=projects/*/topics/*}:\001*\332A\004na"
  "me\022}\n\013UpdateTopic\022$.google.pubsub.v1.Upd"
  "ateTopicRequest\032\027.google.pubsub.v1.Topic"
  "\"/\202\323\344\223\002)2$/v1/{topic.name=projects/*/top"
  "ics/*}:\001*\022\223\001\n\007Publish\022 .google.pubsub.v1"
  ".PublishRequest\032!.google.pubsub.v1.Publi"
  "shResponse\"C\202\323\344\223\002,\"\'/v1/{topic=projects/"
  "*/topics/*}:publish:\001*\332A\016topic,messages\022"
  "w\n\010GetTopic\022!.google.pubsub.v1.GetTopicR"
  "equest\032\027.google.pubsub.v1.Topic\"/\202\323\344\223\002!\022"
  "\037/v1/{topic=projects/*/topics/*}\332A\005topic"
  "\022\212\001\n\nListTopics\022#.google.pubsub.v1.ListT"
  "opicsRequest\032$.google.pubsub.v1.ListTopi"
  "csResponse\"1\202\323\344\223\002!\022\037/v1/{project=project"
  "s/*}/topics\332A\007project\022\272\001\n\026ListTopicSubsc"
  "riptions\022/.google.pubsub.v1.ListTopicSub"
  "scriptionsRequest\0320.google.pubsub.v1.Lis"
  "tTopicSubscriptionsResponse\"=\202\323\344\223\002/\022-/v1"
  "/{topic=projects/*/topics/*}/subscriptio"
  "ns\332A\005topic\022\252\001\n\022ListTopicSnapshots\022+.goog"
  "le.pubsub.v1.ListTopicSnapshotsRequest\032,"
  ".google.pubsub.v1.ListTopicSnapshotsResp"
  "onse\"9\202\323\344\223\002+\022)/v1/{topic=projects/*/topi"
  "cs/*}/snapshots\332A\005topic\022|\n\013DeleteTopic\022$"
  ".google.pubsub.v1.DeleteTopicRequest\032\026.g"
  "oogle.protobuf.Empty\"/\202\323\344\223\002!*\037/v1/{topic"
  "=projects/*/topics/*}\332A\005topic\022\255\001\n\022Detach"
  "Subscription\022+.google.pubsub.v1.DetachSu"
  "bscriptionRequest\032,.google.pubsub.v1.Det"
  "achSubscriptionResponse\"<\202\323\344\223\0026\"4/v1/{su"
  "bscription=projects/*/subscriptions/*}:d"
  "etach\032p\312A\025pubsub.googleapis.com\322AUhttps:"
  "//www.googleapis.com/auth/cloud-platform"
  ",https://www.googleapis.com/auth/pubsub2"
  "\203\025\n\nSubscriber\022\264\001\n\022CreateSubscription\022\036."
  "google.pubsub.v1.Subscription\032\036.google.p"
  "ubsub.v1.Subscription\"^\202\323\344\223\002*\032%/v1/{name"
  "=projects/*/subscriptions/*}:\001*\332A+name,t"
  "opic,push_config,ack_deadline_seconds\022\241\001"
  "\n\017GetSubscription\022(.google.pubsub.v1.Get"
  "SubscriptionRequest\032\036.google.pubsub.v1.S"
  "ubscription\"D\202\323\344\223\002/\022-/v1/{subscription=p"
  "rojects/*/subscriptions/*}\332A\014subscriptio"
  "n\022\240\001\n\022UpdateSubscription\022+.google.pubsub"
  ".v1.UpdateSubscriptionRequest\032\036.google.p"
  "ubsub.v1.Subscription\"=\202\323\344\223\002722/v1/{subs"
  "cription.name=projects/*/subscriptions/*"
  "}:\001*\022\246\001\n\021ListSubscriptions\022*.google.pubs"
  "ub.v1.ListSubscriptionsRequest\032+.google."
  "pubsub.v1.ListSubscriptionsResponse\"8\202\323\344"
  "\223\002(\022&/v1/{project=projects/*}/subscripti"
  "ons\332A\007project\022\237\001\n\022DeleteSubscription\022+.g"
  "oogle.pubsub.v1.DeleteSubscriptionReques"
  "t\032\026.google.protobuf.Empty\"D\202\323\344\223\002/*-/v1/{"
  "subscription=projects/*/subscriptions/*}"
  "\332A\014subscription\022\317\001\n\021ModifyAckDeadline\022*."
  "google.pubsub.v1.ModifyAckDeadlineReques"
  "t\032\026.google.protobuf.Empty\"v\202\323\344\223\002D\"\?/v1/{"
  "subscription=projects/*/subscriptions/*}"
  ":modifyAckDeadline:\001*\332A)subscription,ack"
  "_ids,ack_deadline_seconds\022\250\001\n\013Acknowledg"
  "e\022$.google.pubsub.v1.AcknowledgeRequest\032"
  "\026.google.protobuf.Empty\"[\202\323\344\223\002>\"9/v1/{su"
  "bscription=projects/*/subscriptions/*}:a"
  "cknowledge:\001*\332A\024subscription,ack_ids\022\263\001\n"
  "\004Pull\022\035.google.pubsub.v1.PullRequest\032\036.g"
  "oogle.pubsub.v1.PullResponse\"l\202\323\344\223\0027\"2/v"
  "1/{subscription=projects/*/subscriptions"
  "/*}:pull:\001*\332A,subscription,return_immedi"
  "ately,max_messages\022f\n\rStreamingPull\022&.go"
  "ogle.pubsub.v1.StreamingPullRequest\032\'.go"
  "ogle.pubsub.v1.StreamingPullResponse\"\000(\001"
  "0\001\022\273\001\n\020ModifyPushConfig\022).google.pubsub."
  "v1.ModifyPushConfigRequest\032\026.google.prot"
  "obuf.Empty\"d\202\323\344\223\002C\">/v1/{subscription=pr"
  "ojects/*/subscriptions/*}:modifyPushConf"
  "ig:\001*\332A\030subscription,push_config\022\211\001\n\013Get"
  "Snapshot\022$.google.pubsub.v1.GetSnapshotR"
  "equest\032\032.google.pubsub.v1.Snapshot\"8\202\323\344\223"
  "\002\'\022%/v1/{snapshot=projects/*/snapshots/*"
  "}\332A\010snapshot\022\226\001\n\rListSnapshots\022&.google."
  "pubsub.v1.ListSnapshotsRequest\032\'.google."
  "pubsub.v1.ListSnapshotsResponse\"4\202\323\344\223\002$\022"
  "\"/v1/{project=projects/*}/snapshots\332A\007pr"
  "oject\022\227\001\n\016CreateSnapshot\022\'.google.pubsub"
  ".v1.CreateSnapshotRequest\032\032.google.pubsu"
  "b.v1.Snapshot\"@\202\323\344\223\002&\032!/v1/{name=project"
  "s/*/snapshots/*}:\001*\332A\021name,subscription\022"
  "\214\001\n\016UpdateSnapshot\022\'.google.pubsub.v1.Up"
  "dateSnapshotRequest\032\032.google.pubsub.v1.S"
  "napshot\"5\202\323\344\223\002/2*/v1/{snapshot.name=proj"
  "ects/*/snapshots/*}:\001*\022\213\001\n\016DeleteSnapsho"
  "t\022\'.google.pubsub.v1.DeleteSnapshotReque"
  "st\032\026.google.protobuf.Empty\"8\202\323\344\223\002\'*%/v1/"
  "{snapshot=projects/*/snapshots/*}\332A\010snap"
  "shot\022\204\001\n\004Seek\022\035.google.pubsub.v1.SeekReq"
  "uest\032\036.google.pubsub.v1.SeekResponse\"=\202\323"
  "\344\223\0027\"2/v1/{subscription=projects/*/subsc"
  "riptions/*}:seek:\001*\032p\312A\025pubsub.googleapi"
  "s.com\322AUhttps://www.googleapis.com/auth/"
  "cloud-platform,https://www.googleapis.co"
  "m/auth/pubsubB\256\001\n\024com.google.pubsub.v1B\013"
  "PubsubProtoP\001Z6google.golang.org/genprot"
  "o/googleapis/pubsub/v1;pubsub\370\001\001\252\002\026Googl"
  "e.Cloud.PubSub.V1\312\002\026Google\\Cloud\\PubSub\\"
  "V1\352\002\031Google::Cloud::PubSub::V1b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto = {
  false, InitDefaults_google_2fpubsub_2fv1_2fpubsub_2eproto, 
  descriptor_table_protodef_google_2fpubsub_2fv1_2fpubsub_2eproto,
  "google/pubsub/v1/pubsub.proto", &assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto, 10958,
};

void AddDescriptors_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[9] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
    ::AddDescriptors_google_2fapi_2fclient_2eproto,
    ::AddDescriptors_google_2fapi_2ffield_5fbehavior_2eproto,
    ::AddDescriptors_google_2fapi_2fresource_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fempty_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ffield_5fmask_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fpubsub_2fv1_2fschema_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto, deps, 9);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fpubsub_2fv1_2fpubsub_2eproto = []() { AddDescriptors_google_2fpubsub_2fv1_2fpubsub_2eproto(); return true; }();
namespace google {
namespace pubsub {
namespace v1 {

// ===================================================================

void MessageStoragePolicy::InitAsDefaultInstance() {
}
class MessageStoragePolicy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageStoragePolicy::kAllowedPersistenceRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageStoragePolicy::MessageStoragePolicy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.MessageStoragePolicy)
}
MessageStoragePolicy::MessageStoragePolicy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  allowed_persistence_regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.MessageStoragePolicy)
}
MessageStoragePolicy::MessageStoragePolicy(const MessageStoragePolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      allowed_persistence_regions_(from.allowed_persistence_regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.MessageStoragePolicy)
}

void MessageStoragePolicy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

MessageStoragePolicy::~MessageStoragePolicy() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.MessageStoragePolicy)
  SharedDtor();
}

void MessageStoragePolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void MessageStoragePolicy::ArenaDtor(void* object) {
  MessageStoragePolicy* _this = reinterpret_cast< MessageStoragePolicy* >(object);
  (void)_this;
}
void MessageStoragePolicy::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void MessageStoragePolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageStoragePolicy& MessageStoragePolicy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void MessageStoragePolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.MessageStoragePolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_persistence_regions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageStoragePolicy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MessageStoragePolicy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string allowed_persistence_regions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions");
          object = msg->add_allowed_persistence_regions();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageStoragePolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.MessageStoragePolicy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string allowed_persistence_regions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allowed_persistence_regions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allowed_persistence_regions(this->allowed_persistence_regions_size() - 1).data(),
            static_cast<int>(this->allowed_persistence_regions(this->allowed_persistence_regions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.MessageStoragePolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.MessageStoragePolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageStoragePolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.MessageStoragePolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allowed_persistence_regions = 1;
  for (int i = 0, n = this->allowed_persistence_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allowed_persistence_regions(i).data(), static_cast<int>(this->allowed_persistence_regions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->allowed_persistence_regions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.MessageStoragePolicy)
}

::google::protobuf::uint8* MessageStoragePolicy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.MessageStoragePolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allowed_persistence_regions = 1;
  for (int i = 0, n = this->allowed_persistence_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allowed_persistence_regions(i).data(), static_cast<int>(this->allowed_persistence_regions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->allowed_persistence_regions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.MessageStoragePolicy)
  return target;
}

size_t MessageStoragePolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.MessageStoragePolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_persistence_regions = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allowed_persistence_regions_size());
  for (int i = 0, n = this->allowed_persistence_regions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allowed_persistence_regions(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageStoragePolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.MessageStoragePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageStoragePolicy* source =
      ::google::protobuf::DynamicCastToGenerated<MessageStoragePolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.MessageStoragePolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.MessageStoragePolicy)
    MergeFrom(*source);
  }
}

void MessageStoragePolicy::MergeFrom(const MessageStoragePolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.MessageStoragePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_persistence_regions_.MergeFrom(from.allowed_persistence_regions_);
}

void MessageStoragePolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.MessageStoragePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageStoragePolicy::CopyFrom(const MessageStoragePolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.MessageStoragePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageStoragePolicy::IsInitialized() const {
  return true;
}

void MessageStoragePolicy::Swap(MessageStoragePolicy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MessageStoragePolicy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MessageStoragePolicy::UnsafeArenaSwap(MessageStoragePolicy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MessageStoragePolicy::InternalSwap(MessageStoragePolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allowed_persistence_regions_.InternalSwap(CastToBase(&other->allowed_persistence_regions_));
}

::google::protobuf::Metadata MessageStoragePolicy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SchemaSettings::InitAsDefaultInstance() {
}
class SchemaSettings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchemaSettings::kSchemaFieldNumber;
const int SchemaSettings::kEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchemaSettings::SchemaSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.SchemaSettings)
}
SchemaSettings::SchemaSettings(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.SchemaSettings)
}
SchemaSettings::SchemaSettings(const SchemaSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.schema().size() > 0) {
    schema_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schema(),
      GetArenaNoVirtual());
  }
  encoding_ = from.encoding_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.SchemaSettings)
}

void SchemaSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  schema_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_ = 0;
}

SchemaSettings::~SchemaSettings() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.SchemaSettings)
  SharedDtor();
}

void SchemaSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  schema_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SchemaSettings::ArenaDtor(void* object) {
  SchemaSettings* _this = reinterpret_cast< SchemaSettings* >(object);
  (void)_this;
}
void SchemaSettings::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SchemaSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SchemaSettings& SchemaSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SchemaSettings_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void SchemaSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.SchemaSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  encoding_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SchemaSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SchemaSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.SchemaSettings.schema");
        object = msg->mutable_schema();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.pubsub.v1.Encoding encoding = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_encoding(static_cast<::google::pubsub::v1::Encoding>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SchemaSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.SchemaSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schema()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->schema().data(), static_cast<int>(this->schema().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.SchemaSettings.schema"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.Encoding encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::google::pubsub::v1::Encoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.SchemaSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.SchemaSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SchemaSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.SchemaSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->schema().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schema().data(), static_cast<int>(this->schema().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SchemaSettings.schema");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->schema(), output);
  }

  // .google.pubsub.v1.Encoding encoding = 2;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.SchemaSettings)
}

::google::protobuf::uint8* SchemaSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.SchemaSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->schema().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->schema().data(), static_cast<int>(this->schema().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SchemaSettings.schema");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->schema(), target);
  }

  // .google.pubsub.v1.Encoding encoding = 2;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.SchemaSettings)
  return target;
}

size_t SchemaSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.SchemaSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->schema().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->schema());
  }

  // .google.pubsub.v1.Encoding encoding = 2;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchemaSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.SchemaSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const SchemaSettings* source =
      ::google::protobuf::DynamicCastToGenerated<SchemaSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.SchemaSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.SchemaSettings)
    MergeFrom(*source);
  }
}

void SchemaSettings::MergeFrom(const SchemaSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.SchemaSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schema().size() > 0) {
    set_schema(from.schema());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void SchemaSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.SchemaSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchemaSettings::CopyFrom(const SchemaSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.SchemaSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaSettings::IsInitialized() const {
  return true;
}

void SchemaSettings::Swap(SchemaSettings* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SchemaSettings* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SchemaSettings::UnsafeArenaSwap(SchemaSettings* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SchemaSettings::InternalSwap(SchemaSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  schema_.Swap(&other->schema_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encoding_, other->encoding_);
}

::google::protobuf::Metadata SchemaSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

Topic_LabelsEntry_DoNotUse::Topic_LabelsEntry_DoNotUse() {}
Topic_LabelsEntry_DoNotUse::Topic_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Topic_LabelsEntry_DoNotUse::MergeFrom(const Topic_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Topic_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[2];
}
void Topic_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Topic_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Topic_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.Topic.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.Topic.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Topic::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Topic_default_instance_._instance.get_mutable()->message_storage_policy_ = const_cast< ::google::pubsub::v1::MessageStoragePolicy*>(
      ::google::pubsub::v1::MessageStoragePolicy::internal_default_instance());
  ::google::pubsub::v1::_Topic_default_instance_._instance.get_mutable()->schema_settings_ = const_cast< ::google::pubsub::v1::SchemaSettings*>(
      ::google::pubsub::v1::SchemaSettings::internal_default_instance());
}
class Topic::HasBitSetters {
 public:
  static const ::google::pubsub::v1::MessageStoragePolicy& message_storage_policy(const Topic* msg);
  static const ::google::pubsub::v1::SchemaSettings& schema_settings(const Topic* msg);
};

const ::google::pubsub::v1::MessageStoragePolicy&
Topic::HasBitSetters::message_storage_policy(const Topic* msg) {
  return *msg->message_storage_policy_;
}
const ::google::pubsub::v1::SchemaSettings&
Topic::HasBitSetters::schema_settings(const Topic* msg) {
  return *msg->schema_settings_;
}
void Topic::unsafe_arena_set_allocated_message_storage_policy(
    ::google::pubsub::v1::MessageStoragePolicy* message_storage_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete message_storage_policy_;
  }
  message_storage_policy_ = message_storage_policy;
  if (message_storage_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.message_storage_policy)
}
void Topic::unsafe_arena_set_allocated_schema_settings(
    ::google::pubsub::v1::SchemaSettings* schema_settings) {
  if (GetArenaNoVirtual() == nullptr) {
    delete schema_settings_;
  }
  schema_settings_ = schema_settings;
  if (schema_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.schema_settings)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Topic::kNameFieldNumber;
const int Topic::kLabelsFieldNumber;
const int Topic::kMessageStoragePolicyFieldNumber;
const int Topic::kKmsKeyNameFieldNumber;
const int Topic::kSchemaSettingsFieldNumber;
const int Topic::kSatisfiesPzsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Topic::Topic()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Topic)
}
Topic::Topic(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Topic)
}
Topic::Topic(const Topic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  kms_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kms_key_name().size() > 0) {
    kms_key_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kms_key_name(),
      GetArenaNoVirtual());
  }
  if (from.has_message_storage_policy()) {
    message_storage_policy_ = new ::google::pubsub::v1::MessageStoragePolicy(*from.message_storage_policy_);
  } else {
    message_storage_policy_ = nullptr;
  }
  if (from.has_schema_settings()) {
    schema_settings_ = new ::google::pubsub::v1::SchemaSettings(*from.schema_settings_);
  } else {
    schema_settings_ = nullptr;
  }
  satisfies_pzs_ = from.satisfies_pzs_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Topic)
}

void Topic::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kms_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_storage_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&satisfies_pzs_) -
      reinterpret_cast<char*>(&message_storage_policy_)) + sizeof(satisfies_pzs_));
}

Topic::~Topic() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Topic)
  SharedDtor();
}

void Topic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kms_key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_storage_policy_;
  if (this != internal_default_instance()) delete schema_settings_;
}

void Topic::ArenaDtor(void* object) {
  Topic* _this = reinterpret_cast< Topic* >(object);
  (void)_this;
}
void Topic::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void Topic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Topic& Topic::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kms_key_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && message_storage_policy_ != nullptr) {
    delete message_storage_policy_;
  }
  message_storage_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && schema_settings_ != nullptr) {
    delete schema_settings_;
  }
  schema_settings_ = nullptr;
  satisfies_pzs_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Topic::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Topic*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.Topic.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> labels = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::MessageStoragePolicy::_InternalParse;
        object = msg->mutable_message_storage_policy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string kms_key_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.Topic.kms_key_name");
        object = msg->mutable_kms_key_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.pubsub.v1.SchemaSettings schema_settings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::SchemaSettings::_InternalParse;
        object = msg->mutable_schema_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool satisfies_pzs = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_satisfies_pzs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Topic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          Topic_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Topic_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_storage_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kms_key_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kms_key_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kms_key_name().data(), static_cast<int>(this->kms_key_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.kms_key_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.SchemaSettings schema_settings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schema_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool satisfies_pzs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &satisfies_pzs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Topic)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
  if (this->has_message_storage_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::message_storage_policy(this), output);
  }

  // string kms_key_name = 5;
  if (this->kms_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kms_key_name().data(), static_cast<int>(this->kms_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.kms_key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->kms_key_name(), output);
  }

  // .google.pubsub.v1.SchemaSettings schema_settings = 6;
  if (this->has_schema_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::schema_settings(this), output);
  }

  // bool satisfies_pzs = 7;
  if (this->satisfies_pzs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->satisfies_pzs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Topic)
}

::google::protobuf::uint8* Topic::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
  if (this->has_message_storage_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::message_storage_policy(this), target);
  }

  // string kms_key_name = 5;
  if (this->kms_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kms_key_name().data(), static_cast<int>(this->kms_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.kms_key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->kms_key_name(), target);
  }

  // .google.pubsub.v1.SchemaSettings schema_settings = 6;
  if (this->has_schema_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::schema_settings(this), target);
  }

  // bool satisfies_pzs = 7;
  if (this->satisfies_pzs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->satisfies_pzs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Topic)
  return target;
}

size_t Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Topic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<Topic_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != nullptr && entry->GetArena() != nullptr) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != nullptr && entry->GetArena() != nullptr) {
      entry.release();
    }
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string kms_key_name = 5;
  if (this->kms_key_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kms_key_name());
  }

  // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
  if (this->has_message_storage_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_storage_policy_);
  }

  // .google.pubsub.v1.SchemaSettings schema_settings = 6;
  if (this->has_schema_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schema_settings_);
  }

  // bool satisfies_pzs = 7;
  if (this->satisfies_pzs() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  const Topic* source =
      ::google::protobuf::DynamicCastToGenerated<Topic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Topic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Topic)
    MergeFrom(*source);
  }
}

void Topic::MergeFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.kms_key_name().size() > 0) {
    set_kms_key_name(from.kms_key_name());
  }
  if (from.has_message_storage_policy()) {
    mutable_message_storage_policy()->::google::pubsub::v1::MessageStoragePolicy::MergeFrom(from.message_storage_policy());
  }
  if (from.has_schema_settings()) {
    mutable_schema_settings()->::google::pubsub::v1::SchemaSettings::MergeFrom(from.schema_settings());
  }
  if (from.satisfies_pzs() != 0) {
    set_satisfies_pzs(from.satisfies_pzs());
  }
}

void Topic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topic::CopyFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topic::IsInitialized() const {
  return true;
}

void Topic::Swap(Topic* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Topic* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Topic::UnsafeArenaSwap(Topic* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Topic::InternalSwap(Topic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kms_key_name_.Swap(&other->kms_key_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_storage_policy_, other->message_storage_policy_);
  swap(schema_settings_, other->schema_settings_);
  swap(satisfies_pzs_, other->satisfies_pzs_);
}

::google::protobuf::Metadata Topic::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

PubsubMessage_AttributesEntry_DoNotUse::PubsubMessage_AttributesEntry_DoNotUse() {}
PubsubMessage_AttributesEntry_DoNotUse::PubsubMessage_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PubsubMessage_AttributesEntry_DoNotUse::MergeFrom(const PubsubMessage_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PubsubMessage_AttributesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[4];
}
void PubsubMessage_AttributesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PubsubMessage_AttributesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PubsubMessage_AttributesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.PubsubMessage.AttributesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.PubsubMessage.AttributesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PubsubMessage::InitAsDefaultInstance() {
  ::google::pubsub::v1::_PubsubMessage_default_instance_._instance.get_mutable()->publish_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class PubsubMessage::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& publish_time(const PubsubMessage* msg);
};

const ::google::protobuf::Timestamp&
PubsubMessage::HasBitSetters::publish_time(const PubsubMessage* msg) {
  return *msg->publish_time_;
}
void PubsubMessage::unsafe_arena_set_allocated_publish_time(
    ::google::protobuf::Timestamp* publish_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete publish_time_;
  }
  publish_time_ = publish_time;
  if (publish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}
void PubsubMessage::clear_publish_time() {
  if (GetArenaNoVirtual() == nullptr && publish_time_ != nullptr) {
    delete publish_time_;
  }
  publish_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PubsubMessage::kDataFieldNumber;
const int PubsubMessage::kAttributesFieldNumber;
const int PubsubMessage::kMessageIdFieldNumber;
const int PubsubMessage::kPublishTimeFieldNumber;
const int PubsubMessage::kOrderingKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PubsubMessage::PubsubMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PubsubMessage)
}
PubsubMessage::PubsubMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PubsubMessage)
}
PubsubMessage::PubsubMessage(const PubsubMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id(),
      GetArenaNoVirtual());
  }
  ordering_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ordering_key().size() > 0) {
    ordering_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ordering_key(),
      GetArenaNoVirtual());
  }
  if (from.has_publish_time()) {
    publish_time_ = new ::google::protobuf::Timestamp(*from.publish_time_);
  } else {
    publish_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PubsubMessage)
}

void PubsubMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordering_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_time_ = nullptr;
}

PubsubMessage::~PubsubMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PubsubMessage)
  SharedDtor();
}

void PubsubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ordering_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete publish_time_;
}

void PubsubMessage::ArenaDtor(void* object) {
  PubsubMessage* _this = reinterpret_cast< PubsubMessage* >(object);
  (void)_this;
}
void PubsubMessage::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void PubsubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PubsubMessage& PubsubMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PubsubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PubsubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  message_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ordering_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && publish_time_ != nullptr) {
    delete publish_time_;
  }
  publish_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PubsubMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PubsubMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> attributes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->attributes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string message_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PubsubMessage.message_id");
        object = msg->mutable_message_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp publish_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_publish_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string ordering_key = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PubsubMessage.ordering_key");
        object = msg->mutable_ordering_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PubsubMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PubsubMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          PubsubMessage_AttributesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PubsubMessage_AttributesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.AttributesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp publish_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publish_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ordering_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordering_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordering_key().data(), static_cast<int>(this->ordering_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.ordering_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PubsubMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PubsubMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PubsubMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PubsubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_id(), output);
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::publish_time(this), output);
  }

  // string ordering_key = 5;
  if (this->ordering_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordering_key().data(), static_cast<int>(this->ordering_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.ordering_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ordering_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PubsubMessage)
}

::google::protobuf::uint8* PubsubMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PubsubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
      }
    };

    if (false &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_id(), target);
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::publish_time(this), target);
  }

  // string ordering_key = 5;
  if (this->ordering_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordering_key().data(), static_cast<int>(this->ordering_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.ordering_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ordering_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PubsubMessage)
  return target;
}

size_t PubsubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PubsubMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::std::unique_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      if (entry.get() != nullptr && entry->GetArena() != nullptr) {
        entry.release();
      }
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != nullptr && entry->GetArena() != nullptr) {
      entry.release();
    }
  }

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // string ordering_key = 5;
  if (this->ordering_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordering_key());
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *publish_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PubsubMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PubsubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PubsubMessage* source =
      ::google::protobuf::DynamicCastToGenerated<PubsubMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PubsubMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PubsubMessage)
    MergeFrom(*source);
  }
}

void PubsubMessage::MergeFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PubsubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.data().size() > 0) {
    set_data(from.data());
  }
  if (from.message_id().size() > 0) {
    set_message_id(from.message_id());
  }
  if (from.ordering_key().size() > 0) {
    set_ordering_key(from.ordering_key());
  }
  if (from.has_publish_time()) {
    mutable_publish_time()->::google::protobuf::Timestamp::MergeFrom(from.publish_time());
  }
}

void PubsubMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubsubMessage::CopyFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubsubMessage::IsInitialized() const {
  return true;
}

void PubsubMessage::Swap(PubsubMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PubsubMessage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PubsubMessage::UnsafeArenaSwap(PubsubMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PubsubMessage::InternalSwap(PubsubMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.Swap(&other->attributes_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_id_.Swap(&other->message_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ordering_key_.Swap(&other->ordering_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publish_time_, other->publish_time_);
}

::google::protobuf::Metadata PubsubMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetTopicRequest::InitAsDefaultInstance() {
}
class GetTopicRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTopicRequest::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTopicRequest::GetTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetTopicRequest)
}
GetTopicRequest::GetTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetTopicRequest)
}
GetTopicRequest::GetTopicRequest(const GetTopicRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetTopicRequest)
}

void GetTopicRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTopicRequest::~GetTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetTopicRequest)
  SharedDtor();
}

void GetTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTopicRequest::ArenaDtor(void* object) {
  GetTopicRequest* _this = reinterpret_cast< GetTopicRequest* >(object);
  (void)_this;
}
void GetTopicRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void GetTopicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTopicRequest& GetTopicRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void GetTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTopicRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetTopicRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.GetTopicRequest.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.GetTopicRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.GetTopicRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.GetTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.GetTopicRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.GetTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetTopicRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.GetTopicRequest)
}

::google::protobuf::uint8* GetTopicRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetTopicRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetTopicRequest)
  return target;
}

size_t GetTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetTopicRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTopicRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetTopicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetTopicRequest)
    MergeFrom(*source);
  }
}

void GetTopicRequest::MergeFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void GetTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopicRequest::CopyFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopicRequest::IsInitialized() const {
  return true;
}

void GetTopicRequest::Swap(GetTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetTopicRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetTopicRequest::UnsafeArenaSwap(GetTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetTopicRequest::InternalSwap(GetTopicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetTopicRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateTopicRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateTopicRequest_default_instance_._instance.get_mutable()->topic_ = const_cast< ::google::pubsub::v1::Topic*>(
      ::google::pubsub::v1::Topic::internal_default_instance());
  ::google::pubsub::v1::_UpdateTopicRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
class UpdateTopicRequest::HasBitSetters {
 public:
  static const ::google::pubsub::v1::Topic& topic(const UpdateTopicRequest* msg);
  static const ::google::protobuf::FieldMask& update_mask(const UpdateTopicRequest* msg);
};

const ::google::pubsub::v1::Topic&
UpdateTopicRequest::HasBitSetters::topic(const UpdateTopicRequest* msg) {
  return *msg->topic_;
}
const ::google::protobuf::FieldMask&
UpdateTopicRequest::HasBitSetters::update_mask(const UpdateTopicRequest* msg) {
  return *msg->update_mask_;
}
void UpdateTopicRequest::unsafe_arena_set_allocated_topic(
    ::google::pubsub::v1::Topic* topic) {
  if (GetArenaNoVirtual() == nullptr) {
    delete topic_;
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.topic)
}
void UpdateTopicRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.update_mask)
}
void UpdateTopicRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTopicRequest::kTopicFieldNumber;
const int UpdateTopicRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTopicRequest::UpdateTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateTopicRequest)
}
UpdateTopicRequest::UpdateTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateTopicRequest)
}
UpdateTopicRequest::UpdateTopicRequest(const UpdateTopicRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_topic()) {
    topic_ = new ::google::pubsub::v1::Topic(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateTopicRequest)
}

void UpdateTopicRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::memset(&topic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&topic_)) + sizeof(update_mask_));
}

UpdateTopicRequest::~UpdateTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateTopicRequest)
  SharedDtor();
}

void UpdateTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateTopicRequest::ArenaDtor(void* object) {
  UpdateTopicRequest* _this = reinterpret_cast< UpdateTopicRequest* >(object);
  (void)_this;
}
void UpdateTopicRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void UpdateTopicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTopicRequest& UpdateTopicRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void UpdateTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateTopicRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateTopicRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::Topic::_InternalParse;
        object = msg->mutable_topic();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FieldMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.UpdateTopicRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.UpdateTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.UpdateTopicRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.UpdateTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::topic(this), output);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::update_mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.UpdateTopicRequest)
}

::google::protobuf::uint8* UpdateTopicRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::topic(this), target);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::update_mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateTopicRequest)
  return target;
}

size_t UpdateTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateTopicRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTopicRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateTopicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateTopicRequest)
    MergeFrom(*source);
  }
}

void UpdateTopicRequest::MergeFrom(const UpdateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic()) {
    mutable_topic()->::google::pubsub::v1::Topic::MergeFrom(from.topic());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTopicRequest::CopyFrom(const UpdateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTopicRequest::IsInitialized() const {
  return true;
}

void UpdateTopicRequest::Swap(UpdateTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateTopicRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void UpdateTopicRequest::UnsafeArenaSwap(UpdateTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateTopicRequest::InternalSwap(UpdateTopicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(topic_, other->topic_);
  swap(update_mask_, other->update_mask_);
}

::google::protobuf::Metadata UpdateTopicRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishRequest::InitAsDefaultInstance() {
}
class PublishRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishRequest::kTopicFieldNumber;
const int PublishRequest::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishRequest::PublishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishRequest)
}
PublishRequest::PublishRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishRequest)
}
PublishRequest::PublishRequest(const PublishRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishRequest)
}

void PublishRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PublishRequest::~PublishRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishRequest)
  SharedDtor();
}

void PublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishRequest::ArenaDtor(void* object) {
  PublishRequest* _this = reinterpret_cast< PublishRequest* >(object);
  (void)_this;
}
void PublishRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void PublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRequest& PublishRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PublishRequest.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::pubsub::v1::PubsubMessage::_InternalParse;
          object = msg->add_messages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PublishRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PublishRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PublishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PublishRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PublishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PublishRequest)
}

::google::protobuf::uint8* PublishRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->messages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishRequest)
  return target;
}

size_t PublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PublishRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishRequest)
    MergeFrom(*source);
  }
}

void PublishRequest::MergeFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void PublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRequest::CopyFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRequest::IsInitialized() const {
  return true;
}

void PublishRequest::Swap(PublishRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PublishRequest::UnsafeArenaSwap(PublishRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishRequest::InternalSwap(PublishRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PublishRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PublishResponse::InitAsDefaultInstance() {
}
class PublishResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishResponse::kMessageIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishResponse::PublishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishResponse)
}
PublishResponse::PublishResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  message_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishResponse)
}
PublishResponse::PublishResponse(const PublishResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      message_ids_(from.message_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishResponse)
}

void PublishResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

PublishResponse::~PublishResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishResponse)
  SharedDtor();
}

void PublishResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PublishResponse::ArenaDtor(void* object) {
  PublishResponse* _this = reinterpret_cast< PublishResponse* >(object);
  (void)_this;
}
void PublishResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void PublishResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishResponse& PublishResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PublishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PublishResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PublishResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string message_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PublishResponse.message_ids");
          object = msg->add_message_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PublishResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string message_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_ids(this->message_ids_size() - 1).data(),
            static_cast<int>(this->message_ids(this->message_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PublishResponse.message_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PublishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PublishResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PublishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string message_ids = 1;
  for (int i = 0, n = this->message_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), static_cast<int>(this->message_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishResponse.message_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PublishResponse)
}

::google::protobuf::uint8* PublishResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string message_ids = 1;
  for (int i = 0, n = this->message_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), static_cast<int>(this->message_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishResponse.message_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->message_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishResponse)
  return target;
}

size_t PublishResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string message_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->message_ids_size());
  for (int i = 0, n = this->message_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PublishResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishResponse)
    MergeFrom(*source);
  }
}

void PublishResponse::MergeFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_ids_.MergeFrom(from.message_ids_);
}

void PublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishResponse::CopyFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishResponse::IsInitialized() const {
  return true;
}

void PublishResponse::Swap(PublishResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PublishResponse::UnsafeArenaSwap(PublishResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishResponse::InternalSwap(PublishResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_ids_.InternalSwap(CastToBase(&other->message_ids_));
}

::google::protobuf::Metadata PublishResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListTopicsRequest::InitAsDefaultInstance() {
}
class ListTopicsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicsRequest::kProjectFieldNumber;
const int ListTopicsRequest::kPageSizeFieldNumber;
const int ListTopicsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicsRequest::ListTopicsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsRequest)
}
ListTopicsRequest::ListTopicsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsRequest)
}
ListTopicsRequest::ListTopicsRequest(const ListTopicsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsRequest)
}

void ListTopicsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListTopicsRequest::~ListTopicsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsRequest)
  SharedDtor();
}

void ListTopicsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicsRequest::ArenaDtor(void* object) {
  ListTopicsRequest* _this = reinterpret_cast< ListTopicsRequest* >(object);
  (void)_this;
}
void ListTopicsRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListTopicsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicsRequest& ListTopicsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListTopicsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListTopicsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicsRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListTopicsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListTopicsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicsRequest)
}

::google::protobuf::uint8* ListTopicsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsRequest)
  return target;
}

size_t ListTopicsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListTopicsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsRequest)
    MergeFrom(*source);
  }
}

void ListTopicsRequest::MergeFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListTopicsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsRequest::CopyFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicsRequest::IsInitialized() const {
  return true;
}

void ListTopicsRequest::Swap(ListTopicsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListTopicsRequest::UnsafeArenaSwap(ListTopicsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicsRequest::InternalSwap(ListTopicsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListTopicsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListTopicsResponse::InitAsDefaultInstance() {
}
class ListTopicsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicsResponse::kTopicsFieldNumber;
const int ListTopicsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicsResponse::ListTopicsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsResponse)
}
ListTopicsResponse::ListTopicsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsResponse)
}
ListTopicsResponse::ListTopicsResponse(const ListTopicsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsResponse)
}

void ListTopicsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListTopicsResponse::~ListTopicsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsResponse)
  SharedDtor();
}

void ListTopicsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicsResponse::ArenaDtor(void* object) {
  ListTopicsResponse* _this = reinterpret_cast< ListTopicsResponse* >(object);
  (void)_this;
}
void ListTopicsResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListTopicsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicsResponse& ListTopicsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListTopicsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListTopicsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.Topic topics = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::pubsub::v1::Topic::_InternalParse;
          object = msg->add_topics();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListTopicsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Topic topics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_topics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListTopicsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Topic topics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->topics(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicsResponse)
}

::google::protobuf::uint8* ListTopicsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Topic topics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->topics(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsResponse)
  return target;
}

size_t ListTopicsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Topic topics = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->topics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->topics(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListTopicsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsResponse)
    MergeFrom(*source);
  }
}

void ListTopicsResponse::MergeFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListTopicsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsResponse::CopyFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicsResponse::IsInitialized() const {
  return true;
}

void ListTopicsResponse::Swap(ListTopicsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListTopicsResponse::UnsafeArenaSwap(ListTopicsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicsResponse::InternalSwap(ListTopicsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&topics_)->InternalSwap(CastToBase(&other->topics_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListTopicsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListTopicSubscriptionsRequest::InitAsDefaultInstance() {
}
class ListTopicSubscriptionsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSubscriptionsRequest::kTopicFieldNumber;
const int ListTopicSubscriptionsRequest::kPageSizeFieldNumber;
const int ListTopicSubscriptionsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}
ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}
ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

void ListTopicSubscriptionsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListTopicSubscriptionsRequest::~ListTopicSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
  SharedDtor();
}

void ListTopicSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSubscriptionsRequest::ArenaDtor(void* object) {
  ListTopicSubscriptionsRequest* _this = reinterpret_cast< ListTopicSubscriptionsRequest* >(object);
  (void)_this;
}
void ListTopicSubscriptionsRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListTopicSubscriptionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSubscriptionsRequest& ListTopicSubscriptionsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListTopicSubscriptionsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListTopicSubscriptionsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListTopicSubscriptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListTopicSubscriptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

::google::protobuf::uint8* ListTopicSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return target;
}

size_t ListTopicSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSubscriptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSubscriptionsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListTopicSubscriptionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsRequest)
    MergeFrom(*source);
  }
}

void ListTopicSubscriptionsRequest::MergeFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListTopicSubscriptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsRequest::CopyFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSubscriptionsRequest::IsInitialized() const {
  return true;
}

void ListTopicSubscriptionsRequest::Swap(ListTopicSubscriptionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSubscriptionsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListTopicSubscriptionsRequest::UnsafeArenaSwap(ListTopicSubscriptionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSubscriptionsRequest::InternalSwap(ListTopicSubscriptionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListTopicSubscriptionsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListTopicSubscriptionsResponse::InitAsDefaultInstance() {
}
class ListTopicSubscriptionsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSubscriptionsResponse::kSubscriptionsFieldNumber;
const int ListTopicSubscriptionsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}
ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}
ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

void ListTopicSubscriptionsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListTopicSubscriptionsResponse::~ListTopicSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
  SharedDtor();
}

void ListTopicSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSubscriptionsResponse::ArenaDtor(void* object) {
  ListTopicSubscriptionsResponse* _this = reinterpret_cast< ListTopicSubscriptionsResponse* >(object);
  (void)_this;
}
void ListTopicSubscriptionsResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListTopicSubscriptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSubscriptionsResponse& ListTopicSubscriptionsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListTopicSubscriptionsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListTopicSubscriptionsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string subscriptions = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
          object = msg->add_subscriptions();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListTopicSubscriptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string subscriptions = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscriptions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscriptions(this->subscriptions_size() - 1).data(),
            static_cast<int>(this->subscriptions(this->subscriptions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListTopicSubscriptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subscriptions = 1 [(.google.api.resource_reference) = {
  for (int i = 0, n = this->subscriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscriptions(i).data(), static_cast<int>(this->subscriptions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subscriptions(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

::google::protobuf::uint8* ListTopicSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subscriptions = 1 [(.google.api.resource_reference) = {
  for (int i = 0, n = this->subscriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscriptions(i).data(), static_cast<int>(this->subscriptions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->subscriptions(i), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return target;
}

size_t ListTopicSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subscriptions = 1 [(.google.api.resource_reference) = {
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subscriptions_size());
  for (int i = 0, n = this->subscriptions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscriptions(i));
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSubscriptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSubscriptionsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListTopicSubscriptionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsResponse)
    MergeFrom(*source);
  }
}

void ListTopicSubscriptionsResponse::MergeFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListTopicSubscriptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsResponse::CopyFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListTopicSubscriptionsResponse::Swap(ListTopicSubscriptionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSubscriptionsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListTopicSubscriptionsResponse::UnsafeArenaSwap(ListTopicSubscriptionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSubscriptionsResponse::InternalSwap(ListTopicSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscriptions_.InternalSwap(CastToBase(&other->subscriptions_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListTopicSubscriptionsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListTopicSnapshotsRequest::InitAsDefaultInstance() {
}
class ListTopicSnapshotsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSnapshotsRequest::kTopicFieldNumber;
const int ListTopicSnapshotsRequest::kPageSizeFieldNumber;
const int ListTopicSnapshotsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSnapshotsRequest::ListTopicSnapshotsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSnapshotsRequest)
}
ListTopicSnapshotsRequest::ListTopicSnapshotsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSnapshotsRequest)
}
ListTopicSnapshotsRequest::ListTopicSnapshotsRequest(const ListTopicSnapshotsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSnapshotsRequest)
}

void ListTopicSnapshotsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListTopicSnapshotsRequest::~ListTopicSnapshotsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSnapshotsRequest)
  SharedDtor();
}

void ListTopicSnapshotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSnapshotsRequest::ArenaDtor(void* object) {
  ListTopicSnapshotsRequest* _this = reinterpret_cast< ListTopicSnapshotsRequest* >(object);
  (void)_this;
}
void ListTopicSnapshotsRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListTopicSnapshotsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSnapshotsRequest& ListTopicSnapshotsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSnapshotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListTopicSnapshotsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListTopicSnapshotsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSnapshotsRequest.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSnapshotsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListTopicSnapshotsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSnapshotsRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSnapshotsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSnapshotsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSnapshotsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListTopicSnapshotsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSnapshotsRequest)
}

::google::protobuf::uint8* ListTopicSnapshotsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSnapshotsRequest)
  return target;
}

size_t ListTopicSnapshotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSnapshotsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSnapshotsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListTopicSnapshotsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSnapshotsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSnapshotsRequest)
    MergeFrom(*source);
  }
}

void ListTopicSnapshotsRequest::MergeFrom(const ListTopicSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListTopicSnapshotsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSnapshotsRequest::CopyFrom(const ListTopicSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSnapshotsRequest::IsInitialized() const {
  return true;
}

void ListTopicSnapshotsRequest::Swap(ListTopicSnapshotsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSnapshotsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListTopicSnapshotsRequest::UnsafeArenaSwap(ListTopicSnapshotsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSnapshotsRequest::InternalSwap(ListTopicSnapshotsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListTopicSnapshotsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListTopicSnapshotsResponse::InitAsDefaultInstance() {
}
class ListTopicSnapshotsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSnapshotsResponse::kSnapshotsFieldNumber;
const int ListTopicSnapshotsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSnapshotsResponse::ListTopicSnapshotsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSnapshotsResponse)
}
ListTopicSnapshotsResponse::ListTopicSnapshotsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  snapshots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSnapshotsResponse)
}
ListTopicSnapshotsResponse::ListTopicSnapshotsResponse(const ListTopicSnapshotsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      snapshots_(from.snapshots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSnapshotsResponse)
}

void ListTopicSnapshotsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListTopicSnapshotsResponse::~ListTopicSnapshotsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSnapshotsResponse)
  SharedDtor();
}

void ListTopicSnapshotsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSnapshotsResponse::ArenaDtor(void* object) {
  ListTopicSnapshotsResponse* _this = reinterpret_cast< ListTopicSnapshotsResponse* >(object);
  (void)_this;
}
void ListTopicSnapshotsResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListTopicSnapshotsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSnapshotsResponse& ListTopicSnapshotsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSnapshotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshots_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListTopicSnapshotsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListTopicSnapshotsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string snapshots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSnapshotsResponse.snapshots");
          object = msg->add_snapshots();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListTopicSnapshotsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string snapshots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_snapshots()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshots(this->snapshots_size() - 1).data(),
            static_cast<int>(this->snapshots(this->snapshots_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSnapshotsResponse.snapshots"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSnapshotsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSnapshotsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListTopicSnapshotsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string snapshots = 1;
  for (int i = 0, n = this->snapshots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshots(i).data(), static_cast<int>(this->snapshots(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsResponse.snapshots");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshots(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSnapshotsResponse)
}

::google::protobuf::uint8* ListTopicSnapshotsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string snapshots = 1;
  for (int i = 0, n = this->snapshots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshots(i).data(), static_cast<int>(this->snapshots(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsResponse.snapshots");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->snapshots(i), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSnapshotsResponse)
  return target;
}

size_t ListTopicSnapshotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string snapshots = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->snapshots_size());
  for (int i = 0, n = this->snapshots_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->snapshots(i));
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSnapshotsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSnapshotsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListTopicSnapshotsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSnapshotsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSnapshotsResponse)
    MergeFrom(*source);
  }
}

void ListTopicSnapshotsResponse::MergeFrom(const ListTopicSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshots_.MergeFrom(from.snapshots_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListTopicSnapshotsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSnapshotsResponse::CopyFrom(const ListTopicSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSnapshotsResponse::IsInitialized() const {
  return true;
}

void ListTopicSnapshotsResponse::Swap(ListTopicSnapshotsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSnapshotsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListTopicSnapshotsResponse::UnsafeArenaSwap(ListTopicSnapshotsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSnapshotsResponse::InternalSwap(ListTopicSnapshotsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshots_.InternalSwap(CastToBase(&other->snapshots_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListTopicSnapshotsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteTopicRequest::InitAsDefaultInstance() {
}
class DeleteTopicRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTopicRequest::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTopicRequest::DeleteTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteTopicRequest)
}
DeleteTopicRequest::DeleteTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteTopicRequest)
}
DeleteTopicRequest::DeleteTopicRequest(const DeleteTopicRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteTopicRequest)
}

void DeleteTopicRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteTopicRequest::~DeleteTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteTopicRequest)
  SharedDtor();
}

void DeleteTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteTopicRequest::ArenaDtor(void* object) {
  DeleteTopicRequest* _this = reinterpret_cast< DeleteTopicRequest* >(object);
  (void)_this;
}
void DeleteTopicRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void DeleteTopicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTopicRequest& DeleteTopicRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeleteTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteTopicRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteTopicRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.DeleteTopicRequest.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteTopicRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteTopicRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteTopicRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteTopicRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteTopicRequest)
}

::google::protobuf::uint8* DeleteTopicRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteTopicRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteTopicRequest)
  return target;
}

size_t DeleteTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteTopicRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTopicRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteTopicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteTopicRequest)
    MergeFrom(*source);
  }
}

void DeleteTopicRequest::MergeFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void DeleteTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTopicRequest::CopyFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTopicRequest::IsInitialized() const {
  return true;
}

void DeleteTopicRequest::Swap(DeleteTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteTopicRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeleteTopicRequest::UnsafeArenaSwap(DeleteTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteTopicRequest::InternalSwap(DeleteTopicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteTopicRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DetachSubscriptionRequest::InitAsDefaultInstance() {
}
class DetachSubscriptionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetachSubscriptionRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetachSubscriptionRequest::DetachSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DetachSubscriptionRequest)
}
DetachSubscriptionRequest::DetachSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DetachSubscriptionRequest)
}
DetachSubscriptionRequest::DetachSubscriptionRequest(const DetachSubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DetachSubscriptionRequest)
}

void DetachSubscriptionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DetachSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DetachSubscriptionRequest::~DetachSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DetachSubscriptionRequest)
  SharedDtor();
}

void DetachSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DetachSubscriptionRequest::ArenaDtor(void* object) {
  DetachSubscriptionRequest* _this = reinterpret_cast< DetachSubscriptionRequest* >(object);
  (void)_this;
}
void DetachSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void DetachSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetachSubscriptionRequest& DetachSubscriptionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DetachSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DetachSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DetachSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetachSubscriptionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DetachSubscriptionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.DetachSubscriptionRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetachSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DetachSubscriptionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DetachSubscriptionRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DetachSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DetachSubscriptionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetachSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DetachSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DetachSubscriptionRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DetachSubscriptionRequest)
}

::google::protobuf::uint8* DetachSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DetachSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DetachSubscriptionRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DetachSubscriptionRequest)
  return target;
}

size_t DetachSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DetachSubscriptionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetachSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DetachSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetachSubscriptionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DetachSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DetachSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DetachSubscriptionRequest)
    MergeFrom(*source);
  }
}

void DetachSubscriptionRequest::MergeFrom(const DetachSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DetachSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void DetachSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DetachSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetachSubscriptionRequest::CopyFrom(const DetachSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DetachSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetachSubscriptionRequest::IsInitialized() const {
  return true;
}

void DetachSubscriptionRequest::Swap(DetachSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DetachSubscriptionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DetachSubscriptionRequest::UnsafeArenaSwap(DetachSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DetachSubscriptionRequest::InternalSwap(DetachSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DetachSubscriptionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DetachSubscriptionResponse::InitAsDefaultInstance() {
}
class DetachSubscriptionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetachSubscriptionResponse::DetachSubscriptionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DetachSubscriptionResponse)
}
DetachSubscriptionResponse::DetachSubscriptionResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DetachSubscriptionResponse)
}
DetachSubscriptionResponse::DetachSubscriptionResponse(const DetachSubscriptionResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DetachSubscriptionResponse)
}

void DetachSubscriptionResponse::SharedCtor() {
}

DetachSubscriptionResponse::~DetachSubscriptionResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DetachSubscriptionResponse)
  SharedDtor();
}

void DetachSubscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void DetachSubscriptionResponse::ArenaDtor(void* object) {
  DetachSubscriptionResponse* _this = reinterpret_cast< DetachSubscriptionResponse* >(object);
  (void)_this;
}
void DetachSubscriptionResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void DetachSubscriptionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetachSubscriptionResponse& DetachSubscriptionResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DetachSubscriptionResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DetachSubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DetachSubscriptionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetachSubscriptionResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DetachSubscriptionResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetachSubscriptionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DetachSubscriptionResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DetachSubscriptionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DetachSubscriptionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetachSubscriptionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DetachSubscriptionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DetachSubscriptionResponse)
}

::google::protobuf::uint8* DetachSubscriptionResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DetachSubscriptionResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DetachSubscriptionResponse)
  return target;
}

size_t DetachSubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DetachSubscriptionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetachSubscriptionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DetachSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DetachSubscriptionResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DetachSubscriptionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DetachSubscriptionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DetachSubscriptionResponse)
    MergeFrom(*source);
  }
}

void DetachSubscriptionResponse::MergeFrom(const DetachSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DetachSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DetachSubscriptionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DetachSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetachSubscriptionResponse::CopyFrom(const DetachSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DetachSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetachSubscriptionResponse::IsInitialized() const {
  return true;
}

void DetachSubscriptionResponse::Swap(DetachSubscriptionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DetachSubscriptionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DetachSubscriptionResponse::UnsafeArenaSwap(DetachSubscriptionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DetachSubscriptionResponse::InternalSwap(DetachSubscriptionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DetachSubscriptionResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

Subscription_LabelsEntry_DoNotUse::Subscription_LabelsEntry_DoNotUse() {}
Subscription_LabelsEntry_DoNotUse::Subscription_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Subscription_LabelsEntry_DoNotUse::MergeFrom(const Subscription_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Subscription_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[19];
}
void Subscription_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Subscription_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Subscription_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.Subscription.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.Subscription.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Subscription::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->message_retention_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->expiration_policy_ = const_cast< ::google::pubsub::v1::ExpirationPolicy*>(
      ::google::pubsub::v1::ExpirationPolicy::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->dead_letter_policy_ = const_cast< ::google::pubsub::v1::DeadLetterPolicy*>(
      ::google::pubsub::v1::DeadLetterPolicy::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->retry_policy_ = const_cast< ::google::pubsub::v1::RetryPolicy*>(
      ::google::pubsub::v1::RetryPolicy::internal_default_instance());
}
class Subscription::HasBitSetters {
 public:
  static const ::google::pubsub::v1::PushConfig& push_config(const Subscription* msg);
  static const ::google::protobuf::Duration& message_retention_duration(const Subscription* msg);
  static const ::google::pubsub::v1::ExpirationPolicy& expiration_policy(const Subscription* msg);
  static const ::google::pubsub::v1::DeadLetterPolicy& dead_letter_policy(const Subscription* msg);
  static const ::google::pubsub::v1::RetryPolicy& retry_policy(const Subscription* msg);
};

const ::google::pubsub::v1::PushConfig&
Subscription::HasBitSetters::push_config(const Subscription* msg) {
  return *msg->push_config_;
}
const ::google::protobuf::Duration&
Subscription::HasBitSetters::message_retention_duration(const Subscription* msg) {
  return *msg->message_retention_duration_;
}
const ::google::pubsub::v1::ExpirationPolicy&
Subscription::HasBitSetters::expiration_policy(const Subscription* msg) {
  return *msg->expiration_policy_;
}
const ::google::pubsub::v1::DeadLetterPolicy&
Subscription::HasBitSetters::dead_letter_policy(const Subscription* msg) {
  return *msg->dead_letter_policy_;
}
const ::google::pubsub::v1::RetryPolicy&
Subscription::HasBitSetters::retry_policy(const Subscription* msg) {
  return *msg->retry_policy_;
}
void Subscription::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.push_config)
}
void Subscription::unsafe_arena_set_allocated_message_retention_duration(
    ::google::protobuf::Duration* message_retention_duration) {
  if (GetArenaNoVirtual() == nullptr) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = message_retention_duration;
  if (message_retention_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.message_retention_duration)
}
void Subscription::clear_message_retention_duration() {
  if (GetArenaNoVirtual() == nullptr && message_retention_duration_ != nullptr) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = nullptr;
}
void Subscription::unsafe_arena_set_allocated_expiration_policy(
    ::google::pubsub::v1::ExpirationPolicy* expiration_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete expiration_policy_;
  }
  expiration_policy_ = expiration_policy;
  if (expiration_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.expiration_policy)
}
void Subscription::unsafe_arena_set_allocated_dead_letter_policy(
    ::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete dead_letter_policy_;
  }
  dead_letter_policy_ = dead_letter_policy;
  if (dead_letter_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.dead_letter_policy)
}
void Subscription::unsafe_arena_set_allocated_retry_policy(
    ::google::pubsub::v1::RetryPolicy* retry_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete retry_policy_;
  }
  retry_policy_ = retry_policy;
  if (retry_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.retry_policy)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subscription::kNameFieldNumber;
const int Subscription::kTopicFieldNumber;
const int Subscription::kPushConfigFieldNumber;
const int Subscription::kAckDeadlineSecondsFieldNumber;
const int Subscription::kRetainAckedMessagesFieldNumber;
const int Subscription::kMessageRetentionDurationFieldNumber;
const int Subscription::kLabelsFieldNumber;
const int Subscription::kEnableMessageOrderingFieldNumber;
const int Subscription::kExpirationPolicyFieldNumber;
const int Subscription::kFilterFieldNumber;
const int Subscription::kDeadLetterPolicyFieldNumber;
const int Subscription::kRetryPolicyFieldNumber;
const int Subscription::kDetachedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subscription::Subscription()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Subscription)
}
Subscription::Subscription(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter(),
      GetArenaNoVirtual());
  }
  if (from.has_push_config()) {
    push_config_ = new ::google::pubsub::v1::PushConfig(*from.push_config_);
  } else {
    push_config_ = nullptr;
  }
  if (from.has_message_retention_duration()) {
    message_retention_duration_ = new ::google::protobuf::Duration(*from.message_retention_duration_);
  } else {
    message_retention_duration_ = nullptr;
  }
  if (from.has_expiration_policy()) {
    expiration_policy_ = new ::google::pubsub::v1::ExpirationPolicy(*from.expiration_policy_);
  } else {
    expiration_policy_ = nullptr;
  }
  if (from.has_dead_letter_policy()) {
    dead_letter_policy_ = new ::google::pubsub::v1::DeadLetterPolicy(*from.dead_letter_policy_);
  } else {
    dead_letter_policy_ = nullptr;
  }
  if (from.has_retry_policy()) {
    retry_policy_ = new ::google::pubsub::v1::RetryPolicy(*from.retry_policy_);
  } else {
    retry_policy_ = nullptr;
  }
  ::memcpy(&ack_deadline_seconds_, &from.ack_deadline_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&detached_) -
    reinterpret_cast<char*>(&ack_deadline_seconds_)) + sizeof(detached_));
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Subscription)
}

void Subscription::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&push_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detached_) -
      reinterpret_cast<char*>(&push_config_)) + sizeof(detached_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete push_config_;
  if (this != internal_default_instance()) delete message_retention_duration_;
  if (this != internal_default_instance()) delete expiration_policy_;
  if (this != internal_default_instance()) delete dead_letter_policy_;
  if (this != internal_default_instance()) delete retry_policy_;
}

void Subscription::ArenaDtor(void* object) {
  Subscription* _this = reinterpret_cast< Subscription* >(object);
  (void)_this;
}
void Subscription::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subscription& Subscription::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  filter_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && push_config_ != nullptr) {
    delete push_config_;
  }
  push_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && message_retention_duration_ != nullptr) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiration_policy_ != nullptr) {
    delete expiration_policy_;
  }
  expiration_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dead_letter_policy_ != nullptr) {
    delete dead_letter_policy_;
  }
  dead_letter_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && retry_policy_ != nullptr) {
    delete retry_policy_;
  }
  retry_policy_ = nullptr;
  ::memset(&ack_deadline_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detached_) -
      reinterpret_cast<char*>(&ack_deadline_seconds_)) + sizeof(detached_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Subscription::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Subscription*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.Subscription.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.Subscription.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.pubsub.v1.PushConfig push_config = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::PushConfig::_InternalParse;
        object = msg->mutable_push_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 ack_deadline_seconds = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ack_deadline_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool retain_acked_messages = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_retain_acked_messages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Duration message_retention_duration = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_message_retention_duration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, string> labels = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // bool enable_message_ordering = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_enable_message_ordering(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::ExpirationPolicy::_InternalParse;
        object = msg->mutable_expiration_policy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string filter = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.Subscription.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::DeadLetterPolicy::_InternalParse;
        object = msg->mutable_dead_letter_policy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.pubsub.v1.RetryPolicy retry_policy = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::RetryPolicy::_InternalParse;
        object = msg->mutable_retry_policy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool detached = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_detached(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Subscription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.PushConfig push_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_push_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ack_deadline_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool retain_acked_messages = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retain_acked_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration message_retention_duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_retention_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          Subscription_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Subscription_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_message_ordering = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_message_ordering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expiration_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dead_letter_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.RetryPolicy retry_policy = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retry_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool detached = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &detached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Subscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::push_config(this), output);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ack_deadline_seconds(), output);
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->retain_acked_messages(), output);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::message_retention_duration(this), output);
  }

  // map<string, string> labels = 9;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool enable_message_ordering = 10;
  if (this->enable_message_ordering() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_message_ordering(), output);
  }

  // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
  if (this->has_expiration_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::expiration_policy(this), output);
  }

  // string filter = 12;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->filter(), output);
  }

  // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
  if (this->has_dead_letter_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::dead_letter_policy(this), output);
  }

  // .google.pubsub.v1.RetryPolicy retry_policy = 14;
  if (this->has_retry_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::retry_policy(this), output);
  }

  // bool detached = 15;
  if (this->detached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->detached(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Subscription)
}

::google::protobuf::uint8* Subscription::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::push_config(this), target);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ack_deadline_seconds(), target);
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->retain_acked_messages(), target);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::message_retention_duration(this), target);
  }

  // map<string, string> labels = 9;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(9, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(9, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool enable_message_ordering = 10;
  if (this->enable_message_ordering() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_message_ordering(), target);
  }

  // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
  if (this->has_expiration_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::expiration_policy(this), target);
  }

  // string filter = 12;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->filter(), target);
  }

  // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
  if (this->has_dead_letter_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::dead_letter_policy(this), target);
  }

  // .google.pubsub.v1.RetryPolicy retry_policy = 14;
  if (this->has_retry_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::retry_policy(this), target);
  }

  // bool detached = 15;
  if (this->detached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->detached(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Subscription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<Subscription_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != nullptr && entry->GetArena() != nullptr) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != nullptr && entry->GetArena() != nullptr) {
      entry.release();
    }
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // string filter = 12;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *push_config_);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_retention_duration_);
  }

  // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
  if (this->has_expiration_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expiration_policy_);
  }

  // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
  if (this->has_dead_letter_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dead_letter_policy_);
  }

  // .google.pubsub.v1.RetryPolicy retry_policy = 14;
  if (this->has_retry_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *retry_policy_);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack_deadline_seconds());
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_message_ordering = 10;
  if (this->enable_message_ordering() != 0) {
    total_size += 1 + 1;
  }

  // bool detached = 15;
  if (this->detached() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const Subscription* source =
      ::google::protobuf::DynamicCastToGenerated<Subscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Subscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Subscription)
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.filter().size() > 0) {
    set_filter(from.filter());
  }
  if (from.has_push_config()) {
    mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from.push_config());
  }
  if (from.has_message_retention_duration()) {
    mutable_message_retention_duration()->::google::protobuf::Duration::MergeFrom(from.message_retention_duration());
  }
  if (from.has_expiration_policy()) {
    mutable_expiration_policy()->::google::pubsub::v1::ExpirationPolicy::MergeFrom(from.expiration_policy());
  }
  if (from.has_dead_letter_policy()) {
    mutable_dead_letter_policy()->::google::pubsub::v1::DeadLetterPolicy::MergeFrom(from.dead_letter_policy());
  }
  if (from.has_retry_policy()) {
    mutable_retry_policy()->::google::pubsub::v1::RetryPolicy::MergeFrom(from.retry_policy());
  }
  if (from.ack_deadline_seconds() != 0) {
    set_ack_deadline_seconds(from.ack_deadline_seconds());
  }
  if (from.retain_acked_messages() != 0) {
    set_retain_acked_messages(from.retain_acked_messages());
  }
  if (from.enable_message_ordering() != 0) {
    set_enable_message_ordering(from.enable_message_ordering());
  }
  if (from.detached() != 0) {
    set_detached(from.detached());
  }
}

void Subscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::Swap(Subscription* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Subscription* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Subscription::UnsafeArenaSwap(Subscription* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(push_config_, other->push_config_);
  swap(message_retention_duration_, other->message_retention_duration_);
  swap(expiration_policy_, other->expiration_policy_);
  swap(dead_letter_policy_, other->dead_letter_policy_);
  swap(retry_policy_, other->retry_policy_);
  swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
  swap(retain_acked_messages_, other->retain_acked_messages_);
  swap(enable_message_ordering_, other->enable_message_ordering_);
  swap(detached_, other->detached_);
}

::google::protobuf::Metadata Subscription::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RetryPolicy::InitAsDefaultInstance() {
  ::google::pubsub::v1::_RetryPolicy_default_instance_._instance.get_mutable()->minimum_backoff_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::google::pubsub::v1::_RetryPolicy_default_instance_._instance.get_mutable()->maximum_backoff_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class RetryPolicy::HasBitSetters {
 public:
  static const ::google::protobuf::Duration& minimum_backoff(const RetryPolicy* msg);
  static const ::google::protobuf::Duration& maximum_backoff(const RetryPolicy* msg);
};

const ::google::protobuf::Duration&
RetryPolicy::HasBitSetters::minimum_backoff(const RetryPolicy* msg) {
  return *msg->minimum_backoff_;
}
const ::google::protobuf::Duration&
RetryPolicy::HasBitSetters::maximum_backoff(const RetryPolicy* msg) {
  return *msg->maximum_backoff_;
}
void RetryPolicy::unsafe_arena_set_allocated_minimum_backoff(
    ::google::protobuf::Duration* minimum_backoff) {
  if (GetArenaNoVirtual() == nullptr) {
    delete minimum_backoff_;
  }
  minimum_backoff_ = minimum_backoff;
  if (minimum_backoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.RetryPolicy.minimum_backoff)
}
void RetryPolicy::clear_minimum_backoff() {
  if (GetArenaNoVirtual() == nullptr && minimum_backoff_ != nullptr) {
    delete minimum_backoff_;
  }
  minimum_backoff_ = nullptr;
}
void RetryPolicy::unsafe_arena_set_allocated_maximum_backoff(
    ::google::protobuf::Duration* maximum_backoff) {
  if (GetArenaNoVirtual() == nullptr) {
    delete maximum_backoff_;
  }
  maximum_backoff_ = maximum_backoff;
  if (maximum_backoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.RetryPolicy.maximum_backoff)
}
void RetryPolicy::clear_maximum_backoff() {
  if (GetArenaNoVirtual() == nullptr && maximum_backoff_ != nullptr) {
    delete maximum_backoff_;
  }
  maximum_backoff_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RetryPolicy::kMinimumBackoffFieldNumber;
const int RetryPolicy::kMaximumBackoffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RetryPolicy::RetryPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.RetryPolicy)
}
RetryPolicy::RetryPolicy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.RetryPolicy)
}
RetryPolicy::RetryPolicy(const RetryPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_minimum_backoff()) {
    minimum_backoff_ = new ::google::protobuf::Duration(*from.minimum_backoff_);
  } else {
    minimum_backoff_ = nullptr;
  }
  if (from.has_maximum_backoff()) {
    maximum_backoff_ = new ::google::protobuf::Duration(*from.maximum_backoff_);
  } else {
    maximum_backoff_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.RetryPolicy)
}

void RetryPolicy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::memset(&minimum_backoff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_backoff_) -
      reinterpret_cast<char*>(&minimum_backoff_)) + sizeof(maximum_backoff_));
}

RetryPolicy::~RetryPolicy() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.RetryPolicy)
  SharedDtor();
}

void RetryPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete minimum_backoff_;
  if (this != internal_default_instance()) delete maximum_backoff_;
}

void RetryPolicy::ArenaDtor(void* object) {
  RetryPolicy* _this = reinterpret_cast< RetryPolicy* >(object);
  (void)_this;
}
void RetryPolicy::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void RetryPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetryPolicy& RetryPolicy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RetryPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void RetryPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.RetryPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && minimum_backoff_ != nullptr) {
    delete minimum_backoff_;
  }
  minimum_backoff_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && maximum_backoff_ != nullptr) {
    delete maximum_backoff_;
  }
  maximum_backoff_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetryPolicy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RetryPolicy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration minimum_backoff = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_minimum_backoff();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Duration maximum_backoff = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_maximum_backoff();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetryPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.RetryPolicy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration minimum_backoff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minimum_backoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration maximum_backoff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maximum_backoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.RetryPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.RetryPolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetryPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.RetryPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration minimum_backoff = 1;
  if (this->has_minimum_backoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::minimum_backoff(this), output);
  }

  // .google.protobuf.Duration maximum_backoff = 2;
  if (this->has_maximum_backoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::maximum_backoff(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.RetryPolicy)
}

::google::protobuf::uint8* RetryPolicy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.RetryPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration minimum_backoff = 1;
  if (this->has_minimum_backoff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::minimum_backoff(this), target);
  }

  // .google.protobuf.Duration maximum_backoff = 2;
  if (this->has_maximum_backoff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::maximum_backoff(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.RetryPolicy)
  return target;
}

size_t RetryPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.RetryPolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration minimum_backoff = 1;
  if (this->has_minimum_backoff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *minimum_backoff_);
  }

  // .google.protobuf.Duration maximum_backoff = 2;
  if (this->has_maximum_backoff()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *maximum_backoff_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetryPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RetryPolicy* source =
      ::google::protobuf::DynamicCastToGenerated<RetryPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.RetryPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.RetryPolicy)
    MergeFrom(*source);
  }
}

void RetryPolicy::MergeFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_minimum_backoff()) {
    mutable_minimum_backoff()->::google::protobuf::Duration::MergeFrom(from.minimum_backoff());
  }
  if (from.has_maximum_backoff()) {
    mutable_maximum_backoff()->::google::protobuf::Duration::MergeFrom(from.maximum_backoff());
  }
}

void RetryPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetryPolicy::CopyFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetryPolicy::IsInitialized() const {
  return true;
}

void RetryPolicy::Swap(RetryPolicy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RetryPolicy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RetryPolicy::UnsafeArenaSwap(RetryPolicy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RetryPolicy::InternalSwap(RetryPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(minimum_backoff_, other->minimum_backoff_);
  swap(maximum_backoff_, other->maximum_backoff_);
}

::google::protobuf::Metadata RetryPolicy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeadLetterPolicy::InitAsDefaultInstance() {
}
class DeadLetterPolicy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeadLetterPolicy::kDeadLetterTopicFieldNumber;
const int DeadLetterPolicy::kMaxDeliveryAttemptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeadLetterPolicy::DeadLetterPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeadLetterPolicy)
}
DeadLetterPolicy::DeadLetterPolicy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeadLetterPolicy)
}
DeadLetterPolicy::DeadLetterPolicy(const DeadLetterPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dead_letter_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dead_letter_topic().size() > 0) {
    dead_letter_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dead_letter_topic(),
      GetArenaNoVirtual());
  }
  max_delivery_attempts_ = from.max_delivery_attempts_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeadLetterPolicy)
}

void DeadLetterPolicy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  dead_letter_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_delivery_attempts_ = 0;
}

DeadLetterPolicy::~DeadLetterPolicy() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeadLetterPolicy)
  SharedDtor();
}

void DeadLetterPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  dead_letter_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeadLetterPolicy::ArenaDtor(void* object) {
  DeadLetterPolicy* _this = reinterpret_cast< DeadLetterPolicy* >(object);
  (void)_this;
}
void DeadLetterPolicy::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void DeadLetterPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeadLetterPolicy& DeadLetterPolicy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeadLetterPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeadLetterPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dead_letter_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  max_delivery_attempts_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeadLetterPolicy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeadLetterPolicy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string dead_letter_topic = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.DeadLetterPolicy.dead_letter_topic");
        object = msg->mutable_dead_letter_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 max_delivery_attempts = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_delivery_attempts(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeadLetterPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeadLetterPolicy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dead_letter_topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dead_letter_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dead_letter_topic().data(), static_cast<int>(this->dead_letter_topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeadLetterPolicy.dead_letter_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_delivery_attempts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_delivery_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeadLetterPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeadLetterPolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeadLetterPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeadLetterPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dead_letter_topic = 1;
  if (this->dead_letter_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dead_letter_topic().data(), static_cast<int>(this->dead_letter_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeadLetterPolicy.dead_letter_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dead_letter_topic(), output);
  }

  // int32 max_delivery_attempts = 2;
  if (this->max_delivery_attempts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_delivery_attempts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeadLetterPolicy)
}

::google::protobuf::uint8* DeadLetterPolicy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeadLetterPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dead_letter_topic = 1;
  if (this->dead_letter_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dead_letter_topic().data(), static_cast<int>(this->dead_letter_topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeadLetterPolicy.dead_letter_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dead_letter_topic(), target);
  }

  // int32 max_delivery_attempts = 2;
  if (this->max_delivery_attempts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_delivery_attempts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeadLetterPolicy)
  return target;
}

size_t DeadLetterPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeadLetterPolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dead_letter_topic = 1;
  if (this->dead_letter_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dead_letter_topic());
  }

  // int32 max_delivery_attempts = 2;
  if (this->max_delivery_attempts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_delivery_attempts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeadLetterPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeadLetterPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const DeadLetterPolicy* source =
      ::google::protobuf::DynamicCastToGenerated<DeadLetterPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeadLetterPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeadLetterPolicy)
    MergeFrom(*source);
  }
}

void DeadLetterPolicy::MergeFrom(const DeadLetterPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeadLetterPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dead_letter_topic().size() > 0) {
    set_dead_letter_topic(from.dead_letter_topic());
  }
  if (from.max_delivery_attempts() != 0) {
    set_max_delivery_attempts(from.max_delivery_attempts());
  }
}

void DeadLetterPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeadLetterPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadLetterPolicy::CopyFrom(const DeadLetterPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeadLetterPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadLetterPolicy::IsInitialized() const {
  return true;
}

void DeadLetterPolicy::Swap(DeadLetterPolicy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeadLetterPolicy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeadLetterPolicy::UnsafeArenaSwap(DeadLetterPolicy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeadLetterPolicy::InternalSwap(DeadLetterPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dead_letter_topic_.Swap(&other->dead_letter_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_delivery_attempts_, other->max_delivery_attempts_);
}

::google::protobuf::Metadata DeadLetterPolicy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExpirationPolicy::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ExpirationPolicy_default_instance_._instance.get_mutable()->ttl_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class ExpirationPolicy::HasBitSetters {
 public:
  static const ::google::protobuf::Duration& ttl(const ExpirationPolicy* msg);
};

const ::google::protobuf::Duration&
ExpirationPolicy::HasBitSetters::ttl(const ExpirationPolicy* msg) {
  return *msg->ttl_;
}
void ExpirationPolicy::unsafe_arena_set_allocated_ttl(
    ::google::protobuf::Duration* ttl) {
  if (GetArenaNoVirtual() == nullptr) {
    delete ttl_;
  }
  ttl_ = ttl;
  if (ttl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ExpirationPolicy.ttl)
}
void ExpirationPolicy::clear_ttl() {
  if (GetArenaNoVirtual() == nullptr && ttl_ != nullptr) {
    delete ttl_;
  }
  ttl_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpirationPolicy::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpirationPolicy::ExpirationPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ExpirationPolicy)
}
ExpirationPolicy::ExpirationPolicy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ExpirationPolicy)
}
ExpirationPolicy::ExpirationPolicy(const ExpirationPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ttl()) {
    ttl_ = new ::google::protobuf::Duration(*from.ttl_);
  } else {
    ttl_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ExpirationPolicy)
}

void ExpirationPolicy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ttl_ = nullptr;
}

ExpirationPolicy::~ExpirationPolicy() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ExpirationPolicy)
  SharedDtor();
}

void ExpirationPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete ttl_;
}

void ExpirationPolicy::ArenaDtor(void* object) {
  ExpirationPolicy* _this = reinterpret_cast< ExpirationPolicy* >(object);
  (void)_this;
}
void ExpirationPolicy::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ExpirationPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpirationPolicy& ExpirationPolicy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ExpirationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ExpirationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ttl_ != nullptr) {
    delete ttl_;
  }
  ttl_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExpirationPolicy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExpirationPolicy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration ttl = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_ttl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExpirationPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ExpirationPolicy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration ttl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ttl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ExpirationPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ExpirationPolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExpirationPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ExpirationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 1;
  if (this->has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ttl(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ExpirationPolicy)
}

::google::protobuf::uint8* ExpirationPolicy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ExpirationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 1;
  if (this->has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ttl(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ExpirationPolicy)
  return target;
}

size_t ExpirationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ExpirationPolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 1;
  if (this->has_ttl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ttl_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpirationPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ExpirationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpirationPolicy* source =
      ::google::protobuf::DynamicCastToGenerated<ExpirationPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ExpirationPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ExpirationPolicy)
    MergeFrom(*source);
  }
}

void ExpirationPolicy::MergeFrom(const ExpirationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ExpirationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ttl()) {
    mutable_ttl()->::google::protobuf::Duration::MergeFrom(from.ttl());
  }
}

void ExpirationPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ExpirationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpirationPolicy::CopyFrom(const ExpirationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ExpirationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpirationPolicy::IsInitialized() const {
  return true;
}

void ExpirationPolicy::Swap(ExpirationPolicy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExpirationPolicy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ExpirationPolicy::UnsafeArenaSwap(ExpirationPolicy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExpirationPolicy::InternalSwap(ExpirationPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ttl_, other->ttl_);
}

::google::protobuf::Metadata ExpirationPolicy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PushConfig_OidcToken::InitAsDefaultInstance() {
}
class PushConfig_OidcToken::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushConfig_OidcToken::kServiceAccountEmailFieldNumber;
const int PushConfig_OidcToken::kAudienceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushConfig_OidcToken::PushConfig_OidcToken()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PushConfig.OidcToken)
}
PushConfig_OidcToken::PushConfig_OidcToken(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PushConfig.OidcToken)
}
PushConfig_OidcToken::PushConfig_OidcToken(const PushConfig_OidcToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_account_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_account_email().size() > 0) {
    service_account_email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_account_email(),
      GetArenaNoVirtual());
  }
  audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.audience().size() > 0) {
    audience_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audience(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PushConfig.OidcToken)
}

void PushConfig_OidcToken::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  service_account_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audience_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PushConfig_OidcToken::~PushConfig_OidcToken() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PushConfig.OidcToken)
  SharedDtor();
}

void PushConfig_OidcToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  service_account_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audience_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PushConfig_OidcToken::ArenaDtor(void* object) {
  PushConfig_OidcToken* _this = reinterpret_cast< PushConfig_OidcToken* >(object);
  (void)_this;
}
void PushConfig_OidcToken::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void PushConfig_OidcToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushConfig_OidcToken& PushConfig_OidcToken::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PushConfig_OidcToken::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PushConfig.OidcToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_account_email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  audience_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushConfig_OidcToken::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PushConfig_OidcToken*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string service_account_email = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PushConfig.OidcToken.service_account_email");
        object = msg->mutable_service_account_email();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string audience = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PushConfig.OidcToken.audience");
        object = msg->mutable_audience();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushConfig_OidcToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PushConfig.OidcToken)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_account_email = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_account_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_account_email().data(), static_cast<int>(this->service_account_email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.OidcToken.service_account_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string audience = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audience()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->audience().data(), static_cast<int>(this->audience().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.OidcToken.audience"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PushConfig.OidcToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PushConfig.OidcToken)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushConfig_OidcToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PushConfig.OidcToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_account_email = 1;
  if (this->service_account_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_account_email().data(), static_cast<int>(this->service_account_email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.OidcToken.service_account_email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_account_email(), output);
  }

  // string audience = 2;
  if (this->audience().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audience().data(), static_cast<int>(this->audience().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.OidcToken.audience");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->audience(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PushConfig.OidcToken)
}

::google::protobuf::uint8* PushConfig_OidcToken::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PushConfig.OidcToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_account_email = 1;
  if (this->service_account_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_account_email().data(), static_cast<int>(this->service_account_email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.OidcToken.service_account_email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_account_email(), target);
  }

  // string audience = 2;
  if (this->audience().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->audience().data(), static_cast<int>(this->audience().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.OidcToken.audience");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->audience(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PushConfig.OidcToken)
  return target;
}

size_t PushConfig_OidcToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PushConfig.OidcToken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_account_email = 1;
  if (this->service_account_email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_account_email());
  }

  // string audience = 2;
  if (this->audience().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->audience());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushConfig_OidcToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PushConfig.OidcToken)
  GOOGLE_DCHECK_NE(&from, this);
  const PushConfig_OidcToken* source =
      ::google::protobuf::DynamicCastToGenerated<PushConfig_OidcToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PushConfig.OidcToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PushConfig.OidcToken)
    MergeFrom(*source);
  }
}

void PushConfig_OidcToken::MergeFrom(const PushConfig_OidcToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PushConfig.OidcToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_account_email().size() > 0) {
    set_service_account_email(from.service_account_email());
  }
  if (from.audience().size() > 0) {
    set_audience(from.audience());
  }
}

void PushConfig_OidcToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PushConfig.OidcToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushConfig_OidcToken::CopyFrom(const PushConfig_OidcToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PushConfig.OidcToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushConfig_OidcToken::IsInitialized() const {
  return true;
}

void PushConfig_OidcToken::Swap(PushConfig_OidcToken* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PushConfig_OidcToken* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PushConfig_OidcToken::UnsafeArenaSwap(PushConfig_OidcToken* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PushConfig_OidcToken::InternalSwap(PushConfig_OidcToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_account_email_.Swap(&other->service_account_email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audience_.Swap(&other->audience_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PushConfig_OidcToken::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

PushConfig_AttributesEntry_DoNotUse::PushConfig_AttributesEntry_DoNotUse() {}
PushConfig_AttributesEntry_DoNotUse::PushConfig_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void PushConfig_AttributesEntry_DoNotUse::MergeFrom(const PushConfig_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PushConfig_AttributesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[25];
}
void PushConfig_AttributesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushConfig_AttributesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      PushConfig_AttributesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.PushConfig.AttributesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.PushConfig.AttributesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void PushConfig::InitAsDefaultInstance() {
  ::google::pubsub::v1::_PushConfig_default_instance_.oidc_token_ = const_cast< ::google::pubsub::v1::PushConfig_OidcToken*>(
      ::google::pubsub::v1::PushConfig_OidcToken::internal_default_instance());
}
class PushConfig::HasBitSetters {
 public:
  static const ::google::pubsub::v1::PushConfig_OidcToken& oidc_token(const PushConfig* msg);
};

const ::google::pubsub::v1::PushConfig_OidcToken&
PushConfig::HasBitSetters::oidc_token(const PushConfig* msg) {
  return *msg->authentication_method_.oidc_token_;
}
void PushConfig::set_allocated_oidc_token(::google::pubsub::v1::PushConfig_OidcToken* oidc_token) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_authentication_method();
  if (oidc_token) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(oidc_token);
    if (message_arena != submessage_arena) {
      oidc_token = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oidc_token, submessage_arena);
    }
    set_has_oidc_token();
    authentication_method_.oidc_token_ = oidc_token;
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.oidc_token)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushConfig::kPushEndpointFieldNumber;
const int PushConfig::kAttributesFieldNumber;
const int PushConfig::kOidcTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushConfig::PushConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PushConfig)
}
PushConfig::PushConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PushConfig)
}
PushConfig::PushConfig(const PushConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  push_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.push_endpoint().size() > 0) {
    push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.push_endpoint(),
      GetArenaNoVirtual());
  }
  clear_has_authentication_method();
  switch (from.authentication_method_case()) {
    case kOidcToken: {
      mutable_oidc_token()->::google::pubsub::v1::PushConfig_OidcToken::MergeFrom(from.oidc_token());
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PushConfig)
}

void PushConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  push_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authentication_method();
}

PushConfig::~PushConfig() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PushConfig)
  SharedDtor();
}

void PushConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  push_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_authentication_method()) {
    clear_authentication_method();
  }
}

void PushConfig::ArenaDtor(void* object) {
  PushConfig* _this = reinterpret_cast< PushConfig* >(object);
  (void)_this;
}
void PushConfig::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void PushConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushConfig& PushConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PushConfig::clear_authentication_method() {
// @@protoc_insertion_point(one_of_clear_start:google.pubsub.v1.PushConfig)
  switch (authentication_method_case()) {
    case kOidcToken: {
      if (GetArenaNoVirtual() == nullptr) {
        delete authentication_method_.oidc_token_;
      }
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTHENTICATION_METHOD_NOT_SET;
}


void PushConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PushConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  push_endpoint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_authentication_method();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PushConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PushConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string push_endpoint = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PushConfig.push_endpoint");
        object = msg->mutable_push_endpoint();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> attributes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->attributes_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::PushConfig_OidcToken::_InternalParse;
        object = msg->mutable_oidc_token();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PushConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PushConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string push_endpoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->push_endpoint().data(), static_cast<int>(this->push_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.push_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          PushConfig_AttributesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PushConfig_AttributesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.AttributesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_oidc_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PushConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PushConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PushConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PushConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_endpoint().data(), static_cast<int>(this->push_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.push_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->push_endpoint(), output);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
  if (has_oidc_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::oidc_token(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PushConfig)
}

::google::protobuf::uint8* PushConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PushConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_endpoint().data(), static_cast<int>(this->push_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.push_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->push_endpoint(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.value");
      }
    };

    if (false &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
  if (has_oidc_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::oidc_token(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PushConfig)
  return target;
}

size_t PushConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PushConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::std::unique_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      if (entry.get() != nullptr && entry->GetArena() != nullptr) {
        entry.release();
      }
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != nullptr && entry->GetArena() != nullptr) {
      entry.release();
    }
  }

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->push_endpoint());
  }

  switch (authentication_method_case()) {
    // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
    case kOidcToken: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authentication_method_.oidc_token_);
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PushConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PushConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PushConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PushConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PushConfig)
    MergeFrom(*source);
  }
}

void PushConfig::MergeFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PushConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.push_endpoint().size() > 0) {
    set_push_endpoint(from.push_endpoint());
  }
  switch (from.authentication_method_case()) {
    case kOidcToken: {
      mutable_oidc_token()->::google::pubsub::v1::PushConfig_OidcToken::MergeFrom(from.oidc_token());
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
}

void PushConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushConfig::CopyFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushConfig::IsInitialized() const {
  return true;
}

void PushConfig::Swap(PushConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PushConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PushConfig::UnsafeArenaSwap(PushConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PushConfig::InternalSwap(PushConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.Swap(&other->attributes_);
  push_endpoint_.Swap(&other->push_endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authentication_method_, other->authentication_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata PushConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReceivedMessage::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ReceivedMessage_default_instance_._instance.get_mutable()->message_ = const_cast< ::google::pubsub::v1::PubsubMessage*>(
      ::google::pubsub::v1::PubsubMessage::internal_default_instance());
}
class ReceivedMessage::HasBitSetters {
 public:
  static const ::google::pubsub::v1::PubsubMessage& message(const ReceivedMessage* msg);
};

const ::google::pubsub::v1::PubsubMessage&
ReceivedMessage::HasBitSetters::message(const ReceivedMessage* msg) {
  return *msg->message_;
}
void ReceivedMessage::unsafe_arena_set_allocated_message(
    ::google::pubsub::v1::PubsubMessage* message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete message_;
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceivedMessage::kAckIdFieldNumber;
const int ReceivedMessage::kMessageFieldNumber;
const int ReceivedMessage::kDeliveryAttemptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceivedMessage::ReceivedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(const ReceivedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ack_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ack_id().size() > 0) {
    ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ack_id(),
      GetArenaNoVirtual());
  }
  if (from.has_message()) {
    message_ = new ::google::pubsub::v1::PubsubMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  delivery_attempt_ = from.delivery_attempt_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ReceivedMessage)
}

void ReceivedMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ack_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delivery_attempt_) -
      reinterpret_cast<char*>(&message_)) + sizeof(delivery_attempt_));
}

ReceivedMessage::~ReceivedMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ReceivedMessage)
  SharedDtor();
}

void ReceivedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  ack_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void ReceivedMessage::ArenaDtor(void* object) {
  ReceivedMessage* _this = reinterpret_cast< ReceivedMessage* >(object);
  (void)_this;
}
void ReceivedMessage::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ReceivedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedMessage& ReceivedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ReceivedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ReceivedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  delivery_attempt_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReceivedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReceivedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string ack_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ReceivedMessage.ack_id");
        object = msg->mutable_ack_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.pubsub.v1.PubsubMessage message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::PubsubMessage::_InternalParse;
        object = msg->mutable_message();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 delivery_attempt = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_delivery_attempt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReceivedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ReceivedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ack_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ack_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_id().data(), static_cast<int>(this->ack_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ReceivedMessage.ack_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.PubsubMessage message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delivery_attempt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delivery_attempt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ReceivedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ReceivedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReceivedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ReceivedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_id().data(), static_cast<int>(this->ack_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ReceivedMessage.ack_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ack_id(), output);
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::message(this), output);
  }

  // int32 delivery_attempt = 3;
  if (this->delivery_attempt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->delivery_attempt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ReceivedMessage)
}

::google::protobuf::uint8* ReceivedMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ReceivedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_id().data(), static_cast<int>(this->ack_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ReceivedMessage.ack_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ack_id(), target);
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::message(this), target);
  }

  // int32 delivery_attempt = 3;
  if (this->delivery_attempt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->delivery_attempt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ReceivedMessage)
  return target;
}

size_t ReceivedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ReceivedMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ack_id());
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int32 delivery_attempt = 3;
  if (this->delivery_attempt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delivery_attempt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedMessage* source =
      ::google::protobuf::DynamicCastToGenerated<ReceivedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ReceivedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ReceivedMessage)
    MergeFrom(*source);
  }
}

void ReceivedMessage::MergeFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ack_id().size() > 0) {
    set_ack_id(from.ack_id());
  }
  if (from.has_message()) {
    mutable_message()->::google::pubsub::v1::PubsubMessage::MergeFrom(from.message());
  }
  if (from.delivery_attempt() != 0) {
    set_delivery_attempt(from.delivery_attempt());
  }
}

void ReceivedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedMessage::CopyFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedMessage::IsInitialized() const {
  return true;
}

void ReceivedMessage::Swap(ReceivedMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReceivedMessage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ReceivedMessage::UnsafeArenaSwap(ReceivedMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReceivedMessage::InternalSwap(ReceivedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_id_.Swap(&other->ack_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
  swap(delivery_attempt_, other->delivery_attempt_);
}

::google::protobuf::Metadata ReceivedMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetSubscriptionRequest::InitAsDefaultInstance() {
}
class GetSubscriptionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubscriptionRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubscriptionRequest::GetSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(const GetSubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetSubscriptionRequest)
}

void GetSubscriptionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetSubscriptionRequest::~GetSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetSubscriptionRequest)
  SharedDtor();
}

void GetSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSubscriptionRequest::ArenaDtor(void* object) {
  GetSubscriptionRequest* _this = reinterpret_cast< GetSubscriptionRequest* >(object);
  (void)_this;
}
void GetSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void GetSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSubscriptionRequest& GetSubscriptionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void GetSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSubscriptionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetSubscriptionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.GetSubscriptionRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.GetSubscriptionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.GetSubscriptionRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.GetSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.GetSubscriptionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.GetSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSubscriptionRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.GetSubscriptionRequest)
}

::google::protobuf::uint8* GetSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSubscriptionRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetSubscriptionRequest)
  return target;
}

size_t GetSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetSubscriptionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubscriptionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetSubscriptionRequest)
    MergeFrom(*source);
  }
}

void GetSubscriptionRequest::MergeFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void GetSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionRequest::CopyFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionRequest::IsInitialized() const {
  return true;
}

void GetSubscriptionRequest::Swap(GetSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetSubscriptionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetSubscriptionRequest::UnsafeArenaSwap(GetSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetSubscriptionRequest::InternalSwap(GetSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetSubscriptionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateSubscriptionRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_._instance.get_mutable()->subscription_ = const_cast< ::google::pubsub::v1::Subscription*>(
      ::google::pubsub::v1::Subscription::internal_default_instance());
  ::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
class UpdateSubscriptionRequest::HasBitSetters {
 public:
  static const ::google::pubsub::v1::Subscription& subscription(const UpdateSubscriptionRequest* msg);
  static const ::google::protobuf::FieldMask& update_mask(const UpdateSubscriptionRequest* msg);
};

const ::google::pubsub::v1::Subscription&
UpdateSubscriptionRequest::HasBitSetters::subscription(const UpdateSubscriptionRequest* msg) {
  return *msg->subscription_;
}
const ::google::protobuf::FieldMask&
UpdateSubscriptionRequest::HasBitSetters::update_mask(const UpdateSubscriptionRequest* msg) {
  return *msg->update_mask_;
}
void UpdateSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::google::pubsub::v1::Subscription* subscription) {
  if (GetArenaNoVirtual() == nullptr) {
    delete subscription_;
  }
  subscription_ = subscription;
  if (subscription) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
}
void UpdateSubscriptionRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
}
void UpdateSubscriptionRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSubscriptionRequest::kSubscriptionFieldNumber;
const int UpdateSubscriptionRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSubscriptionRequest::UpdateSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subscription()) {
    subscription_ = new ::google::pubsub::v1::Subscription(*from.subscription_);
  } else {
    subscription_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}

void UpdateSubscriptionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::memset(&subscription_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&subscription_)) + sizeof(update_mask_));
}

UpdateSubscriptionRequest::~UpdateSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateSubscriptionRequest)
  SharedDtor();
}

void UpdateSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete subscription_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateSubscriptionRequest::ArenaDtor(void* object) {
  UpdateSubscriptionRequest* _this = reinterpret_cast< UpdateSubscriptionRequest* >(object);
  (void)_this;
}
void UpdateSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void UpdateSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSubscriptionRequest& UpdateSubscriptionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void UpdateSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateSubscriptionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateSubscriptionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::Subscription::_InternalParse;
        object = msg->mutable_subscription();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FieldMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.UpdateSubscriptionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.UpdateSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.UpdateSubscriptionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_subscription()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::subscription(this), output);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::update_mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.UpdateSubscriptionRequest)
}

::google::protobuf::uint8* UpdateSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_subscription()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::subscription(this), target);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::update_mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateSubscriptionRequest)
  return target;
}

size_t UpdateSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateSubscriptionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_subscription()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *subscription_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSubscriptionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateSubscriptionRequest)
    MergeFrom(*source);
  }
}

void UpdateSubscriptionRequest::MergeFrom(const UpdateSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscription()) {
    mutable_subscription()->::google::pubsub::v1::Subscription::MergeFrom(from.subscription());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriptionRequest::CopyFrom(const UpdateSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionRequest::IsInitialized() const {
  return true;
}

void UpdateSubscriptionRequest::Swap(UpdateSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateSubscriptionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void UpdateSubscriptionRequest::UnsafeArenaSwap(UpdateSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateSubscriptionRequest::InternalSwap(UpdateSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(subscription_, other->subscription_);
  swap(update_mask_, other->update_mask_);
}

::google::protobuf::Metadata UpdateSubscriptionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListSubscriptionsRequest::InitAsDefaultInstance() {
}
class ListSubscriptionsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSubscriptionsRequest::kProjectFieldNumber;
const int ListSubscriptionsRequest::kPageSizeFieldNumber;
const int ListSubscriptionsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSubscriptionsRequest::ListSubscriptionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(const ListSubscriptionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}

void ListSubscriptionsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListSubscriptionsRequest::~ListSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsRequest)
  SharedDtor();
}

void ListSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSubscriptionsRequest::ArenaDtor(void* object) {
  ListSubscriptionsRequest* _this = reinterpret_cast< ListSubscriptionsRequest* >(object);
  (void)_this;
}
void ListSubscriptionsRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListSubscriptionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSubscriptionsRequest& ListSubscriptionsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListSubscriptionsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListSubscriptionsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListSubscriptionsRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListSubscriptionsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListSubscriptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSubscriptionsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSubscriptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSubscriptionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListSubscriptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSubscriptionsRequest)
}

::google::protobuf::uint8* ListSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsRequest)
  return target;
}

size_t ListSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSubscriptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSubscriptionsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListSubscriptionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsRequest)
    MergeFrom(*source);
  }
}

void ListSubscriptionsRequest::MergeFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListSubscriptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsRequest::CopyFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsRequest::IsInitialized() const {
  return true;
}

void ListSubscriptionsRequest::Swap(ListSubscriptionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSubscriptionsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListSubscriptionsRequest::UnsafeArenaSwap(ListSubscriptionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSubscriptionsRequest::InternalSwap(ListSubscriptionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListSubscriptionsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListSubscriptionsResponse::InitAsDefaultInstance() {
}
class ListSubscriptionsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSubscriptionsResponse::kSubscriptionsFieldNumber;
const int ListSubscriptionsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSubscriptionsResponse::ListSubscriptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(const ListSubscriptionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}

void ListSubscriptionsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListSubscriptionsResponse::~ListSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsResponse)
  SharedDtor();
}

void ListSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSubscriptionsResponse::ArenaDtor(void* object) {
  ListSubscriptionsResponse* _this = reinterpret_cast< ListSubscriptionsResponse* >(object);
  (void)_this;
}
void ListSubscriptionsResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListSubscriptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSubscriptionsResponse& ListSubscriptionsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListSubscriptionsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListSubscriptionsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.Subscription subscriptions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::pubsub::v1::Subscription::_InternalParse;
          object = msg->add_subscriptions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListSubscriptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSubscriptionsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Subscription subscriptions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSubscriptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSubscriptionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListSubscriptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->subscriptions(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSubscriptionsResponse)
}

::google::protobuf::uint8* ListSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->subscriptions(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsResponse)
  return target;
}

size_t ListSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subscriptions(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSubscriptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSubscriptionsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListSubscriptionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsResponse)
    MergeFrom(*source);
  }
}

void ListSubscriptionsResponse::MergeFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListSubscriptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsResponse::CopyFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListSubscriptionsResponse::Swap(ListSubscriptionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSubscriptionsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListSubscriptionsResponse::UnsafeArenaSwap(ListSubscriptionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSubscriptionsResponse::InternalSwap(ListSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subscriptions_)->InternalSwap(CastToBase(&other->subscriptions_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListSubscriptionsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteSubscriptionRequest::InitAsDefaultInstance() {
}
class DeleteSubscriptionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSubscriptionRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSubscriptionRequest::DeleteSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}

void DeleteSubscriptionRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteSubscriptionRequest::~DeleteSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteSubscriptionRequest)
  SharedDtor();
}

void DeleteSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteSubscriptionRequest::ArenaDtor(void* object) {
  DeleteSubscriptionRequest* _this = reinterpret_cast< DeleteSubscriptionRequest* >(object);
  (void)_this;
}
void DeleteSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void DeleteSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSubscriptionRequest& DeleteSubscriptionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeleteSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteSubscriptionRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteSubscriptionRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.DeleteSubscriptionRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteSubscriptionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteSubscriptionRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteSubscriptionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteSubscriptionRequest)
}

::google::protobuf::uint8* DeleteSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteSubscriptionRequest)
  return target;
}

size_t DeleteSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteSubscriptionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSubscriptionRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteSubscriptionRequest)
    MergeFrom(*source);
  }
}

void DeleteSubscriptionRequest::MergeFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void DeleteSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubscriptionRequest::CopyFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscriptionRequest::IsInitialized() const {
  return true;
}

void DeleteSubscriptionRequest::Swap(DeleteSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteSubscriptionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeleteSubscriptionRequest::UnsafeArenaSwap(DeleteSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteSubscriptionRequest::InternalSwap(DeleteSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteSubscriptionRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ModifyPushConfigRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_._instance.get_mutable()->push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
}
class ModifyPushConfigRequest::HasBitSetters {
 public:
  static const ::google::pubsub::v1::PushConfig& push_config(const ModifyPushConfigRequest* msg);
};

const ::google::pubsub::v1::PushConfig&
ModifyPushConfigRequest::HasBitSetters::push_config(const ModifyPushConfigRequest* msg) {
  return *msg->push_config_;
}
void ModifyPushConfigRequest::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyPushConfigRequest::kSubscriptionFieldNumber;
const int ModifyPushConfigRequest::kPushConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyPushConfigRequest::ModifyPushConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyPushConfigRequest)
}
ModifyPushConfigRequest::ModifyPushConfigRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}
ModifyPushConfigRequest::ModifyPushConfigRequest(const ModifyPushConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  if (from.has_push_config()) {
    push_config_ = new ::google::pubsub::v1::PushConfig(*from.push_config_);
  } else {
    push_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}

void ModifyPushConfigRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_config_ = nullptr;
}

ModifyPushConfigRequest::~ModifyPushConfigRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyPushConfigRequest)
  SharedDtor();
}

void ModifyPushConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete push_config_;
}

void ModifyPushConfigRequest::ArenaDtor(void* object) {
  ModifyPushConfigRequest* _this = reinterpret_cast< ModifyPushConfigRequest* >(object);
  (void)_this;
}
void ModifyPushConfigRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ModifyPushConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyPushConfigRequest& ModifyPushConfigRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ModifyPushConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && push_config_ != nullptr) {
    delete push_config_;
  }
  push_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModifyPushConfigRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModifyPushConfigRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ModifyPushConfigRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::PushConfig::_InternalParse;
        object = msg->mutable_push_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModifyPushConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ModifyPushConfigRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyPushConfigRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_push_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ModifyPushConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ModifyPushConfigRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModifyPushConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyPushConfigRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_push_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::push_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ModifyPushConfigRequest)
}

::google::protobuf::uint8* ModifyPushConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyPushConfigRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_push_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::push_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyPushConfigRequest)
  return target;
}

size_t ModifyPushConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyPushConfigRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_push_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *push_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyPushConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyPushConfigRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ModifyPushConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyPushConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyPushConfigRequest)
    MergeFrom(*source);
  }
}

void ModifyPushConfigRequest::MergeFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.has_push_config()) {
    mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from.push_config());
  }
}

void ModifyPushConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPushConfigRequest::CopyFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPushConfigRequest::IsInitialized() const {
  return true;
}

void ModifyPushConfigRequest::Swap(ModifyPushConfigRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModifyPushConfigRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ModifyPushConfigRequest::UnsafeArenaSwap(ModifyPushConfigRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModifyPushConfigRequest::InternalSwap(ModifyPushConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(push_config_, other->push_config_);
}

::google::protobuf::Metadata ModifyPushConfigRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PullRequest::InitAsDefaultInstance() {
}
class PullRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullRequest::kSubscriptionFieldNumber;
const int PullRequest::kReturnImmediatelyFieldNumber;
const int PullRequest::kMaxMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullRequest::PullRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullRequest)
}
PullRequest::PullRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullRequest)
}
PullRequest::PullRequest(const PullRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  ::memcpy(&return_immediately_, &from.return_immediately_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_messages_) -
    reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullRequest)
}

void PullRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_immediately_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_messages_) -
      reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
}

PullRequest::~PullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullRequest)
  SharedDtor();
}

void PullRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PullRequest::ArenaDtor(void* object) {
  PullRequest* _this = reinterpret_cast< PullRequest* >(object);
  (void)_this;
}
void PullRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void PullRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullRequest& PullRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&return_immediately_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_messages_) -
      reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PullRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PullRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.PullRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_return_immediately(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_max_messages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PullRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PullRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PullRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PullRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PullRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  if (this->return_immediately() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->return_immediately(), output);
  }

  // int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->max_messages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_messages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PullRequest)
}

::google::protobuf::uint8* PullRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PullRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  if (this->return_immediately() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->return_immediately(), target);
  }

  // int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->max_messages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_messages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullRequest)
  return target;
}

size_t PullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  if (this->return_immediately() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->max_messages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_messages());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PullRequest* source =
      ::google::protobuf::DynamicCastToGenerated<PullRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullRequest)
    MergeFrom(*source);
  }
}

void PullRequest::MergeFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.return_immediately() != 0) {
    set_return_immediately(from.return_immediately());
  }
  if (from.max_messages() != 0) {
    set_max_messages(from.max_messages());
  }
}

void PullRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullRequest::CopyFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullRequest::IsInitialized() const {
  return true;
}

void PullRequest::Swap(PullRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PullRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PullRequest::UnsafeArenaSwap(PullRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PullRequest::InternalSwap(PullRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_immediately_, other->return_immediately_);
  swap(max_messages_, other->max_messages_);
}

::google::protobuf::Metadata PullRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PullResponse::InitAsDefaultInstance() {
}
class PullResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullResponse::kReceivedMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullResponse::PullResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullResponse)
}
PullResponse::PullResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullResponse)
}
PullResponse::PullResponse(const PullResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      received_messages_(from.received_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullResponse)
}

void PullResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

PullResponse::~PullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullResponse)
  SharedDtor();
}

void PullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PullResponse::ArenaDtor(void* object) {
  PullResponse* _this = reinterpret_cast< PullResponse* >(object);
  (void)_this;
}
void PullResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void PullResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullResponse& PullResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_messages_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PullResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PullResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::pubsub::v1::ReceivedMessage::_InternalParse;
          object = msg->add_received_messages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PullResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_received_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PullResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PullResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->received_messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PullResponse)
}

::google::protobuf::uint8* PullResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->received_messages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullResponse)
  return target;
}

size_t PullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->received_messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->received_messages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PullResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PullResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullResponse)
    MergeFrom(*source);
  }
}

void PullResponse::MergeFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_messages_.MergeFrom(from.received_messages_);
}

void PullResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullResponse::CopyFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullResponse::IsInitialized() const {
  return true;
}

void PullResponse::Swap(PullResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PullResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PullResponse::UnsafeArenaSwap(PullResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PullResponse::InternalSwap(PullResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&received_messages_)->InternalSwap(CastToBase(&other->received_messages_));
}

::google::protobuf::Metadata PullResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ModifyAckDeadlineRequest::InitAsDefaultInstance() {
}
class ModifyAckDeadlineRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyAckDeadlineRequest::kSubscriptionFieldNumber;
const int ModifyAckDeadlineRequest::kAckIdsFieldNumber;
const int ModifyAckDeadlineRequest::kAckDeadlineSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyAckDeadlineRequest::ModifyAckDeadlineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}
ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}
ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ack_ids_(from.ack_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  ack_deadline_seconds_ = from.ack_deadline_seconds_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}

void ModifyAckDeadlineRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ack_deadline_seconds_ = 0;
}

ModifyAckDeadlineRequest::~ModifyAckDeadlineRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyAckDeadlineRequest)
  SharedDtor();
}

void ModifyAckDeadlineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModifyAckDeadlineRequest::ArenaDtor(void* object) {
  ModifyAckDeadlineRequest* _this = reinterpret_cast< ModifyAckDeadlineRequest* >(object);
  (void)_this;
}
void ModifyAckDeadlineRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ModifyAckDeadlineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyAckDeadlineRequest& ModifyAckDeadlineRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ModifyAckDeadlineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ack_deadline_seconds_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModifyAckDeadlineRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModifyAckDeadlineRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ack_deadline_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
          object = msg->add_ack_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModifyAckDeadlineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyAckDeadlineRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            static_cast<int>(this->ack_ids(this->ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ModifyAckDeadlineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ModifyAckDeadlineRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModifyAckDeadlineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ack_deadline_seconds(), output);
  }

  // repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ack_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ModifyAckDeadlineRequest)
}

::google::protobuf::uint8* ModifyAckDeadlineRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ack_deadline_seconds(), target);
  }

  // repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ack_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyAckDeadlineRequest)
  return target;
}

size_t ModifyAckDeadlineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack_deadline_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyAckDeadlineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyAckDeadlineRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ModifyAckDeadlineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyAckDeadlineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyAckDeadlineRequest)
    MergeFrom(*source);
  }
}

void ModifyAckDeadlineRequest::MergeFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.ack_deadline_seconds() != 0) {
    set_ack_deadline_seconds(from.ack_deadline_seconds());
  }
}

void ModifyAckDeadlineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyAckDeadlineRequest::CopyFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyAckDeadlineRequest::IsInitialized() const {
  return true;
}

void ModifyAckDeadlineRequest::Swap(ModifyAckDeadlineRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModifyAckDeadlineRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ModifyAckDeadlineRequest::UnsafeArenaSwap(ModifyAckDeadlineRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModifyAckDeadlineRequest::InternalSwap(ModifyAckDeadlineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_ids_.InternalSwap(CastToBase(&other->ack_ids_));
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
}

::google::protobuf::Metadata ModifyAckDeadlineRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AcknowledgeRequest::InitAsDefaultInstance() {
}
class AcknowledgeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcknowledgeRequest::kSubscriptionFieldNumber;
const int AcknowledgeRequest::kAckIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcknowledgeRequest::AcknowledgeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.AcknowledgeRequest)
}
AcknowledgeRequest::AcknowledgeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.AcknowledgeRequest)
}
AcknowledgeRequest::AcknowledgeRequest(const AcknowledgeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ack_ids_(from.ack_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.AcknowledgeRequest)
}

void AcknowledgeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AcknowledgeRequest::~AcknowledgeRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.AcknowledgeRequest)
  SharedDtor();
}

void AcknowledgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcknowledgeRequest::ArenaDtor(void* object) {
  AcknowledgeRequest* _this = reinterpret_cast< AcknowledgeRequest* >(object);
  (void)_this;
}
void AcknowledgeRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void AcknowledgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcknowledgeRequest& AcknowledgeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void AcknowledgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.AcknowledgeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AcknowledgeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AcknowledgeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.AcknowledgeRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.AcknowledgeRequest.ack_ids");
          object = msg->add_ack_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AcknowledgeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.AcknowledgeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.AcknowledgeRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            static_cast<int>(this->ack_ids(this->ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.AcknowledgeRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.AcknowledgeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.AcknowledgeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AcknowledgeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.AcknowledgeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ack_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.AcknowledgeRequest)
}

::google::protobuf::uint8* AcknowledgeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.AcknowledgeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ack_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.AcknowledgeRequest)
  return target;
}

size_t AcknowledgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.AcknowledgeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcknowledgeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcknowledgeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AcknowledgeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.AcknowledgeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.AcknowledgeRequest)
    MergeFrom(*source);
  }
}

void AcknowledgeRequest::MergeFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void AcknowledgeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcknowledgeRequest::CopyFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeRequest::IsInitialized() const {
  return true;
}

void AcknowledgeRequest::Swap(AcknowledgeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AcknowledgeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void AcknowledgeRequest::UnsafeArenaSwap(AcknowledgeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AcknowledgeRequest::InternalSwap(AcknowledgeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_ids_.InternalSwap(CastToBase(&other->ack_ids_));
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata AcknowledgeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StreamingPullRequest::InitAsDefaultInstance() {
}
class StreamingPullRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingPullRequest::kSubscriptionFieldNumber;
const int StreamingPullRequest::kAckIdsFieldNumber;
const int StreamingPullRequest::kModifyDeadlineSecondsFieldNumber;
const int StreamingPullRequest::kModifyDeadlineAckIdsFieldNumber;
const int StreamingPullRequest::kStreamAckDeadlineSecondsFieldNumber;
const int StreamingPullRequest::kClientIdFieldNumber;
const int StreamingPullRequest::kMaxOutstandingMessagesFieldNumber;
const int StreamingPullRequest::kMaxOutstandingBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingPullRequest::StreamingPullRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullRequest)
}
StreamingPullRequest::StreamingPullRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena),
  modify_deadline_seconds_(arena),
  modify_deadline_ack_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullRequest)
}
StreamingPullRequest::StreamingPullRequest(const StreamingPullRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ack_ids_(from.ack_ids_),
      modify_deadline_seconds_(from.modify_deadline_seconds_),
      modify_deadline_ack_ids_(from.modify_deadline_ack_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  ::memcpy(&max_outstanding_messages_, &from.max_outstanding_messages_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_ack_deadline_seconds_) -
    reinterpret_cast<char*>(&max_outstanding_messages_)) + sizeof(stream_ack_deadline_seconds_));
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullRequest)
}

void StreamingPullRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_outstanding_messages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_ack_deadline_seconds_) -
      reinterpret_cast<char*>(&max_outstanding_messages_)) + sizeof(stream_ack_deadline_seconds_));
}

StreamingPullRequest::~StreamingPullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullRequest)
  SharedDtor();
}

void StreamingPullRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamingPullRequest::ArenaDtor(void* object) {
  StreamingPullRequest* _this = reinterpret_cast< StreamingPullRequest* >(object);
  (void)_this;
}
void StreamingPullRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void StreamingPullRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingPullRequest& StreamingPullRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void StreamingPullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  modify_deadline_seconds_.Clear();
  modify_deadline_ack_ids_.Clear();
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&max_outstanding_messages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_ack_deadline_seconds_) -
      reinterpret_cast<char*>(&max_outstanding_messages_)) + sizeof(stream_ack_deadline_seconds_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingPullRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StreamingPullRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.StreamingPullRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string ack_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.StreamingPullRequest.ack_ids");
          object = msg->add_ack_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated int32 modify_deadline_seconds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_modify_deadline_seconds();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_modify_deadline_seconds(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated string modify_deadline_ack_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
          object = msg->add_modify_deadline_ack_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_stream_ack_deadline_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string client_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.StreamingPullRequest.client_id");
        object = msg->mutable_client_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 max_outstanding_messages = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_max_outstanding_messages(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_outstanding_bytes = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_max_outstanding_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingPullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.StreamingPullRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ack_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            static_cast<int>(this->ack_ids(this->ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 modify_deadline_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_modify_deadline_seconds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_modify_deadline_seconds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string modify_deadline_ack_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_modify_deadline_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modify_deadline_ack_ids(this->modify_deadline_ack_ids_size() - 1).data(),
            static_cast<int>(this->modify_deadline_ack_ids(this->modify_deadline_ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_outstanding_messages = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_outstanding_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_outstanding_bytes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_outstanding_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.StreamingPullRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.StreamingPullRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingPullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.StreamingPullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ack_ids(i), output);
  }

  // repeated int32 modify_deadline_seconds = 3;
  if (this->modify_deadline_seconds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_modify_deadline_seconds_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->modify_deadline_seconds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->modify_deadline_seconds(i), output);
  }

  // repeated string modify_deadline_ack_ids = 4;
  for (int i = 0, n = this->modify_deadline_ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modify_deadline_ack_ids(i).data(), static_cast<int>(this->modify_deadline_ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->modify_deadline_ack_ids(i), output);
  }

  // int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->stream_ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stream_ack_deadline_seconds(), output);
  }

  // string client_id = 6;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->client_id(), output);
  }

  // int64 max_outstanding_messages = 7;
  if (this->max_outstanding_messages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->max_outstanding_messages(), output);
  }

  // int64 max_outstanding_bytes = 8;
  if (this->max_outstanding_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->max_outstanding_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.StreamingPullRequest)
}

::google::protobuf::uint8* StreamingPullRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ack_ids(i), target);
  }

  // repeated int32 modify_deadline_seconds = 3;
  if (this->modify_deadline_seconds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _modify_deadline_seconds_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->modify_deadline_seconds_, target);
  }

  // repeated string modify_deadline_ack_ids = 4;
  for (int i = 0, n = this->modify_deadline_ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modify_deadline_ack_ids(i).data(), static_cast<int>(this->modify_deadline_ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->modify_deadline_ack_ids(i), target);
  }

  // int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->stream_ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stream_ack_deadline_seconds(), target);
  }

  // string client_id = 6;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->client_id(), target);
  }

  // int64 max_outstanding_messages = 7;
  if (this->max_outstanding_messages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->max_outstanding_messages(), target);
  }

  // int64 max_outstanding_bytes = 8;
  if (this->max_outstanding_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->max_outstanding_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullRequest)
  return target;
}

size_t StreamingPullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ack_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  // repeated int32 modify_deadline_seconds = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->modify_deadline_seconds_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _modify_deadline_seconds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string modify_deadline_ack_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modify_deadline_ack_ids_size());
  for (int i = 0, n = this->modify_deadline_ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->modify_deadline_ack_ids(i));
  }

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // string client_id = 6;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // int64 max_outstanding_messages = 7;
  if (this->max_outstanding_messages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_outstanding_messages());
  }

  // int64 max_outstanding_bytes = 8;
  if (this->max_outstanding_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_outstanding_bytes());
  }

  // int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->stream_ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stream_ack_deadline_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingPullRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingPullRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StreamingPullRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullRequest)
    MergeFrom(*source);
  }
}

void StreamingPullRequest::MergeFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  modify_deadline_seconds_.MergeFrom(from.modify_deadline_seconds_);
  modify_deadline_ack_ids_.MergeFrom(from.modify_deadline_ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.max_outstanding_messages() != 0) {
    set_max_outstanding_messages(from.max_outstanding_messages());
  }
  if (from.max_outstanding_bytes() != 0) {
    set_max_outstanding_bytes(from.max_outstanding_bytes());
  }
  if (from.stream_ack_deadline_seconds() != 0) {
    set_stream_ack_deadline_seconds(from.stream_ack_deadline_seconds());
  }
}

void StreamingPullRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullRequest::CopyFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingPullRequest::IsInitialized() const {
  return true;
}

void StreamingPullRequest::Swap(StreamingPullRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingPullRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingPullRequest::UnsafeArenaSwap(StreamingPullRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingPullRequest::InternalSwap(StreamingPullRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_ids_.InternalSwap(CastToBase(&other->ack_ids_));
  modify_deadline_seconds_.InternalSwap(&other->modify_deadline_seconds_);
  modify_deadline_ack_ids_.InternalSwap(CastToBase(&other->modify_deadline_ack_ids_));
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_outstanding_messages_, other->max_outstanding_messages_);
  swap(max_outstanding_bytes_, other->max_outstanding_bytes_);
  swap(stream_ack_deadline_seconds_, other->stream_ack_deadline_seconds_);
}

::google::protobuf::Metadata StreamingPullRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StreamingPullResponse::InitAsDefaultInstance() {
}
class StreamingPullResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingPullResponse::kReceivedMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingPullResponse::StreamingPullResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullResponse)
}
StreamingPullResponse::StreamingPullResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullResponse)
}
StreamingPullResponse::StreamingPullResponse(const StreamingPullResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      received_messages_(from.received_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullResponse)
}

void StreamingPullResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

StreamingPullResponse::~StreamingPullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullResponse)
  SharedDtor();
}

void StreamingPullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void StreamingPullResponse::ArenaDtor(void* object) {
  StreamingPullResponse* _this = reinterpret_cast< StreamingPullResponse* >(object);
  (void)_this;
}
void StreamingPullResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void StreamingPullResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingPullResponse& StreamingPullResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void StreamingPullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_messages_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingPullResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StreamingPullResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::pubsub::v1::ReceivedMessage::_InternalParse;
          object = msg->add_received_messages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingPullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.StreamingPullResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_received_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.StreamingPullResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.StreamingPullResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingPullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.StreamingPullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->received_messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.StreamingPullResponse)
}

::google::protobuf::uint8* StreamingPullResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->received_messages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullResponse)
  return target;
}

size_t StreamingPullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->received_messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->received_messages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingPullResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingPullResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StreamingPullResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullResponse)
    MergeFrom(*source);
  }
}

void StreamingPullResponse::MergeFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_messages_.MergeFrom(from.received_messages_);
}

void StreamingPullResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullResponse::CopyFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingPullResponse::IsInitialized() const {
  return true;
}

void StreamingPullResponse::Swap(StreamingPullResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingPullResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingPullResponse::UnsafeArenaSwap(StreamingPullResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingPullResponse::InternalSwap(StreamingPullResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&received_messages_)->InternalSwap(CastToBase(&other->received_messages_));
}

::google::protobuf::Metadata StreamingPullResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

CreateSnapshotRequest_LabelsEntry_DoNotUse::CreateSnapshotRequest_LabelsEntry_DoNotUse() {}
CreateSnapshotRequest_LabelsEntry_DoNotUse::CreateSnapshotRequest_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void CreateSnapshotRequest_LabelsEntry_DoNotUse::MergeFrom(const CreateSnapshotRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CreateSnapshotRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[40];
}
void CreateSnapshotRequest_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateSnapshotRequest_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      CreateSnapshotRequest_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void CreateSnapshotRequest::InitAsDefaultInstance() {
}
class CreateSnapshotRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSnapshotRequest::kNameFieldNumber;
const int CreateSnapshotRequest::kSubscriptionFieldNumber;
const int CreateSnapshotRequest::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSnapshotRequest::CreateSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.CreateSnapshotRequest)
}
CreateSnapshotRequest::CreateSnapshotRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.CreateSnapshotRequest)
}
CreateSnapshotRequest::CreateSnapshotRequest(const CreateSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.CreateSnapshotRequest)
}

void CreateSnapshotRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateSnapshotRequest::~CreateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.CreateSnapshotRequest)
  SharedDtor();
}

void CreateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateSnapshotRequest::ArenaDtor(void* object) {
  CreateSnapshotRequest* _this = reinterpret_cast< CreateSnapshotRequest* >(object);
  (void)_this;
}
void CreateSnapshotRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void CreateSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSnapshotRequest& CreateSnapshotRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void CreateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.CreateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateSnapshotRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateSnapshotRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.CreateSnapshotRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.CreateSnapshotRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> labels = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.CreateSnapshotRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.CreateSnapshotRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.CreateSnapshotRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          CreateSnapshotRequest_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CreateSnapshotRequest_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.CreateSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.CreateSnapshotRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.CreateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscription(), output);
  }

  // map<string, string> labels = 3;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateSnapshotRequest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateSnapshotRequest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.CreateSnapshotRequest)
}

::google::protobuf::uint8* CreateSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.CreateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subscription(), target);
  }

  // map<string, string> labels = 3;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CreateSnapshotRequest_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<CreateSnapshotRequest_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.CreateSnapshotRequest)
  return target;
}

size_t CreateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.CreateSnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<CreateSnapshotRequest_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != nullptr && entry->GetArena() != nullptr) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != nullptr && entry->GetArena() != nullptr) {
      entry.release();
    }
  }

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSnapshotRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.CreateSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.CreateSnapshotRequest)
    MergeFrom(*source);
  }
}

void CreateSnapshotRequest::MergeFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void CreateSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotRequest::CopyFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotRequest::IsInitialized() const {
  return true;
}

void CreateSnapshotRequest::Swap(CreateSnapshotRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateSnapshotRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CreateSnapshotRequest::UnsafeArenaSwap(CreateSnapshotRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateSnapshotRequest::InternalSwap(CreateSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CreateSnapshotRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateSnapshotRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_._instance.get_mutable()->snapshot_ = const_cast< ::google::pubsub::v1::Snapshot*>(
      ::google::pubsub::v1::Snapshot::internal_default_instance());
  ::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
class UpdateSnapshotRequest::HasBitSetters {
 public:
  static const ::google::pubsub::v1::Snapshot& snapshot(const UpdateSnapshotRequest* msg);
  static const ::google::protobuf::FieldMask& update_mask(const UpdateSnapshotRequest* msg);
};

const ::google::pubsub::v1::Snapshot&
UpdateSnapshotRequest::HasBitSetters::snapshot(const UpdateSnapshotRequest* msg) {
  return *msg->snapshot_;
}
const ::google::protobuf::FieldMask&
UpdateSnapshotRequest::HasBitSetters::update_mask(const UpdateSnapshotRequest* msg) {
  return *msg->update_mask_;
}
void UpdateSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::google::pubsub::v1::Snapshot* snapshot) {
  if (GetArenaNoVirtual() == nullptr) {
    delete snapshot_;
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
}
void UpdateSnapshotRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
}
void UpdateSnapshotRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSnapshotRequest::kSnapshotFieldNumber;
const int UpdateSnapshotRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSnapshotRequest::UpdateSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateSnapshotRequest)
}
UpdateSnapshotRequest::UpdateSnapshotRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateSnapshotRequest)
}
UpdateSnapshotRequest::UpdateSnapshotRequest(const UpdateSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snapshot()) {
    snapshot_ = new ::google::pubsub::v1::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateSnapshotRequest)
}

void UpdateSnapshotRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::memset(&snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&snapshot_)) + sizeof(update_mask_));
}

UpdateSnapshotRequest::~UpdateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateSnapshotRequest)
  SharedDtor();
}

void UpdateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete snapshot_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateSnapshotRequest::ArenaDtor(void* object) {
  UpdateSnapshotRequest* _this = reinterpret_cast< UpdateSnapshotRequest* >(object);
  (void)_this;
}
void UpdateSnapshotRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void UpdateSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSnapshotRequest& UpdateSnapshotRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void UpdateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateSnapshotRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateSnapshotRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::pubsub::v1::Snapshot::_InternalParse;
        object = msg->mutable_snapshot();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FieldMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.UpdateSnapshotRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.UpdateSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.UpdateSnapshotRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::snapshot(this), output);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::update_mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.UpdateSnapshotRequest)
}

::google::protobuf::uint8* UpdateSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::snapshot(this), target);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::update_mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateSnapshotRequest)
  return target;
}

size_t UpdateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateSnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSnapshotRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateSnapshotRequest)
    MergeFrom(*source);
  }
}

void UpdateSnapshotRequest::MergeFrom(const UpdateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snapshot()) {
    mutable_snapshot()->::google::pubsub::v1::Snapshot::MergeFrom(from.snapshot());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSnapshotRequest::CopyFrom(const UpdateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSnapshotRequest::IsInitialized() const {
  return true;
}

void UpdateSnapshotRequest::Swap(UpdateSnapshotRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateSnapshotRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void UpdateSnapshotRequest::UnsafeArenaSwap(UpdateSnapshotRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateSnapshotRequest::InternalSwap(UpdateSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(snapshot_, other->snapshot_);
  swap(update_mask_, other->update_mask_);
}

::google::protobuf::Metadata UpdateSnapshotRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

Snapshot_LabelsEntry_DoNotUse::Snapshot_LabelsEntry_DoNotUse() {}
Snapshot_LabelsEntry_DoNotUse::Snapshot_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Snapshot_LabelsEntry_DoNotUse::MergeFrom(const Snapshot_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Snapshot_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[43];
}
void Snapshot_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Snapshot_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Snapshot_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.Snapshot.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.pubsub.v1.Snapshot.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Snapshot::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Snapshot_default_instance_._instance.get_mutable()->expire_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Snapshot::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& expire_time(const Snapshot* msg);
};

const ::google::protobuf::Timestamp&
Snapshot::HasBitSetters::expire_time(const Snapshot* msg) {
  return *msg->expire_time_;
}
void Snapshot::unsafe_arena_set_allocated_expire_time(
    ::google::protobuf::Timestamp* expire_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete expire_time_;
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.expire_time)
}
void Snapshot::clear_expire_time() {
  if (GetArenaNoVirtual() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kNameFieldNumber;
const int Snapshot::kTopicFieldNumber;
const int Snapshot::kExpireTimeFieldNumber;
const int Snapshot::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Snapshot)
}
Snapshot::Snapshot(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  if (from.has_expire_time()) {
    expire_time_ = new ::google::protobuf::Timestamp(*from.expire_time_);
  } else {
    expire_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Snapshot)
}

void Snapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_ = nullptr;
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expire_time_;
}

void Snapshot::ArenaDtor(void* object) {
  Snapshot* _this = reinterpret_cast< Snapshot* >(object);
  (void)_this;
}
void Snapshot::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Snapshot& Snapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Snapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Snapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.Snapshot.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string topic = 2 [(.google.api.resource_reference) = {
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.Snapshot.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp expire_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_expire_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, string> labels = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Snapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2 [(.google.api.resource_reference) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp expire_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expire_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          Snapshot_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Snapshot_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Snapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string topic = 2 [(.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::expire_time(this), output);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string topic = 2 [(.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::expire_time(this), target);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        if (entry->GetArena() != nullptr) {
          entry.release();
        }
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Snapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != nullptr && entry->GetArena() != nullptr) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != nullptr && entry->GetArena() != nullptr) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string topic = 2 [(.google.api.resource_reference) = {
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expire_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::google::protobuf::DynamicCastToGenerated<Snapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.has_expire_time()) {
    mutable_expire_time()->::google::protobuf::Timestamp::MergeFrom(from.expire_time());
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Snapshot* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Snapshot::UnsafeArenaSwap(Snapshot* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expire_time_, other->expire_time_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetSnapshotRequest::InitAsDefaultInstance() {
}
class GetSnapshotRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSnapshotRequest::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSnapshotRequest::GetSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetSnapshotRequest)
}
GetSnapshotRequest::GetSnapshotRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetSnapshotRequest)
}
GetSnapshotRequest::GetSnapshotRequest(const GetSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot().size() > 0) {
    snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetSnapshotRequest)
}

void GetSnapshotRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetSnapshotRequest::~GetSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetSnapshotRequest)
  SharedDtor();
}

void GetSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  snapshot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSnapshotRequest::ArenaDtor(void* object) {
  GetSnapshotRequest* _this = reinterpret_cast< GetSnapshotRequest* >(object);
  (void)_this;
}
void GetSnapshotRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void GetSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSnapshotRequest& GetSnapshotRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void GetSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSnapshotRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetSnapshotRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.GetSnapshotRequest.snapshot");
        object = msg->mutable_snapshot();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.GetSnapshotRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot().data(), static_cast<int>(this->snapshot().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.GetSnapshotRequest.snapshot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.GetSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.GetSnapshotRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.GetSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSnapshotRequest.snapshot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->snapshot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.GetSnapshotRequest)
}

::google::protobuf::uint8* GetSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSnapshotRequest.snapshot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetSnapshotRequest)
  return target;
}

size_t GetSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetSnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSnapshotRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetSnapshotRequest)
    MergeFrom(*source);
  }
}

void GetSnapshotRequest::MergeFrom(const GetSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot().size() > 0) {
    set_snapshot(from.snapshot());
  }
}

void GetSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotRequest::CopyFrom(const GetSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotRequest::IsInitialized() const {
  return true;
}

void GetSnapshotRequest::Swap(GetSnapshotRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetSnapshotRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetSnapshotRequest::UnsafeArenaSwap(GetSnapshotRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetSnapshotRequest::InternalSwap(GetSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshot_.Swap(&other->snapshot_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetSnapshotRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListSnapshotsRequest::InitAsDefaultInstance() {
}
class ListSnapshotsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSnapshotsRequest::kProjectFieldNumber;
const int ListSnapshotsRequest::kPageSizeFieldNumber;
const int ListSnapshotsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSnapshotsRequest::ListSnapshotsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSnapshotsRequest)
}
ListSnapshotsRequest::ListSnapshotsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSnapshotsRequest)
}
ListSnapshotsRequest::ListSnapshotsRequest(const ListSnapshotsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSnapshotsRequest)
}

void ListSnapshotsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListSnapshotsRequest::~ListSnapshotsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSnapshotsRequest)
  SharedDtor();
}

void ListSnapshotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsRequest::ArenaDtor(void* object) {
  ListSnapshotsRequest* _this = reinterpret_cast< ListSnapshotsRequest* >(object);
  (void)_this;
}
void ListSnapshotsRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListSnapshotsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSnapshotsRequest& ListSnapshotsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSnapshotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListSnapshotsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListSnapshotsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListSnapshotsRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListSnapshotsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListSnapshotsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSnapshotsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSnapshotsRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSnapshotsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSnapshotsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSnapshotsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListSnapshotsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSnapshotsRequest)
}

::google::protobuf::uint8* ListSnapshotsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSnapshotsRequest)
  return target;
}

size_t ListSnapshotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSnapshotsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSnapshotsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListSnapshotsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSnapshotsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSnapshotsRequest)
    MergeFrom(*source);
  }
}

void ListSnapshotsRequest::MergeFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListSnapshotsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsRequest::CopyFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsRequest::IsInitialized() const {
  return true;
}

void ListSnapshotsRequest::Swap(ListSnapshotsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSnapshotsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListSnapshotsRequest::UnsafeArenaSwap(ListSnapshotsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSnapshotsRequest::InternalSwap(ListSnapshotsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListSnapshotsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListSnapshotsResponse::InitAsDefaultInstance() {
}
class ListSnapshotsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSnapshotsResponse::kSnapshotsFieldNumber;
const int ListSnapshotsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSnapshotsResponse::ListSnapshotsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSnapshotsResponse)
}
ListSnapshotsResponse::ListSnapshotsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  snapshots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSnapshotsResponse)
}
ListSnapshotsResponse::ListSnapshotsResponse(const ListSnapshotsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      snapshots_(from.snapshots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSnapshotsResponse)
}

void ListSnapshotsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListSnapshotsResponse::~ListSnapshotsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSnapshotsResponse)
  SharedDtor();
}

void ListSnapshotsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsResponse::ArenaDtor(void* object) {
  ListSnapshotsResponse* _this = reinterpret_cast< ListSnapshotsResponse* >(object);
  (void)_this;
}
void ListSnapshotsResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void ListSnapshotsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSnapshotsResponse& ListSnapshotsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSnapshotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshots_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListSnapshotsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListSnapshotsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.Snapshot snapshots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::pubsub::v1::Snapshot::_InternalParse;
          object = msg->add_snapshots();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.ListSnapshotsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListSnapshotsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSnapshotsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Snapshot snapshots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_snapshots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSnapshotsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSnapshotsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSnapshotsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListSnapshotsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snapshots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->snapshots(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSnapshotsResponse)
}

::google::protobuf::uint8* ListSnapshotsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snapshots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->snapshots(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSnapshotsResponse)
  return target;
}

size_t ListSnapshotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSnapshotsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->snapshots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->snapshots(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSnapshotsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListSnapshotsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSnapshotsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSnapshotsResponse)
    MergeFrom(*source);
  }
}

void ListSnapshotsResponse::MergeFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshots_.MergeFrom(from.snapshots_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListSnapshotsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsResponse::CopyFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsResponse::IsInitialized() const {
  return true;
}

void ListSnapshotsResponse::Swap(ListSnapshotsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSnapshotsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ListSnapshotsResponse::UnsafeArenaSwap(ListSnapshotsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSnapshotsResponse::InternalSwap(ListSnapshotsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&snapshots_)->InternalSwap(CastToBase(&other->snapshots_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListSnapshotsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteSnapshotRequest::InitAsDefaultInstance() {
}
class DeleteSnapshotRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSnapshotRequest::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSnapshotRequest::DeleteSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteSnapshotRequest)
}
DeleteSnapshotRequest::DeleteSnapshotRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteSnapshotRequest)
}
DeleteSnapshotRequest::DeleteSnapshotRequest(const DeleteSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot().size() > 0) {
    snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteSnapshotRequest)
}

void DeleteSnapshotRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteSnapshotRequest::~DeleteSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteSnapshotRequest)
  SharedDtor();
}

void DeleteSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  snapshot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteSnapshotRequest::ArenaDtor(void* object) {
  DeleteSnapshotRequest* _this = reinterpret_cast< DeleteSnapshotRequest* >(object);
  (void)_this;
}
void DeleteSnapshotRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void DeleteSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSnapshotRequest& DeleteSnapshotRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeleteSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteSnapshotRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteSnapshotRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.DeleteSnapshotRequest.snapshot");
        object = msg->mutable_snapshot();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteSnapshotRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot().data(), static_cast<int>(this->snapshot().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteSnapshotRequest.snapshot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteSnapshotRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSnapshotRequest.snapshot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->snapshot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteSnapshotRequest)
}

::google::protobuf::uint8* DeleteSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSnapshotRequest.snapshot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteSnapshotRequest)
  return target;
}

size_t DeleteSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteSnapshotRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSnapshotRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteSnapshotRequest)
    MergeFrom(*source);
  }
}

void DeleteSnapshotRequest::MergeFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot().size() > 0) {
    set_snapshot(from.snapshot());
  }
}

void DeleteSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotRequest::CopyFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotRequest::IsInitialized() const {
  return true;
}

void DeleteSnapshotRequest::Swap(DeleteSnapshotRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteSnapshotRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DeleteSnapshotRequest::UnsafeArenaSwap(DeleteSnapshotRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteSnapshotRequest::InternalSwap(DeleteSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshot_.Swap(&other->snapshot_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteSnapshotRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SeekRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_SeekRequest_default_instance_.time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::pubsub::v1::_SeekRequest_default_instance_.snapshot_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class SeekRequest::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& time(const SeekRequest* msg);
};

const ::google::protobuf::Timestamp&
SeekRequest::HasBitSetters::time(const SeekRequest* msg) {
  return *msg->target_.time_;
}
void SeekRequest::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    target_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.time)
}
void SeekRequest::clear_time() {
  if (has_time()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete target_.time_;
    }
    clear_has_target();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeekRequest::kSubscriptionFieldNumber;
const int SeekRequest::kTimeFieldNumber;
const int SeekRequest::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeekRequest::SeekRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.SeekRequest)
}
SeekRequest::SeekRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.SeekRequest)
}
SeekRequest::SeekRequest(const SeekRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  clear_has_target();
  switch (from.target_case()) {
    case kTime: {
      mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
      break;
    }
    case kSnapshot: {
      set_snapshot(from.snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.SeekRequest)
}

void SeekRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
}

SeekRequest::~SeekRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.SeekRequest)
  SharedDtor();
}

void SeekRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_target()) {
    clear_target();
  }
}

void SeekRequest::ArenaDtor(void* object) {
  SeekRequest* _this = reinterpret_cast< SeekRequest* >(object);
  (void)_this;
}
void SeekRequest::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SeekRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeekRequest& SeekRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void SeekRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.pubsub.v1.SeekRequest)
  switch (target_case()) {
    case kTime: {
      if (GetArenaNoVirtual() == nullptr) {
        delete target_.time_;
      }
      break;
    }
    case kSnapshot: {
      target_.snapshot_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void SeekRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.SeekRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SeekRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SeekRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.SeekRequest.subscription");
        object = msg->mutable_subscription();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string snapshot = 3 [(.google.api.resource_reference) = {
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.pubsub.v1.SeekRequest.snapshot");
        object = msg->mutable_snapshot();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SeekRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.SeekRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.SeekRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshot = 3 [(.google.api.resource_reference) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot().data(), static_cast<int>(this->snapshot().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.SeekRequest.snapshot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.SeekRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.SeekRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SeekRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.SeekRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // .google.protobuf.Timestamp time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::time(this), output);
  }

  // string snapshot = 3 [(.google.api.resource_reference) = {
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.snapshot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snapshot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.SeekRequest)
}

::google::protobuf::uint8* SeekRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.SeekRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::time(this), target);
  }

  // string snapshot = 3 [(.google.api.resource_reference) = {
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.snapshot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snapshot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.SeekRequest)
  return target;
}

size_t SeekRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.SeekRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  switch (target_case()) {
    // .google.protobuf.Timestamp time = 2;
    case kTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.time_);
      break;
    }
    // string snapshot = 3 [(.google.api.resource_reference) = {
    case kSnapshot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeekRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.SeekRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SeekRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SeekRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.SeekRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.SeekRequest)
    MergeFrom(*source);
  }
}

void SeekRequest::MergeFrom(const SeekRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.SeekRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  switch (from.target_case()) {
    case kTime: {
      mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
      break;
    }
    case kSnapshot: {
      set_snapshot(from.snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void SeekRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.SeekRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekRequest::CopyFrom(const SeekRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.SeekRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekRequest::IsInitialized() const {
  return true;
}

void SeekRequest::Swap(SeekRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeekRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SeekRequest::UnsafeArenaSwap(SeekRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeekRequest::InternalSwap(SeekRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SeekRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SeekResponse::InitAsDefaultInstance() {
}
class SeekResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeekResponse::SeekResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.SeekResponse)
}
SeekResponse::SeekResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.SeekResponse)
}
SeekResponse::SeekResponse(const SeekResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.SeekResponse)
}

void SeekResponse::SharedCtor() {
}

SeekResponse::~SeekResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.SeekResponse)
  SharedDtor();
}

void SeekResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SeekResponse::ArenaDtor(void* object) {
  SeekResponse* _this = reinterpret_cast< SeekResponse* >(object);
  (void)_this;
}
void SeekResponse::RegisterArenaDtor(::google::protobuf::Arena*) {
}
void SeekResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeekResponse& SeekResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void SeekResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.SeekResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SeekResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SeekResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SeekResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.SeekResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.SeekResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.SeekResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SeekResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.SeekResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.SeekResponse)
}

::google::protobuf::uint8* SeekResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.SeekResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.SeekResponse)
  return target;
}

size_t SeekResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.SeekResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeekResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.SeekResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SeekResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SeekResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.SeekResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.SeekResponse)
    MergeFrom(*source);
  }
}

void SeekResponse::MergeFrom(const SeekResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.SeekResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SeekResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.SeekResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekResponse::CopyFrom(const SeekResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.SeekResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekResponse::IsInitialized() const {
  return true;
}

void SeekResponse::Swap(SeekResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeekResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SeekResponse::UnsafeArenaSwap(SeekResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeekResponse::InternalSwap(SeekResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SeekResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fpubsub_2fv1_2fpubsub_2eproto);
  return ::file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace pubsub
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::MessageStoragePolicy* Arena::CreateMaybeMessage< ::google::pubsub::v1::MessageStoragePolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::MessageStoragePolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::SchemaSettings* Arena::CreateMaybeMessage< ::google::pubsub::v1::SchemaSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::SchemaSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Topic* Arena::CreateMaybeMessage< ::google::pubsub::v1::Topic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Topic >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PubsubMessage* Arena::CreateMaybeMessage< ::google::pubsub::v1::PubsubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PubsubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::GetTopicRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::GetTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::GetTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::UpdateTopicRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::UpdateTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::UpdateTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PublishRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::PublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PublishResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PublishResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PublishResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSubscriptionsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSubscriptionsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSnapshotsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSnapshotsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSnapshotsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSnapshotsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeleteTopicRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeleteTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeleteTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DetachSubscriptionRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::DetachSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DetachSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DetachSubscriptionResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::DetachSubscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DetachSubscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Subscription* Arena::CreateMaybeMessage< ::google::pubsub::v1::Subscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::RetryPolicy* Arena::CreateMaybeMessage< ::google::pubsub::v1::RetryPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::RetryPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeadLetterPolicy* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeadLetterPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeadLetterPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ExpirationPolicy* Arena::CreateMaybeMessage< ::google::pubsub::v1::ExpirationPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ExpirationPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PushConfig_OidcToken* Arena::CreateMaybeMessage< ::google::pubsub::v1::PushConfig_OidcToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PushConfig_OidcToken >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PushConfig* Arena::CreateMaybeMessage< ::google::pubsub::v1::PushConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PushConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ReceivedMessage* Arena::CreateMaybeMessage< ::google::pubsub::v1::ReceivedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ReceivedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::GetSubscriptionRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::GetSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::GetSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::UpdateSubscriptionRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::UpdateSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::UpdateSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSubscriptionsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSubscriptionsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeleteSubscriptionRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeleteSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeleteSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ModifyPushConfigRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ModifyPushConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ModifyPushConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PullRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::PullRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PullRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PullResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PullResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PullResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ModifyAckDeadlineRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ModifyAckDeadlineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ModifyAckDeadlineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::AcknowledgeRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::AcknowledgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::AcknowledgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::StreamingPullRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::StreamingPullRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::StreamingPullRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::StreamingPullResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::StreamingPullResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::StreamingPullResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::CreateSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::CreateSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::CreateSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::UpdateSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::UpdateSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::UpdateSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Snapshot* Arena::CreateMaybeMessage< ::google::pubsub::v1::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::GetSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::GetSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::GetSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSnapshotsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSnapshotsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSnapshotsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSnapshotsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeleteSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeleteSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeleteSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::SeekRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::SeekRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::SeekRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::SeekResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::SeekResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::SeekResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
