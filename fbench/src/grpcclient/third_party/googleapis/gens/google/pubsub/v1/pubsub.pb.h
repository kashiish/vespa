// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

#ifndef PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fpubsub_2eproto
#define PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fpubsub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/pubsub/v1/schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[51]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fpubsub_2fv1_2fpubsub_2eproto();
namespace google {
namespace pubsub {
namespace v1 {
class AcknowledgeRequest;
class AcknowledgeRequestDefaultTypeInternal;
extern AcknowledgeRequestDefaultTypeInternal _AcknowledgeRequest_default_instance_;
class CreateSnapshotRequest;
class CreateSnapshotRequestDefaultTypeInternal;
extern CreateSnapshotRequestDefaultTypeInternal _CreateSnapshotRequest_default_instance_;
class CreateSnapshotRequest_LabelsEntry_DoNotUse;
class CreateSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern CreateSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal _CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
class DeadLetterPolicy;
class DeadLetterPolicyDefaultTypeInternal;
extern DeadLetterPolicyDefaultTypeInternal _DeadLetterPolicy_default_instance_;
class DeleteSnapshotRequest;
class DeleteSnapshotRequestDefaultTypeInternal;
extern DeleteSnapshotRequestDefaultTypeInternal _DeleteSnapshotRequest_default_instance_;
class DeleteSubscriptionRequest;
class DeleteSubscriptionRequestDefaultTypeInternal;
extern DeleteSubscriptionRequestDefaultTypeInternal _DeleteSubscriptionRequest_default_instance_;
class DeleteTopicRequest;
class DeleteTopicRequestDefaultTypeInternal;
extern DeleteTopicRequestDefaultTypeInternal _DeleteTopicRequest_default_instance_;
class DetachSubscriptionRequest;
class DetachSubscriptionRequestDefaultTypeInternal;
extern DetachSubscriptionRequestDefaultTypeInternal _DetachSubscriptionRequest_default_instance_;
class DetachSubscriptionResponse;
class DetachSubscriptionResponseDefaultTypeInternal;
extern DetachSubscriptionResponseDefaultTypeInternal _DetachSubscriptionResponse_default_instance_;
class ExpirationPolicy;
class ExpirationPolicyDefaultTypeInternal;
extern ExpirationPolicyDefaultTypeInternal _ExpirationPolicy_default_instance_;
class GetSnapshotRequest;
class GetSnapshotRequestDefaultTypeInternal;
extern GetSnapshotRequestDefaultTypeInternal _GetSnapshotRequest_default_instance_;
class GetSubscriptionRequest;
class GetSubscriptionRequestDefaultTypeInternal;
extern GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
class GetTopicRequest;
class GetTopicRequestDefaultTypeInternal;
extern GetTopicRequestDefaultTypeInternal _GetTopicRequest_default_instance_;
class ListSnapshotsRequest;
class ListSnapshotsRequestDefaultTypeInternal;
extern ListSnapshotsRequestDefaultTypeInternal _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponse;
class ListSnapshotsResponseDefaultTypeInternal;
extern ListSnapshotsResponseDefaultTypeInternal _ListSnapshotsResponse_default_instance_;
class ListSubscriptionsRequest;
class ListSubscriptionsRequestDefaultTypeInternal;
extern ListSubscriptionsRequestDefaultTypeInternal _ListSubscriptionsRequest_default_instance_;
class ListSubscriptionsResponse;
class ListSubscriptionsResponseDefaultTypeInternal;
extern ListSubscriptionsResponseDefaultTypeInternal _ListSubscriptionsResponse_default_instance_;
class ListTopicSnapshotsRequest;
class ListTopicSnapshotsRequestDefaultTypeInternal;
extern ListTopicSnapshotsRequestDefaultTypeInternal _ListTopicSnapshotsRequest_default_instance_;
class ListTopicSnapshotsResponse;
class ListTopicSnapshotsResponseDefaultTypeInternal;
extern ListTopicSnapshotsResponseDefaultTypeInternal _ListTopicSnapshotsResponse_default_instance_;
class ListTopicSubscriptionsRequest;
class ListTopicSubscriptionsRequestDefaultTypeInternal;
extern ListTopicSubscriptionsRequestDefaultTypeInternal _ListTopicSubscriptionsRequest_default_instance_;
class ListTopicSubscriptionsResponse;
class ListTopicSubscriptionsResponseDefaultTypeInternal;
extern ListTopicSubscriptionsResponseDefaultTypeInternal _ListTopicSubscriptionsResponse_default_instance_;
class ListTopicsRequest;
class ListTopicsRequestDefaultTypeInternal;
extern ListTopicsRequestDefaultTypeInternal _ListTopicsRequest_default_instance_;
class ListTopicsResponse;
class ListTopicsResponseDefaultTypeInternal;
extern ListTopicsResponseDefaultTypeInternal _ListTopicsResponse_default_instance_;
class MessageStoragePolicy;
class MessageStoragePolicyDefaultTypeInternal;
extern MessageStoragePolicyDefaultTypeInternal _MessageStoragePolicy_default_instance_;
class ModifyAckDeadlineRequest;
class ModifyAckDeadlineRequestDefaultTypeInternal;
extern ModifyAckDeadlineRequestDefaultTypeInternal _ModifyAckDeadlineRequest_default_instance_;
class ModifyPushConfigRequest;
class ModifyPushConfigRequestDefaultTypeInternal;
extern ModifyPushConfigRequestDefaultTypeInternal _ModifyPushConfigRequest_default_instance_;
class PublishRequest;
class PublishRequestDefaultTypeInternal;
extern PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
class PublishResponse;
class PublishResponseDefaultTypeInternal;
extern PublishResponseDefaultTypeInternal _PublishResponse_default_instance_;
class PubsubMessage;
class PubsubMessageDefaultTypeInternal;
extern PubsubMessageDefaultTypeInternal _PubsubMessage_default_instance_;
class PubsubMessage_AttributesEntry_DoNotUse;
class PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal _PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
class PullRequest;
class PullRequestDefaultTypeInternal;
extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class PullResponse;
class PullResponseDefaultTypeInternal;
extern PullResponseDefaultTypeInternal _PullResponse_default_instance_;
class PushConfig;
class PushConfigDefaultTypeInternal;
extern PushConfigDefaultTypeInternal _PushConfig_default_instance_;
class PushConfig_AttributesEntry_DoNotUse;
class PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal _PushConfig_AttributesEntry_DoNotUse_default_instance_;
class PushConfig_OidcToken;
class PushConfig_OidcTokenDefaultTypeInternal;
extern PushConfig_OidcTokenDefaultTypeInternal _PushConfig_OidcToken_default_instance_;
class ReceivedMessage;
class ReceivedMessageDefaultTypeInternal;
extern ReceivedMessageDefaultTypeInternal _ReceivedMessage_default_instance_;
class RetryPolicy;
class RetryPolicyDefaultTypeInternal;
extern RetryPolicyDefaultTypeInternal _RetryPolicy_default_instance_;
class SchemaSettings;
class SchemaSettingsDefaultTypeInternal;
extern SchemaSettingsDefaultTypeInternal _SchemaSettings_default_instance_;
class SeekRequest;
class SeekRequestDefaultTypeInternal;
extern SeekRequestDefaultTypeInternal _SeekRequest_default_instance_;
class SeekResponse;
class SeekResponseDefaultTypeInternal;
extern SeekResponseDefaultTypeInternal _SeekResponse_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class Snapshot_LabelsEntry_DoNotUse;
class Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal _Snapshot_LabelsEntry_DoNotUse_default_instance_;
class StreamingPullRequest;
class StreamingPullRequestDefaultTypeInternal;
extern StreamingPullRequestDefaultTypeInternal _StreamingPullRequest_default_instance_;
class StreamingPullResponse;
class StreamingPullResponseDefaultTypeInternal;
extern StreamingPullResponseDefaultTypeInternal _StreamingPullResponse_default_instance_;
class Subscription;
class SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class Subscription_LabelsEntry_DoNotUse;
class Subscription_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Subscription_LabelsEntry_DoNotUseDefaultTypeInternal _Subscription_LabelsEntry_DoNotUse_default_instance_;
class Topic;
class TopicDefaultTypeInternal;
extern TopicDefaultTypeInternal _Topic_default_instance_;
class Topic_LabelsEntry_DoNotUse;
class Topic_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Topic_LabelsEntry_DoNotUseDefaultTypeInternal _Topic_LabelsEntry_DoNotUse_default_instance_;
class UpdateSnapshotRequest;
class UpdateSnapshotRequestDefaultTypeInternal;
extern UpdateSnapshotRequestDefaultTypeInternal _UpdateSnapshotRequest_default_instance_;
class UpdateSubscriptionRequest;
class UpdateSubscriptionRequestDefaultTypeInternal;
extern UpdateSubscriptionRequestDefaultTypeInternal _UpdateSubscriptionRequest_default_instance_;
class UpdateTopicRequest;
class UpdateTopicRequestDefaultTypeInternal;
extern UpdateTopicRequestDefaultTypeInternal _UpdateTopicRequest_default_instance_;
}  // namespace v1
}  // namespace pubsub
namespace protobuf {
template<> ::google::pubsub::v1::AcknowledgeRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::AcknowledgeRequest>(Arena*);
template<> ::google::pubsub::v1::CreateSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::CreateSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::DeadLetterPolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::DeadLetterPolicy>(Arena*);
template<> ::google::pubsub::v1::DeleteSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DeleteSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::DeleteSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DeleteSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::DeleteTopicRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DeleteTopicRequest>(Arena*);
template<> ::google::pubsub::v1::DetachSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::DetachSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::DetachSubscriptionResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::DetachSubscriptionResponse>(Arena*);
template<> ::google::pubsub::v1::ExpirationPolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::ExpirationPolicy>(Arena*);
template<> ::google::pubsub::v1::GetSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::GetSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::GetSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::GetSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::GetTopicRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::GetTopicRequest>(Arena*);
template<> ::google::pubsub::v1::ListSnapshotsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSnapshotsRequest>(Arena*);
template<> ::google::pubsub::v1::ListSnapshotsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSnapshotsResponse>(Arena*);
template<> ::google::pubsub::v1::ListSubscriptionsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSubscriptionsRequest>(Arena*);
template<> ::google::pubsub::v1::ListSubscriptionsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListSubscriptionsResponse>(Arena*);
template<> ::google::pubsub::v1::ListTopicSnapshotsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSnapshotsRequest>(Arena*);
template<> ::google::pubsub::v1::ListTopicSnapshotsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSnapshotsResponse>(Arena*);
template<> ::google::pubsub::v1::ListTopicSubscriptionsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSubscriptionsRequest>(Arena*);
template<> ::google::pubsub::v1::ListTopicSubscriptionsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicSubscriptionsResponse>(Arena*);
template<> ::google::pubsub::v1::ListTopicsRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicsRequest>(Arena*);
template<> ::google::pubsub::v1::ListTopicsResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::ListTopicsResponse>(Arena*);
template<> ::google::pubsub::v1::MessageStoragePolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::MessageStoragePolicy>(Arena*);
template<> ::google::pubsub::v1::ModifyAckDeadlineRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ModifyAckDeadlineRequest>(Arena*);
template<> ::google::pubsub::v1::ModifyPushConfigRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::ModifyPushConfigRequest>(Arena*);
template<> ::google::pubsub::v1::PublishRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::PublishRequest>(Arena*);
template<> ::google::pubsub::v1::PublishResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::PublishResponse>(Arena*);
template<> ::google::pubsub::v1::PubsubMessage* Arena::CreateMaybeMessage<::google::pubsub::v1::PubsubMessage>(Arena*);
template<> ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::PullRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::PullRequest>(Arena*);
template<> ::google::pubsub::v1::PullResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::PullResponse>(Arena*);
template<> ::google::pubsub::v1::PushConfig* Arena::CreateMaybeMessage<::google::pubsub::v1::PushConfig>(Arena*);
template<> ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::PushConfig_OidcToken* Arena::CreateMaybeMessage<::google::pubsub::v1::PushConfig_OidcToken>(Arena*);
template<> ::google::pubsub::v1::ReceivedMessage* Arena::CreateMaybeMessage<::google::pubsub::v1::ReceivedMessage>(Arena*);
template<> ::google::pubsub::v1::RetryPolicy* Arena::CreateMaybeMessage<::google::pubsub::v1::RetryPolicy>(Arena*);
template<> ::google::pubsub::v1::SchemaSettings* Arena::CreateMaybeMessage<::google::pubsub::v1::SchemaSettings>(Arena*);
template<> ::google::pubsub::v1::SeekRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::SeekRequest>(Arena*);
template<> ::google::pubsub::v1::SeekResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::SeekResponse>(Arena*);
template<> ::google::pubsub::v1::Snapshot* Arena::CreateMaybeMessage<::google::pubsub::v1::Snapshot>(Arena*);
template<> ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::StreamingPullRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::StreamingPullRequest>(Arena*);
template<> ::google::pubsub::v1::StreamingPullResponse* Arena::CreateMaybeMessage<::google::pubsub::v1::StreamingPullResponse>(Arena*);
template<> ::google::pubsub::v1::Subscription* Arena::CreateMaybeMessage<::google::pubsub::v1::Subscription>(Arena*);
template<> ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::Topic* Arena::CreateMaybeMessage<::google::pubsub::v1::Topic>(Arena*);
template<> ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::pubsub::v1::Topic_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::pubsub::v1::UpdateSnapshotRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::UpdateSnapshotRequest>(Arena*);
template<> ::google::pubsub::v1::UpdateSubscriptionRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::UpdateSubscriptionRequest>(Arena*);
template<> ::google::pubsub::v1::UpdateTopicRequest* Arena::CreateMaybeMessage<::google::pubsub::v1::UpdateTopicRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace pubsub {
namespace v1 {

// ===================================================================

class MessageStoragePolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.MessageStoragePolicy) */ {
 public:
  MessageStoragePolicy();
  virtual ~MessageStoragePolicy();

  MessageStoragePolicy(const MessageStoragePolicy& from);

  inline MessageStoragePolicy& operator=(const MessageStoragePolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageStoragePolicy(MessageStoragePolicy&& from) noexcept
    : MessageStoragePolicy() {
    *this = ::std::move(from);
  }

  inline MessageStoragePolicy& operator=(MessageStoragePolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MessageStoragePolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageStoragePolicy* internal_default_instance() {
    return reinterpret_cast<const MessageStoragePolicy*>(
               &_MessageStoragePolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MessageStoragePolicy* other);
  void Swap(MessageStoragePolicy* other);
  friend void swap(MessageStoragePolicy& a, MessageStoragePolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageStoragePolicy* New() const final {
    return CreateMaybeMessage<MessageStoragePolicy>(nullptr);
  }

  MessageStoragePolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageStoragePolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageStoragePolicy& from);
  void MergeFrom(const MessageStoragePolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageStoragePolicy* other);
  protected:
  explicit MessageStoragePolicy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string allowed_persistence_regions = 1;
  int allowed_persistence_regions_size() const;
  void clear_allowed_persistence_regions();
  static const int kAllowedPersistenceRegionsFieldNumber = 1;
  const ::std::string& allowed_persistence_regions(int index) const;
  ::std::string* mutable_allowed_persistence_regions(int index);
  void set_allowed_persistence_regions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allowed_persistence_regions(int index, ::std::string&& value);
  #endif
  void set_allowed_persistence_regions(int index, const char* value);
  void set_allowed_persistence_regions(int index, const char* value, size_t size);
  ::std::string* add_allowed_persistence_regions();
  void add_allowed_persistence_regions(const ::std::string& value);
  #if LANG_CXX11
  void add_allowed_persistence_regions(::std::string&& value);
  #endif
  void add_allowed_persistence_regions(const char* value);
  void add_allowed_persistence_regions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allowed_persistence_regions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allowed_persistence_regions();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.MessageStoragePolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField<::std::string> allowed_persistence_regions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class SchemaSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SchemaSettings) */ {
 public:
  SchemaSettings();
  virtual ~SchemaSettings();

  SchemaSettings(const SchemaSettings& from);

  inline SchemaSettings& operator=(const SchemaSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SchemaSettings(SchemaSettings&& from) noexcept
    : SchemaSettings() {
    *this = ::std::move(from);
  }

  inline SchemaSettings& operator=(SchemaSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SchemaSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchemaSettings* internal_default_instance() {
    return reinterpret_cast<const SchemaSettings*>(
               &_SchemaSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(SchemaSettings* other);
  void Swap(SchemaSettings* other);
  friend void swap(SchemaSettings& a, SchemaSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchemaSettings* New() const final {
    return CreateMaybeMessage<SchemaSettings>(nullptr);
  }

  SchemaSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SchemaSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SchemaSettings& from);
  void MergeFrom(const SchemaSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchemaSettings* other);
  protected:
  explicit SchemaSettings(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_schema();
  static const int kSchemaFieldNumber = 1;
  const ::std::string& schema() const;
  void set_schema(const ::std::string& value);
  #if LANG_CXX11
  void set_schema(::std::string&& value);
  #endif
  void set_schema(const char* value);
  void set_schema(const char* value, size_t size);
  ::std::string* mutable_schema();
  ::std::string* release_schema();
  void set_allocated_schema(::std::string* schema);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_schema();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_schema(
      ::std::string* schema);

  // .google.pubsub.v1.Encoding encoding = 2;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::google::pubsub::v1::Encoding encoding() const;
  void set_encoding(::google::pubsub::v1::Encoding value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SchemaSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr schema_;
  int encoding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class Topic_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Topic_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Topic_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Topic_LabelsEntry_DoNotUse();
  Topic_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Topic_LabelsEntry_DoNotUse& other);
  static const Topic_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Topic_LabelsEntry_DoNotUse*>(&_Topic_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Topic final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Topic) */ {
 public:
  Topic();
  virtual ~Topic();

  Topic(const Topic& from);

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Topic(Topic&& from) noexcept
    : Topic() {
    *this = ::std::move(from);
  }

  inline Topic& operator=(Topic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Topic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Topic* internal_default_instance() {
    return reinterpret_cast<const Topic*>(
               &_Topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Topic* other);
  void Swap(Topic* other);
  friend void swap(Topic& a, Topic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Topic* New() const final {
    return CreateMaybeMessage<Topic>(nullptr);
  }

  Topic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Topic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Topic& from);
  void MergeFrom(const Topic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Topic* other);
  protected:
  explicit Topic(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string kms_key_name = 5;
  void clear_kms_key_name();
  static const int kKmsKeyNameFieldNumber = 5;
  const ::std::string& kms_key_name() const;
  void set_kms_key_name(const ::std::string& value);
  #if LANG_CXX11
  void set_kms_key_name(::std::string&& value);
  #endif
  void set_kms_key_name(const char* value);
  void set_kms_key_name(const char* value, size_t size);
  ::std::string* mutable_kms_key_name();
  ::std::string* release_kms_key_name();
  void set_allocated_kms_key_name(::std::string* kms_key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_kms_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kms_key_name(
      ::std::string* kms_key_name);

  // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
  bool has_message_storage_policy() const;
  void clear_message_storage_policy();
  static const int kMessageStoragePolicyFieldNumber = 3;
  const ::google::pubsub::v1::MessageStoragePolicy& message_storage_policy() const;
  ::google::pubsub::v1::MessageStoragePolicy* release_message_storage_policy();
  ::google::pubsub::v1::MessageStoragePolicy* mutable_message_storage_policy();
  void set_allocated_message_storage_policy(::google::pubsub::v1::MessageStoragePolicy* message_storage_policy);
  void unsafe_arena_set_allocated_message_storage_policy(
      ::google::pubsub::v1::MessageStoragePolicy* message_storage_policy);
  ::google::pubsub::v1::MessageStoragePolicy* unsafe_arena_release_message_storage_policy();

  // .google.pubsub.v1.SchemaSettings schema_settings = 6;
  bool has_schema_settings() const;
  void clear_schema_settings();
  static const int kSchemaSettingsFieldNumber = 6;
  const ::google::pubsub::v1::SchemaSettings& schema_settings() const;
  ::google::pubsub::v1::SchemaSettings* release_schema_settings();
  ::google::pubsub::v1::SchemaSettings* mutable_schema_settings();
  void set_allocated_schema_settings(::google::pubsub::v1::SchemaSettings* schema_settings);
  void unsafe_arena_set_allocated_schema_settings(
      ::google::pubsub::v1::SchemaSettings* schema_settings);
  ::google::pubsub::v1::SchemaSettings* unsafe_arena_release_schema_settings();

  // bool satisfies_pzs = 7;
  void clear_satisfies_pzs();
  static const int kSatisfiesPzsFieldNumber = 7;
  bool satisfies_pzs() const;
  void set_satisfies_pzs(bool value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Topic)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      Topic_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr kms_key_name_;
  ::google::pubsub::v1::MessageStoragePolicy* message_storage_policy_;
  ::google::pubsub::v1::SchemaSettings* schema_settings_;
  bool satisfies_pzs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PubsubMessage_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PubsubMessage_AttributesEntry_DoNotUse();
  PubsubMessage_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PubsubMessage_AttributesEntry_DoNotUse& other);
  static const PubsubMessage_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PubsubMessage_AttributesEntry_DoNotUse*>(&_PubsubMessage_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PubsubMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PubsubMessage) */ {
 public:
  PubsubMessage();
  virtual ~PubsubMessage();

  PubsubMessage(const PubsubMessage& from);

  inline PubsubMessage& operator=(const PubsubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PubsubMessage(PubsubMessage&& from) noexcept
    : PubsubMessage() {
    *this = ::std::move(from);
  }

  inline PubsubMessage& operator=(PubsubMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PubsubMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubsubMessage* internal_default_instance() {
    return reinterpret_cast<const PubsubMessage*>(
               &_PubsubMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(PubsubMessage* other);
  void Swap(PubsubMessage* other);
  friend void swap(PubsubMessage& a, PubsubMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PubsubMessage* New() const final {
    return CreateMaybeMessage<PubsubMessage>(nullptr);
  }

  PubsubMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PubsubMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PubsubMessage& from);
  void MergeFrom(const PubsubMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PubsubMessage* other);
  protected:
  explicit PubsubMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // string message_id = 3;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      ::std::string* message_id);

  // string ordering_key = 5;
  void clear_ordering_key();
  static const int kOrderingKeyFieldNumber = 5;
  const ::std::string& ordering_key() const;
  void set_ordering_key(const ::std::string& value);
  #if LANG_CXX11
  void set_ordering_key(::std::string&& value);
  #endif
  void set_ordering_key(const char* value);
  void set_ordering_key(const char* value, size_t size);
  ::std::string* mutable_ordering_key();
  ::std::string* release_ordering_key();
  void set_allocated_ordering_key(::std::string* ordering_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ordering_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordering_key(
      ::std::string* ordering_key);

  // .google.protobuf.Timestamp publish_time = 4;
  bool has_publish_time() const;
  void clear_publish_time();
  static const int kPublishTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& publish_time() const;
  ::google::protobuf::Timestamp* release_publish_time();
  ::google::protobuf::Timestamp* mutable_publish_time();
  void set_allocated_publish_time(::google::protobuf::Timestamp* publish_time);
  void unsafe_arena_set_allocated_publish_time(
      ::google::protobuf::Timestamp* publish_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_publish_time();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PubsubMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      PubsubMessage_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::internal::ArenaStringPtr ordering_key_;
  ::google::protobuf::Timestamp* publish_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class GetTopicRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetTopicRequest) */ {
 public:
  GetTopicRequest();
  virtual ~GetTopicRequest();

  GetTopicRequest(const GetTopicRequest& from);

  inline GetTopicRequest& operator=(const GetTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTopicRequest(GetTopicRequest&& from) noexcept
    : GetTopicRequest() {
    *this = ::std::move(from);
  }

  inline GetTopicRequest& operator=(GetTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTopicRequest* internal_default_instance() {
    return reinterpret_cast<const GetTopicRequest*>(
               &_GetTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(GetTopicRequest* other);
  void Swap(GetTopicRequest* other);
  friend void swap(GetTopicRequest& a, GetTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTopicRequest* New() const final {
    return CreateMaybeMessage<GetTopicRequest>(nullptr);
  }

  GetTopicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTopicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTopicRequest& from);
  void MergeFrom(const GetTopicRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTopicRequest* other);
  protected:
  explicit GetTopicRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetTopicRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class UpdateTopicRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateTopicRequest) */ {
 public:
  UpdateTopicRequest();
  virtual ~UpdateTopicRequest();

  UpdateTopicRequest(const UpdateTopicRequest& from);

  inline UpdateTopicRequest& operator=(const UpdateTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTopicRequest(UpdateTopicRequest&& from) noexcept
    : UpdateTopicRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTopicRequest& operator=(UpdateTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTopicRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTopicRequest*>(
               &_UpdateTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(UpdateTopicRequest* other);
  void Swap(UpdateTopicRequest* other);
  friend void swap(UpdateTopicRequest& a, UpdateTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTopicRequest* New() const final {
    return CreateMaybeMessage<UpdateTopicRequest>(nullptr);
  }

  UpdateTopicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTopicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTopicRequest& from);
  void MergeFrom(const UpdateTopicRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTopicRequest* other);
  protected:
  explicit UpdateTopicRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::google::pubsub::v1::Topic& topic() const;
  ::google::pubsub::v1::Topic* release_topic();
  ::google::pubsub::v1::Topic* mutable_topic();
  void set_allocated_topic(::google::pubsub::v1::Topic* topic);
  void unsafe_arena_set_allocated_topic(
      ::google::pubsub::v1::Topic* topic);
  ::google::pubsub::v1::Topic* unsafe_arena_release_topic();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateTopicRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::pubsub::v1::Topic* topic_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PublishRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PublishRequest) */ {
 public:
  PublishRequest();
  virtual ~PublishRequest();

  PublishRequest(const PublishRequest& from);

  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishRequest(PublishRequest&& from) noexcept
    : PublishRequest() {
    *this = ::std::move(from);
  }

  inline PublishRequest& operator=(PublishRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PublishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRequest*>(
               &_PublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(PublishRequest* other);
  void Swap(PublishRequest* other);
  friend void swap(PublishRequest& a, PublishRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishRequest* New() const final {
    return CreateMaybeMessage<PublishRequest>(nullptr);
  }

  PublishRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishRequest& from);
  void MergeFrom(const PublishRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRequest* other);
  protected:
  explicit PublishRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 2;
  ::google::pubsub::v1::PubsubMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >*
      mutable_messages();
  const ::google::pubsub::v1::PubsubMessage& messages(int index) const;
  ::google::pubsub::v1::PubsubMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >&
      messages() const;

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PublishRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage > messages_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PublishResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PublishResponse) */ {
 public:
  PublishResponse();
  virtual ~PublishResponse();

  PublishResponse(const PublishResponse& from);

  inline PublishResponse& operator=(const PublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishResponse(PublishResponse&& from) noexcept
    : PublishResponse() {
    *this = ::std::move(from);
  }

  inline PublishResponse& operator=(PublishResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PublishResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishResponse* internal_default_instance() {
    return reinterpret_cast<const PublishResponse*>(
               &_PublishResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(PublishResponse* other);
  void Swap(PublishResponse* other);
  friend void swap(PublishResponse& a, PublishResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishResponse* New() const final {
    return CreateMaybeMessage<PublishResponse>(nullptr);
  }

  PublishResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublishResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublishResponse& from);
  void MergeFrom(const PublishResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishResponse* other);
  protected:
  explicit PublishResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string message_ids = 1;
  int message_ids_size() const;
  void clear_message_ids();
  static const int kMessageIdsFieldNumber = 1;
  const ::std::string& message_ids(int index) const;
  ::std::string* mutable_message_ids(int index);
  void set_message_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_message_ids(int index, ::std::string&& value);
  #endif
  void set_message_ids(int index, const char* value);
  void set_message_ids(int index, const char* value, size_t size);
  ::std::string* add_message_ids();
  void add_message_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_message_ids(::std::string&& value);
  #endif
  void add_message_ids(const char* value);
  void add_message_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& message_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_message_ids();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PublishResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField<::std::string> message_ids_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicsRequest) */ {
 public:
  ListTopicsRequest();
  virtual ~ListTopicsRequest();

  ListTopicsRequest(const ListTopicsRequest& from);

  inline ListTopicsRequest& operator=(const ListTopicsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicsRequest(ListTopicsRequest&& from) noexcept
    : ListTopicsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicsRequest& operator=(ListTopicsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListTopicsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicsRequest*>(
               &_ListTopicsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(ListTopicsRequest* other);
  void Swap(ListTopicsRequest* other);
  friend void swap(ListTopicsRequest& a, ListTopicsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicsRequest* New() const final {
    return CreateMaybeMessage<ListTopicsRequest>(nullptr);
  }

  ListTopicsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTopicsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTopicsRequest& from);
  void MergeFrom(const ListTopicsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicsRequest* other);
  protected:
  explicit ListTopicsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project(
      ::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicsResponse) */ {
 public:
  ListTopicsResponse();
  virtual ~ListTopicsResponse();

  ListTopicsResponse(const ListTopicsResponse& from);

  inline ListTopicsResponse& operator=(const ListTopicsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicsResponse(ListTopicsResponse&& from) noexcept
    : ListTopicsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicsResponse& operator=(ListTopicsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListTopicsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicsResponse*>(
               &_ListTopicsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(ListTopicsResponse* other);
  void Swap(ListTopicsResponse* other);
  friend void swap(ListTopicsResponse& a, ListTopicsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicsResponse* New() const final {
    return CreateMaybeMessage<ListTopicsResponse>(nullptr);
  }

  ListTopicsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTopicsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTopicsResponse& from);
  void MergeFrom(const ListTopicsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicsResponse* other);
  protected:
  explicit ListTopicsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.Topic topics = 1;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 1;
  ::google::pubsub::v1::Topic* mutable_topics(int index);
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >*
      mutable_topics();
  const ::google::pubsub::v1::Topic& topics(int index) const;
  ::google::pubsub::v1::Topic* add_topics();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >&
      topics() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic > topics_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSubscriptionsRequest) */ {
 public:
  ListTopicSubscriptionsRequest();
  virtual ~ListTopicSubscriptionsRequest();

  ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from);

  inline ListTopicSubscriptionsRequest& operator=(const ListTopicSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSubscriptionsRequest(ListTopicSubscriptionsRequest&& from) noexcept
    : ListTopicSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsRequest& operator=(ListTopicSubscriptionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListTopicSubscriptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsRequest*>(
               &_ListTopicSubscriptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(ListTopicSubscriptionsRequest* other);
  void Swap(ListTopicSubscriptionsRequest* other);
  friend void swap(ListTopicSubscriptionsRequest& a, ListTopicSubscriptionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSubscriptionsRequest* New() const final {
    return CreateMaybeMessage<ListTopicSubscriptionsRequest>(nullptr);
  }

  ListTopicSubscriptionsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTopicSubscriptionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTopicSubscriptionsRequest& from);
  void MergeFrom(const ListTopicSubscriptionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSubscriptionsRequest* other);
  protected:
  explicit ListTopicSubscriptionsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSubscriptionsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSubscriptionsResponse) */ {
 public:
  ListTopicSubscriptionsResponse();
  virtual ~ListTopicSubscriptionsResponse();

  ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from);

  inline ListTopicSubscriptionsResponse& operator=(const ListTopicSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSubscriptionsResponse(ListTopicSubscriptionsResponse&& from) noexcept
    : ListTopicSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsResponse& operator=(ListTopicSubscriptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListTopicSubscriptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsResponse*>(
               &_ListTopicSubscriptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(ListTopicSubscriptionsResponse* other);
  void Swap(ListTopicSubscriptionsResponse* other);
  friend void swap(ListTopicSubscriptionsResponse& a, ListTopicSubscriptionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSubscriptionsResponse* New() const final {
    return CreateMaybeMessage<ListTopicSubscriptionsResponse>(nullptr);
  }

  ListTopicSubscriptionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTopicSubscriptionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTopicSubscriptionsResponse& from);
  void MergeFrom(const ListTopicSubscriptionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSubscriptionsResponse* other);
  protected:
  explicit ListTopicSubscriptionsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string subscriptions = 1 [(.google.api.resource_reference) = {
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  const ::std::string& subscriptions(int index) const;
  ::std::string* mutable_subscriptions(int index);
  void set_subscriptions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subscriptions(int index, ::std::string&& value);
  #endif
  void set_subscriptions(int index, const char* value);
  void set_subscriptions(int index, const char* value, size_t size);
  ::std::string* add_subscriptions();
  void add_subscriptions(const ::std::string& value);
  #if LANG_CXX11
  void add_subscriptions(::std::string&& value);
  #endif
  void add_subscriptions(const char* value);
  void add_subscriptions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& subscriptions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_subscriptions();

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSubscriptionsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField<::std::string> subscriptions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSnapshotsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSnapshotsRequest) */ {
 public:
  ListTopicSnapshotsRequest();
  virtual ~ListTopicSnapshotsRequest();

  ListTopicSnapshotsRequest(const ListTopicSnapshotsRequest& from);

  inline ListTopicSnapshotsRequest& operator=(const ListTopicSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSnapshotsRequest(ListTopicSnapshotsRequest&& from) noexcept
    : ListTopicSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicSnapshotsRequest& operator=(ListTopicSnapshotsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListTopicSnapshotsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicSnapshotsRequest*>(
               &_ListTopicSnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(ListTopicSnapshotsRequest* other);
  void Swap(ListTopicSnapshotsRequest* other);
  friend void swap(ListTopicSnapshotsRequest& a, ListTopicSnapshotsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSnapshotsRequest* New() const final {
    return CreateMaybeMessage<ListTopicSnapshotsRequest>(nullptr);
  }

  ListTopicSnapshotsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTopicSnapshotsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTopicSnapshotsRequest& from);
  void MergeFrom(const ListTopicSnapshotsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSnapshotsRequest* other);
  protected:
  explicit ListTopicSnapshotsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSnapshotsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListTopicSnapshotsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSnapshotsResponse) */ {
 public:
  ListTopicSnapshotsResponse();
  virtual ~ListTopicSnapshotsResponse();

  ListTopicSnapshotsResponse(const ListTopicSnapshotsResponse& from);

  inline ListTopicSnapshotsResponse& operator=(const ListTopicSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSnapshotsResponse(ListTopicSnapshotsResponse&& from) noexcept
    : ListTopicSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSnapshotsResponse& operator=(ListTopicSnapshotsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListTopicSnapshotsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSnapshotsResponse*>(
               &_ListTopicSnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(ListTopicSnapshotsResponse* other);
  void Swap(ListTopicSnapshotsResponse* other);
  friend void swap(ListTopicSnapshotsResponse& a, ListTopicSnapshotsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSnapshotsResponse* New() const final {
    return CreateMaybeMessage<ListTopicSnapshotsResponse>(nullptr);
  }

  ListTopicSnapshotsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTopicSnapshotsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTopicSnapshotsResponse& from);
  void MergeFrom(const ListTopicSnapshotsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSnapshotsResponse* other);
  protected:
  explicit ListTopicSnapshotsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string snapshots = 1;
  int snapshots_size() const;
  void clear_snapshots();
  static const int kSnapshotsFieldNumber = 1;
  const ::std::string& snapshots(int index) const;
  ::std::string* mutable_snapshots(int index);
  void set_snapshots(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_snapshots(int index, ::std::string&& value);
  #endif
  void set_snapshots(int index, const char* value);
  void set_snapshots(int index, const char* value, size_t size);
  ::std::string* add_snapshots();
  void add_snapshots(const ::std::string& value);
  #if LANG_CXX11
  void add_snapshots(::std::string&& value);
  #endif
  void add_snapshots(const char* value);
  void add_snapshots(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& snapshots() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_snapshots();

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSnapshotsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField<::std::string> snapshots_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeleteTopicRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteTopicRequest) */ {
 public:
  DeleteTopicRequest();
  virtual ~DeleteTopicRequest();

  DeleteTopicRequest(const DeleteTopicRequest& from);

  inline DeleteTopicRequest& operator=(const DeleteTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTopicRequest(DeleteTopicRequest&& from) noexcept
    : DeleteTopicRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTopicRequest& operator=(DeleteTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTopicRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTopicRequest*>(
               &_DeleteTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(DeleteTopicRequest* other);
  void Swap(DeleteTopicRequest* other);
  friend void swap(DeleteTopicRequest& a, DeleteTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTopicRequest* New() const final {
    return CreateMaybeMessage<DeleteTopicRequest>(nullptr);
  }

  DeleteTopicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTopicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteTopicRequest& from);
  void MergeFrom(const DeleteTopicRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTopicRequest* other);
  protected:
  explicit DeleteTopicRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteTopicRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DetachSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DetachSubscriptionRequest) */ {
 public:
  DetachSubscriptionRequest();
  virtual ~DetachSubscriptionRequest();

  DetachSubscriptionRequest(const DetachSubscriptionRequest& from);

  inline DetachSubscriptionRequest& operator=(const DetachSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetachSubscriptionRequest(DetachSubscriptionRequest&& from) noexcept
    : DetachSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline DetachSubscriptionRequest& operator=(DetachSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DetachSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetachSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const DetachSubscriptionRequest*>(
               &_DetachSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(DetachSubscriptionRequest* other);
  void Swap(DetachSubscriptionRequest* other);
  friend void swap(DetachSubscriptionRequest& a, DetachSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetachSubscriptionRequest* New() const final {
    return CreateMaybeMessage<DetachSubscriptionRequest>(nullptr);
  }

  DetachSubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetachSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetachSubscriptionRequest& from);
  void MergeFrom(const DetachSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetachSubscriptionRequest* other);
  protected:
  explicit DetachSubscriptionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DetachSubscriptionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DetachSubscriptionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DetachSubscriptionResponse) */ {
 public:
  DetachSubscriptionResponse();
  virtual ~DetachSubscriptionResponse();

  DetachSubscriptionResponse(const DetachSubscriptionResponse& from);

  inline DetachSubscriptionResponse& operator=(const DetachSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetachSubscriptionResponse(DetachSubscriptionResponse&& from) noexcept
    : DetachSubscriptionResponse() {
    *this = ::std::move(from);
  }

  inline DetachSubscriptionResponse& operator=(DetachSubscriptionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DetachSubscriptionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetachSubscriptionResponse* internal_default_instance() {
    return reinterpret_cast<const DetachSubscriptionResponse*>(
               &_DetachSubscriptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(DetachSubscriptionResponse* other);
  void Swap(DetachSubscriptionResponse* other);
  friend void swap(DetachSubscriptionResponse& a, DetachSubscriptionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetachSubscriptionResponse* New() const final {
    return CreateMaybeMessage<DetachSubscriptionResponse>(nullptr);
  }

  DetachSubscriptionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetachSubscriptionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetachSubscriptionResponse& from);
  void MergeFrom(const DetachSubscriptionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetachSubscriptionResponse* other);
  protected:
  explicit DetachSubscriptionResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DetachSubscriptionResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class Subscription_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Subscription_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Subscription_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Subscription_LabelsEntry_DoNotUse();
  Subscription_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Subscription_LabelsEntry_DoNotUse& other);
  static const Subscription_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Subscription_LabelsEntry_DoNotUse*>(&_Subscription_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Subscription final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Subscription) */ {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(Subscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Subscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(Subscription* other);
  void Swap(Subscription* other);
  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscription* New() const final {
    return CreateMaybeMessage<Subscription>(nullptr);
  }

  Subscription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscription* other);
  protected:
  explicit Subscription(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 9;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // string filter = 12;
  void clear_filter();
  static const int kFilterFieldNumber = 12;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_filter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter(
      ::std::string* filter);

  // .google.pubsub.v1.PushConfig push_config = 4;
  bool has_push_config() const;
  void clear_push_config();
  static const int kPushConfigFieldNumber = 4;
  const ::google::pubsub::v1::PushConfig& push_config() const;
  ::google::pubsub::v1::PushConfig* release_push_config();
  ::google::pubsub::v1::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config);
  void unsafe_arena_set_allocated_push_config(
      ::google::pubsub::v1::PushConfig* push_config);
  ::google::pubsub::v1::PushConfig* unsafe_arena_release_push_config();

  // .google.protobuf.Duration message_retention_duration = 8;
  bool has_message_retention_duration() const;
  void clear_message_retention_duration();
  static const int kMessageRetentionDurationFieldNumber = 8;
  const ::google::protobuf::Duration& message_retention_duration() const;
  ::google::protobuf::Duration* release_message_retention_duration();
  ::google::protobuf::Duration* mutable_message_retention_duration();
  void set_allocated_message_retention_duration(::google::protobuf::Duration* message_retention_duration);
  void unsafe_arena_set_allocated_message_retention_duration(
      ::google::protobuf::Duration* message_retention_duration);
  ::google::protobuf::Duration* unsafe_arena_release_message_retention_duration();

  // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
  bool has_expiration_policy() const;
  void clear_expiration_policy();
  static const int kExpirationPolicyFieldNumber = 11;
  const ::google::pubsub::v1::ExpirationPolicy& expiration_policy() const;
  ::google::pubsub::v1::ExpirationPolicy* release_expiration_policy();
  ::google::pubsub::v1::ExpirationPolicy* mutable_expiration_policy();
  void set_allocated_expiration_policy(::google::pubsub::v1::ExpirationPolicy* expiration_policy);
  void unsafe_arena_set_allocated_expiration_policy(
      ::google::pubsub::v1::ExpirationPolicy* expiration_policy);
  ::google::pubsub::v1::ExpirationPolicy* unsafe_arena_release_expiration_policy();

  // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
  bool has_dead_letter_policy() const;
  void clear_dead_letter_policy();
  static const int kDeadLetterPolicyFieldNumber = 13;
  const ::google::pubsub::v1::DeadLetterPolicy& dead_letter_policy() const;
  ::google::pubsub::v1::DeadLetterPolicy* release_dead_letter_policy();
  ::google::pubsub::v1::DeadLetterPolicy* mutable_dead_letter_policy();
  void set_allocated_dead_letter_policy(::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy);
  void unsafe_arena_set_allocated_dead_letter_policy(
      ::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy);
  ::google::pubsub::v1::DeadLetterPolicy* unsafe_arena_release_dead_letter_policy();

  // .google.pubsub.v1.RetryPolicy retry_policy = 14;
  bool has_retry_policy() const;
  void clear_retry_policy();
  static const int kRetryPolicyFieldNumber = 14;
  const ::google::pubsub::v1::RetryPolicy& retry_policy() const;
  ::google::pubsub::v1::RetryPolicy* release_retry_policy();
  ::google::pubsub::v1::RetryPolicy* mutable_retry_policy();
  void set_allocated_retry_policy(::google::pubsub::v1::RetryPolicy* retry_policy);
  void unsafe_arena_set_allocated_retry_policy(
      ::google::pubsub::v1::RetryPolicy* retry_policy);
  ::google::pubsub::v1::RetryPolicy* unsafe_arena_release_retry_policy();

  // int32 ack_deadline_seconds = 5;
  void clear_ack_deadline_seconds();
  static const int kAckDeadlineSecondsFieldNumber = 5;
  ::google::protobuf::int32 ack_deadline_seconds() const;
  void set_ack_deadline_seconds(::google::protobuf::int32 value);

  // bool retain_acked_messages = 7;
  void clear_retain_acked_messages();
  static const int kRetainAckedMessagesFieldNumber = 7;
  bool retain_acked_messages() const;
  void set_retain_acked_messages(bool value);

  // bool enable_message_ordering = 10;
  void clear_enable_message_ordering();
  static const int kEnableMessageOrderingFieldNumber = 10;
  bool enable_message_ordering() const;
  void set_enable_message_ordering(bool value);

  // bool detached = 15;
  void clear_detached();
  static const int kDetachedFieldNumber = 15;
  bool detached() const;
  void set_detached(bool value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Subscription)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      Subscription_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::pubsub::v1::PushConfig* push_config_;
  ::google::protobuf::Duration* message_retention_duration_;
  ::google::pubsub::v1::ExpirationPolicy* expiration_policy_;
  ::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy_;
  ::google::pubsub::v1::RetryPolicy* retry_policy_;
  ::google::protobuf::int32 ack_deadline_seconds_;
  bool retain_acked_messages_;
  bool enable_message_ordering_;
  bool detached_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class RetryPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.RetryPolicy) */ {
 public:
  RetryPolicy();
  virtual ~RetryPolicy();

  RetryPolicy(const RetryPolicy& from);

  inline RetryPolicy& operator=(const RetryPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RetryPolicy(RetryPolicy&& from) noexcept
    : RetryPolicy() {
    *this = ::std::move(from);
  }

  inline RetryPolicy& operator=(RetryPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RetryPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetryPolicy* internal_default_instance() {
    return reinterpret_cast<const RetryPolicy*>(
               &_RetryPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(RetryPolicy* other);
  void Swap(RetryPolicy* other);
  friend void swap(RetryPolicy& a, RetryPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RetryPolicy* New() const final {
    return CreateMaybeMessage<RetryPolicy>(nullptr);
  }

  RetryPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RetryPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RetryPolicy& from);
  void MergeFrom(const RetryPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetryPolicy* other);
  protected:
  explicit RetryPolicy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration minimum_backoff = 1;
  bool has_minimum_backoff() const;
  void clear_minimum_backoff();
  static const int kMinimumBackoffFieldNumber = 1;
  const ::google::protobuf::Duration& minimum_backoff() const;
  ::google::protobuf::Duration* release_minimum_backoff();
  ::google::protobuf::Duration* mutable_minimum_backoff();
  void set_allocated_minimum_backoff(::google::protobuf::Duration* minimum_backoff);
  void unsafe_arena_set_allocated_minimum_backoff(
      ::google::protobuf::Duration* minimum_backoff);
  ::google::protobuf::Duration* unsafe_arena_release_minimum_backoff();

  // .google.protobuf.Duration maximum_backoff = 2;
  bool has_maximum_backoff() const;
  void clear_maximum_backoff();
  static const int kMaximumBackoffFieldNumber = 2;
  const ::google::protobuf::Duration& maximum_backoff() const;
  ::google::protobuf::Duration* release_maximum_backoff();
  ::google::protobuf::Duration* mutable_maximum_backoff();
  void set_allocated_maximum_backoff(::google::protobuf::Duration* maximum_backoff);
  void unsafe_arena_set_allocated_maximum_backoff(
      ::google::protobuf::Duration* maximum_backoff);
  ::google::protobuf::Duration* unsafe_arena_release_maximum_backoff();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.RetryPolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::Duration* minimum_backoff_;
  ::google::protobuf::Duration* maximum_backoff_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeadLetterPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeadLetterPolicy) */ {
 public:
  DeadLetterPolicy();
  virtual ~DeadLetterPolicy();

  DeadLetterPolicy(const DeadLetterPolicy& from);

  inline DeadLetterPolicy& operator=(const DeadLetterPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeadLetterPolicy(DeadLetterPolicy&& from) noexcept
    : DeadLetterPolicy() {
    *this = ::std::move(from);
  }

  inline DeadLetterPolicy& operator=(DeadLetterPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeadLetterPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeadLetterPolicy* internal_default_instance() {
    return reinterpret_cast<const DeadLetterPolicy*>(
               &_DeadLetterPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(DeadLetterPolicy* other);
  void Swap(DeadLetterPolicy* other);
  friend void swap(DeadLetterPolicy& a, DeadLetterPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeadLetterPolicy* New() const final {
    return CreateMaybeMessage<DeadLetterPolicy>(nullptr);
  }

  DeadLetterPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeadLetterPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeadLetterPolicy& from);
  void MergeFrom(const DeadLetterPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeadLetterPolicy* other);
  protected:
  explicit DeadLetterPolicy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dead_letter_topic = 1;
  void clear_dead_letter_topic();
  static const int kDeadLetterTopicFieldNumber = 1;
  const ::std::string& dead_letter_topic() const;
  void set_dead_letter_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_dead_letter_topic(::std::string&& value);
  #endif
  void set_dead_letter_topic(const char* value);
  void set_dead_letter_topic(const char* value, size_t size);
  ::std::string* mutable_dead_letter_topic();
  ::std::string* release_dead_letter_topic();
  void set_allocated_dead_letter_topic(::std::string* dead_letter_topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_dead_letter_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dead_letter_topic(
      ::std::string* dead_letter_topic);

  // int32 max_delivery_attempts = 2;
  void clear_max_delivery_attempts();
  static const int kMaxDeliveryAttemptsFieldNumber = 2;
  ::google::protobuf::int32 max_delivery_attempts() const;
  void set_max_delivery_attempts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeadLetterPolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr dead_letter_topic_;
  ::google::protobuf::int32 max_delivery_attempts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ExpirationPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ExpirationPolicy) */ {
 public:
  ExpirationPolicy();
  virtual ~ExpirationPolicy();

  ExpirationPolicy(const ExpirationPolicy& from);

  inline ExpirationPolicy& operator=(const ExpirationPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExpirationPolicy(ExpirationPolicy&& from) noexcept
    : ExpirationPolicy() {
    *this = ::std::move(from);
  }

  inline ExpirationPolicy& operator=(ExpirationPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExpirationPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpirationPolicy* internal_default_instance() {
    return reinterpret_cast<const ExpirationPolicy*>(
               &_ExpirationPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(ExpirationPolicy* other);
  void Swap(ExpirationPolicy* other);
  friend void swap(ExpirationPolicy& a, ExpirationPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExpirationPolicy* New() const final {
    return CreateMaybeMessage<ExpirationPolicy>(nullptr);
  }

  ExpirationPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExpirationPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExpirationPolicy& from);
  void MergeFrom(const ExpirationPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpirationPolicy* other);
  protected:
  explicit ExpirationPolicy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration ttl = 1;
  bool has_ttl() const;
  void clear_ttl();
  static const int kTtlFieldNumber = 1;
  const ::google::protobuf::Duration& ttl() const;
  ::google::protobuf::Duration* release_ttl();
  ::google::protobuf::Duration* mutable_ttl();
  void set_allocated_ttl(::google::protobuf::Duration* ttl);
  void unsafe_arena_set_allocated_ttl(
      ::google::protobuf::Duration* ttl);
  ::google::protobuf::Duration* unsafe_arena_release_ttl();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ExpirationPolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::Duration* ttl_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PushConfig_OidcToken final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PushConfig.OidcToken) */ {
 public:
  PushConfig_OidcToken();
  virtual ~PushConfig_OidcToken();

  PushConfig_OidcToken(const PushConfig_OidcToken& from);

  inline PushConfig_OidcToken& operator=(const PushConfig_OidcToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushConfig_OidcToken(PushConfig_OidcToken&& from) noexcept
    : PushConfig_OidcToken() {
    *this = ::std::move(from);
  }

  inline PushConfig_OidcToken& operator=(PushConfig_OidcToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PushConfig_OidcToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushConfig_OidcToken* internal_default_instance() {
    return reinterpret_cast<const PushConfig_OidcToken*>(
               &_PushConfig_OidcToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(PushConfig_OidcToken* other);
  void Swap(PushConfig_OidcToken* other);
  friend void swap(PushConfig_OidcToken& a, PushConfig_OidcToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushConfig_OidcToken* New() const final {
    return CreateMaybeMessage<PushConfig_OidcToken>(nullptr);
  }

  PushConfig_OidcToken* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushConfig_OidcToken>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushConfig_OidcToken& from);
  void MergeFrom(const PushConfig_OidcToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushConfig_OidcToken* other);
  protected:
  explicit PushConfig_OidcToken(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_account_email = 1;
  void clear_service_account_email();
  static const int kServiceAccountEmailFieldNumber = 1;
  const ::std::string& service_account_email() const;
  void set_service_account_email(const ::std::string& value);
  #if LANG_CXX11
  void set_service_account_email(::std::string&& value);
  #endif
  void set_service_account_email(const char* value);
  void set_service_account_email(const char* value, size_t size);
  ::std::string* mutable_service_account_email();
  ::std::string* release_service_account_email();
  void set_allocated_service_account_email(::std::string* service_account_email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_service_account_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_account_email(
      ::std::string* service_account_email);

  // string audience = 2;
  void clear_audience();
  static const int kAudienceFieldNumber = 2;
  const ::std::string& audience() const;
  void set_audience(const ::std::string& value);
  #if LANG_CXX11
  void set_audience(::std::string&& value);
  #endif
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  ::std::string* mutable_audience();
  ::std::string* release_audience();
  void set_allocated_audience(::std::string* audience);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_audience();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audience(
      ::std::string* audience);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PushConfig.OidcToken)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr service_account_email_;
  ::google::protobuf::internal::ArenaStringPtr audience_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PushConfig_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PushConfig_AttributesEntry_DoNotUse();
  PushConfig_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PushConfig_AttributesEntry_DoNotUse& other);
  static const PushConfig_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PushConfig_AttributesEntry_DoNotUse*>(&_PushConfig_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PushConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PushConfig) */ {
 public:
  PushConfig();
  virtual ~PushConfig();

  PushConfig(const PushConfig& from);

  inline PushConfig& operator=(const PushConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushConfig(PushConfig&& from) noexcept
    : PushConfig() {
    *this = ::std::move(from);
  }

  inline PushConfig& operator=(PushConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PushConfig& default_instance();

  enum AuthenticationMethodCase {
    kOidcToken = 3,
    AUTHENTICATION_METHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushConfig* internal_default_instance() {
    return reinterpret_cast<const PushConfig*>(
               &_PushConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(PushConfig* other);
  void Swap(PushConfig* other);
  friend void swap(PushConfig& a, PushConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushConfig* New() const final {
    return CreateMaybeMessage<PushConfig>(nullptr);
  }

  PushConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushConfig& from);
  void MergeFrom(const PushConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushConfig* other);
  protected:
  explicit PushConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PushConfig_OidcToken OidcToken;

  // accessors -------------------------------------------------------

  // map<string, string> attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // string push_endpoint = 1;
  void clear_push_endpoint();
  static const int kPushEndpointFieldNumber = 1;
  const ::std::string& push_endpoint() const;
  void set_push_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_push_endpoint(::std::string&& value);
  #endif
  void set_push_endpoint(const char* value);
  void set_push_endpoint(const char* value, size_t size);
  ::std::string* mutable_push_endpoint();
  ::std::string* release_push_endpoint();
  void set_allocated_push_endpoint(::std::string* push_endpoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_push_endpoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_push_endpoint(
      ::std::string* push_endpoint);

  // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
  bool has_oidc_token() const;
  void clear_oidc_token();
  static const int kOidcTokenFieldNumber = 3;
  const ::google::pubsub::v1::PushConfig_OidcToken& oidc_token() const;
  ::google::pubsub::v1::PushConfig_OidcToken* release_oidc_token();
  ::google::pubsub::v1::PushConfig_OidcToken* mutable_oidc_token();
  void set_allocated_oidc_token(::google::pubsub::v1::PushConfig_OidcToken* oidc_token);
  void unsafe_arena_set_allocated_oidc_token(
      ::google::pubsub::v1::PushConfig_OidcToken* oidc_token);
  ::google::pubsub::v1::PushConfig_OidcToken* unsafe_arena_release_oidc_token();

  void clear_authentication_method();
  AuthenticationMethodCase authentication_method_case() const;
  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PushConfig)
 private:
  class HasBitSetters;
  void set_has_oidc_token();

  inline bool has_authentication_method() const;
  inline void clear_has_authentication_method();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      PushConfig_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::google::protobuf::internal::ArenaStringPtr push_endpoint_;
  union AuthenticationMethodUnion {
    AuthenticationMethodUnion() {}
    ::google::pubsub::v1::PushConfig_OidcToken* oidc_token_;
  } authentication_method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ReceivedMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ReceivedMessage) */ {
 public:
  ReceivedMessage();
  virtual ~ReceivedMessage();

  ReceivedMessage(const ReceivedMessage& from);

  inline ReceivedMessage& operator=(const ReceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceivedMessage(ReceivedMessage&& from) noexcept
    : ReceivedMessage() {
    *this = ::std::move(from);
  }

  inline ReceivedMessage& operator=(ReceivedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReceivedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedMessage* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessage*>(
               &_ReceivedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(ReceivedMessage* other);
  void Swap(ReceivedMessage* other);
  friend void swap(ReceivedMessage& a, ReceivedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceivedMessage* New() const final {
    return CreateMaybeMessage<ReceivedMessage>(nullptr);
  }

  ReceivedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReceivedMessage& from);
  void MergeFrom(const ReceivedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedMessage* other);
  protected:
  explicit ReceivedMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ack_id = 1;
  void clear_ack_id();
  static const int kAckIdFieldNumber = 1;
  const ::std::string& ack_id() const;
  void set_ack_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ack_id(::std::string&& value);
  #endif
  void set_ack_id(const char* value);
  void set_ack_id(const char* value, size_t size);
  ::std::string* mutable_ack_id();
  ::std::string* release_ack_id();
  void set_allocated_ack_id(::std::string* ack_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ack_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ack_id(
      ::std::string* ack_id);

  // .google.pubsub.v1.PubsubMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::google::pubsub::v1::PubsubMessage& message() const;
  ::google::pubsub::v1::PubsubMessage* release_message();
  ::google::pubsub::v1::PubsubMessage* mutable_message();
  void set_allocated_message(::google::pubsub::v1::PubsubMessage* message);
  void unsafe_arena_set_allocated_message(
      ::google::pubsub::v1::PubsubMessage* message);
  ::google::pubsub::v1::PubsubMessage* unsafe_arena_release_message();

  // int32 delivery_attempt = 3;
  void clear_delivery_attempt();
  static const int kDeliveryAttemptFieldNumber = 3;
  ::google::protobuf::int32 delivery_attempt() const;
  void set_delivery_attempt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ReceivedMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ack_id_;
  ::google::pubsub::v1::PubsubMessage* message_;
  ::google::protobuf::int32 delivery_attempt_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class GetSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetSubscriptionRequest) */ {
 public:
  GetSubscriptionRequest();
  virtual ~GetSubscriptionRequest();

  GetSubscriptionRequest(const GetSubscriptionRequest& from);

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSubscriptionRequest(GetSubscriptionRequest&& from) noexcept
    : GetSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionRequest& operator=(GetSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionRequest*>(
               &_GetSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(GetSubscriptionRequest* other);
  void Swap(GetSubscriptionRequest* other);
  friend void swap(GetSubscriptionRequest& a, GetSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSubscriptionRequest* New() const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(nullptr);
  }

  GetSubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSubscriptionRequest& from);
  void MergeFrom(const GetSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSubscriptionRequest* other);
  protected:
  explicit GetSubscriptionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetSubscriptionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class UpdateSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateSubscriptionRequest) */ {
 public:
  UpdateSubscriptionRequest();
  virtual ~UpdateSubscriptionRequest();

  UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from);

  inline UpdateSubscriptionRequest& operator=(const UpdateSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSubscriptionRequest(UpdateSubscriptionRequest&& from) noexcept
    : UpdateSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSubscriptionRequest& operator=(UpdateSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSubscriptionRequest*>(
               &_UpdateSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void UnsafeArenaSwap(UpdateSubscriptionRequest* other);
  void Swap(UpdateSubscriptionRequest* other);
  friend void swap(UpdateSubscriptionRequest& a, UpdateSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSubscriptionRequest* New() const final {
    return CreateMaybeMessage<UpdateSubscriptionRequest>(nullptr);
  }

  UpdateSubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateSubscriptionRequest& from);
  void MergeFrom(const UpdateSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSubscriptionRequest* other);
  protected:
  explicit UpdateSubscriptionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_subscription() const;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::google::pubsub::v1::Subscription& subscription() const;
  ::google::pubsub::v1::Subscription* release_subscription();
  ::google::pubsub::v1::Subscription* mutable_subscription();
  void set_allocated_subscription(::google::pubsub::v1::Subscription* subscription);
  void unsafe_arena_set_allocated_subscription(
      ::google::pubsub::v1::Subscription* subscription);
  ::google::pubsub::v1::Subscription* unsafe_arena_release_subscription();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateSubscriptionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::pubsub::v1::Subscription* subscription_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSubscriptionsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSubscriptionsRequest) */ {
 public:
  ListSubscriptionsRequest();
  virtual ~ListSubscriptionsRequest();

  ListSubscriptionsRequest(const ListSubscriptionsRequest& from);

  inline ListSubscriptionsRequest& operator=(const ListSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSubscriptionsRequest(ListSubscriptionsRequest&& from) noexcept
    : ListSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsRequest& operator=(ListSubscriptionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListSubscriptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsRequest*>(
               &_ListSubscriptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void UnsafeArenaSwap(ListSubscriptionsRequest* other);
  void Swap(ListSubscriptionsRequest* other);
  friend void swap(ListSubscriptionsRequest& a, ListSubscriptionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSubscriptionsRequest* New() const final {
    return CreateMaybeMessage<ListSubscriptionsRequest>(nullptr);
  }

  ListSubscriptionsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListSubscriptionsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListSubscriptionsRequest& from);
  void MergeFrom(const ListSubscriptionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubscriptionsRequest* other);
  protected:
  explicit ListSubscriptionsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project(
      ::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSubscriptionsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSubscriptionsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSubscriptionsResponse) */ {
 public:
  ListSubscriptionsResponse();
  virtual ~ListSubscriptionsResponse();

  ListSubscriptionsResponse(const ListSubscriptionsResponse& from);

  inline ListSubscriptionsResponse& operator=(const ListSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSubscriptionsResponse(ListSubscriptionsResponse&& from) noexcept
    : ListSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsResponse& operator=(ListSubscriptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListSubscriptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsResponse*>(
               &_ListSubscriptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void UnsafeArenaSwap(ListSubscriptionsResponse* other);
  void Swap(ListSubscriptionsResponse* other);
  friend void swap(ListSubscriptionsResponse& a, ListSubscriptionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSubscriptionsResponse* New() const final {
    return CreateMaybeMessage<ListSubscriptionsResponse>(nullptr);
  }

  ListSubscriptionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListSubscriptionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListSubscriptionsResponse& from);
  void MergeFrom(const ListSubscriptionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSubscriptionsResponse* other);
  protected:
  explicit ListSubscriptionsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  ::google::pubsub::v1::Subscription* mutable_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >*
      mutable_subscriptions();
  const ::google::pubsub::v1::Subscription& subscriptions(int index) const;
  ::google::pubsub::v1::Subscription* add_subscriptions();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >&
      subscriptions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSubscriptionsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription > subscriptions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeleteSubscriptionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteSubscriptionRequest) */ {
 public:
  DeleteSubscriptionRequest();
  virtual ~DeleteSubscriptionRequest();

  DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from);

  inline DeleteSubscriptionRequest& operator=(const DeleteSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSubscriptionRequest(DeleteSubscriptionRequest&& from) noexcept
    : DeleteSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSubscriptionRequest& operator=(DeleteSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSubscriptionRequest*>(
               &_DeleteSubscriptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void UnsafeArenaSwap(DeleteSubscriptionRequest* other);
  void Swap(DeleteSubscriptionRequest* other);
  friend void swap(DeleteSubscriptionRequest& a, DeleteSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubscriptionRequest* New() const final {
    return CreateMaybeMessage<DeleteSubscriptionRequest>(nullptr);
  }

  DeleteSubscriptionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSubscriptionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSubscriptionRequest& from);
  void MergeFrom(const DeleteSubscriptionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSubscriptionRequest* other);
  protected:
  explicit DeleteSubscriptionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteSubscriptionRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ModifyPushConfigRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ModifyPushConfigRequest) */ {
 public:
  ModifyPushConfigRequest();
  virtual ~ModifyPushConfigRequest();

  ModifyPushConfigRequest(const ModifyPushConfigRequest& from);

  inline ModifyPushConfigRequest& operator=(const ModifyPushConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyPushConfigRequest(ModifyPushConfigRequest&& from) noexcept
    : ModifyPushConfigRequest() {
    *this = ::std::move(from);
  }

  inline ModifyPushConfigRequest& operator=(ModifyPushConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ModifyPushConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyPushConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyPushConfigRequest*>(
               &_ModifyPushConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void UnsafeArenaSwap(ModifyPushConfigRequest* other);
  void Swap(ModifyPushConfigRequest* other);
  friend void swap(ModifyPushConfigRequest& a, ModifyPushConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyPushConfigRequest* New() const final {
    return CreateMaybeMessage<ModifyPushConfigRequest>(nullptr);
  }

  ModifyPushConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModifyPushConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModifyPushConfigRequest& from);
  void MergeFrom(const ModifyPushConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyPushConfigRequest* other);
  protected:
  explicit ModifyPushConfigRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_push_config() const;
  void clear_push_config();
  static const int kPushConfigFieldNumber = 2;
  const ::google::pubsub::v1::PushConfig& push_config() const;
  ::google::pubsub::v1::PushConfig* release_push_config();
  ::google::pubsub::v1::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config);
  void unsafe_arena_set_allocated_push_config(
      ::google::pubsub::v1::PushConfig* push_config);
  ::google::pubsub::v1::PushConfig* unsafe_arena_release_push_config();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ModifyPushConfigRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::pubsub::v1::PushConfig* push_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PullRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PullRequest) */ {
 public:
  PullRequest();
  virtual ~PullRequest();

  PullRequest(const PullRequest& from);

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void UnsafeArenaSwap(PullRequest* other);
  void Swap(PullRequest* other);
  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullRequest* New() const final {
    return CreateMaybeMessage<PullRequest>(nullptr);
  }

  PullRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PullRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PullRequest& from);
  void MergeFrom(const PullRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRequest* other);
  protected:
  explicit PullRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
  PROTOBUF_DEPRECATED void clear_return_immediately();
  PROTOBUF_DEPRECATED static const int kReturnImmediatelyFieldNumber = 2;
  PROTOBUF_DEPRECATED bool return_immediately() const;
  PROTOBUF_DEPRECATED void set_return_immediately(bool value);

  // int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_max_messages();
  static const int kMaxMessagesFieldNumber = 3;
  ::google::protobuf::int32 max_messages() const;
  void set_max_messages(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PullRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  bool return_immediately_;
  ::google::protobuf::int32 max_messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class PullResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PullResponse) */ {
 public:
  PullResponse();
  virtual ~PullResponse();

  PullResponse(const PullResponse& from);

  inline PullResponse& operator=(const PullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullResponse(PullResponse&& from) noexcept
    : PullResponse() {
    *this = ::std::move(from);
  }

  inline PullResponse& operator=(PullResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PullResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullResponse* internal_default_instance() {
    return reinterpret_cast<const PullResponse*>(
               &_PullResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void UnsafeArenaSwap(PullResponse* other);
  void Swap(PullResponse* other);
  friend void swap(PullResponse& a, PullResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullResponse* New() const final {
    return CreateMaybeMessage<PullResponse>(nullptr);
  }

  PullResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PullResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PullResponse& from);
  void MergeFrom(const PullResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullResponse* other);
  protected:
  explicit PullResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  int received_messages_size() const;
  void clear_received_messages();
  static const int kReceivedMessagesFieldNumber = 1;
  ::google::pubsub::v1::ReceivedMessage* mutable_received_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
      mutable_received_messages();
  const ::google::pubsub::v1::ReceivedMessage& received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* add_received_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
      received_messages() const;

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PullResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage > received_messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ModifyAckDeadlineRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ModifyAckDeadlineRequest) */ {
 public:
  ModifyAckDeadlineRequest();
  virtual ~ModifyAckDeadlineRequest();

  ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from);

  inline ModifyAckDeadlineRequest& operator=(const ModifyAckDeadlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyAckDeadlineRequest(ModifyAckDeadlineRequest&& from) noexcept
    : ModifyAckDeadlineRequest() {
    *this = ::std::move(from);
  }

  inline ModifyAckDeadlineRequest& operator=(ModifyAckDeadlineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ModifyAckDeadlineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyAckDeadlineRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyAckDeadlineRequest*>(
               &_ModifyAckDeadlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void UnsafeArenaSwap(ModifyAckDeadlineRequest* other);
  void Swap(ModifyAckDeadlineRequest* other);
  friend void swap(ModifyAckDeadlineRequest& a, ModifyAckDeadlineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyAckDeadlineRequest* New() const final {
    return CreateMaybeMessage<ModifyAckDeadlineRequest>(nullptr);
  }

  ModifyAckDeadlineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModifyAckDeadlineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModifyAckDeadlineRequest& from);
  void MergeFrom(const ModifyAckDeadlineRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyAckDeadlineRequest* other);
  protected:
  explicit ModifyAckDeadlineRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
  int ack_ids_size() const;
  void clear_ack_ids();
  static const int kAckIdsFieldNumber = 4;
  const ::std::string& ack_ids(int index) const;
  ::std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ack_ids(int index, ::std::string&& value);
  #endif
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_ack_ids();
  void add_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ack_ids(::std::string&& value);
  #endif
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& ack_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_ack_ids();

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_ack_deadline_seconds();
  static const int kAckDeadlineSecondsFieldNumber = 3;
  ::google::protobuf::int32 ack_deadline_seconds() const;
  void set_ack_deadline_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ModifyAckDeadlineRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField<::std::string> ack_ids_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::protobuf::int32 ack_deadline_seconds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class AcknowledgeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.AcknowledgeRequest) */ {
 public:
  AcknowledgeRequest();
  virtual ~AcknowledgeRequest();

  AcknowledgeRequest(const AcknowledgeRequest& from);

  inline AcknowledgeRequest& operator=(const AcknowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcknowledgeRequest(AcknowledgeRequest&& from) noexcept
    : AcknowledgeRequest() {
    *this = ::std::move(from);
  }

  inline AcknowledgeRequest& operator=(AcknowledgeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AcknowledgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcknowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const AcknowledgeRequest*>(
               &_AcknowledgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void UnsafeArenaSwap(AcknowledgeRequest* other);
  void Swap(AcknowledgeRequest* other);
  friend void swap(AcknowledgeRequest& a, AcknowledgeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcknowledgeRequest* New() const final {
    return CreateMaybeMessage<AcknowledgeRequest>(nullptr);
  }

  AcknowledgeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AcknowledgeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AcknowledgeRequest& from);
  void MergeFrom(const AcknowledgeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcknowledgeRequest* other);
  protected:
  explicit AcknowledgeRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
  int ack_ids_size() const;
  void clear_ack_ids();
  static const int kAckIdsFieldNumber = 2;
  const ::std::string& ack_ids(int index) const;
  ::std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ack_ids(int index, ::std::string&& value);
  #endif
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_ack_ids();
  void add_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ack_ids(::std::string&& value);
  #endif
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& ack_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_ack_ids();

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.AcknowledgeRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField<::std::string> ack_ids_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class StreamingPullRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullRequest) */ {
 public:
  StreamingPullRequest();
  virtual ~StreamingPullRequest();

  StreamingPullRequest(const StreamingPullRequest& from);

  inline StreamingPullRequest& operator=(const StreamingPullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamingPullRequest(StreamingPullRequest&& from) noexcept
    : StreamingPullRequest() {
    *this = ::std::move(from);
  }

  inline StreamingPullRequest& operator=(StreamingPullRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StreamingPullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingPullRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingPullRequest*>(
               &_StreamingPullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void UnsafeArenaSwap(StreamingPullRequest* other);
  void Swap(StreamingPullRequest* other);
  friend void swap(StreamingPullRequest& a, StreamingPullRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamingPullRequest* New() const final {
    return CreateMaybeMessage<StreamingPullRequest>(nullptr);
  }

  StreamingPullRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamingPullRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamingPullRequest& from);
  void MergeFrom(const StreamingPullRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingPullRequest* other);
  protected:
  explicit StreamingPullRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ack_ids = 2;
  int ack_ids_size() const;
  void clear_ack_ids();
  static const int kAckIdsFieldNumber = 2;
  const ::std::string& ack_ids(int index) const;
  ::std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ack_ids(int index, ::std::string&& value);
  #endif
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_ack_ids();
  void add_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ack_ids(::std::string&& value);
  #endif
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& ack_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_ack_ids();

  // repeated int32 modify_deadline_seconds = 3;
  int modify_deadline_seconds_size() const;
  void clear_modify_deadline_seconds();
  static const int kModifyDeadlineSecondsFieldNumber = 3;
  ::google::protobuf::int32 modify_deadline_seconds(int index) const;
  void set_modify_deadline_seconds(int index, ::google::protobuf::int32 value);
  void add_modify_deadline_seconds(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      modify_deadline_seconds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_modify_deadline_seconds();

  // repeated string modify_deadline_ack_ids = 4;
  int modify_deadline_ack_ids_size() const;
  void clear_modify_deadline_ack_ids();
  static const int kModifyDeadlineAckIdsFieldNumber = 4;
  const ::std::string& modify_deadline_ack_ids(int index) const;
  ::std::string* mutable_modify_deadline_ack_ids(int index);
  void set_modify_deadline_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_modify_deadline_ack_ids(int index, ::std::string&& value);
  #endif
  void set_modify_deadline_ack_ids(int index, const char* value);
  void set_modify_deadline_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_modify_deadline_ack_ids();
  void add_modify_deadline_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_modify_deadline_ack_ids(::std::string&& value);
  #endif
  void add_modify_deadline_ack_ids(const char* value);
  void add_modify_deadline_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& modify_deadline_ack_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_modify_deadline_ack_ids();

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // string client_id = 6;
  void clear_client_id();
  static const int kClientIdFieldNumber = 6;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_client_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // int64 max_outstanding_messages = 7;
  void clear_max_outstanding_messages();
  static const int kMaxOutstandingMessagesFieldNumber = 7;
  ::google::protobuf::int64 max_outstanding_messages() const;
  void set_max_outstanding_messages(::google::protobuf::int64 value);

  // int64 max_outstanding_bytes = 8;
  void clear_max_outstanding_bytes();
  static const int kMaxOutstandingBytesFieldNumber = 8;
  ::google::protobuf::int64 max_outstanding_bytes() const;
  void set_max_outstanding_bytes(::google::protobuf::int64 value);

  // int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_stream_ack_deadline_seconds();
  static const int kStreamAckDeadlineSecondsFieldNumber = 5;
  ::google::protobuf::int32 stream_ack_deadline_seconds() const;
  void set_stream_ack_deadline_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField<::std::string> ack_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > modify_deadline_seconds_;
  mutable std::atomic<int> _modify_deadline_seconds_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> modify_deadline_ack_ids_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::int64 max_outstanding_messages_;
  ::google::protobuf::int64 max_outstanding_bytes_;
  ::google::protobuf::int32 stream_ack_deadline_seconds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class StreamingPullResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullResponse) */ {
 public:
  StreamingPullResponse();
  virtual ~StreamingPullResponse();

  StreamingPullResponse(const StreamingPullResponse& from);

  inline StreamingPullResponse& operator=(const StreamingPullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamingPullResponse(StreamingPullResponse&& from) noexcept
    : StreamingPullResponse() {
    *this = ::std::move(from);
  }

  inline StreamingPullResponse& operator=(StreamingPullResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StreamingPullResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingPullResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingPullResponse*>(
               &_StreamingPullResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void UnsafeArenaSwap(StreamingPullResponse* other);
  void Swap(StreamingPullResponse* other);
  friend void swap(StreamingPullResponse& a, StreamingPullResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamingPullResponse* New() const final {
    return CreateMaybeMessage<StreamingPullResponse>(nullptr);
  }

  StreamingPullResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamingPullResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamingPullResponse& from);
  void MergeFrom(const StreamingPullResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingPullResponse* other);
  protected:
  explicit StreamingPullResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  int received_messages_size() const;
  void clear_received_messages();
  static const int kReceivedMessagesFieldNumber = 1;
  ::google::pubsub::v1::ReceivedMessage* mutable_received_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
      mutable_received_messages();
  const ::google::pubsub::v1::ReceivedMessage& received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* add_received_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
      received_messages() const;

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage > received_messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class CreateSnapshotRequest_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CreateSnapshotRequest_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<CreateSnapshotRequest_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CreateSnapshotRequest_LabelsEntry_DoNotUse();
  CreateSnapshotRequest_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CreateSnapshotRequest_LabelsEntry_DoNotUse& other);
  static const CreateSnapshotRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateSnapshotRequest_LabelsEntry_DoNotUse*>(&_CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CreateSnapshotRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.CreateSnapshotRequest) */ {
 public:
  CreateSnapshotRequest();
  virtual ~CreateSnapshotRequest();

  CreateSnapshotRequest(const CreateSnapshotRequest& from);

  inline CreateSnapshotRequest& operator=(const CreateSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateSnapshotRequest(CreateSnapshotRequest&& from) noexcept
    : CreateSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline CreateSnapshotRequest& operator=(CreateSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSnapshotRequest*>(
               &_CreateSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void UnsafeArenaSwap(CreateSnapshotRequest* other);
  void Swap(CreateSnapshotRequest* other);
  friend void swap(CreateSnapshotRequest& a, CreateSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateSnapshotRequest* New() const final {
    return CreateMaybeMessage<CreateSnapshotRequest>(nullptr);
  }

  CreateSnapshotRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateSnapshotRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateSnapshotRequest& from);
  void MergeFrom(const CreateSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSnapshotRequest* other);
  protected:
  explicit CreateSnapshotRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 3;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.CreateSnapshotRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      CreateSnapshotRequest_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class UpdateSnapshotRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateSnapshotRequest) */ {
 public:
  UpdateSnapshotRequest();
  virtual ~UpdateSnapshotRequest();

  UpdateSnapshotRequest(const UpdateSnapshotRequest& from);

  inline UpdateSnapshotRequest& operator=(const UpdateSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSnapshotRequest(UpdateSnapshotRequest&& from) noexcept
    : UpdateSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSnapshotRequest& operator=(UpdateSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSnapshotRequest*>(
               &_UpdateSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void UnsafeArenaSwap(UpdateSnapshotRequest* other);
  void Swap(UpdateSnapshotRequest* other);
  friend void swap(UpdateSnapshotRequest& a, UpdateSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSnapshotRequest* New() const final {
    return CreateMaybeMessage<UpdateSnapshotRequest>(nullptr);
  }

  UpdateSnapshotRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSnapshotRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateSnapshotRequest& from);
  void MergeFrom(const UpdateSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSnapshotRequest* other);
  protected:
  explicit UpdateSnapshotRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  const ::google::pubsub::v1::Snapshot& snapshot() const;
  ::google::pubsub::v1::Snapshot* release_snapshot();
  ::google::pubsub::v1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::google::pubsub::v1::Snapshot* snapshot);
  void unsafe_arena_set_allocated_snapshot(
      ::google::pubsub::v1::Snapshot* snapshot);
  ::google::pubsub::v1::Snapshot* unsafe_arena_release_snapshot();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateSnapshotRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::pubsub::v1::Snapshot* snapshot_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class Snapshot_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Snapshot_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Snapshot_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Snapshot_LabelsEntry_DoNotUse();
  Snapshot_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Snapshot_LabelsEntry_DoNotUse& other);
  static const Snapshot_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Snapshot_LabelsEntry_DoNotUse*>(&_Snapshot_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Snapshot final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Snapshot) */ {
 public:
  Snapshot();
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Snapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void UnsafeArenaSwap(Snapshot* other);
  void Swap(Snapshot* other);
  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const final {
    return CreateMaybeMessage<Snapshot>(nullptr);
  }

  Snapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);
  protected:
  explicit Snapshot(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 4;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string topic = 2 [(.google.api.resource_reference) = {
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // .google.protobuf.Timestamp expire_time = 3;
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);
  void unsafe_arena_set_allocated_expire_time(
      ::google::protobuf::Timestamp* expire_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_expire_time();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Snapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      Snapshot_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::Timestamp* expire_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetSnapshotRequest) */ {
 public:
  GetSnapshotRequest();
  virtual ~GetSnapshotRequest();

  GetSnapshotRequest(const GetSnapshotRequest& from);

  inline GetSnapshotRequest& operator=(const GetSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSnapshotRequest(GetSnapshotRequest&& from) noexcept
    : GetSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline GetSnapshotRequest& operator=(GetSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotRequest*>(
               &_GetSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void UnsafeArenaSwap(GetSnapshotRequest* other);
  void Swap(GetSnapshotRequest* other);
  friend void swap(GetSnapshotRequest& a, GetSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSnapshotRequest* New() const final {
    return CreateMaybeMessage<GetSnapshotRequest>(nullptr);
  }

  GetSnapshotRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSnapshotRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSnapshotRequest& from);
  void MergeFrom(const GetSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotRequest* other);
  protected:
  explicit GetSnapshotRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  const ::std::string& snapshot() const;
  void set_snapshot(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot(::std::string&& value);
  #endif
  void set_snapshot(const char* value);
  void set_snapshot(const char* value, size_t size);
  ::std::string* mutable_snapshot();
  ::std::string* release_snapshot();
  void set_allocated_snapshot(::std::string* snapshot);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_snapshot();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snapshot(
      ::std::string* snapshot);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetSnapshotRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSnapshotsRequest) */ {
 public:
  ListSnapshotsRequest();
  virtual ~ListSnapshotsRequest();

  ListSnapshotsRequest(const ListSnapshotsRequest& from);

  inline ListSnapshotsRequest& operator=(const ListSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSnapshotsRequest(ListSnapshotsRequest&& from) noexcept
    : ListSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsRequest& operator=(ListSnapshotsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListSnapshotsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsRequest*>(
               &_ListSnapshotsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void UnsafeArenaSwap(ListSnapshotsRequest* other);
  void Swap(ListSnapshotsRequest* other);
  friend void swap(ListSnapshotsRequest& a, ListSnapshotsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsRequest* New() const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(nullptr);
  }

  ListSnapshotsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListSnapshotsRequest& from);
  void MergeFrom(const ListSnapshotsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsRequest* other);
  protected:
  explicit ListSnapshotsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project(
      ::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSnapshotsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class ListSnapshotsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSnapshotsResponse) */ {
 public:
  ListSnapshotsResponse();
  virtual ~ListSnapshotsResponse();

  ListSnapshotsResponse(const ListSnapshotsResponse& from);

  inline ListSnapshotsResponse& operator=(const ListSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSnapshotsResponse(ListSnapshotsResponse&& from) noexcept
    : ListSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsResponse& operator=(ListSnapshotsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListSnapshotsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsResponse*>(
               &_ListSnapshotsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void UnsafeArenaSwap(ListSnapshotsResponse* other);
  void Swap(ListSnapshotsResponse* other);
  friend void swap(ListSnapshotsResponse& a, ListSnapshotsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsResponse* New() const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(nullptr);
  }

  ListSnapshotsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListSnapshotsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListSnapshotsResponse& from);
  void MergeFrom(const ListSnapshotsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSnapshotsResponse* other);
  protected:
  explicit ListSnapshotsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  int snapshots_size() const;
  void clear_snapshots();
  static const int kSnapshotsFieldNumber = 1;
  ::google::pubsub::v1::Snapshot* mutable_snapshots(int index);
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >*
      mutable_snapshots();
  const ::google::pubsub::v1::Snapshot& snapshots(int index) const;
  ::google::pubsub::v1::Snapshot* add_snapshots();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >&
      snapshots() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSnapshotsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot > snapshots_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class DeleteSnapshotRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteSnapshotRequest) */ {
 public:
  DeleteSnapshotRequest();
  virtual ~DeleteSnapshotRequest();

  DeleteSnapshotRequest(const DeleteSnapshotRequest& from);

  inline DeleteSnapshotRequest& operator=(const DeleteSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSnapshotRequest(DeleteSnapshotRequest&& from) noexcept
    : DeleteSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSnapshotRequest& operator=(DeleteSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSnapshotRequest*>(
               &_DeleteSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void UnsafeArenaSwap(DeleteSnapshotRequest* other);
  void Swap(DeleteSnapshotRequest* other);
  friend void swap(DeleteSnapshotRequest& a, DeleteSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSnapshotRequest* New() const final {
    return CreateMaybeMessage<DeleteSnapshotRequest>(nullptr);
  }

  DeleteSnapshotRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSnapshotRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteSnapshotRequest& from);
  void MergeFrom(const DeleteSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSnapshotRequest* other);
  protected:
  explicit DeleteSnapshotRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  const ::std::string& snapshot() const;
  void set_snapshot(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot(::std::string&& value);
  #endif
  void set_snapshot(const char* value);
  void set_snapshot(const char* value, size_t size);
  ::std::string* mutable_snapshot();
  ::std::string* release_snapshot();
  void set_allocated_snapshot(::std::string* snapshot);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_snapshot();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snapshot(
      ::std::string* snapshot);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteSnapshotRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class SeekRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SeekRequest) */ {
 public:
  SeekRequest();
  virtual ~SeekRequest();

  SeekRequest(const SeekRequest& from);

  inline SeekRequest& operator=(const SeekRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeekRequest(SeekRequest&& from) noexcept
    : SeekRequest() {
    *this = ::std::move(from);
  }

  inline SeekRequest& operator=(SeekRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SeekRequest& default_instance();

  enum TargetCase {
    kTime = 2,
    kSnapshot = 3,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeekRequest* internal_default_instance() {
    return reinterpret_cast<const SeekRequest*>(
               &_SeekRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void UnsafeArenaSwap(SeekRequest* other);
  void Swap(SeekRequest* other);
  friend void swap(SeekRequest& a, SeekRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeekRequest* New() const final {
    return CreateMaybeMessage<SeekRequest>(nullptr);
  }

  SeekRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SeekRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SeekRequest& from);
  void MergeFrom(const SeekRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekRequest* other);
  protected:
  explicit SeekRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);
  void unsafe_arena_set_allocated_time(
      ::google::protobuf::Timestamp* time);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  // string snapshot = 3 [(.google.api.resource_reference) = {
  private:
  bool has_snapshot() const;
  public:
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 3;
  const ::std::string& snapshot() const;
  void set_snapshot(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot(::std::string&& value);
  #endif
  void set_snapshot(const char* value);
  void set_snapshot(const char* value, size_t size);
  ::std::string* mutable_snapshot();
  ::std::string* release_snapshot();
  void set_allocated_snapshot(::std::string* snapshot);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_snapshot();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snapshot(
      ::std::string* snapshot);

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SeekRequest)
 private:
  class HasBitSetters;
  void set_has_time();
  void set_has_snapshot();

  inline bool has_target() const;
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  union TargetUnion {
    TargetUnion() {}
    ::google::protobuf::Timestamp* time_;
    ::google::protobuf::internal::ArenaStringPtr snapshot_;
  } target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// -------------------------------------------------------------------

class SeekResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SeekResponse) */ {
 public:
  SeekResponse();
  virtual ~SeekResponse();

  SeekResponse(const SeekResponse& from);

  inline SeekResponse& operator=(const SeekResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeekResponse(SeekResponse&& from) noexcept
    : SeekResponse() {
    *this = ::std::move(from);
  }

  inline SeekResponse& operator=(SeekResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SeekResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeekResponse* internal_default_instance() {
    return reinterpret_cast<const SeekResponse*>(
               &_SeekResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void UnsafeArenaSwap(SeekResponse* other);
  void Swap(SeekResponse* other);
  friend void swap(SeekResponse& a, SeekResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeekResponse* New() const final {
    return CreateMaybeMessage<SeekResponse>(nullptr);
  }

  SeekResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SeekResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SeekResponse& from);
  void MergeFrom(const SeekResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekResponse* other);
  protected:
  explicit SeekResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SeekResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageStoragePolicy

// repeated string allowed_persistence_regions = 1;
inline int MessageStoragePolicy::allowed_persistence_regions_size() const {
  return allowed_persistence_regions_.size();
}
inline void MessageStoragePolicy::clear_allowed_persistence_regions() {
  allowed_persistence_regions_.Clear();
}
inline const ::std::string& MessageStoragePolicy::allowed_persistence_regions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return allowed_persistence_regions_.Get(index);
}
inline ::std::string* MessageStoragePolicy::mutable_allowed_persistence_regions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return allowed_persistence_regions_.Mutable(index);
}
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  allowed_persistence_regions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  allowed_persistence_regions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_persistence_regions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::set_allowed_persistence_regions(int index, const char* value, size_t size) {
  allowed_persistence_regions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline ::std::string* MessageStoragePolicy::add_allowed_persistence_regions() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return allowed_persistence_regions_.Add();
}
inline void MessageStoragePolicy::add_allowed_persistence_regions(const ::std::string& value) {
  allowed_persistence_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
#if LANG_CXX11
inline void MessageStoragePolicy::add_allowed_persistence_regions(::std::string&& value) {
  allowed_persistence_regions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
#endif
inline void MessageStoragePolicy::add_allowed_persistence_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_persistence_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline void MessageStoragePolicy::add_allowed_persistence_regions(const char* value, size_t size) {
  allowed_persistence_regions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
MessageStoragePolicy::allowed_persistence_regions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return allowed_persistence_regions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
MessageStoragePolicy::mutable_allowed_persistence_regions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions)
  return &allowed_persistence_regions_;
}

// -------------------------------------------------------------------

// SchemaSettings

// string schema = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SchemaSettings::clear_schema() {
  schema_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SchemaSettings::schema() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SchemaSettings.schema)
  return schema_.Get();
}
inline void SchemaSettings::set_schema(const ::std::string& value) {
  
  schema_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SchemaSettings.schema)
}
#if LANG_CXX11
inline void SchemaSettings::set_schema(::std::string&& value) {
  
  schema_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.SchemaSettings.schema)
}
#endif
inline void SchemaSettings::set_schema(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.SchemaSettings.schema)
}
inline void SchemaSettings::set_schema(const char* value,
    size_t size) {
  
  schema_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.SchemaSettings.schema)
}
inline ::std::string* SchemaSettings::mutable_schema() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SchemaSettings.schema)
  return schema_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SchemaSettings::release_schema() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SchemaSettings.schema)
  
  return schema_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SchemaSettings::set_allocated_schema(::std::string* schema) {
  if (schema != nullptr) {
    
  } else {
    
  }
  schema_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SchemaSettings.schema)
}
inline ::std::string* SchemaSettings::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SchemaSettings.schema)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return schema_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SchemaSettings::unsafe_arena_set_allocated_schema(
    ::std::string* schema) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (schema != nullptr) {
    
  } else {
    
  }
  schema_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      schema, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SchemaSettings.schema)
}

// .google.pubsub.v1.Encoding encoding = 2;
inline void SchemaSettings::clear_encoding() {
  encoding_ = 0;
}
inline ::google::pubsub::v1::Encoding SchemaSettings::encoding() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SchemaSettings.encoding)
  return static_cast< ::google::pubsub::v1::Encoding >(encoding_);
}
inline void SchemaSettings::set_encoding(::google::pubsub::v1::Encoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SchemaSettings.encoding)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Topic

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Topic::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.name)
  return name_.Get();
}
inline void Topic::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.name)
}
#if LANG_CXX11
inline void Topic::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Topic.name)
}
#endif
inline void Topic::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Topic.name)
}
inline void Topic::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Topic.name)
}
inline ::std::string* Topic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Topic::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Topic::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.name)
}
inline ::std::string* Topic::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Topic.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Topic::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.name)
}

// map<string, string> labels = 2;
inline int Topic::labels_size() const {
  return labels_.size();
}
inline void Topic::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Topic::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Topic.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Topic::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Topic.labels)
  return labels_.MutableMap();
}

// .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
inline bool Topic::has_message_storage_policy() const {
  return this != internal_default_instance() && message_storage_policy_ != nullptr;
}
inline void Topic::clear_message_storage_policy() {
  if (GetArenaNoVirtual() == nullptr && message_storage_policy_ != nullptr) {
    delete message_storage_policy_;
  }
  message_storage_policy_ = nullptr;
}
inline const ::google::pubsub::v1::MessageStoragePolicy& Topic::message_storage_policy() const {
  const ::google::pubsub::v1::MessageStoragePolicy* p = message_storage_policy_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.message_storage_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::MessageStoragePolicy*>(
      &::google::pubsub::v1::_MessageStoragePolicy_default_instance_);
}
inline ::google::pubsub::v1::MessageStoragePolicy* Topic::release_message_storage_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.message_storage_policy)
  
  ::google::pubsub::v1::MessageStoragePolicy* temp = message_storage_policy_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  message_storage_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::MessageStoragePolicy* Topic::unsafe_arena_release_message_storage_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Topic.message_storage_policy)
  
  ::google::pubsub::v1::MessageStoragePolicy* temp = message_storage_policy_;
  message_storage_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::MessageStoragePolicy* Topic::mutable_message_storage_policy() {
  
  if (message_storage_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::MessageStoragePolicy>(GetArenaNoVirtual());
    message_storage_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.message_storage_policy)
  return message_storage_policy_;
}
inline void Topic::set_allocated_message_storage_policy(::google::pubsub::v1::MessageStoragePolicy* message_storage_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_storage_policy_;
  }
  if (message_storage_policy) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(message_storage_policy);
    if (message_arena != submessage_arena) {
      message_storage_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_storage_policy, submessage_arena);
    }
    
  } else {
    
  }
  message_storage_policy_ = message_storage_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.message_storage_policy)
}

// string kms_key_name = 5;
inline void Topic::clear_kms_key_name() {
  kms_key_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Topic::kms_key_name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.kms_key_name)
  return kms_key_name_.Get();
}
inline void Topic::set_kms_key_name(const ::std::string& value) {
  
  kms_key_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.kms_key_name)
}
#if LANG_CXX11
inline void Topic::set_kms_key_name(::std::string&& value) {
  
  kms_key_name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Topic.kms_key_name)
}
#endif
inline void Topic::set_kms_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kms_key_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Topic.kms_key_name)
}
inline void Topic::set_kms_key_name(const char* value,
    size_t size) {
  
  kms_key_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Topic.kms_key_name)
}
inline ::std::string* Topic::mutable_kms_key_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.kms_key_name)
  return kms_key_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Topic::release_kms_key_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.kms_key_name)
  
  return kms_key_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Topic::set_allocated_kms_key_name(::std::string* kms_key_name) {
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  kms_key_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kms_key_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.kms_key_name)
}
inline ::std::string* Topic::unsafe_arena_release_kms_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Topic.kms_key_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return kms_key_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Topic::unsafe_arena_set_allocated_kms_key_name(
    ::std::string* kms_key_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (kms_key_name != nullptr) {
    
  } else {
    
  }
  kms_key_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kms_key_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.kms_key_name)
}

// .google.pubsub.v1.SchemaSettings schema_settings = 6;
inline bool Topic::has_schema_settings() const {
  return this != internal_default_instance() && schema_settings_ != nullptr;
}
inline void Topic::clear_schema_settings() {
  if (GetArenaNoVirtual() == nullptr && schema_settings_ != nullptr) {
    delete schema_settings_;
  }
  schema_settings_ = nullptr;
}
inline const ::google::pubsub::v1::SchemaSettings& Topic::schema_settings() const {
  const ::google::pubsub::v1::SchemaSettings* p = schema_settings_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.schema_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::SchemaSettings*>(
      &::google::pubsub::v1::_SchemaSettings_default_instance_);
}
inline ::google::pubsub::v1::SchemaSettings* Topic::release_schema_settings() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.schema_settings)
  
  ::google::pubsub::v1::SchemaSettings* temp = schema_settings_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  schema_settings_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::SchemaSettings* Topic::unsafe_arena_release_schema_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Topic.schema_settings)
  
  ::google::pubsub::v1::SchemaSettings* temp = schema_settings_;
  schema_settings_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::SchemaSettings* Topic::mutable_schema_settings() {
  
  if (schema_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::SchemaSettings>(GetArenaNoVirtual());
    schema_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.schema_settings)
  return schema_settings_;
}
inline void Topic::set_allocated_schema_settings(::google::pubsub::v1::SchemaSettings* schema_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schema_settings_;
  }
  if (schema_settings) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(schema_settings);
    if (message_arena != submessage_arena) {
      schema_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schema_settings, submessage_arena);
    }
    
  } else {
    
  }
  schema_settings_ = schema_settings;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.schema_settings)
}

// bool satisfies_pzs = 7;
inline void Topic::clear_satisfies_pzs() {
  satisfies_pzs_ = false;
}
inline bool Topic::satisfies_pzs() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.satisfies_pzs)
  return satisfies_pzs_;
}
inline void Topic::set_satisfies_pzs(bool value) {
  
  satisfies_pzs_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.satisfies_pzs)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PubsubMessage

// bytes data = 1;
inline void PubsubMessage::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PubsubMessage::data() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.data)
  return data_.Get();
}
inline void PubsubMessage::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.data)
}
#if LANG_CXX11
inline void PubsubMessage::set_data(::std::string&& value) {
  
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PubsubMessage.data)
}
#endif
inline void PubsubMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PubsubMessage.data)
}
inline void PubsubMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PubsubMessage.data)
}
inline ::std::string* PubsubMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PubsubMessage::release_data() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PubsubMessage::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.data)
}
inline ::std::string* PubsubMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PubsubMessage::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.data)
}

// map<string, string> attributes = 2;
inline int PubsubMessage::attributes_size() const {
  return attributes_.size();
}
inline void PubsubMessage::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PubsubMessage::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PubsubMessage.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PubsubMessage::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PubsubMessage.attributes)
  return attributes_.MutableMap();
}

// string message_id = 3;
inline void PubsubMessage::clear_message_id() {
  message_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PubsubMessage::message_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.message_id)
  return message_id_.Get();
}
inline void PubsubMessage::set_message_id(const ::std::string& value) {
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.message_id)
}
#if LANG_CXX11
inline void PubsubMessage::set_message_id(::std::string&& value) {
  
  message_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PubsubMessage.message_id)
}
#endif
inline void PubsubMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PubsubMessage.message_id)
}
inline void PubsubMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PubsubMessage.message_id)
}
inline ::std::string* PubsubMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.message_id)
  return message_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PubsubMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.message_id)
  
  return message_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PubsubMessage::set_allocated_message_id(::std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.message_id)
}
inline ::std::string* PubsubMessage::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.message_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PubsubMessage::unsafe_arena_set_allocated_message_id(
    ::std::string* message_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.message_id)
}

// .google.protobuf.Timestamp publish_time = 4;
inline bool PubsubMessage::has_publish_time() const {
  return this != internal_default_instance() && publish_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& PubsubMessage::publish_time() const {
  const ::google::protobuf::Timestamp* p = publish_time_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.publish_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PubsubMessage::release_publish_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.publish_time)
  
  ::google::protobuf::Timestamp* temp = publish_time_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  publish_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PubsubMessage::unsafe_arena_release_publish_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.publish_time)
  
  ::google::protobuf::Timestamp* temp = publish_time_;
  publish_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PubsubMessage::mutable_publish_time() {
  
  if (publish_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    publish_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.publish_time)
  return publish_time_;
}
inline void PubsubMessage::set_allocated_publish_time(::google::protobuf::Timestamp* publish_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(publish_time_);
  }
  if (publish_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(publish_time)->GetArena();
    if (message_arena != submessage_arena) {
      publish_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_time, submessage_arena);
    }
    
  } else {
    
  }
  publish_time_ = publish_time;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}

// string ordering_key = 5;
inline void PubsubMessage::clear_ordering_key() {
  ordering_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PubsubMessage::ordering_key() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.ordering_key)
  return ordering_key_.Get();
}
inline void PubsubMessage::set_ordering_key(const ::std::string& value) {
  
  ordering_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.ordering_key)
}
#if LANG_CXX11
inline void PubsubMessage::set_ordering_key(::std::string&& value) {
  
  ordering_key_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PubsubMessage.ordering_key)
}
#endif
inline void PubsubMessage::set_ordering_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordering_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PubsubMessage.ordering_key)
}
inline void PubsubMessage::set_ordering_key(const char* value,
    size_t size) {
  
  ordering_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PubsubMessage.ordering_key)
}
inline ::std::string* PubsubMessage::mutable_ordering_key() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.ordering_key)
  return ordering_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PubsubMessage::release_ordering_key() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.ordering_key)
  
  return ordering_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PubsubMessage::set_allocated_ordering_key(::std::string* ordering_key) {
  if (ordering_key != nullptr) {
    
  } else {
    
  }
  ordering_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordering_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.ordering_key)
}
inline ::std::string* PubsubMessage::unsafe_arena_release_ordering_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.ordering_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return ordering_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PubsubMessage::unsafe_arena_set_allocated_ordering_key(
    ::std::string* ordering_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (ordering_key != nullptr) {
    
  } else {
    
  }
  ordering_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ordering_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.ordering_key)
}

// -------------------------------------------------------------------

// GetTopicRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetTopicRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetTopicRequest.topic)
  return topic_.Get();
}
inline void GetTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetTopicRequest.topic)
}
#if LANG_CXX11
inline void GetTopicRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.GetTopicRequest.topic)
}
#endif
inline void GetTopicRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.GetTopicRequest.topic)
}
inline void GetTopicRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.GetTopicRequest.topic)
}
inline ::std::string* GetTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetTopicRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetTopicRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetTopicRequest.topic)
}
inline ::std::string* GetTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.GetTopicRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetTopicRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.GetTopicRequest.topic)
}

// -------------------------------------------------------------------

// UpdateTopicRequest

// .google.pubsub.v1.Topic topic = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateTopicRequest::has_topic() const {
  return this != internal_default_instance() && topic_ != nullptr;
}
inline void UpdateTopicRequest::clear_topic() {
  if (GetArenaNoVirtual() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
inline const ::google::pubsub::v1::Topic& UpdateTopicRequest::topic() const {
  const ::google::pubsub::v1::Topic* p = topic_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateTopicRequest.topic)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::Topic*>(
      &::google::pubsub::v1::_Topic_default_instance_);
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateTopicRequest.topic)
  
  ::google::pubsub::v1::Topic* temp = topic_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  topic_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateTopicRequest.topic)
  
  ::google::pubsub::v1::Topic* temp = topic_;
  topic_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::mutable_topic() {
  
  if (topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Topic>(GetArenaNoVirtual());
    topic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateTopicRequest.topic)
  return topic_;
}
inline void UpdateTopicRequest::set_allocated_topic(::google::pubsub::v1::Topic* topic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete topic_;
  }
  if (topic) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(topic);
    if (message_arena != submessage_arena) {
      topic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateTopicRequest.topic)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateTopicRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline const ::google::protobuf::FieldMask& UpdateTopicRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateTopicRequest.update_mask)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateTopicRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateTopicRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateTopicRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateTopicRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateTopicRequest::mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateTopicRequest.update_mask)
  return update_mask_;
}
inline void UpdateTopicRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateTopicRequest.update_mask)
}

// -------------------------------------------------------------------

// PublishRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PublishRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublishRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.topic)
  return topic_.Get();
}
inline void PublishRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishRequest.topic)
}
#if LANG_CXX11
inline void PublishRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PublishRequest.topic)
}
#endif
inline void PublishRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PublishRequest.topic)
}
inline void PublishRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PublishRequest.topic)
}
inline ::std::string* PublishRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PublishRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PublishRequest::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PublishRequest.topic)
}
inline ::std::string* PublishRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PublishRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublishRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PublishRequest.topic)
}

// repeated .google.pubsub.v1.PubsubMessage messages = 2 [(.google.api.field_behavior) = REQUIRED];
inline int PublishRequest::messages_size() const {
  return messages_.size();
}
inline void PublishRequest::clear_messages() {
  messages_.Clear();
}
inline ::google::pubsub::v1::PubsubMessage* PublishRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >*
PublishRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishRequest.messages)
  return &messages_;
}
inline const ::google::pubsub::v1::PubsubMessage& PublishRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.messages)
  return messages_.Get(index);
}
inline ::google::pubsub::v1::PubsubMessage* PublishRequest::add_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishRequest.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >&
PublishRequest::messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishRequest.messages)
  return messages_;
}

// -------------------------------------------------------------------

// PublishResponse

// repeated string message_ids = 1;
inline int PublishResponse::message_ids_size() const {
  return message_ids_.size();
}
inline void PublishResponse::clear_message_ids() {
  message_ids_.Clear();
}
inline const ::std::string& PublishResponse::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Get(index);
}
inline ::std::string* PublishResponse::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Mutable(index);
}
inline void PublishResponse::set_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishResponse.message_ids)
  message_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PublishResponse::set_message_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishResponse.message_ids)
  message_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PublishResponse::set_message_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
inline ::std::string* PublishResponse::add_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Add();
}
inline void PublishResponse::add_message_ids(const ::std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishResponse.message_ids)
}
#if LANG_CXX11
inline void PublishResponse::add_message_ids(::std::string&& value) {
  message_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishResponse.message_ids)
}
#endif
inline void PublishResponse::add_message_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PublishResponse::message_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PublishResponse::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishResponse.message_ids)
  return &message_ids_;
}

// -------------------------------------------------------------------

// ListTopicsRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTopicsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.project)
  return project_.Get();
}
inline void ListTopicsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.project)
}
#if LANG_CXX11
inline void ListTopicsRequest::set_project(::std::string&& value) {
  
  project_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicsRequest.project)
}
#endif
inline void ListTopicsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsRequest.project)
}
inline void ListTopicsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsRequest.project)
}
inline ::std::string* ListTopicsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicsRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.project)
}
inline ::std::string* ListTopicsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (project != nullptr) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsRequest.project)
}

// int32 page_size = 2;
inline void ListTopicsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTopicsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_size)
  return page_size_;
}
inline void ListTopicsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_token)
  return page_token_.Get();
}
inline void ListTopicsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_token)
}
#if LANG_CXX11
inline void ListTopicsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicsRequest.page_token)
}
#endif
inline void ListTopicsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsRequest.page_token)
}
inline void ListTopicsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsRequest.page_token)
}
inline ::std::string* ListTopicsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.page_token)
}
inline ::std::string* ListTopicsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicsResponse

// repeated .google.pubsub.v1.Topic topics = 1;
inline int ListTopicsResponse::topics_size() const {
  return topics_.size();
}
inline void ListTopicsResponse::clear_topics() {
  topics_.Clear();
}
inline ::google::pubsub::v1::Topic* ListTopicsResponse::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >*
ListTopicsResponse::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicsResponse.topics)
  return &topics_;
}
inline const ::google::pubsub::v1::Topic& ListTopicsResponse::topics(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Get(index);
}
inline ::google::pubsub::v1::Topic* ListTopicsResponse::add_topics() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >&
ListTopicsResponse::topics() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_;
}

// string next_page_token = 2;
inline void ListTopicsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListTopicsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTopicsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
#endif
inline void ListTopicsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
inline void ListTopicsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
inline ::std::string* ListTopicsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
inline ::std::string* ListTopicsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTopicSubscriptionsRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSubscriptionsRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return topic_.Get();
}
inline void ListTopicSubscriptionsRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
#endif
inline void ListTopicSubscriptionsRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
inline void ListTopicSubscriptionsRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
inline ::std::string* ListTopicSubscriptionsRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSubscriptionsRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
inline ::std::string* ListTopicSubscriptionsRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}

// int32 page_size = 2;
inline void ListTopicSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTopicSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
  return page_size_;
}
inline void ListTopicSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return page_token_.Get();
}
inline void ListTopicSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
#endif
inline void ListTopicSubscriptionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
inline void ListTopicSubscriptionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
inline ::std::string* ListTopicSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
inline ::std::string* ListTopicSubscriptionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsResponse

// repeated string subscriptions = 1 [(.google.api.resource_reference) = {
inline int ListTopicSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListTopicSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::std::string& ListTopicSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
inline ::std::string* ListTopicSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  subscriptions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  subscriptions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value, size_t size) {
  subscriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline ::std::string* ListTopicSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const ::std::string& value) {
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::add_subscriptions(::std::string&& value) {
  subscriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
#endif
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value, size_t size) {
  subscriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ListTopicSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ListTopicSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}

// string next_page_token = 2;
inline void ListTopicSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListTopicSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
#endif
inline void ListTopicSubscriptionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
inline void ListTopicSubscriptionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListTopicSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListTopicSubscriptionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTopicSnapshotsRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListTopicSnapshotsRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSnapshotsRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
  return topic_.Get();
}
inline void ListTopicSnapshotsRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}
#if LANG_CXX11
inline void ListTopicSnapshotsRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}
#endif
inline void ListTopicSnapshotsRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}
inline void ListTopicSnapshotsRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}
inline ::std::string* ListTopicSnapshotsRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSnapshotsRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSnapshotsRequest::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}
inline ::std::string* ListTopicSnapshotsRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSnapshotsRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSnapshotsRequest.topic)
}

// int32 page_size = 2;
inline void ListTopicSnapshotsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTopicSnapshotsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsRequest.page_size)
  return page_size_;
}
inline void ListTopicSnapshotsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicSnapshotsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSnapshotsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
  return page_token_.Get();
}
inline void ListTopicSnapshotsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}
#if LANG_CXX11
inline void ListTopicSnapshotsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}
#endif
inline void ListTopicSnapshotsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}
inline void ListTopicSnapshotsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}
inline ::std::string* ListTopicSnapshotsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSnapshotsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSnapshotsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}
inline ::std::string* ListTopicSnapshotsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSnapshotsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSnapshotsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicSnapshotsResponse

// repeated string snapshots = 1;
inline int ListTopicSnapshotsResponse::snapshots_size() const {
  return snapshots_.size();
}
inline void ListTopicSnapshotsResponse::clear_snapshots() {
  snapshots_.Clear();
}
inline const ::std::string& ListTopicSnapshotsResponse::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return snapshots_.Get(index);
}
inline ::std::string* ListTopicSnapshotsResponse::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return snapshots_.Mutable(index);
}
inline void ListTopicSnapshotsResponse::set_snapshots(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  snapshots_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListTopicSnapshotsResponse::set_snapshots(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  snapshots_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListTopicSnapshotsResponse::set_snapshots(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  snapshots_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::set_snapshots(int index, const char* value, size_t size) {
  snapshots_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline ::std::string* ListTopicSnapshotsResponse::add_snapshots() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return snapshots_.Add();
}
inline void ListTopicSnapshotsResponse::add_snapshots(const ::std::string& value) {
  snapshots_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
#if LANG_CXX11
inline void ListTopicSnapshotsResponse::add_snapshots(::std::string&& value) {
  snapshots_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
#endif
inline void ListTopicSnapshotsResponse::add_snapshots(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  snapshots_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline void ListTopicSnapshotsResponse::add_snapshots(const char* value, size_t size) {
  snapshots_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ListTopicSnapshotsResponse::snapshots() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return snapshots_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ListTopicSnapshotsResponse::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicSnapshotsResponse.snapshots)
  return &snapshots_;
}

// string next_page_token = 2;
inline void ListTopicSnapshotsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSnapshotsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListTopicSnapshotsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTopicSnapshotsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}
#endif
inline void ListTopicSnapshotsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}
inline void ListTopicSnapshotsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}
inline ::std::string* ListTopicSnapshotsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSnapshotsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSnapshotsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}
inline ::std::string* ListTopicSnapshotsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSnapshotsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteTopicRequest

// string topic = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteTopicRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteTopicRequest.topic)
  return topic_.Get();
}
inline void DeleteTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteTopicRequest.topic)
}
#if LANG_CXX11
inline void DeleteTopicRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DeleteTopicRequest.topic)
}
#endif
inline void DeleteTopicRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteTopicRequest.topic)
}
inline void DeleteTopicRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteTopicRequest.topic)
}
inline ::std::string* DeleteTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteTopicRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteTopicRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteTopicRequest.topic)
}
inline ::std::string* DeleteTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteTopicRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteTopicRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteTopicRequest.topic)
}

// -------------------------------------------------------------------

// DetachSubscriptionRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DetachSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DetachSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DetachSubscriptionRequest.subscription)
  return subscription_.Get();
}
inline void DetachSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}
#if LANG_CXX11
inline void DetachSubscriptionRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}
#endif
inline void DetachSubscriptionRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}
inline void DetachSubscriptionRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}
inline ::std::string* DetachSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DetachSubscriptionRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DetachSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DetachSubscriptionRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DetachSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}
inline ::std::string* DetachSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DetachSubscriptionRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DetachSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DetachSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// DetachSubscriptionResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Subscription

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Subscription::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Subscription::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.name)
  return name_.Get();
}
inline void Subscription::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.name)
}
#if LANG_CXX11
inline void Subscription::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Subscription.name)
}
#endif
inline void Subscription::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Subscription.name)
}
inline void Subscription::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Subscription.name)
}
inline ::std::string* Subscription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Subscription::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Subscription::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.name)
}
inline ::std::string* Subscription::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Subscription::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.name)
}

// string topic = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void Subscription::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Subscription::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.topic)
  return topic_.Get();
}
inline void Subscription::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.topic)
}
#if LANG_CXX11
inline void Subscription::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Subscription.topic)
}
#endif
inline void Subscription::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Subscription.topic)
}
inline void Subscription::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Subscription.topic)
}
inline ::std::string* Subscription::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Subscription::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Subscription::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.topic)
}
inline ::std::string* Subscription::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Subscription::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.topic)
}

// .google.pubsub.v1.PushConfig push_config = 4;
inline bool Subscription::has_push_config() const {
  return this != internal_default_instance() && push_config_ != nullptr;
}
inline void Subscription::clear_push_config() {
  if (GetArenaNoVirtual() == nullptr && push_config_ != nullptr) {
    delete push_config_;
  }
  push_config_ = nullptr;
}
inline const ::google::pubsub::v1::PushConfig& Subscription::push_config() const {
  const ::google::pubsub::v1::PushConfig* p = push_config_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.push_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::PushConfig*>(
      &::google::pubsub::v1::_PushConfig_default_instance_);
}
inline ::google::pubsub::v1::PushConfig* Subscription::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  push_config_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* Subscription::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  push_config_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* Subscription::mutable_push_config() {
  
  if (push_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::PushConfig>(GetArenaNoVirtual());
    push_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.push_config)
  return push_config_;
}
inline void Subscription::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete push_config_;
  }
  if (push_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(push_config);
    if (message_arena != submessage_arena) {
      push_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.push_config)
}

// int32 ack_deadline_seconds = 5;
inline void Subscription::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 Subscription::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
inline void Subscription::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.ack_deadline_seconds)
}

// bool retain_acked_messages = 7;
inline void Subscription::clear_retain_acked_messages() {
  retain_acked_messages_ = false;
}
inline bool Subscription::retain_acked_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.retain_acked_messages)
  return retain_acked_messages_;
}
inline void Subscription::set_retain_acked_messages(bool value) {
  
  retain_acked_messages_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.retain_acked_messages)
}

// .google.protobuf.Duration message_retention_duration = 8;
inline bool Subscription::has_message_retention_duration() const {
  return this != internal_default_instance() && message_retention_duration_ != nullptr;
}
inline const ::google::protobuf::Duration& Subscription::message_retention_duration() const {
  const ::google::protobuf::Duration* p = message_retention_duration_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.message_retention_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Subscription::release_message_retention_duration() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.message_retention_duration)
  
  ::google::protobuf::Duration* temp = message_retention_duration_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  message_retention_duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* Subscription::unsafe_arena_release_message_retention_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.message_retention_duration)
  
  ::google::protobuf::Duration* temp = message_retention_duration_;
  message_retention_duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* Subscription::mutable_message_retention_duration() {
  
  if (message_retention_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    message_retention_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.message_retention_duration)
  return message_retention_duration_;
}
inline void Subscription::set_allocated_message_retention_duration(::google::protobuf::Duration* message_retention_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_retention_duration_);
  }
  if (message_retention_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(message_retention_duration)->GetArena();
    if (message_arena != submessage_arena) {
      message_retention_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_retention_duration, submessage_arena);
    }
    
  } else {
    
  }
  message_retention_duration_ = message_retention_duration;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.message_retention_duration)
}

// map<string, string> labels = 9;
inline int Subscription::labels_size() const {
  return labels_.size();
}
inline void Subscription::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Subscription::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Subscription.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Subscription::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Subscription.labels)
  return labels_.MutableMap();
}

// bool enable_message_ordering = 10;
inline void Subscription::clear_enable_message_ordering() {
  enable_message_ordering_ = false;
}
inline bool Subscription::enable_message_ordering() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.enable_message_ordering)
  return enable_message_ordering_;
}
inline void Subscription::set_enable_message_ordering(bool value) {
  
  enable_message_ordering_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.enable_message_ordering)
}

// .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
inline bool Subscription::has_expiration_policy() const {
  return this != internal_default_instance() && expiration_policy_ != nullptr;
}
inline void Subscription::clear_expiration_policy() {
  if (GetArenaNoVirtual() == nullptr && expiration_policy_ != nullptr) {
    delete expiration_policy_;
  }
  expiration_policy_ = nullptr;
}
inline const ::google::pubsub::v1::ExpirationPolicy& Subscription::expiration_policy() const {
  const ::google::pubsub::v1::ExpirationPolicy* p = expiration_policy_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.expiration_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::ExpirationPolicy*>(
      &::google::pubsub::v1::_ExpirationPolicy_default_instance_);
}
inline ::google::pubsub::v1::ExpirationPolicy* Subscription::release_expiration_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.expiration_policy)
  
  ::google::pubsub::v1::ExpirationPolicy* temp = expiration_policy_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  expiration_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::ExpirationPolicy* Subscription::unsafe_arena_release_expiration_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.expiration_policy)
  
  ::google::pubsub::v1::ExpirationPolicy* temp = expiration_policy_;
  expiration_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::ExpirationPolicy* Subscription::mutable_expiration_policy() {
  
  if (expiration_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::ExpirationPolicy>(GetArenaNoVirtual());
    expiration_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.expiration_policy)
  return expiration_policy_;
}
inline void Subscription::set_allocated_expiration_policy(::google::pubsub::v1::ExpirationPolicy* expiration_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expiration_policy_;
  }
  if (expiration_policy) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(expiration_policy);
    if (message_arena != submessage_arena) {
      expiration_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expiration_policy, submessage_arena);
    }
    
  } else {
    
  }
  expiration_policy_ = expiration_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.expiration_policy)
}

// string filter = 12;
inline void Subscription::clear_filter() {
  filter_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Subscription::filter() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.filter)
  return filter_.Get();
}
inline void Subscription::set_filter(const ::std::string& value) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.filter)
}
#if LANG_CXX11
inline void Subscription::set_filter(::std::string&& value) {
  
  filter_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Subscription.filter)
}
#endif
inline void Subscription::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Subscription.filter)
}
inline void Subscription::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Subscription.filter)
}
inline ::std::string* Subscription::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.filter)
  return filter_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Subscription::release_filter() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.filter)
  
  return filter_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Subscription::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.filter)
}
inline ::std::string* Subscription::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return filter_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Subscription::unsafe_arena_set_allocated_filter(
    ::std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.filter)
}

// .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
inline bool Subscription::has_dead_letter_policy() const {
  return this != internal_default_instance() && dead_letter_policy_ != nullptr;
}
inline void Subscription::clear_dead_letter_policy() {
  if (GetArenaNoVirtual() == nullptr && dead_letter_policy_ != nullptr) {
    delete dead_letter_policy_;
  }
  dead_letter_policy_ = nullptr;
}
inline const ::google::pubsub::v1::DeadLetterPolicy& Subscription::dead_letter_policy() const {
  const ::google::pubsub::v1::DeadLetterPolicy* p = dead_letter_policy_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.dead_letter_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::DeadLetterPolicy*>(
      &::google::pubsub::v1::_DeadLetterPolicy_default_instance_);
}
inline ::google::pubsub::v1::DeadLetterPolicy* Subscription::release_dead_letter_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.dead_letter_policy)
  
  ::google::pubsub::v1::DeadLetterPolicy* temp = dead_letter_policy_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  dead_letter_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::DeadLetterPolicy* Subscription::unsafe_arena_release_dead_letter_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.dead_letter_policy)
  
  ::google::pubsub::v1::DeadLetterPolicy* temp = dead_letter_policy_;
  dead_letter_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::DeadLetterPolicy* Subscription::mutable_dead_letter_policy() {
  
  if (dead_letter_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::DeadLetterPolicy>(GetArenaNoVirtual());
    dead_letter_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.dead_letter_policy)
  return dead_letter_policy_;
}
inline void Subscription::set_allocated_dead_letter_policy(::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dead_letter_policy_;
  }
  if (dead_letter_policy) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(dead_letter_policy);
    if (message_arena != submessage_arena) {
      dead_letter_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dead_letter_policy, submessage_arena);
    }
    
  } else {
    
  }
  dead_letter_policy_ = dead_letter_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.dead_letter_policy)
}

// .google.pubsub.v1.RetryPolicy retry_policy = 14;
inline bool Subscription::has_retry_policy() const {
  return this != internal_default_instance() && retry_policy_ != nullptr;
}
inline void Subscription::clear_retry_policy() {
  if (GetArenaNoVirtual() == nullptr && retry_policy_ != nullptr) {
    delete retry_policy_;
  }
  retry_policy_ = nullptr;
}
inline const ::google::pubsub::v1::RetryPolicy& Subscription::retry_policy() const {
  const ::google::pubsub::v1::RetryPolicy* p = retry_policy_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.retry_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::RetryPolicy*>(
      &::google::pubsub::v1::_RetryPolicy_default_instance_);
}
inline ::google::pubsub::v1::RetryPolicy* Subscription::release_retry_policy() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.retry_policy)
  
  ::google::pubsub::v1::RetryPolicy* temp = retry_policy_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  retry_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::RetryPolicy* Subscription::unsafe_arena_release_retry_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.retry_policy)
  
  ::google::pubsub::v1::RetryPolicy* temp = retry_policy_;
  retry_policy_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::RetryPolicy* Subscription::mutable_retry_policy() {
  
  if (retry_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::RetryPolicy>(GetArenaNoVirtual());
    retry_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.retry_policy)
  return retry_policy_;
}
inline void Subscription::set_allocated_retry_policy(::google::pubsub::v1::RetryPolicy* retry_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete retry_policy_;
  }
  if (retry_policy) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(retry_policy);
    if (message_arena != submessage_arena) {
      retry_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, retry_policy, submessage_arena);
    }
    
  } else {
    
  }
  retry_policy_ = retry_policy;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.retry_policy)
}

// bool detached = 15;
inline void Subscription::clear_detached() {
  detached_ = false;
}
inline bool Subscription::detached() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.detached)
  return detached_;
}
inline void Subscription::set_detached(bool value) {
  
  detached_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.detached)
}

// -------------------------------------------------------------------

// RetryPolicy

// .google.protobuf.Duration minimum_backoff = 1;
inline bool RetryPolicy::has_minimum_backoff() const {
  return this != internal_default_instance() && minimum_backoff_ != nullptr;
}
inline const ::google::protobuf::Duration& RetryPolicy::minimum_backoff() const {
  const ::google::protobuf::Duration* p = minimum_backoff_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.RetryPolicy.minimum_backoff)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RetryPolicy::release_minimum_backoff() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.RetryPolicy.minimum_backoff)
  
  ::google::protobuf::Duration* temp = minimum_backoff_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  minimum_backoff_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* RetryPolicy::unsafe_arena_release_minimum_backoff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.RetryPolicy.minimum_backoff)
  
  ::google::protobuf::Duration* temp = minimum_backoff_;
  minimum_backoff_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* RetryPolicy::mutable_minimum_backoff() {
  
  if (minimum_backoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    minimum_backoff_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.RetryPolicy.minimum_backoff)
  return minimum_backoff_;
}
inline void RetryPolicy::set_allocated_minimum_backoff(::google::protobuf::Duration* minimum_backoff) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(minimum_backoff_);
  }
  if (minimum_backoff) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(minimum_backoff)->GetArena();
    if (message_arena != submessage_arena) {
      minimum_backoff = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, minimum_backoff, submessage_arena);
    }
    
  } else {
    
  }
  minimum_backoff_ = minimum_backoff;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.RetryPolicy.minimum_backoff)
}

// .google.protobuf.Duration maximum_backoff = 2;
inline bool RetryPolicy::has_maximum_backoff() const {
  return this != internal_default_instance() && maximum_backoff_ != nullptr;
}
inline const ::google::protobuf::Duration& RetryPolicy::maximum_backoff() const {
  const ::google::protobuf::Duration* p = maximum_backoff_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.RetryPolicy.maximum_backoff)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* RetryPolicy::release_maximum_backoff() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.RetryPolicy.maximum_backoff)
  
  ::google::protobuf::Duration* temp = maximum_backoff_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  maximum_backoff_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* RetryPolicy::unsafe_arena_release_maximum_backoff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.RetryPolicy.maximum_backoff)
  
  ::google::protobuf::Duration* temp = maximum_backoff_;
  maximum_backoff_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* RetryPolicy::mutable_maximum_backoff() {
  
  if (maximum_backoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    maximum_backoff_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.RetryPolicy.maximum_backoff)
  return maximum_backoff_;
}
inline void RetryPolicy::set_allocated_maximum_backoff(::google::protobuf::Duration* maximum_backoff) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(maximum_backoff_);
  }
  if (maximum_backoff) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(maximum_backoff)->GetArena();
    if (message_arena != submessage_arena) {
      maximum_backoff = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maximum_backoff, submessage_arena);
    }
    
  } else {
    
  }
  maximum_backoff_ = maximum_backoff;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.RetryPolicy.maximum_backoff)
}

// -------------------------------------------------------------------

// DeadLetterPolicy

// string dead_letter_topic = 1;
inline void DeadLetterPolicy::clear_dead_letter_topic() {
  dead_letter_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeadLetterPolicy::dead_letter_topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
  return dead_letter_topic_.Get();
}
inline void DeadLetterPolicy::set_dead_letter_topic(const ::std::string& value) {
  
  dead_letter_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}
#if LANG_CXX11
inline void DeadLetterPolicy::set_dead_letter_topic(::std::string&& value) {
  
  dead_letter_topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}
#endif
inline void DeadLetterPolicy::set_dead_letter_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dead_letter_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}
inline void DeadLetterPolicy::set_dead_letter_topic(const char* value,
    size_t size) {
  
  dead_letter_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}
inline ::std::string* DeadLetterPolicy::mutable_dead_letter_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
  return dead_letter_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeadLetterPolicy::release_dead_letter_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
  
  return dead_letter_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeadLetterPolicy::set_allocated_dead_letter_topic(::std::string* dead_letter_topic) {
  if (dead_letter_topic != nullptr) {
    
  } else {
    
  }
  dead_letter_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dead_letter_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}
inline ::std::string* DeadLetterPolicy::unsafe_arena_release_dead_letter_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return dead_letter_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeadLetterPolicy::unsafe_arena_set_allocated_dead_letter_topic(
    ::std::string* dead_letter_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (dead_letter_topic != nullptr) {
    
  } else {
    
  }
  dead_letter_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dead_letter_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeadLetterPolicy.dead_letter_topic)
}

// int32 max_delivery_attempts = 2;
inline void DeadLetterPolicy::clear_max_delivery_attempts() {
  max_delivery_attempts_ = 0;
}
inline ::google::protobuf::int32 DeadLetterPolicy::max_delivery_attempts() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeadLetterPolicy.max_delivery_attempts)
  return max_delivery_attempts_;
}
inline void DeadLetterPolicy::set_max_delivery_attempts(::google::protobuf::int32 value) {
  
  max_delivery_attempts_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeadLetterPolicy.max_delivery_attempts)
}

// -------------------------------------------------------------------

// ExpirationPolicy

// .google.protobuf.Duration ttl = 1;
inline bool ExpirationPolicy::has_ttl() const {
  return this != internal_default_instance() && ttl_ != nullptr;
}
inline const ::google::protobuf::Duration& ExpirationPolicy::ttl() const {
  const ::google::protobuf::Duration* p = ttl_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ExpirationPolicy.ttl)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* ExpirationPolicy::release_ttl() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ExpirationPolicy.ttl)
  
  ::google::protobuf::Duration* temp = ttl_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* ExpirationPolicy::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ExpirationPolicy.ttl)
  
  ::google::protobuf::Duration* temp = ttl_;
  ttl_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* ExpirationPolicy::mutable_ttl() {
  
  if (ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    ttl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ExpirationPolicy.ttl)
  return ttl_;
}
inline void ExpirationPolicy::set_allocated_ttl(::google::protobuf::Duration* ttl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ttl_);
  }
  if (ttl) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ttl)->GetArena();
    if (message_arena != submessage_arena) {
      ttl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    
  } else {
    
  }
  ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ExpirationPolicy.ttl)
}

// -------------------------------------------------------------------

// PushConfig_OidcToken

// string service_account_email = 1;
inline void PushConfig_OidcToken::clear_service_account_email() {
  service_account_email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PushConfig_OidcToken::service_account_email() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
  return service_account_email_.Get();
}
inline void PushConfig_OidcToken::set_service_account_email(const ::std::string& value) {
  
  service_account_email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}
#if LANG_CXX11
inline void PushConfig_OidcToken::set_service_account_email(::std::string&& value) {
  
  service_account_email_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}
#endif
inline void PushConfig_OidcToken::set_service_account_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_account_email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}
inline void PushConfig_OidcToken::set_service_account_email(const char* value,
    size_t size) {
  
  service_account_email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}
inline ::std::string* PushConfig_OidcToken::mutable_service_account_email() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
  return service_account_email_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PushConfig_OidcToken::release_service_account_email() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
  
  return service_account_email_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PushConfig_OidcToken::set_allocated_service_account_email(::std::string* service_account_email) {
  if (service_account_email != nullptr) {
    
  } else {
    
  }
  service_account_email_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account_email,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}
inline ::std::string* PushConfig_OidcToken::unsafe_arena_release_service_account_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_account_email_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PushConfig_OidcToken::unsafe_arena_set_allocated_service_account_email(
    ::std::string* service_account_email) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_account_email != nullptr) {
    
  } else {
    
  }
  service_account_email_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_account_email, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PushConfig.OidcToken.service_account_email)
}

// string audience = 2;
inline void PushConfig_OidcToken::clear_audience() {
  audience_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PushConfig_OidcToken::audience() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.OidcToken.audience)
  return audience_.Get();
}
inline void PushConfig_OidcToken::set_audience(const ::std::string& value) {
  
  audience_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.OidcToken.audience)
}
#if LANG_CXX11
inline void PushConfig_OidcToken::set_audience(::std::string&& value) {
  
  audience_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PushConfig.OidcToken.audience)
}
#endif
inline void PushConfig_OidcToken::set_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audience_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PushConfig.OidcToken.audience)
}
inline void PushConfig_OidcToken::set_audience(const char* value,
    size_t size) {
  
  audience_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PushConfig.OidcToken.audience)
}
inline ::std::string* PushConfig_OidcToken::mutable_audience() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.OidcToken.audience)
  return audience_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PushConfig_OidcToken::release_audience() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.OidcToken.audience)
  
  return audience_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PushConfig_OidcToken::set_allocated_audience(::std::string* audience) {
  if (audience != nullptr) {
    
  } else {
    
  }
  audience_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.OidcToken.audience)
}
inline ::std::string* PushConfig_OidcToken::unsafe_arena_release_audience() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PushConfig.OidcToken.audience)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return audience_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PushConfig_OidcToken::unsafe_arena_set_allocated_audience(
    ::std::string* audience) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (audience != nullptr) {
    
  } else {
    
  }
  audience_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      audience, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PushConfig.OidcToken.audience)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PushConfig

// string push_endpoint = 1;
inline void PushConfig::clear_push_endpoint() {
  push_endpoint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PushConfig::push_endpoint() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.push_endpoint)
  return push_endpoint_.Get();
}
inline void PushConfig::set_push_endpoint(const ::std::string& value) {
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.push_endpoint)
}
#if LANG_CXX11
inline void PushConfig::set_push_endpoint(::std::string&& value) {
  
  push_endpoint_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PushConfig.push_endpoint)
}
#endif
inline void PushConfig::set_push_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PushConfig.push_endpoint)
}
inline void PushConfig::set_push_endpoint(const char* value,
    size_t size) {
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PushConfig.push_endpoint)
}
inline ::std::string* PushConfig::mutable_push_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.push_endpoint)
  return push_endpoint_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PushConfig::release_push_endpoint() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.push_endpoint)
  
  return push_endpoint_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PushConfig::set_allocated_push_endpoint(::std::string* push_endpoint) {
  if (push_endpoint != nullptr) {
    
  } else {
    
  }
  push_endpoint_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_endpoint,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.push_endpoint)
}
inline ::std::string* PushConfig::unsafe_arena_release_push_endpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PushConfig.push_endpoint)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return push_endpoint_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PushConfig::unsafe_arena_set_allocated_push_endpoint(
    ::std::string* push_endpoint) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (push_endpoint != nullptr) {
    
  } else {
    
  }
  push_endpoint_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      push_endpoint, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PushConfig.push_endpoint)
}

// map<string, string> attributes = 2;
inline int PushConfig::attributes_size() const {
  return attributes_.size();
}
inline void PushConfig::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PushConfig::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PushConfig.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PushConfig::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PushConfig.attributes)
  return attributes_.MutableMap();
}

// .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
inline bool PushConfig::has_oidc_token() const {
  return authentication_method_case() == kOidcToken;
}
inline void PushConfig::set_has_oidc_token() {
  _oneof_case_[0] = kOidcToken;
}
inline void PushConfig::clear_oidc_token() {
  if (has_oidc_token()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete authentication_method_.oidc_token_;
    }
    clear_has_authentication_method();
  }
}
inline ::google::pubsub::v1::PushConfig_OidcToken* PushConfig::release_oidc_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.oidc_token)
  if (has_oidc_token()) {
    clear_has_authentication_method();
      ::google::pubsub::v1::PushConfig_OidcToken* temp = authentication_method_.oidc_token_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    authentication_method_.oidc_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::pubsub::v1::PushConfig_OidcToken& PushConfig::oidc_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.oidc_token)
  return has_oidc_token()
      ? *authentication_method_.oidc_token_
      : *reinterpret_cast< ::google::pubsub::v1::PushConfig_OidcToken*>(&::google::pubsub::v1::_PushConfig_OidcToken_default_instance_);
}
inline ::google::pubsub::v1::PushConfig_OidcToken* PushConfig::unsafe_arena_release_oidc_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PushConfig.oidc_token)
  if (has_oidc_token()) {
    clear_has_authentication_method();
    ::google::pubsub::v1::PushConfig_OidcToken* temp = authentication_method_.oidc_token_;
    authentication_method_.oidc_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PushConfig::unsafe_arena_set_allocated_oidc_token(::google::pubsub::v1::PushConfig_OidcToken* oidc_token) {
  clear_authentication_method();
  if (oidc_token) {
    set_has_oidc_token();
    authentication_method_.oidc_token_ = oidc_token;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PushConfig.oidc_token)
}
inline ::google::pubsub::v1::PushConfig_OidcToken* PushConfig::mutable_oidc_token() {
  if (!has_oidc_token()) {
    clear_authentication_method();
    set_has_oidc_token();
    authentication_method_.oidc_token_ = CreateMaybeMessage< ::google::pubsub::v1::PushConfig_OidcToken >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.oidc_token)
  return authentication_method_.oidc_token_;
}

inline bool PushConfig::has_authentication_method() const {
  return authentication_method_case() != AUTHENTICATION_METHOD_NOT_SET;
}
inline void PushConfig::clear_has_authentication_method() {
  _oneof_case_[0] = AUTHENTICATION_METHOD_NOT_SET;
}
inline PushConfig::AuthenticationMethodCase PushConfig::authentication_method_case() const {
  return PushConfig::AuthenticationMethodCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReceivedMessage

// string ack_id = 1;
inline void ReceivedMessage::clear_ack_id() {
  ack_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReceivedMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.ack_id)
  return ack_id_.Get();
}
inline void ReceivedMessage::set_ack_id(const ::std::string& value) {
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ReceivedMessage.ack_id)
}
#if LANG_CXX11
inline void ReceivedMessage::set_ack_id(::std::string&& value) {
  
  ack_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ReceivedMessage.ack_id)
}
#endif
inline void ReceivedMessage::set_ack_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ReceivedMessage.ack_id)
}
inline void ReceivedMessage::set_ack_id(const char* value,
    size_t size) {
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ReceivedMessage.ack_id)
}
inline ::std::string* ReceivedMessage::mutable_ack_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.ack_id)
  return ack_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReceivedMessage::release_ack_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.ack_id)
  
  return ack_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReceivedMessage::set_allocated_ack_id(::std::string* ack_id) {
  if (ack_id != nullptr) {
    
  } else {
    
  }
  ack_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ack_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.ack_id)
}
inline ::std::string* ReceivedMessage::unsafe_arena_release_ack_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ReceivedMessage.ack_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return ack_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReceivedMessage::unsafe_arena_set_allocated_ack_id(
    ::std::string* ack_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (ack_id != nullptr) {
    
  } else {
    
  }
  ack_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ack_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.ack_id)
}

// .google.pubsub.v1.PubsubMessage message = 2;
inline bool ReceivedMessage::has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline void ReceivedMessage::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::google::pubsub::v1::PubsubMessage& ReceivedMessage::message() const {
  const ::google::pubsub::v1::PubsubMessage* p = message_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.message)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::PubsubMessage*>(
      &::google::pubsub::v1::_PubsubMessage_default_instance_);
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::release_message() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.message)
  
  ::google::pubsub::v1::PubsubMessage* temp = message_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  message_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ReceivedMessage.message)
  
  ::google::pubsub::v1::PubsubMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::PubsubMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.message)
  return message_;
}
inline void ReceivedMessage::set_allocated_message(::google::pubsub::v1::PubsubMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}

// int32 delivery_attempt = 3;
inline void ReceivedMessage::clear_delivery_attempt() {
  delivery_attempt_ = 0;
}
inline ::google::protobuf::int32 ReceivedMessage::delivery_attempt() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.delivery_attempt)
  return delivery_attempt_;
}
inline void ReceivedMessage::set_delivery_attempt(::google::protobuf::int32 value) {
  
  delivery_attempt_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ReceivedMessage.delivery_attempt)
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return subscription_.Get();
}
inline void GetSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
#if LANG_CXX11
inline void GetSubscriptionRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
#endif
inline void GetSubscriptionRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
inline void GetSubscriptionRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
inline ::std::string* GetSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetSubscriptionRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
inline ::std::string* GetSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.GetSubscriptionRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.GetSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// UpdateSubscriptionRequest

// .google.pubsub.v1.Subscription subscription = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSubscriptionRequest::has_subscription() const {
  return this != internal_default_instance() && subscription_ != nullptr;
}
inline void UpdateSubscriptionRequest::clear_subscription() {
  if (GetArenaNoVirtual() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
}
inline const ::google::pubsub::v1::Subscription& UpdateSubscriptionRequest::subscription() const {
  const ::google::pubsub::v1::Subscription* p = subscription_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::Subscription*>(
      &::google::pubsub::v1::_Subscription_default_instance_);
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  
  ::google::pubsub::v1::Subscription* temp = subscription_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  subscription_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  
  ::google::pubsub::v1::Subscription* temp = subscription_;
  subscription_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::mutable_subscription() {
  
  if (subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Subscription>(GetArenaNoVirtual());
    subscription_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  return subscription_;
}
inline void UpdateSubscriptionRequest::set_allocated_subscription(::google::pubsub::v1::Subscription* subscription) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subscription_;
  }
  if (subscription) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(subscription);
    if (message_arena != submessage_arena) {
      subscription = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    
  } else {
    
  }
  subscription_ = subscription;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSubscriptionRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline const ::google::protobuf::FieldMask& UpdateSubscriptionRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateSubscriptionRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSubscriptionRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSubscriptionRequest::mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  return update_mask_;
}
inline void UpdateSubscriptionRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
}

// -------------------------------------------------------------------

// ListSubscriptionsRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSubscriptionsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSubscriptionsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.project)
  return project_.Get();
}
inline void ListSubscriptionsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.project)
}
#if LANG_CXX11
inline void ListSubscriptionsRequest::set_project(::std::string&& value) {
  
  project_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSubscriptionsRequest.project)
}
#endif
inline void ListSubscriptionsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsRequest.project)
}
inline void ListSubscriptionsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsRequest.project)
}
inline ::std::string* ListSubscriptionsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSubscriptionsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.project)
}
inline ::std::string* ListSubscriptionsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (project != nullptr) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.project)
}

// int32 page_size = 2;
inline void ListSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_size)
  return page_size_;
}
inline void ListSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return page_token_.Get();
}
inline void ListSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
#if LANG_CXX11
inline void ListSubscriptionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
#endif
inline void ListSubscriptionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
inline void ListSubscriptionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
inline ::std::string* ListSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
inline ::std::string* ListSubscriptionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSubscriptionsResponse

// repeated .google.pubsub.v1.Subscription subscriptions = 1;
inline int ListSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline ::google::pubsub::v1::Subscription* ListSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >*
ListSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}
inline const ::google::pubsub::v1::Subscription& ListSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
inline ::google::pubsub::v1::Subscription* ListSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >&
ListSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_;
}

// string next_page_token = 2;
inline void ListSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListSubscriptionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
#endif
inline void ListSubscriptionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
inline void ListSubscriptionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListSubscriptionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSubscriptionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSubscriptionRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return subscription_.Get();
}
inline void DeleteSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
#if LANG_CXX11
inline void DeleteSubscriptionRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
#endif
inline void DeleteSubscriptionRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
inline void DeleteSubscriptionRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
inline ::std::string* DeleteSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
inline ::std::string* DeleteSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// ModifyPushConfigRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ModifyPushConfigRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModifyPushConfigRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return subscription_.Get();
}
inline void ModifyPushConfigRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
#if LANG_CXX11
inline void ModifyPushConfigRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
#endif
inline void ModifyPushConfigRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
inline void ModifyPushConfigRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
inline ::std::string* ModifyPushConfigRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModifyPushConfigRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModifyPushConfigRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
inline ::std::string* ModifyPushConfigRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModifyPushConfigRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}

// .google.pubsub.v1.PushConfig push_config = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool ModifyPushConfigRequest::has_push_config() const {
  return this != internal_default_instance() && push_config_ != nullptr;
}
inline void ModifyPushConfigRequest::clear_push_config() {
  if (GetArenaNoVirtual() == nullptr && push_config_ != nullptr) {
    delete push_config_;
  }
  push_config_ = nullptr;
}
inline const ::google::pubsub::v1::PushConfig& ModifyPushConfigRequest::push_config() const {
  const ::google::pubsub::v1::PushConfig* p = push_config_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::PushConfig*>(
      &::google::pubsub::v1::_PushConfig_default_instance_);
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  push_config_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  push_config_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::mutable_push_config() {
  
  if (push_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::PushConfig>(GetArenaNoVirtual());
    push_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return push_config_;
}
inline void ModifyPushConfigRequest::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete push_config_;
  }
  if (push_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(push_config);
    if (message_arena != submessage_arena) {
      push_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}

// -------------------------------------------------------------------

// PullRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PullRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.subscription)
  return subscription_.Get();
}
inline void PullRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.subscription)
}
#if LANG_CXX11
inline void PullRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PullRequest.subscription)
}
#endif
inline void PullRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PullRequest.subscription)
}
inline void PullRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PullRequest.subscription)
}
inline ::std::string* PullRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PullRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PullRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PullRequest.subscription)
}
inline ::std::string* PullRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PullRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PullRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PullRequest.subscription)
}

// bool return_immediately = 2 [deprecated = true, (.google.api.field_behavior) = OPTIONAL];
inline void PullRequest::clear_return_immediately() {
  return_immediately_ = false;
}
inline bool PullRequest::return_immediately() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.return_immediately)
  return return_immediately_;
}
inline void PullRequest::set_return_immediately(bool value) {
  
  return_immediately_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.return_immediately)
}

// int32 max_messages = 3 [(.google.api.field_behavior) = REQUIRED];
inline void PullRequest::clear_max_messages() {
  max_messages_ = 0;
}
inline ::google::protobuf::int32 PullRequest::max_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.max_messages)
  return max_messages_;
}
inline void PullRequest::set_max_messages(::google::protobuf::int32 value) {
  
  max_messages_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.max_messages)
}

// -------------------------------------------------------------------

// PullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
inline int PullResponse::received_messages_size() const {
  return received_messages_.size();
}
inline void PullResponse::clear_received_messages() {
  received_messages_.Clear();
}
inline ::google::pubsub::v1::ReceivedMessage* PullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
PullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PullResponse.received_messages)
  return &received_messages_;
}
inline const ::google::pubsub::v1::ReceivedMessage& PullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Get(index);
}
inline ::google::pubsub::v1::ReceivedMessage* PullResponse::add_received_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
PullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_;
}

// -------------------------------------------------------------------

// ModifyAckDeadlineRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ModifyAckDeadlineRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModifyAckDeadlineRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return subscription_.Get();
}
inline void ModifyAckDeadlineRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
#endif
inline void ModifyAckDeadlineRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
inline void ModifyAckDeadlineRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
inline ::std::string* ModifyAckDeadlineRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModifyAckDeadlineRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModifyAckDeadlineRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
inline ::std::string* ModifyAckDeadlineRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModifyAckDeadlineRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}

// repeated string ack_ids = 4 [(.google.api.field_behavior) = REQUIRED];
inline int ModifyAckDeadlineRequest::ack_ids_size() const {
  return ack_ids_.size();
}
inline void ModifyAckDeadlineRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
inline const ::std::string& ModifyAckDeadlineRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Get(index);
}
inline ::std::string* ModifyAckDeadlineRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline ::std::string* ModifyAckDeadlineRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Add();
}
inline void ModifyAckDeadlineRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::add_ack_ids(::std::string&& value) {
  ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
#endif
inline void ModifyAckDeadlineRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ModifyAckDeadlineRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ModifyAckDeadlineRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return &ack_ids_;
}

// int32 ack_deadline_seconds = 3 [(.google.api.field_behavior) = REQUIRED];
inline void ModifyAckDeadlineRequest::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 ModifyAckDeadlineRequest::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
inline void ModifyAckDeadlineRequest::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
}

// -------------------------------------------------------------------

// AcknowledgeRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void AcknowledgeRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AcknowledgeRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.subscription)
  return subscription_.Get();
}
inline void AcknowledgeRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.subscription)
}
#if LANG_CXX11
inline void AcknowledgeRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.AcknowledgeRequest.subscription)
}
#endif
inline void AcknowledgeRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.AcknowledgeRequest.subscription)
}
inline void AcknowledgeRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.AcknowledgeRequest.subscription)
}
inline ::std::string* AcknowledgeRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AcknowledgeRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.AcknowledgeRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AcknowledgeRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.AcknowledgeRequest.subscription)
}
inline ::std::string* AcknowledgeRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.AcknowledgeRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AcknowledgeRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.AcknowledgeRequest.subscription)
}

// repeated string ack_ids = 2 [(.google.api.field_behavior) = REQUIRED];
inline int AcknowledgeRequest::ack_ids_size() const {
  return ack_ids_.size();
}
inline void AcknowledgeRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
inline const ::std::string& AcknowledgeRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Get(index);
}
inline ::std::string* AcknowledgeRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
inline void AcknowledgeRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AcknowledgeRequest::set_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline ::std::string* AcknowledgeRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Add();
}
inline void AcknowledgeRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
#if LANG_CXX11
inline void AcknowledgeRequest::add_ack_ids(::std::string&& value) {
  ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
#endif
inline void AcknowledgeRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AcknowledgeRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AcknowledgeRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return &ack_ids_;
}

// -------------------------------------------------------------------

// StreamingPullRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void StreamingPullRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamingPullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.subscription)
  return subscription_.Get();
}
inline void StreamingPullRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.subscription)
}
#if LANG_CXX11
inline void StreamingPullRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.StreamingPullRequest.subscription)
}
#endif
inline void StreamingPullRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.subscription)
}
inline void StreamingPullRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.subscription)
}
inline ::std::string* StreamingPullRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamingPullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingPullRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullRequest.subscription)
}
inline ::std::string* StreamingPullRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.StreamingPullRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingPullRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.StreamingPullRequest.subscription)
}

// repeated string ack_ids = 2;
inline int StreamingPullRequest::ack_ids_size() const {
  return ack_ids_.size();
}
inline void StreamingPullRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
inline const ::std::string& StreamingPullRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Get(index);
}
inline ::std::string* StreamingPullRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
inline void StreamingPullRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamingPullRequest::set_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamingPullRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline ::std::string* StreamingPullRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Add();
}
inline void StreamingPullRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
#if LANG_CXX11
inline void StreamingPullRequest::add_ack_ids(::std::string&& value) {
  ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
#endif
inline void StreamingPullRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StreamingPullRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StreamingPullRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return &ack_ids_;
}

// repeated int32 modify_deadline_seconds = 3;
inline int StreamingPullRequest::modify_deadline_seconds_size() const {
  return modify_deadline_seconds_.size();
}
inline void StreamingPullRequest::clear_modify_deadline_seconds() {
  modify_deadline_seconds_.Clear();
}
inline ::google::protobuf::int32 StreamingPullRequest::modify_deadline_seconds(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return modify_deadline_seconds_.Get(index);
}
inline void StreamingPullRequest::set_modify_deadline_seconds(int index, ::google::protobuf::int32 value) {
  modify_deadline_seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
inline void StreamingPullRequest::add_modify_deadline_seconds(::google::protobuf::int32 value) {
  modify_deadline_seconds_.Add(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StreamingPullRequest::modify_deadline_seconds() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return modify_deadline_seconds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StreamingPullRequest::mutable_modify_deadline_seconds() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return &modify_deadline_seconds_;
}

// repeated string modify_deadline_ack_ids = 4;
inline int StreamingPullRequest::modify_deadline_ack_ids_size() const {
  return modify_deadline_ack_ids_.size();
}
inline void StreamingPullRequest::clear_modify_deadline_ack_ids() {
  modify_deadline_ack_ids_.Clear();
}
inline const ::std::string& StreamingPullRequest::modify_deadline_ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Get(index);
}
inline ::std::string* StreamingPullRequest::mutable_modify_deadline_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Mutable(index);
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  modify_deadline_ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  modify_deadline_ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  modify_deadline_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value, size_t size) {
  modify_deadline_ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline ::std::string* StreamingPullRequest::add_modify_deadline_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Add();
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const ::std::string& value) {
  modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
#if LANG_CXX11
inline void StreamingPullRequest::add_modify_deadline_ack_ids(::std::string&& value) {
  modify_deadline_ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
#endif
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value, size_t size) {
  modify_deadline_ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
StreamingPullRequest::modify_deadline_ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
StreamingPullRequest::mutable_modify_deadline_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return &modify_deadline_ack_ids_;
}

// int32 stream_ack_deadline_seconds = 5 [(.google.api.field_behavior) = REQUIRED];
inline void StreamingPullRequest::clear_stream_ack_deadline_seconds() {
  stream_ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 StreamingPullRequest::stream_ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
  return stream_ack_deadline_seconds_;
}
inline void StreamingPullRequest::set_stream_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  stream_ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
}

// string client_id = 6;
inline void StreamingPullRequest::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamingPullRequest::client_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.client_id)
  return client_id_.Get();
}
inline void StreamingPullRequest::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.client_id)
}
#if LANG_CXX11
inline void StreamingPullRequest::set_client_id(::std::string&& value) {
  
  client_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.StreamingPullRequest.client_id)
}
#endif
inline void StreamingPullRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.client_id)
}
inline void StreamingPullRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.client_id)
}
inline ::std::string* StreamingPullRequest::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamingPullRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullRequest.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingPullRequest::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullRequest.client_id)
}
inline ::std::string* StreamingPullRequest::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.StreamingPullRequest.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingPullRequest::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.StreamingPullRequest.client_id)
}

// int64 max_outstanding_messages = 7;
inline void StreamingPullRequest::clear_max_outstanding_messages() {
  max_outstanding_messages_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StreamingPullRequest::max_outstanding_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.max_outstanding_messages)
  return max_outstanding_messages_;
}
inline void StreamingPullRequest::set_max_outstanding_messages(::google::protobuf::int64 value) {
  
  max_outstanding_messages_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.max_outstanding_messages)
}

// int64 max_outstanding_bytes = 8;
inline void StreamingPullRequest::clear_max_outstanding_bytes() {
  max_outstanding_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 StreamingPullRequest::max_outstanding_bytes() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.max_outstanding_bytes)
  return max_outstanding_bytes_;
}
inline void StreamingPullRequest::set_max_outstanding_bytes(::google::protobuf::int64 value) {
  
  max_outstanding_bytes_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.max_outstanding_bytes)
}

// -------------------------------------------------------------------

// StreamingPullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
inline int StreamingPullResponse::received_messages_size() const {
  return received_messages_.size();
}
inline void StreamingPullResponse::clear_received_messages() {
  received_messages_.Clear();
}
inline ::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
StreamingPullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return &received_messages_;
}
inline const ::google::pubsub::v1::ReceivedMessage& StreamingPullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Get(index);
}
inline ::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::add_received_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
StreamingPullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateSnapshotRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSnapshotRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateSnapshotRequest::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSnapshotRequest.name)
  return name_.Get();
}
inline void CreateSnapshotRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSnapshotRequest.name)
}
#if LANG_CXX11
inline void CreateSnapshotRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.CreateSnapshotRequest.name)
}
#endif
inline void CreateSnapshotRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.CreateSnapshotRequest.name)
}
inline void CreateSnapshotRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.CreateSnapshotRequest.name)
}
inline ::std::string* CreateSnapshotRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSnapshotRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSnapshotRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSnapshotRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSnapshotRequest.name)
}
inline ::std::string* CreateSnapshotRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.CreateSnapshotRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.CreateSnapshotRequest.name)
}

// string subscription = 2 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateSnapshotRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateSnapshotRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSnapshotRequest.subscription)
  return subscription_.Get();
}
inline void CreateSnapshotRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
#if LANG_CXX11
inline void CreateSnapshotRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
#endif
inline void CreateSnapshotRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
inline void CreateSnapshotRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
inline ::std::string* CreateSnapshotRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSnapshotRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSnapshotRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSnapshotRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
inline ::std::string* CreateSnapshotRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.CreateSnapshotRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.CreateSnapshotRequest.subscription)
}

// map<string, string> labels = 3;
inline int CreateSnapshotRequest::labels_size() const {
  return labels_.size();
}
inline void CreateSnapshotRequest::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
CreateSnapshotRequest::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.CreateSnapshotRequest.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
CreateSnapshotRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.CreateSnapshotRequest.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// UpdateSnapshotRequest

// .google.pubsub.v1.Snapshot snapshot = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSnapshotRequest::has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline void UpdateSnapshotRequest::clear_snapshot() {
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::google::pubsub::v1::Snapshot& UpdateSnapshotRequest::snapshot() const {
  const ::google::pubsub::v1::Snapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::pubsub::v1::Snapshot*>(
      &::google::pubsub::v1::_Snapshot_default_instance_);
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  
  ::google::pubsub::v1::Snapshot* temp = snapshot_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  snapshot_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  
  ::google::pubsub::v1::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::pubsub::v1::Snapshot>(GetArenaNoVirtual());
    snapshot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  return snapshot_;
}
inline void UpdateSnapshotRequest::set_allocated_snapshot(::google::pubsub::v1::Snapshot* snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateSnapshotRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline const ::google::protobuf::FieldMask& UpdateSnapshotRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateSnapshotRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSnapshotRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSnapshotRequest::mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  return update_mask_;
}
inline void UpdateSnapshotRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Snapshot

// string name = 1;
inline void Snapshot::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Snapshot::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.name)
  return name_.Get();
}
inline void Snapshot::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Snapshot.name)
}
#if LANG_CXX11
inline void Snapshot::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Snapshot.name)
}
#endif
inline void Snapshot::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Snapshot.name)
}
inline void Snapshot::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Snapshot.name)
}
inline ::std::string* Snapshot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Snapshot::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Snapshot::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.name)
}
inline ::std::string* Snapshot::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Snapshot.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Snapshot::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.name)
}

// string topic = 2 [(.google.api.resource_reference) = {
inline void Snapshot::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Snapshot::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.topic)
  return topic_.Get();
}
inline void Snapshot::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Snapshot.topic)
}
#if LANG_CXX11
inline void Snapshot::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Snapshot.topic)
}
#endif
inline void Snapshot::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Snapshot.topic)
}
inline void Snapshot::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Snapshot.topic)
}
inline ::std::string* Snapshot::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Snapshot::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Snapshot::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.topic)
}
inline ::std::string* Snapshot::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Snapshot.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Snapshot::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.topic)
}

// .google.protobuf.Timestamp expire_time = 3;
inline bool Snapshot::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Snapshot::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.expire_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Snapshot::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  expire_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Snapshot::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Snapshot.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Snapshot::mutable_expire_time() {
  
  if (expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    expire_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.expire_time)
  return expire_time_;
}
inline void Snapshot::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.expire_time)
}

// map<string, string> labels = 4;
inline int Snapshot::labels_size() const {
  return labels_.size();
}
inline void Snapshot::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Snapshot::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Snapshot.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Snapshot::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Snapshot.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// GetSnapshotRequest

// string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetSnapshotRequest::clear_snapshot() {
  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSnapshotRequest.snapshot)
  return snapshot_.Get();
}
inline void GetSnapshotRequest::set_snapshot(const ::std::string& value) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSnapshotRequest.snapshot)
}
#if LANG_CXX11
inline void GetSnapshotRequest::set_snapshot(::std::string&& value) {
  
  snapshot_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.GetSnapshotRequest.snapshot)
}
#endif
inline void GetSnapshotRequest::set_snapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.GetSnapshotRequest.snapshot)
}
inline void GetSnapshotRequest::set_snapshot(const char* value,
    size_t size) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.GetSnapshotRequest.snapshot)
}
inline ::std::string* GetSnapshotRequest::mutable_snapshot() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetSnapshotRequest.snapshot)
  return snapshot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSnapshotRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetSnapshotRequest.snapshot)
  
  return snapshot_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetSnapshotRequest::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot != nullptr) {
    
  } else {
    
  }
  snapshot_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetSnapshotRequest.snapshot)
}
inline ::std::string* GetSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.GetSnapshotRequest.snapshot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return snapshot_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::std::string* snapshot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (snapshot != nullptr) {
    
  } else {
    
  }
  snapshot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      snapshot, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.GetSnapshotRequest.snapshot)
}

// -------------------------------------------------------------------

// ListSnapshotsRequest

// string project = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSnapshotsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSnapshotsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.project)
  return project_.Get();
}
inline void ListSnapshotsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.project)
}
#if LANG_CXX11
inline void ListSnapshotsRequest::set_project(::std::string&& value) {
  
  project_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSnapshotsRequest.project)
}
#endif
inline void ListSnapshotsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSnapshotsRequest.project)
}
inline void ListSnapshotsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSnapshotsRequest.project)
}
inline ::std::string* ListSnapshotsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSnapshotsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsRequest.project)
}
inline ::std::string* ListSnapshotsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSnapshotsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (project != nullptr) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSnapshotsRequest.project)
}

// int32 page_size = 2;
inline void ListSnapshotsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListSnapshotsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.page_size)
  return page_size_;
}
inline void ListSnapshotsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.page_size)
}

// string page_token = 3;
inline void ListSnapshotsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSnapshotsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.page_token)
  return page_token_.Get();
}
inline void ListSnapshotsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
#if LANG_CXX11
inline void ListSnapshotsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
#endif
inline void ListSnapshotsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
inline void ListSnapshotsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
inline ::std::string* ListSnapshotsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSnapshotsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
inline ::std::string* ListSnapshotsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSnapshotsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSnapshotsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSnapshotsResponse

// repeated .google.pubsub.v1.Snapshot snapshots = 1;
inline int ListSnapshotsResponse::snapshots_size() const {
  return snapshots_.size();
}
inline void ListSnapshotsResponse::clear_snapshots() {
  snapshots_.Clear();
}
inline ::google::pubsub::v1::Snapshot* ListSnapshotsResponse::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >*
ListSnapshotsResponse::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return &snapshots_;
}
inline const ::google::pubsub::v1::Snapshot& ListSnapshotsResponse::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_.Get(index);
}
inline ::google::pubsub::v1::Snapshot* ListSnapshotsResponse::add_snapshots() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >&
ListSnapshotsResponse::snapshots() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_;
}

// string next_page_token = 2;
inline void ListSnapshotsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSnapshotsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListSnapshotsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListSnapshotsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
#endif
inline void ListSnapshotsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
inline void ListSnapshotsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
inline ::std::string* ListSnapshotsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSnapshotsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSnapshotsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
inline ::std::string* ListSnapshotsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSnapshotsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSnapshotRequest

// string snapshot = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteSnapshotRequest::clear_snapshot() {
  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  return snapshot_.Get();
}
inline void DeleteSnapshotRequest::set_snapshot(const ::std::string& value) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
#if LANG_CXX11
inline void DeleteSnapshotRequest::set_snapshot(::std::string&& value) {
  
  snapshot_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
#endif
inline void DeleteSnapshotRequest::set_snapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
inline void DeleteSnapshotRequest::set_snapshot(const char* value,
    size_t size) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
inline ::std::string* DeleteSnapshotRequest::mutable_snapshot() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  return snapshot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteSnapshotRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  
  return snapshot_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteSnapshotRequest::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot != nullptr) {
    
  } else {
    
  }
  snapshot_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
inline ::std::string* DeleteSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return snapshot_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::std::string* snapshot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (snapshot != nullptr) {
    
  } else {
    
  }
  snapshot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      snapshot, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}

// -------------------------------------------------------------------

// SeekRequest

// string subscription = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SeekRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SeekRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.subscription)
  return subscription_.Get();
}
inline void SeekRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.subscription)
}
#if LANG_CXX11
inline void SeekRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.SeekRequest.subscription)
}
#endif
inline void SeekRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.SeekRequest.subscription)
}
inline void SeekRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.SeekRequest.subscription)
}
inline ::std::string* SeekRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SeekRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SeekRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.subscription)
}
inline ::std::string* SeekRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SeekRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SeekRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (subscription != nullptr) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SeekRequest.subscription)
}

// .google.protobuf.Timestamp time = 2;
inline bool SeekRequest::has_time() const {
  return target_case() == kTime;
}
inline void SeekRequest::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline ::google::protobuf::Timestamp* SeekRequest::release_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.time)
  if (has_time()) {
    clear_has_target();
      ::google::protobuf::Timestamp* temp = target_.time_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    target_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Timestamp& SeekRequest::time() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.time)
  return has_time()
      ? *target_.time_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* SeekRequest::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SeekRequest.time)
  if (has_time()) {
    clear_has_target();
    ::google::protobuf::Timestamp* temp = target_.time_;
    target_.time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeekRequest::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* time) {
  clear_target();
  if (time) {
    set_has_time();
    target_.time_ = time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SeekRequest.time)
}
inline ::google::protobuf::Timestamp* SeekRequest::mutable_time() {
  if (!has_time()) {
    clear_target();
    set_has_time();
    target_.time_ = CreateMaybeMessage< ::google::protobuf::Timestamp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.time)
  return target_.time_;
}

// string snapshot = 3 [(.google.api.resource_reference) = {
inline bool SeekRequest::has_snapshot() const {
  return target_case() == kSnapshot;
}
inline void SeekRequest::set_has_snapshot() {
  _oneof_case_[0] = kSnapshot;
}
inline void SeekRequest::clear_snapshot() {
  if (has_snapshot()) {
    target_.snapshot_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_target();
  }
}
inline const ::std::string& SeekRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.snapshot)
  if (has_snapshot()) {
    return target_.snapshot_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SeekRequest::set_snapshot(const ::std::string& value) {
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.snapshot)
}
#if LANG_CXX11
inline void SeekRequest::set_snapshot(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.snapshot)
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.SeekRequest.snapshot)
}
#endif
inline void SeekRequest::set_snapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.SeekRequest.snapshot)
}
inline void SeekRequest::set_snapshot(const char* value,
                             size_t size) {
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.SeekRequest.snapshot)
}
inline ::std::string* SeekRequest::mutable_snapshot() {
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return target_.snapshot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.snapshot)
}
inline ::std::string* SeekRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.snapshot)
  if (has_snapshot()) {
    clear_has_target();
    return target_.snapshot_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void SeekRequest::set_allocated_snapshot(::std::string* snapshot) {
  if (has_target()) {
    clear_target();
  }
  if (snapshot != nullptr) {
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(snapshot);
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.snapshot)
}
inline ::std::string* SeekRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SeekRequest.snapshot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_snapshot()) {
    clear_has_target();
    return target_.snapshot_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void SeekRequest::unsafe_arena_set_allocated_snapshot(::std::string* snapshot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_snapshot()) {
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (snapshot) {
    set_has_snapshot();
    target_.snapshot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SeekRequest.snapshot)
}

inline bool SeekRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void SeekRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline SeekRequest::TargetCase SeekRequest::target_case() const {
  return SeekRequest::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SeekResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace pubsub
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fpubsub_2fv1_2fpubsub_2eproto
