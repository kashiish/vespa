// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/dlp.proto

#include "google/privacy/dlp/v2/dlp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Action_JobNotificationEmails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishFindingsToCloudDataCatalog_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishSummaryToCscc_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishToStackdriver_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoundingBox_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Color_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTime_TimeZone_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DocumentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Finding_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HybridFindingDetails_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HybridInspectStatistics_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LargeCustomDictionaryStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Manual_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Range_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RedactConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReplaceWithInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TableLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimePartConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationErrorHandling_LeaveUntransformed_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationErrorHandling_ThrowError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<11> scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Action_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Container_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Schedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Table_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_InspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_JobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_HybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Location_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_QuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_StatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_DlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_FieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_StoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Finding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Action_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_PrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_TransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_AnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_StorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_CustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fempty_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Empty_google_2fprotobuf_2fempty_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Status_google_2frpc_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ftype_2fdate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Date_google_2ftype_2fdate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ftype_2ftimeofday_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeOfDay_google_2ftype_2ftimeofday_2eproto;
namespace google {
namespace privacy {
namespace dlp {
namespace v2 {
class ExcludeInfoTypesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExcludeInfoTypes> _instance;
} _ExcludeInfoTypes_default_instance_;
class ExclusionRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExclusionRule> _instance;
  const ::google::privacy::dlp::v2::CustomInfoType_Dictionary* dictionary_;
  const ::google::privacy::dlp::v2::CustomInfoType_Regex* regex_;
  const ::google::privacy::dlp::v2::ExcludeInfoTypes* exclude_info_types_;
} _ExclusionRule_default_instance_;
class InspectionRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectionRule> _instance;
  const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule* hotword_rule_;
  const ::google::privacy::dlp::v2::ExclusionRule* exclusion_rule_;
} _InspectionRule_default_instance_;
class InspectionRuleSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectionRuleSet> _instance;
} _InspectionRuleSet_default_instance_;
class InspectConfig_FindingLimits_InfoTypeLimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig_FindingLimits_InfoTypeLimit> _instance;
} _InspectConfig_FindingLimits_InfoTypeLimit_default_instance_;
class InspectConfig_FindingLimitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig_FindingLimits> _instance;
} _InspectConfig_FindingLimits_default_instance_;
class InspectConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectConfig> _instance;
} _InspectConfig_default_instance_;
class ByteContentItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ByteContentItem> _instance;
} _ByteContentItem_default_instance_;
class ContentItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentItem> _instance;
  ::google::protobuf::internal::ArenaStringPtr value_;
  const ::google::privacy::dlp::v2::Table* table_;
  const ::google::privacy::dlp::v2::ByteContentItem* byte_item_;
} _ContentItem_default_instance_;
class Table_RowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table_Row> _instance;
} _Table_Row_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table> _instance;
} _Table_default_instance_;
class InspectResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectResult> _instance;
} _InspectResult_default_instance_;
class Finding_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Finding_LabelsEntry_DoNotUse> _instance;
} _Finding_LabelsEntry_DoNotUse_default_instance_;
class FindingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Finding> _instance;
} _Finding_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class ContentLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContentLocation> _instance;
  const ::google::privacy::dlp::v2::RecordLocation* record_location_;
  const ::google::privacy::dlp::v2::ImageLocation* image_location_;
  const ::google::privacy::dlp::v2::DocumentLocation* document_location_;
  const ::google::privacy::dlp::v2::MetadataLocation* metadata_location_;
} _ContentLocation_default_instance_;
class MetadataLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetadataLocation> _instance;
  const ::google::privacy::dlp::v2::StorageMetadataLabel* storage_label_;
} _MetadataLocation_default_instance_;
class StorageMetadataLabelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageMetadataLabel> _instance;
} _StorageMetadataLabel_default_instance_;
class DocumentLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DocumentLocation> _instance;
} _DocumentLocation_default_instance_;
class RecordLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordLocation> _instance;
} _RecordLocation_default_instance_;
class TableLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableLocation> _instance;
} _TableLocation_default_instance_;
class ContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Container> _instance;
} _Container_default_instance_;
class RangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Range> _instance;
} _Range_default_instance_;
class ImageLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageLocation> _instance;
} _ImageLocation_default_instance_;
class BoundingBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class RedactImageRequest_ImageRedactionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactImageRequest_ImageRedactionConfig> _instance;
  const ::google::privacy::dlp::v2::InfoType* info_type_;
  bool redact_all_text_;
} _RedactImageRequest_ImageRedactionConfig_default_instance_;
class RedactImageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactImageRequest> _instance;
} _RedactImageRequest_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
class RedactImageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactImageResponse> _instance;
} _RedactImageResponse_default_instance_;
class DeidentifyContentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentifyContentRequest> _instance;
} _DeidentifyContentRequest_default_instance_;
class DeidentifyContentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentifyContentResponse> _instance;
} _DeidentifyContentResponse_default_instance_;
class ReidentifyContentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReidentifyContentRequest> _instance;
} _ReidentifyContentRequest_default_instance_;
class ReidentifyContentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReidentifyContentResponse> _instance;
} _ReidentifyContentResponse_default_instance_;
class InspectContentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectContentRequest> _instance;
} _InspectContentRequest_default_instance_;
class InspectContentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectContentResponse> _instance;
} _InspectContentResponse_default_instance_;
class OutputStorageConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutputStorageConfig> _instance;
  const ::google::privacy::dlp::v2::BigQueryTable* table_;
} _OutputStorageConfig_default_instance_;
class InfoTypeStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeStats> _instance;
} _InfoTypeStats_default_instance_;
class InspectDataSourceDetails_RequestedOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectDataSourceDetails_RequestedOptions> _instance;
} _InspectDataSourceDetails_RequestedOptions_default_instance_;
class InspectDataSourceDetails_ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectDataSourceDetails_Result> _instance;
} _InspectDataSourceDetails_Result_default_instance_;
class InspectDataSourceDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectDataSourceDetails> _instance;
} _InspectDataSourceDetails_default_instance_;
class HybridInspectStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridInspectStatistics> _instance;
} _HybridInspectStatistics_default_instance_;
class InfoTypeDescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeDescription> _instance;
} _InfoTypeDescription_default_instance_;
class ListInfoTypesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesRequest> _instance;
} _ListInfoTypesRequest_default_instance_;
class ListInfoTypesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInfoTypesResponse> _instance;
} _ListInfoTypesResponse_default_instance_;
class RiskAnalysisJobConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RiskAnalysisJobConfig> _instance;
} _RiskAnalysisJobConfig_default_instance_;
class QuasiIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuasiId> _instance;
  const ::google::privacy::dlp::v2::InfoType* info_type_;
  ::google::protobuf::internal::ArenaStringPtr custom_tag_;
  const ::google::protobuf::Empty* inferred_;
} _QuasiId_default_instance_;
class StatisticalTable_QuasiIdentifierFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticalTable_QuasiIdentifierField> _instance;
} _StatisticalTable_QuasiIdentifierField_default_instance_;
class StatisticalTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticalTable> _instance;
} _StatisticalTable_default_instance_;
class PrivacyMetric_NumericalStatsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_NumericalStatsConfig> _instance;
} _PrivacyMetric_NumericalStatsConfig_default_instance_;
class PrivacyMetric_CategoricalStatsConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_CategoricalStatsConfig> _instance;
} _PrivacyMetric_CategoricalStatsConfig_default_instance_;
class PrivacyMetric_KAnonymityConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_KAnonymityConfig> _instance;
} _PrivacyMetric_KAnonymityConfig_default_instance_;
class PrivacyMetric_LDiversityConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_LDiversityConfig> _instance;
} _PrivacyMetric_LDiversityConfig_default_instance_;
class PrivacyMetric_KMapEstimationConfig_TaggedFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_KMapEstimationConfig_TaggedField> _instance;
  const ::google::privacy::dlp::v2::InfoType* info_type_;
  ::google::protobuf::internal::ArenaStringPtr custom_tag_;
  const ::google::protobuf::Empty* inferred_;
} _PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_;
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField> _instance;
} _PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_default_instance_;
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable> _instance;
} _PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_default_instance_;
class PrivacyMetric_KMapEstimationConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_KMapEstimationConfig> _instance;
} _PrivacyMetric_KMapEstimationConfig_default_instance_;
class PrivacyMetric_DeltaPresenceEstimationConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric_DeltaPresenceEstimationConfig> _instance;
} _PrivacyMetric_DeltaPresenceEstimationConfig_default_instance_;
class PrivacyMetricDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivacyMetric> _instance;
  const ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* numerical_stats_config_;
  const ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config_;
  const ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* k_anonymity_config_;
  const ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* l_diversity_config_;
  const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* k_map_estimation_config_;
  const ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* delta_presence_estimation_config_;
} _PrivacyMetric_default_instance_;
class AnalyzeDataSourceRiskDetails_NumericalStatsResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_NumericalStatsResult> _instance;
} _AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_;
class AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket> _instance;
} _AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_CategoricalStatsResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_CategoricalStatsResult> _instance;
} _AnalyzeDataSourceRiskDetails_CategoricalStatsResult_default_instance_;
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClassDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass> _instance;
} _AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_;
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket> _instance;
} _AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_KAnonymityResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_KAnonymityResult> _instance;
} _AnalyzeDataSourceRiskDetails_KAnonymityResult_default_instance_;
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClassDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass> _instance;
} _AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_default_instance_;
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket> _instance;
} _AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_LDiversityResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_LDiversityResult> _instance;
} _AnalyzeDataSourceRiskDetails_LDiversityResult_default_instance_;
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues> _instance;
} _AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_default_instance_;
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket> _instance;
} _AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_KMapEstimationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_KMapEstimationResult> _instance;
} _AnalyzeDataSourceRiskDetails_KMapEstimationResult_default_instance_;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues> _instance;
} _AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_default_instance_;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket> _instance;
} _AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_default_instance_;
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult> _instance;
} _AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_default_instance_;
class AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions> _instance;
} _AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_default_instance_;
class AnalyzeDataSourceRiskDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnalyzeDataSourceRiskDetails> _instance;
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* numerical_stats_result_;
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* categorical_stats_result_;
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* k_anonymity_result_;
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* l_diversity_result_;
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* k_map_estimation_result_;
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* delta_presence_estimation_result_;
} _AnalyzeDataSourceRiskDetails_default_instance_;
class ValueFrequencyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValueFrequency> _instance;
} _ValueFrequency_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value> _instance;
  ::google::protobuf::int64 integer_value_;
  double float_value_;
  ::google::protobuf::internal::ArenaStringPtr string_value_;
  bool boolean_value_;
  const ::google::protobuf::Timestamp* timestamp_value_;
  const ::google::type::TimeOfDay* time_value_;
  const ::google::type::Date* date_value_;
  int day_of_week_value_;
} _Value_default_instance_;
class QuoteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuoteInfo> _instance;
  const ::google::privacy::dlp::v2::DateTime* date_time_;
} _QuoteInfo_default_instance_;
class DateTime_TimeZoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTime_TimeZone> _instance;
} _DateTime_TimeZone_default_instance_;
class DateTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTime> _instance;
} _DateTime_default_instance_;
class DeidentifyConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentifyConfig> _instance;
  const ::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations_;
  const ::google::privacy::dlp::v2::RecordTransformations* record_transformations_;
} _DeidentifyConfig_default_instance_;
class TransformationErrorHandling_ThrowErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationErrorHandling_ThrowError> _instance;
} _TransformationErrorHandling_ThrowError_default_instance_;
class TransformationErrorHandling_LeaveUntransformedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationErrorHandling_LeaveUntransformed> _instance;
} _TransformationErrorHandling_LeaveUntransformed_default_instance_;
class TransformationErrorHandlingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationErrorHandling> _instance;
  const ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError* throw_error_;
  const ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed* leave_untransformed_;
} _TransformationErrorHandling_default_instance_;
class PrimitiveTransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrimitiveTransformation> _instance;
  const ::google::privacy::dlp::v2::ReplaceValueConfig* replace_config_;
  const ::google::privacy::dlp::v2::RedactConfig* redact_config_;
  const ::google::privacy::dlp::v2::CharacterMaskConfig* character_mask_config_;
  const ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config_;
  const ::google::privacy::dlp::v2::FixedSizeBucketingConfig* fixed_size_bucketing_config_;
  const ::google::privacy::dlp::v2::BucketingConfig* bucketing_config_;
  const ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* replace_with_info_type_config_;
  const ::google::privacy::dlp::v2::TimePartConfig* time_part_config_;
  const ::google::privacy::dlp::v2::CryptoHashConfig* crypto_hash_config_;
  const ::google::privacy::dlp::v2::DateShiftConfig* date_shift_config_;
  const ::google::privacy::dlp::v2::CryptoDeterministicConfig* crypto_deterministic_config_;
} _PrimitiveTransformation_default_instance_;
class TimePartConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimePartConfig> _instance;
} _TimePartConfig_default_instance_;
class CryptoHashConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoHashConfig> _instance;
} _CryptoHashConfig_default_instance_;
class CryptoDeterministicConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoDeterministicConfig> _instance;
} _CryptoDeterministicConfig_default_instance_;
class ReplaceValueConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceValueConfig> _instance;
} _ReplaceValueConfig_default_instance_;
class ReplaceWithInfoTypeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReplaceWithInfoTypeConfig> _instance;
} _ReplaceWithInfoTypeConfig_default_instance_;
class RedactConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedactConfig> _instance;
} _RedactConfig_default_instance_;
class CharsToIgnoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharsToIgnore> _instance;
  ::google::protobuf::internal::ArenaStringPtr characters_to_skip_;
  int common_characters_to_ignore_;
} _CharsToIgnore_default_instance_;
class CharacterMaskConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CharacterMaskConfig> _instance;
} _CharacterMaskConfig_default_instance_;
class FixedSizeBucketingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedSizeBucketingConfig> _instance;
} _FixedSizeBucketingConfig_default_instance_;
class BucketingConfig_BucketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BucketingConfig_Bucket> _instance;
} _BucketingConfig_Bucket_default_instance_;
class BucketingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BucketingConfig> _instance;
} _BucketingConfig_default_instance_;
class CryptoReplaceFfxFpeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoReplaceFfxFpeConfig> _instance;
  int common_alphabet_;
  ::google::protobuf::internal::ArenaStringPtr custom_alphabet_;
  ::google::protobuf::int32 radix_;
} _CryptoReplaceFfxFpeConfig_default_instance_;
class CryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CryptoKey> _instance;
  const ::google::privacy::dlp::v2::TransientCryptoKey* transient_;
  const ::google::privacy::dlp::v2::UnwrappedCryptoKey* unwrapped_;
  const ::google::privacy::dlp::v2::KmsWrappedCryptoKey* kms_wrapped_;
} _CryptoKey_default_instance_;
class TransientCryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransientCryptoKey> _instance;
} _TransientCryptoKey_default_instance_;
class UnwrappedCryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnwrappedCryptoKey> _instance;
} _UnwrappedCryptoKey_default_instance_;
class KmsWrappedCryptoKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KmsWrappedCryptoKey> _instance;
} _KmsWrappedCryptoKey_default_instance_;
class DateShiftConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateShiftConfig> _instance;
  const ::google::privacy::dlp::v2::CryptoKey* crypto_key_;
} _DateShiftConfig_default_instance_;
class InfoTypeTransformations_InfoTypeTransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeTransformations_InfoTypeTransformation> _instance;
} _InfoTypeTransformations_InfoTypeTransformation_default_instance_;
class InfoTypeTransformationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoTypeTransformations> _instance;
} _InfoTypeTransformations_default_instance_;
class FieldTransformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldTransformation> _instance;
  const ::google::privacy::dlp::v2::PrimitiveTransformation* primitive_transformation_;
  const ::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations_;
} _FieldTransformation_default_instance_;
class RecordTransformationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordTransformations> _instance;
} _RecordTransformations_default_instance_;
class RecordSuppressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordSuppression> _instance;
} _RecordSuppression_default_instance_;
class RecordCondition_ConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition_Condition> _instance;
} _RecordCondition_Condition_default_instance_;
class RecordCondition_ConditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition_Conditions> _instance;
} _RecordCondition_Conditions_default_instance_;
class RecordCondition_ExpressionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition_Expressions> _instance;
  const ::google::privacy::dlp::v2::RecordCondition_Conditions* conditions_;
} _RecordCondition_Expressions_default_instance_;
class RecordConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCondition> _instance;
} _RecordCondition_default_instance_;
class TransformationOverviewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationOverview> _instance;
} _TransformationOverview_default_instance_;
class TransformationSummary_SummaryResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationSummary_SummaryResult> _instance;
} _TransformationSummary_SummaryResult_default_instance_;
class TransformationSummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransformationSummary> _instance;
} _TransformationSummary_default_instance_;
class ScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schedule> _instance;
  const ::google::protobuf::Duration* recurrence_period_duration_;
} _Schedule_default_instance_;
class ManualDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Manual> _instance;
} _Manual_default_instance_;
class InspectTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectTemplate> _instance;
} _InspectTemplate_default_instance_;
class DeidentifyTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeidentifyTemplate> _instance;
} _DeidentifyTemplate_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class JobTrigger_TriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobTrigger_Trigger> _instance;
  const ::google::privacy::dlp::v2::Schedule* schedule_;
  const ::google::privacy::dlp::v2::Manual* manual_;
} _JobTrigger_Trigger_default_instance_;
class JobTriggerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobTrigger> _instance;
  const ::google::privacy::dlp::v2::InspectJobConfig* inspect_job_;
} _JobTrigger_default_instance_;
class Action_SaveFindingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action_SaveFindings> _instance;
} _Action_SaveFindings_default_instance_;
class Action_PublishToPubSubDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action_PublishToPubSub> _instance;
} _Action_PublishToPubSub_default_instance_;
class Action_PublishSummaryToCsccDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action_PublishSummaryToCscc> _instance;
} _Action_PublishSummaryToCscc_default_instance_;
class Action_PublishFindingsToCloudDataCatalogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action_PublishFindingsToCloudDataCatalog> _instance;
} _Action_PublishFindingsToCloudDataCatalog_default_instance_;
class Action_JobNotificationEmailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action_JobNotificationEmails> _instance;
} _Action_JobNotificationEmails_default_instance_;
class Action_PublishToStackdriverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action_PublishToStackdriver> _instance;
} _Action_PublishToStackdriver_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action> _instance;
  const ::google::privacy::dlp::v2::Action_SaveFindings* save_findings_;
  const ::google::privacy::dlp::v2::Action_PublishToPubSub* pub_sub_;
  const ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* publish_summary_to_cscc_;
  const ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog* publish_findings_to_cloud_data_catalog_;
  const ::google::privacy::dlp::v2::Action_JobNotificationEmails* job_notification_emails_;
  const ::google::privacy::dlp::v2::Action_PublishToStackdriver* publish_to_stackdriver_;
} _Action_default_instance_;
class CreateInspectTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateInspectTemplateRequest> _instance;
} _CreateInspectTemplateRequest_default_instance_;
class UpdateInspectTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateInspectTemplateRequest> _instance;
} _UpdateInspectTemplateRequest_default_instance_;
class GetInspectTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetInspectTemplateRequest> _instance;
} _GetInspectTemplateRequest_default_instance_;
class ListInspectTemplatesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInspectTemplatesRequest> _instance;
} _ListInspectTemplatesRequest_default_instance_;
class ListInspectTemplatesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListInspectTemplatesResponse> _instance;
} _ListInspectTemplatesResponse_default_instance_;
class DeleteInspectTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteInspectTemplateRequest> _instance;
} _DeleteInspectTemplateRequest_default_instance_;
class CreateJobTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateJobTriggerRequest> _instance;
} _CreateJobTriggerRequest_default_instance_;
class ActivateJobTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActivateJobTriggerRequest> _instance;
} _ActivateJobTriggerRequest_default_instance_;
class UpdateJobTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateJobTriggerRequest> _instance;
} _UpdateJobTriggerRequest_default_instance_;
class GetJobTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetJobTriggerRequest> _instance;
} _GetJobTriggerRequest_default_instance_;
class CreateDlpJobRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateDlpJobRequest> _instance;
  const ::google::privacy::dlp::v2::InspectJobConfig* inspect_job_;
  const ::google::privacy::dlp::v2::RiskAnalysisJobConfig* risk_job_;
} _CreateDlpJobRequest_default_instance_;
class ListJobTriggersRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListJobTriggersRequest> _instance;
} _ListJobTriggersRequest_default_instance_;
class ListJobTriggersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListJobTriggersResponse> _instance;
} _ListJobTriggersResponse_default_instance_;
class DeleteJobTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteJobTriggerRequest> _instance;
} _DeleteJobTriggerRequest_default_instance_;
class InspectJobConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InspectJobConfig> _instance;
} _InspectJobConfig_default_instance_;
class DlpJobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DlpJob> _instance;
  const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* risk_details_;
  const ::google::privacy::dlp::v2::InspectDataSourceDetails* inspect_details_;
} _DlpJob_default_instance_;
class GetDlpJobRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDlpJobRequest> _instance;
} _GetDlpJobRequest_default_instance_;
class ListDlpJobsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDlpJobsRequest> _instance;
} _ListDlpJobsRequest_default_instance_;
class ListDlpJobsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDlpJobsResponse> _instance;
} _ListDlpJobsResponse_default_instance_;
class CancelDlpJobRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelDlpJobRequest> _instance;
} _CancelDlpJobRequest_default_instance_;
class FinishDlpJobRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishDlpJobRequest> _instance;
} _FinishDlpJobRequest_default_instance_;
class DeleteDlpJobRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteDlpJobRequest> _instance;
} _DeleteDlpJobRequest_default_instance_;
class CreateDeidentifyTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateDeidentifyTemplateRequest> _instance;
} _CreateDeidentifyTemplateRequest_default_instance_;
class UpdateDeidentifyTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateDeidentifyTemplateRequest> _instance;
} _UpdateDeidentifyTemplateRequest_default_instance_;
class GetDeidentifyTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDeidentifyTemplateRequest> _instance;
} _GetDeidentifyTemplateRequest_default_instance_;
class ListDeidentifyTemplatesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDeidentifyTemplatesRequest> _instance;
} _ListDeidentifyTemplatesRequest_default_instance_;
class ListDeidentifyTemplatesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListDeidentifyTemplatesResponse> _instance;
} _ListDeidentifyTemplatesResponse_default_instance_;
class DeleteDeidentifyTemplateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteDeidentifyTemplateRequest> _instance;
} _DeleteDeidentifyTemplateRequest_default_instance_;
class LargeCustomDictionaryConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LargeCustomDictionaryConfig> _instance;
  const ::google::privacy::dlp::v2::CloudStorageFileSet* cloud_storage_file_set_;
  const ::google::privacy::dlp::v2::BigQueryField* big_query_field_;
} _LargeCustomDictionaryConfig_default_instance_;
class LargeCustomDictionaryStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LargeCustomDictionaryStats> _instance;
} _LargeCustomDictionaryStats_default_instance_;
class StoredInfoTypeConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredInfoTypeConfig> _instance;
  const ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* large_custom_dictionary_;
  const ::google::privacy::dlp::v2::CustomInfoType_Dictionary* dictionary_;
  const ::google::privacy::dlp::v2::CustomInfoType_Regex* regex_;
} _StoredInfoTypeConfig_default_instance_;
class StoredInfoTypeStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredInfoTypeStats> _instance;
  const ::google::privacy::dlp::v2::LargeCustomDictionaryStats* large_custom_dictionary_;
} _StoredInfoTypeStats_default_instance_;
class StoredInfoTypeVersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredInfoTypeVersion> _instance;
} _StoredInfoTypeVersion_default_instance_;
class StoredInfoTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredInfoType> _instance;
} _StoredInfoType_default_instance_;
class CreateStoredInfoTypeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateStoredInfoTypeRequest> _instance;
} _CreateStoredInfoTypeRequest_default_instance_;
class UpdateStoredInfoTypeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateStoredInfoTypeRequest> _instance;
} _UpdateStoredInfoTypeRequest_default_instance_;
class GetStoredInfoTypeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetStoredInfoTypeRequest> _instance;
} _GetStoredInfoTypeRequest_default_instance_;
class ListStoredInfoTypesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListStoredInfoTypesRequest> _instance;
} _ListStoredInfoTypesRequest_default_instance_;
class ListStoredInfoTypesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListStoredInfoTypesResponse> _instance;
} _ListStoredInfoTypesResponse_default_instance_;
class DeleteStoredInfoTypeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteStoredInfoTypeRequest> _instance;
} _DeleteStoredInfoTypeRequest_default_instance_;
class HybridInspectJobTriggerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridInspectJobTriggerRequest> _instance;
} _HybridInspectJobTriggerRequest_default_instance_;
class HybridInspectDlpJobRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridInspectDlpJobRequest> _instance;
} _HybridInspectDlpJobRequest_default_instance_;
class HybridContentItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridContentItem> _instance;
} _HybridContentItem_default_instance_;
class HybridFindingDetails_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridFindingDetails_LabelsEntry_DoNotUse> _instance;
} _HybridFindingDetails_LabelsEntry_DoNotUse_default_instance_;
class HybridFindingDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridFindingDetails> _instance;
} _HybridFindingDetails_default_instance_;
class HybridInspectResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridInspectResponse> _instance;
} _HybridInspectResponse_default_instance_;
}  // namespace v2
}  // namespace dlp
}  // namespace privacy
}  // namespace google
static void InitDefaultsExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ExcludeInfoTypes_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ExcludeInfoTypes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ExcludeInfoTypes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ExclusionRule_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ExclusionRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ExclusionRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_ExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectionRule_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectionRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectionRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_ExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectionRuleSet_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectionRuleSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectionRuleSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_InspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectConfig_FindingLimits_InfoTypeLimit_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsInspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectConfig_FindingLimits_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectConfig_FindingLimits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectConfig_FindingLimits::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsInspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_InspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_CustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_InspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ByteContentItem_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ByteContentItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ByteContentItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ContentItem_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ContentItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ContentItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTable_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Table_Row_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Table_Row();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Table_Row::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Table_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTable_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Table_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Table::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Table_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Finding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsFinding_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Finding_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse();
  }
  ::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Finding_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinding_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsFinding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Finding_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Finding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Finding::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Finding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsFinding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Location_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_QuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Finding_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Location_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Location();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Location::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Location_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Range_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Container_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ContentLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ContentLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ContentLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_RecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_DocumentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_MetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsMetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_MetadataLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::MetadataLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::MetadataLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_StorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsStorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StorageMetadataLabel_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StorageMetadataLabel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StorageMetadataLabel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsDocumentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DocumentLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DocumentLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DocumentLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DocumentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDocumentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsRecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_RecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_TableLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTableLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TableLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TableLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TableLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TableLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTableLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsContainer_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Container_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Container();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Container::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Container_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsContainer_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsRange_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Range_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Range();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Range::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Range_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRange_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ImageLocation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ImageLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ImageLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_BoundingBox_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsBoundingBox_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_BoundingBox_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::BoundingBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::BoundingBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BoundingBox_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBoundingBox_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsRedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RedactImageRequest_ImageRedactionConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Color_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRedactImageRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RedactImageRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RedactImageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RedactImageRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RedactImageRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRedactImageRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_RedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsColor_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Color_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Color::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Color_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColor_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsRedactImageResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RedactImageResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RedactImageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RedactImageResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RedactImageResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRedactImageResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeidentifyContentRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeidentifyContentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeidentifyContentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DeidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDeidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeidentifyContentResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeidentifyContentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeidentifyContentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DeidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDeidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_TransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsReidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ReidentifyContentRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ReidentifyContentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ReidentifyContentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ReidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsReidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ReidentifyContentResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ReidentifyContentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ReidentifyContentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_TransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectContentRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectContentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectContentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InspectContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInspectContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectContentResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectContentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectContentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InspectContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInspectContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsOutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_OutputStorageConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::OutputStorageConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::OutputStorageConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InfoTypeStats_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InfoTypeStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InfoTypeStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsInspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectDataSourceDetails_RequestedOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectDataSourceDetails_Result_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectDataSourceDetails_Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectDataSourceDetails_Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_HybridInspectStatistics_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectDataSourceDetails_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectDataSourceDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectDataSourceDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_InspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsHybridInspectStatistics_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridInspectStatistics_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridInspectStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::HybridInspectStatistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HybridInspectStatistics_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHybridInspectStatistics_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsInfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InfoTypeDescription_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InfoTypeDescription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InfoTypeDescription::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListInfoTypesRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListInfoTypesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListInfoTypesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListInfoTypesResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListInfoTypesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListInfoTypesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RiskAnalysisJobConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RiskAnalysisJobConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RiskAnalysisJobConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_PrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Action_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsQuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_QuasiId_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::QuasiId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::QuasiId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_QuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsQuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

static void InitDefaultsStatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StatisticalTable_QuasiIdentifierField_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsStatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StatisticalTable_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StatisticalTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StatisticalTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_StatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsPrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_NumericalStatsConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsPrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_CategoricalStatsConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsPrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_KAnonymityConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_EntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsPrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_LDiversityConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsPrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

static void InitDefaultsPrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsPrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsPrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_PrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsPrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_DeltaPresenceEstimationConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_QuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_StatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsPrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrivacyMetric_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrivacyMetric();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrivacyMetric::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_PrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsPrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_PrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_PrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_PrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_PrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_PrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_PrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_ValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KAnonymityResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_LDiversityResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KMapEstimationResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_RiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_AnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsAnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_PrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_AnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ValueFrequency_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ValueFrequency();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ValueFrequency::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsValue_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Value_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Value::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsValue_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_TimeOfDay_google_2ftype_2ftimeofday_2eproto.base,
      &scc_info_Date_google_2ftype_2fdate_2eproto.base,}};

static void InitDefaultsQuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_QuoteInfo_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::QuoteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::QuoteInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_DateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDateTime_TimeZone_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DateTime_TimeZone_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DateTime_TimeZone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DateTime_TimeZone::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTime_TimeZone_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTime_TimeZone_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsDateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DateTime_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DateTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DateTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Date_google_2ftype_2fdate_2eproto.base,
      &scc_info_TimeOfDay_google_2ftype_2ftimeofday_2eproto.base,
      &scc_info_DateTime_TimeZone_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeidentifyConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeidentifyConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_RecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_TransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTransformationErrorHandling_ThrowError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TransformationErrorHandling_ThrowError_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationErrorHandling_ThrowError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationErrorHandling_ThrowError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsTransformationErrorHandling_LeaveUntransformed_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TransformationErrorHandling_LeaveUntransformed_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationErrorHandling_LeaveUntransformed_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationErrorHandling_LeaveUntransformed_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsTransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TransformationErrorHandling_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TransformationErrorHandling();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TransformationErrorHandling::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_TransformationErrorHandling_ThrowError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_TransformationErrorHandling_LeaveUntransformed_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsPrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PrimitiveTransformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PrimitiveTransformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsPrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_ReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_RedactConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_CharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_CryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_BucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_ReplaceWithInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_TimePartConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_CryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_DateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_CryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTimePartConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TimePartConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TimePartConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TimePartConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimePartConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimePartConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsCryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CryptoHashConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CryptoHashConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CryptoHashConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsCryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CryptoDeterministicConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CryptoDeterministicConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CryptoDeterministicConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ReplaceValueConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ReplaceValueConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ReplaceValueConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsReplaceWithInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ReplaceWithInfoTypeConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReplaceWithInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReplaceWithInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsRedactConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RedactConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RedactConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RedactConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RedactConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRedactConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsCharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CharsToIgnore_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CharsToIgnore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CharsToIgnore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsCharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CharacterMaskConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CharacterMaskConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CharacterMaskConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_CharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsFixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_FixedSizeBucketingConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::FixedSizeBucketingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::FixedSizeBucketingConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsBucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_BucketingConfig_Bucket_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::BucketingConfig_Bucket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::BucketingConfig_Bucket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_BucketingConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::BucketingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::BucketingConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_BucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsCryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CryptoKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_TransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_UnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_KmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TransientCryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TransientCryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TransientCryptoKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsUnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_UnwrappedCryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::UnwrappedCryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::UnwrappedCryptoKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsKmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_KmsWrappedCryptoKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::KmsWrappedCryptoKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::KmsWrappedCryptoKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsDateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DateShiftConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DateShiftConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DateShiftConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InfoTypeTransformations_InfoTypeTransformation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsInfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InfoTypeTransformations_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InfoTypeTransformations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InfoTypeTransformations::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsFieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_FieldTransformation_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::FieldTransformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::FieldTransformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_FieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_RecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_InfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordTransformations_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordTransformations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordTransformations::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_RecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordSuppression_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordSuppression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordSuppression::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_RecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordCondition_Condition_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordCondition_Condition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordCondition_Condition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordCondition_Conditions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordCondition_Conditions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordCondition_Conditions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_RecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordCondition_Expressions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordCondition_Expressions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordCondition_Expressions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_RecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsRecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordCondition_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_RecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TransformationOverview_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TransformationOverview();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TransformationOverview::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_TransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsTransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TransformationSummary_SummaryResult_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TransformationSummary_SummaryResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TransformationSummary_SummaryResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsTransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TransformationSummary_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TransformationSummary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TransformationSummary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_TransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsTransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_RecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_TransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsSchedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Schedule_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Schedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Schedule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Schedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSchedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsManual_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Manual_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Manual();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Manual::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Manual_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsManual_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsInspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectTemplate_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsInspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeidentifyTemplate_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeidentifyTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeidentifyTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Error_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsJobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_JobTrigger_Trigger_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::JobTrigger_Trigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::JobTrigger_Trigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_JobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsJobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Schedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Manual_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsJobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_JobTrigger_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::JobTrigger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::JobTrigger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsJobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_JobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsAction_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Action_SaveFindings_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Action_SaveFindings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Action_SaveFindings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Action_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAction_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_OutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsAction_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Action_PublishToPubSub_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Action_PublishToPubSub();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Action_PublishToPubSub::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAction_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsAction_PublishSummaryToCscc_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Action_PublishSummaryToCscc_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Action_PublishSummaryToCscc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Action_PublishSummaryToCscc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishSummaryToCscc_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAction_PublishSummaryToCscc_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsAction_PublishFindingsToCloudDataCatalog_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Action_PublishFindingsToCloudDataCatalog_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishFindingsToCloudDataCatalog_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAction_PublishFindingsToCloudDataCatalog_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsAction_JobNotificationEmails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Action_JobNotificationEmails_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Action_JobNotificationEmails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Action_JobNotificationEmails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Action_JobNotificationEmails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAction_JobNotificationEmails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsAction_PublishToStackdriver_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Action_PublishToStackdriver_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Action_PublishToStackdriver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Action_PublishToStackdriver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Action_PublishToStackdriver_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAction_PublishToStackdriver_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsAction_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Action_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Action::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Action_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsAction_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Action_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Action_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Action_PublishSummaryToCscc_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Action_PublishFindingsToCloudDataCatalog_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Action_JobNotificationEmails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Action_PublishToStackdriver_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsCreateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CreateInspectTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CreateInspectTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CreateInspectTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsUpdateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_UpdateInspectTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::UpdateInspectTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::UpdateInspectTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsGetInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_GetInspectTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::GetInspectTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::GetInspectTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListInspectTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListInspectTemplatesRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListInspectTemplatesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListInspectTemplatesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListInspectTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListInspectTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListInspectTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListInspectTemplatesResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListInspectTemplatesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListInspectTemplatesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListInspectTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListInspectTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeleteInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeleteInspectTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeleteInspectTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeleteInspectTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsCreateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CreateJobTriggerRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CreateJobTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CreateJobTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsActivateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ActivateJobTriggerRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ActivateJobTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ActivateJobTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActivateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActivateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsUpdateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_UpdateJobTriggerRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::UpdateJobTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::UpdateJobTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsGetJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_GetJobTriggerRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::GetJobTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::GetJobTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsCreateDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CreateDlpJobRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CreateDlpJobRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CreateDlpJobRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CreateDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCreateDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_RiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsListJobTriggersRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListJobTriggersRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListJobTriggersRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListJobTriggersRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListJobTriggersRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListJobTriggersRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListJobTriggersResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListJobTriggersResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListJobTriggersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListJobTriggersResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListJobTriggersResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListJobTriggersResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeleteJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeleteJobTriggerRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeleteJobTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeleteJobTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsInspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InspectJobConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InspectJobConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InspectJobConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsInspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_StorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Action_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DlpJob_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DlpJob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DlpJob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_DlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsDlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_AnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_InspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsGetDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_GetDlpJobRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::GetDlpJobRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::GetDlpJobRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListDlpJobsRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListDlpJobsRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListDlpJobsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListDlpJobsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListDlpJobsRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListDlpJobsRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListDlpJobsResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListDlpJobsResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListDlpJobsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListDlpJobsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListDlpJobsResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListDlpJobsResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_DlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsCancelDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CancelDlpJobRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CancelDlpJobRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CancelDlpJobRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsFinishDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_FinishDlpJobRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::FinishDlpJobRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::FinishDlpJobRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsDeleteDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeleteDlpJobRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeleteDlpJobRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeleteDlpJobRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsCreateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CreateDeidentifyTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsUpdateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_UpdateDeidentifyTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsGetDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_GetDeidentifyTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListDeidentifyTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListDeidentifyTemplatesRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListDeidentifyTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListDeidentifyTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListDeidentifyTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListDeidentifyTemplatesResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListDeidentifyTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListDeidentifyTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeleteDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeleteDeidentifyTemplateRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsLargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_LargeCustomDictionaryConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::LargeCustomDictionaryConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::LargeCustomDictionaryConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_BigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsLargeCustomDictionaryStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_LargeCustomDictionaryStats_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::LargeCustomDictionaryStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::LargeCustomDictionaryStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LargeCustomDictionaryStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLargeCustomDictionaryStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsStoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StoredInfoTypeConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StoredInfoTypeConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_LargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsStoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StoredInfoTypeStats_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StoredInfoTypeStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StoredInfoTypeStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_LargeCustomDictionaryStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsStoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StoredInfoTypeVersion_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StoredInfoTypeVersion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StoredInfoTypeVersion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_StoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsStoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_StoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsStoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StoredInfoType_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StoredInfoType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StoredInfoType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_StoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsCreateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CreateStoredInfoTypeRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsUpdateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_UpdateStoredInfoTypeRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UpdateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUpdateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsGetStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_GetStoredInfoTypeRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::GetStoredInfoTypeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::GetStoredInfoTypeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListStoredInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListStoredInfoTypesRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListStoredInfoTypesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListStoredInfoTypesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListStoredInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListStoredInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsListStoredInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_ListStoredInfoTypesResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::ListStoredInfoTypesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::ListStoredInfoTypesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListStoredInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListStoredInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_StoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsDeleteStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DeleteStoredInfoTypeRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeleteStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeleteStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsHybridInspectJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridInspectJobTriggerRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HybridInspectJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHybridInspectJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_HybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsHybridInspectDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridInspectDlpJobRequest_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridInspectDlpJobRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::HybridInspectDlpJobRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HybridInspectDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHybridInspectDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_HybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsHybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridContentItem_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridContentItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::HybridContentItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_HybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsHybridFindingDetails_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridFindingDetails_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse();
  }
  ::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HybridFindingDetails_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHybridFindingDetails_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

static void InitDefaultsHybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridFindingDetails_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridFindingDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::HybridFindingDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_HybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsHybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {
      &scc_info_Container_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,
      &scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_HybridFindingDetails_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base,}};

static void InitDefaultsHybridInspectResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridInspectResponse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridInspectResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::HybridInspectResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HybridInspectResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHybridInspectResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto}, {}};

void InitDefaults_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Table_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Finding_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Finding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Location_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DocumentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Container_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Range_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BoundingBox_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RedactImageRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Color_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RedactImageResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridInspectStatistics_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTime_TimeZone_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationErrorHandling_ThrowError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationErrorHandling_LeaveUntransformed_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimePartConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReplaceWithInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RedactConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Schedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Manual_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action_PublishSummaryToCscc_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action_PublishFindingsToCloudDataCatalog_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action_JobNotificationEmails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action_PublishToStackdriver_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListInspectTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListInspectTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActivateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListJobTriggersRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListJobTriggersResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDlpJobsRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDlpJobsResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDeidentifyTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListDeidentifyTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LargeCustomDictionaryStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListStoredInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListStoredInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeleteStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridInspectJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridInspectDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridFindingDetails_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridInspectResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[174];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[16];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ExcludeInfoTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ExcludeInfoTypes, info_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ExclusionRule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ExclusionRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::ExclusionRuleDefaultTypeInternal, dictionary_),
  offsetof(::google::privacy::dlp::v2::ExclusionRuleDefaultTypeInternal, regex_),
  offsetof(::google::privacy::dlp::v2::ExclusionRuleDefaultTypeInternal, exclude_info_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ExclusionRule, matching_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ExclusionRule, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectionRule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectionRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::InspectionRuleDefaultTypeInternal, hotword_rule_),
  offsetof(::google::privacy::dlp::v2::InspectionRuleDefaultTypeInternal, exclusion_rule_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectionRule, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectionRuleSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectionRuleSet, info_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectionRuleSet, rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit, info_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit, max_findings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig_FindingLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig_FindingLimits, max_findings_per_item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig_FindingLimits, max_findings_per_request_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig_FindingLimits, max_findings_per_info_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, info_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, min_likelihood_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, limits_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, include_quote_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, exclude_info_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, custom_info_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, content_options_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectConfig, rule_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ByteContentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ByteContentItem, type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ByteContentItem, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::ContentItemDefaultTypeInternal, value_),
  offsetof(::google::privacy::dlp::v2::ContentItemDefaultTypeInternal, table_),
  offsetof(::google::privacy::dlp::v2::ContentItemDefaultTypeInternal, byte_item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentItem, data_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Table_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Table_Row, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Table, headers_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Table, rows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectResult, findings_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectResult, findings_truncated_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, quote_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, info_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, likelihood_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, location_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, quote_info_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, resource_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, trigger_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, labels_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, job_create_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Finding, job_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Location, byte_range_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Location, codepoint_range_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Location, content_locations_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Location, container_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentLocation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentLocation, container_name_),
  offsetof(::google::privacy::dlp::v2::ContentLocationDefaultTypeInternal, record_location_),
  offsetof(::google::privacy::dlp::v2::ContentLocationDefaultTypeInternal, image_location_),
  offsetof(::google::privacy::dlp::v2::ContentLocationDefaultTypeInternal, document_location_),
  offsetof(::google::privacy::dlp::v2::ContentLocationDefaultTypeInternal, metadata_location_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentLocation, container_timestamp_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentLocation, container_version_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ContentLocation, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::MetadataLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::MetadataLocation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::MetadataLocation, type_),
  offsetof(::google::privacy::dlp::v2::MetadataLocationDefaultTypeInternal, storage_label_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::MetadataLocation, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageMetadataLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageMetadataLabel, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DocumentLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DocumentLocation, file_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordLocation, record_key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordLocation, field_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordLocation, table_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TableLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TableLocation, row_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, project_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, full_path_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, root_path_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, relative_path_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, update_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Container, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Range, start_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Range, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ImageLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ImageLocation, bounding_boxes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BoundingBox, top_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BoundingBox, left_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BoundingBox, width_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BoundingBox, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfigDefaultTypeInternal, info_type_),
  offsetof(::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfigDefaultTypeInternal, redact_all_text_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig, redaction_color_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest, location_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest, inspect_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest, image_redaction_configs_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest, include_findings_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageRequest, byte_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Color, red_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Color, green_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Color, blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageResponse, redacted_image_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageResponse, extracted_text_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactImageResponse, inspect_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, deidentify_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, inspect_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, inspect_template_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, deidentify_template_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentResponse, item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyContentResponse, overview_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, reidentify_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, inspect_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, inspect_template_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, reidentify_template_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentResponse, item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReidentifyContentResponse, overview_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentRequest, inspect_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentRequest, item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentRequest, inspect_template_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectContentResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::OutputStorageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::OutputStorageConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::OutputStorageConfigDefaultTypeInternal, table_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::OutputStorageConfig, output_schema_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::OutputStorageConfig, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeStats, info_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeStats, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions, snapshot_inspect_template_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions, job_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_Result, processed_bytes_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_Result, total_estimated_bytes_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_Result, info_type_stats_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails_Result, hybrid_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails, requested_options_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectDataSourceDetails, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectStatistics, processed_count_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectStatistics, aborted_count_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectStatistics, pending_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeDescription, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeDescription, display_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeDescription, supported_by_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeDescription, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInfoTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInfoTypesRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInfoTypesRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInfoTypesRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInfoTypesRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInfoTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInfoTypesResponse, info_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RiskAnalysisJobConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RiskAnalysisJobConfig, privacy_metric_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RiskAnalysisJobConfig, source_table_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RiskAnalysisJobConfig, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::QuasiId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::QuasiId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::QuasiId, field_),
  offsetof(::google::privacy::dlp::v2::QuasiIdDefaultTypeInternal, info_type_),
  offsetof(::google::privacy::dlp::v2::QuasiIdDefaultTypeInternal, custom_tag_),
  offsetof(::google::privacy::dlp::v2::QuasiIdDefaultTypeInternal, inferred_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::QuasiId, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField, field_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField, custom_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StatisticalTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StatisticalTable, table_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StatisticalTable, quasi_ids_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StatisticalTable, relative_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig, quasi_ids_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig, entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig, quasi_ids_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig, sensitive_attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField, field_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedFieldDefaultTypeInternal, info_type_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedFieldDefaultTypeInternal, custom_tag_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedFieldDefaultTypeInternal, inferred_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField, field_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField, custom_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable, table_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable, quasi_ids_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable, relative_frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig, quasi_ids_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig, region_code_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig, auxiliary_tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig, quasi_ids_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig, region_code_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig, auxiliary_tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::PrivacyMetricDefaultTypeInternal, numerical_stats_config_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetricDefaultTypeInternal, categorical_stats_config_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetricDefaultTypeInternal, k_anonymity_config_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetricDefaultTypeInternal, l_diversity_config_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetricDefaultTypeInternal, k_map_estimation_config_),
  offsetof(::google::privacy::dlp::v2::PrivacyMetricDefaultTypeInternal, delta_presence_estimation_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrivacyMetric, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult, min_value_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult, max_value_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult, quantile_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket, value_frequency_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket, value_frequency_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket, bucket_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket, bucket_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket, bucket_value_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult, value_frequency_histogram_buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass, quasi_ids_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass, equivalence_class_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket, equivalence_class_size_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket, equivalence_class_size_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket, bucket_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket, bucket_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket, bucket_value_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult, equivalence_class_histogram_buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass, quasi_ids_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass, equivalence_class_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass, num_distinct_sensitive_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass, top_sensitive_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket, sensitive_value_frequency_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket, sensitive_value_frequency_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket, bucket_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket, bucket_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket, bucket_value_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult, sensitive_value_frequency_histogram_buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues, quasi_ids_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues, estimated_anonymity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket, min_anonymity_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket, max_anonymity_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket, bucket_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket, bucket_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket, bucket_value_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult, k_map_estimation_histogram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues, quasi_ids_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues, estimated_probability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket, min_probability_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket, max_probability_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket, bucket_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket, bucket_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket, bucket_value_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult, delta_presence_estimation_histogram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions, job_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails, requested_privacy_metric_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails, requested_source_table_),
  offsetof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetailsDefaultTypeInternal, numerical_stats_result_),
  offsetof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetailsDefaultTypeInternal, categorical_stats_result_),
  offsetof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetailsDefaultTypeInternal, k_anonymity_result_),
  offsetof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetailsDefaultTypeInternal, l_diversity_result_),
  offsetof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetailsDefaultTypeInternal, k_map_estimation_result_),
  offsetof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetailsDefaultTypeInternal, delta_presence_estimation_result_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails, requested_options_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ValueFrequency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ValueFrequency, value_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ValueFrequency, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, integer_value_),
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, float_value_),
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, string_value_),
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, boolean_value_),
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, timestamp_value_),
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, time_value_),
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, date_value_),
  offsetof(::google::privacy::dlp::v2::ValueDefaultTypeInternal, day_of_week_value_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Value, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::QuoteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::QuoteInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::QuoteInfoDefaultTypeInternal, date_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::QuoteInfo, parsed_quote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateTime_TimeZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateTime_TimeZone, offset_minutes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateTime, date_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateTime, day_of_week_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateTime, time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateTime, time_zone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::DeidentifyConfigDefaultTypeInternal, info_type_transformations_),
  offsetof(::google::privacy::dlp::v2::DeidentifyConfigDefaultTypeInternal, record_transformations_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyConfig, transformation_error_handling_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyConfig, transformation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationErrorHandling, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationErrorHandling, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::TransformationErrorHandlingDefaultTypeInternal, throw_error_),
  offsetof(::google::privacy::dlp::v2::TransformationErrorHandlingDefaultTypeInternal, leave_untransformed_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationErrorHandling, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrimitiveTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrimitiveTransformation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, replace_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, redact_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, character_mask_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, crypto_replace_ffx_fpe_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, fixed_size_bucketing_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, bucketing_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, replace_with_info_type_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, time_part_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, crypto_hash_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, date_shift_config_),
  offsetof(::google::privacy::dlp::v2::PrimitiveTransformationDefaultTypeInternal, crypto_deterministic_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PrimitiveTransformation, transformation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TimePartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TimePartConfig, part_to_extract_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoHashConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoHashConfig, crypto_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoDeterministicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoDeterministicConfig, crypto_key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoDeterministicConfig, surrogate_info_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoDeterministicConfig, context_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReplaceValueConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReplaceValueConfig, new_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RedactConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharsToIgnore, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharsToIgnore, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::CharsToIgnoreDefaultTypeInternal, characters_to_skip_),
  offsetof(::google::privacy::dlp::v2::CharsToIgnoreDefaultTypeInternal, common_characters_to_ignore_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharsToIgnore, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharacterMaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharacterMaskConfig, masking_character_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharacterMaskConfig, number_to_mask_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharacterMaskConfig, reverse_order_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CharacterMaskConfig, characters_to_ignore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FixedSizeBucketingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FixedSizeBucketingConfig, lower_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FixedSizeBucketingConfig, upper_bound_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FixedSizeBucketingConfig, bucket_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BucketingConfig_Bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BucketingConfig_Bucket, min_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BucketingConfig_Bucket, max_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BucketingConfig_Bucket, replacement_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BucketingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BucketingConfig, buckets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig, crypto_key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig, context_),
  offsetof(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfigDefaultTypeInternal, common_alphabet_),
  offsetof(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfigDefaultTypeInternal, custom_alphabet_),
  offsetof(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfigDefaultTypeInternal, radix_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig, surrogate_info_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig, alphabet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::CryptoKeyDefaultTypeInternal, transient_),
  offsetof(::google::privacy::dlp::v2::CryptoKeyDefaultTypeInternal, unwrapped_),
  offsetof(::google::privacy::dlp::v2::CryptoKeyDefaultTypeInternal, kms_wrapped_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CryptoKey, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransientCryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransientCryptoKey, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UnwrappedCryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UnwrappedCryptoKey, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::KmsWrappedCryptoKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::KmsWrappedCryptoKey, wrapped_key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::KmsWrappedCryptoKey, crypto_key_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateShiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateShiftConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateShiftConfig, upper_bound_days_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateShiftConfig, lower_bound_days_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateShiftConfig, context_),
  offsetof(::google::privacy::dlp::v2::DateShiftConfigDefaultTypeInternal, crypto_key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DateShiftConfig, method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation, info_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation, primitive_transformation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeTransformations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoTypeTransformations, transformations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FieldTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FieldTransformation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FieldTransformation, fields_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FieldTransformation, condition_),
  offsetof(::google::privacy::dlp::v2::FieldTransformationDefaultTypeInternal, primitive_transformation_),
  offsetof(::google::privacy::dlp::v2::FieldTransformationDefaultTypeInternal, info_type_transformations_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FieldTransformation, transformation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordTransformations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordTransformations, field_transformations_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordTransformations, record_suppressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordSuppression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordSuppression, condition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Condition, field_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Condition, operator__),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Condition, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Conditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Conditions, conditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Expressions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Expressions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Expressions, logical_operator_),
  offsetof(::google::privacy::dlp::v2::RecordCondition_ExpressionsDefaultTypeInternal, conditions_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition_Expressions, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordCondition, expressions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationOverview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationOverview, transformed_bytes_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationOverview, transformation_summaries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary_SummaryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary_SummaryResult, count_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary_SummaryResult, code_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary_SummaryResult, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, info_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, field_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, transformation_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, field_transformations_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, record_suppress_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, results_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TransformationSummary, transformed_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Schedule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::ScheduleDefaultTypeInternal, recurrence_period_duration_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Schedule, option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Manual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectTemplate, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectTemplate, display_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectTemplate, description_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectTemplate, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectTemplate, update_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectTemplate, inspect_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyTemplate, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyTemplate, display_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyTemplate, description_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyTemplate, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyTemplate, update_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeidentifyTemplate, deidentify_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Error, details_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Error, timestamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger_Trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger_Trigger, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::JobTrigger_TriggerDefaultTypeInternal, schedule_),
  offsetof(::google::privacy::dlp::v2::JobTrigger_TriggerDefaultTypeInternal, manual_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger_Trigger, trigger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, display_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, description_),
  offsetof(::google::privacy::dlp::v2::JobTriggerDefaultTypeInternal, inspect_job_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, triggers_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, errors_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, update_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, last_run_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, status_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::JobTrigger, job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_SaveFindings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_SaveFindings, output_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_PublishToPubSub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_PublishToPubSub, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_PublishSummaryToCscc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_JobNotificationEmails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action_PublishToStackdriver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::ActionDefaultTypeInternal, save_findings_),
  offsetof(::google::privacy::dlp::v2::ActionDefaultTypeInternal, pub_sub_),
  offsetof(::google::privacy::dlp::v2::ActionDefaultTypeInternal, publish_summary_to_cscc_),
  offsetof(::google::privacy::dlp::v2::ActionDefaultTypeInternal, publish_findings_to_cloud_data_catalog_),
  offsetof(::google::privacy::dlp::v2::ActionDefaultTypeInternal, job_notification_emails_),
  offsetof(::google::privacy::dlp::v2::ActionDefaultTypeInternal, publish_to_stackdriver_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Action, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateInspectTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateInspectTemplateRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateInspectTemplateRequest, inspect_template_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateInspectTemplateRequest, template_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateInspectTemplateRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateInspectTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateInspectTemplateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateInspectTemplateRequest, inspect_template_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateInspectTemplateRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetInspectTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetInspectTemplateRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesResponse, inspect_templates_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListInspectTemplatesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteInspectTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteInspectTemplateRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateJobTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateJobTriggerRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateJobTriggerRequest, job_trigger_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateJobTriggerRequest, trigger_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateJobTriggerRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ActivateJobTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ActivateJobTriggerRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateJobTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateJobTriggerRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateJobTriggerRequest, job_trigger_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateJobTriggerRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetJobTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetJobTriggerRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDlpJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDlpJobRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDlpJobRequest, parent_),
  offsetof(::google::privacy::dlp::v2::CreateDlpJobRequestDefaultTypeInternal, inspect_job_),
  offsetof(::google::privacy::dlp::v2::CreateDlpJobRequestDefaultTypeInternal, risk_job_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDlpJobRequest, job_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDlpJobRequest, location_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDlpJobRequest, job_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersResponse, job_triggers_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListJobTriggersResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteJobTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteJobTriggerRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectJobConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectJobConfig, storage_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectJobConfig, inspect_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectJobConfig, inspect_template_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InspectJobConfig, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, state_),
  offsetof(::google::privacy::dlp::v2::DlpJobDefaultTypeInternal, risk_details_),
  offsetof(::google::privacy::dlp::v2::DlpJobDefaultTypeInternal, inspect_details_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, start_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, end_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, job_trigger_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, errors_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DlpJob, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetDlpJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetDlpJobRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsResponse, jobs_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDlpJobsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CancelDlpJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CancelDlpJobRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FinishDlpJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FinishDlpJobRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteDlpJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteDlpJobRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, deidentify_template_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, template_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, deidentify_template_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetDeidentifyTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetDeidentifyTemplateRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse, deidentify_templates_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::LargeCustomDictionaryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::LargeCustomDictionaryConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::LargeCustomDictionaryConfig, output_path_),
  offsetof(::google::privacy::dlp::v2::LargeCustomDictionaryConfigDefaultTypeInternal, cloud_storage_file_set_),
  offsetof(::google::privacy::dlp::v2::LargeCustomDictionaryConfigDefaultTypeInternal, big_query_field_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::LargeCustomDictionaryConfig, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::LargeCustomDictionaryStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::LargeCustomDictionaryStats, approx_num_phrases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeConfig, display_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeConfig, description_),
  offsetof(::google::privacy::dlp::v2::StoredInfoTypeConfigDefaultTypeInternal, large_custom_dictionary_),
  offsetof(::google::privacy::dlp::v2::StoredInfoTypeConfigDefaultTypeInternal, dictionary_),
  offsetof(::google::privacy::dlp::v2::StoredInfoTypeConfigDefaultTypeInternal, regex_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeConfig, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeStats, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::StoredInfoTypeStatsDefaultTypeInternal, large_custom_dictionary_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeStats, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeVersion, config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeVersion, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeVersion, state_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeVersion, errors_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoTypeVersion, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoType, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoType, current_version_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredInfoType, pending_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, stored_info_type_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetStoredInfoTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::GetStoredInfoTypeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesRequest, location_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesResponse, stored_info_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::ListStoredInfoTypesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectJobTriggerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectJobTriggerRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectJobTriggerRequest, hybrid_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectDlpJobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectDlpJobRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectDlpJobRequest, hybrid_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridContentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridContentItem, item_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridContentItem, finding_details_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails, container_details_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails, file_offset_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails, row_offset_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails, table_options_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridFindingDetails, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridInspectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::privacy::dlp::v2::ExcludeInfoTypes)},
  { 6, -1, sizeof(::google::privacy::dlp::v2::ExclusionRule)},
  { 16, -1, sizeof(::google::privacy::dlp::v2::InspectionRule)},
  { 24, -1, sizeof(::google::privacy::dlp::v2::InspectionRuleSet)},
  { 31, -1, sizeof(::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit)},
  { 38, -1, sizeof(::google::privacy::dlp::v2::InspectConfig_FindingLimits)},
  { 46, -1, sizeof(::google::privacy::dlp::v2::InspectConfig)},
  { 59, -1, sizeof(::google::privacy::dlp::v2::ByteContentItem)},
  { 66, -1, sizeof(::google::privacy::dlp::v2::ContentItem)},
  { 75, -1, sizeof(::google::privacy::dlp::v2::Table_Row)},
  { 81, -1, sizeof(::google::privacy::dlp::v2::Table)},
  { 88, -1, sizeof(::google::privacy::dlp::v2::InspectResult)},
  { 95, 102, sizeof(::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse)},
  { 104, -1, sizeof(::google::privacy::dlp::v2::Finding)},
  { 121, -1, sizeof(::google::privacy::dlp::v2::Location)},
  { 130, -1, sizeof(::google::privacy::dlp::v2::ContentLocation)},
  { 143, -1, sizeof(::google::privacy::dlp::v2::MetadataLocation)},
  { 151, -1, sizeof(::google::privacy::dlp::v2::StorageMetadataLabel)},
  { 157, -1, sizeof(::google::privacy::dlp::v2::DocumentLocation)},
  { 163, -1, sizeof(::google::privacy::dlp::v2::RecordLocation)},
  { 171, -1, sizeof(::google::privacy::dlp::v2::TableLocation)},
  { 177, -1, sizeof(::google::privacy::dlp::v2::Container)},
  { 189, -1, sizeof(::google::privacy::dlp::v2::Range)},
  { 196, -1, sizeof(::google::privacy::dlp::v2::ImageLocation)},
  { 202, -1, sizeof(::google::privacy::dlp::v2::BoundingBox)},
  { 211, -1, sizeof(::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig)},
  { 220, -1, sizeof(::google::privacy::dlp::v2::RedactImageRequest)},
  { 231, -1, sizeof(::google::privacy::dlp::v2::Color)},
  { 239, -1, sizeof(::google::privacy::dlp::v2::RedactImageResponse)},
  { 247, -1, sizeof(::google::privacy::dlp::v2::DeidentifyContentRequest)},
  { 259, -1, sizeof(::google::privacy::dlp::v2::DeidentifyContentResponse)},
  { 266, -1, sizeof(::google::privacy::dlp::v2::ReidentifyContentRequest)},
  { 278, -1, sizeof(::google::privacy::dlp::v2::ReidentifyContentResponse)},
  { 285, -1, sizeof(::google::privacy::dlp::v2::InspectContentRequest)},
  { 295, -1, sizeof(::google::privacy::dlp::v2::InspectContentResponse)},
  { 301, -1, sizeof(::google::privacy::dlp::v2::OutputStorageConfig)},
  { 309, -1, sizeof(::google::privacy::dlp::v2::InfoTypeStats)},
  { 316, -1, sizeof(::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions)},
  { 323, -1, sizeof(::google::privacy::dlp::v2::InspectDataSourceDetails_Result)},
  { 332, -1, sizeof(::google::privacy::dlp::v2::InspectDataSourceDetails)},
  { 339, -1, sizeof(::google::privacy::dlp::v2::HybridInspectStatistics)},
  { 347, -1, sizeof(::google::privacy::dlp::v2::InfoTypeDescription)},
  { 356, -1, sizeof(::google::privacy::dlp::v2::ListInfoTypesRequest)},
  { 365, -1, sizeof(::google::privacy::dlp::v2::ListInfoTypesResponse)},
  { 371, -1, sizeof(::google::privacy::dlp::v2::RiskAnalysisJobConfig)},
  { 379, -1, sizeof(::google::privacy::dlp::v2::QuasiId)},
  { 389, -1, sizeof(::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField)},
  { 396, -1, sizeof(::google::privacy::dlp::v2::StatisticalTable)},
  { 404, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig)},
  { 410, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig)},
  { 416, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig)},
  { 423, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig)},
  { 430, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField)},
  { 440, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField)},
  { 447, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable)},
  { 455, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig)},
  { 463, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig)},
  { 471, -1, sizeof(::google::privacy::dlp::v2::PrivacyMetric)},
  { 483, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult)},
  { 491, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket)},
  { 501, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult)},
  { 507, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass)},
  { 514, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket)},
  { 524, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult)},
  { 530, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass)},
  { 539, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket)},
  { 549, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult)},
  { 555, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues)},
  { 562, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket)},
  { 572, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult)},
  { 578, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues)},
  { 585, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket)},
  { 595, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult)},
  { 601, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions)},
  { 607, -1, sizeof(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails)},
  { 622, -1, sizeof(::google::privacy::dlp::v2::ValueFrequency)},
  { 629, -1, sizeof(::google::privacy::dlp::v2::Value)},
  { 643, -1, sizeof(::google::privacy::dlp::v2::QuoteInfo)},
  { 650, -1, sizeof(::google::privacy::dlp::v2::DateTime_TimeZone)},
  { 656, -1, sizeof(::google::privacy::dlp::v2::DateTime)},
  { 665, -1, sizeof(::google::privacy::dlp::v2::DeidentifyConfig)},
  { 674, -1, sizeof(::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError)},
  { 679, -1, sizeof(::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed)},
  { 684, -1, sizeof(::google::privacy::dlp::v2::TransformationErrorHandling)},
  { 692, -1, sizeof(::google::privacy::dlp::v2::PrimitiveTransformation)},
  { 709, -1, sizeof(::google::privacy::dlp::v2::TimePartConfig)},
  { 715, -1, sizeof(::google::privacy::dlp::v2::CryptoHashConfig)},
  { 721, -1, sizeof(::google::privacy::dlp::v2::CryptoDeterministicConfig)},
  { 729, -1, sizeof(::google::privacy::dlp::v2::ReplaceValueConfig)},
  { 735, -1, sizeof(::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig)},
  { 740, -1, sizeof(::google::privacy::dlp::v2::RedactConfig)},
  { 745, -1, sizeof(::google::privacy::dlp::v2::CharsToIgnore)},
  { 753, -1, sizeof(::google::privacy::dlp::v2::CharacterMaskConfig)},
  { 762, -1, sizeof(::google::privacy::dlp::v2::FixedSizeBucketingConfig)},
  { 770, -1, sizeof(::google::privacy::dlp::v2::BucketingConfig_Bucket)},
  { 778, -1, sizeof(::google::privacy::dlp::v2::BucketingConfig)},
  { 784, -1, sizeof(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig)},
  { 796, -1, sizeof(::google::privacy::dlp::v2::CryptoKey)},
  { 805, -1, sizeof(::google::privacy::dlp::v2::TransientCryptoKey)},
  { 811, -1, sizeof(::google::privacy::dlp::v2::UnwrappedCryptoKey)},
  { 817, -1, sizeof(::google::privacy::dlp::v2::KmsWrappedCryptoKey)},
  { 824, -1, sizeof(::google::privacy::dlp::v2::DateShiftConfig)},
  { 834, -1, sizeof(::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation)},
  { 841, -1, sizeof(::google::privacy::dlp::v2::InfoTypeTransformations)},
  { 847, -1, sizeof(::google::privacy::dlp::v2::FieldTransformation)},
  { 857, -1, sizeof(::google::privacy::dlp::v2::RecordTransformations)},
  { 864, -1, sizeof(::google::privacy::dlp::v2::RecordSuppression)},
  { 870, -1, sizeof(::google::privacy::dlp::v2::RecordCondition_Condition)},
  { 878, -1, sizeof(::google::privacy::dlp::v2::RecordCondition_Conditions)},
  { 884, -1, sizeof(::google::privacy::dlp::v2::RecordCondition_Expressions)},
  { 892, -1, sizeof(::google::privacy::dlp::v2::RecordCondition)},
  { 898, -1, sizeof(::google::privacy::dlp::v2::TransformationOverview)},
  { 905, -1, sizeof(::google::privacy::dlp::v2::TransformationSummary_SummaryResult)},
  { 913, -1, sizeof(::google::privacy::dlp::v2::TransformationSummary)},
  { 925, -1, sizeof(::google::privacy::dlp::v2::Schedule)},
  { 932, -1, sizeof(::google::privacy::dlp::v2::Manual)},
  { 937, -1, sizeof(::google::privacy::dlp::v2::InspectTemplate)},
  { 948, -1, sizeof(::google::privacy::dlp::v2::DeidentifyTemplate)},
  { 959, -1, sizeof(::google::privacy::dlp::v2::Error)},
  { 966, -1, sizeof(::google::privacy::dlp::v2::JobTrigger_Trigger)},
  { 974, -1, sizeof(::google::privacy::dlp::v2::JobTrigger)},
  { 990, -1, sizeof(::google::privacy::dlp::v2::Action_SaveFindings)},
  { 996, -1, sizeof(::google::privacy::dlp::v2::Action_PublishToPubSub)},
  { 1002, -1, sizeof(::google::privacy::dlp::v2::Action_PublishSummaryToCscc)},
  { 1007, -1, sizeof(::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog)},
  { 1012, -1, sizeof(::google::privacy::dlp::v2::Action_JobNotificationEmails)},
  { 1017, -1, sizeof(::google::privacy::dlp::v2::Action_PublishToStackdriver)},
  { 1022, -1, sizeof(::google::privacy::dlp::v2::Action)},
  { 1034, -1, sizeof(::google::privacy::dlp::v2::CreateInspectTemplateRequest)},
  { 1043, -1, sizeof(::google::privacy::dlp::v2::UpdateInspectTemplateRequest)},
  { 1051, -1, sizeof(::google::privacy::dlp::v2::GetInspectTemplateRequest)},
  { 1057, -1, sizeof(::google::privacy::dlp::v2::ListInspectTemplatesRequest)},
  { 1067, -1, sizeof(::google::privacy::dlp::v2::ListInspectTemplatesResponse)},
  { 1074, -1, sizeof(::google::privacy::dlp::v2::DeleteInspectTemplateRequest)},
  { 1080, -1, sizeof(::google::privacy::dlp::v2::CreateJobTriggerRequest)},
  { 1089, -1, sizeof(::google::privacy::dlp::v2::ActivateJobTriggerRequest)},
  { 1095, -1, sizeof(::google::privacy::dlp::v2::UpdateJobTriggerRequest)},
  { 1103, -1, sizeof(::google::privacy::dlp::v2::GetJobTriggerRequest)},
  { 1109, -1, sizeof(::google::privacy::dlp::v2::CreateDlpJobRequest)},
  { 1120, -1, sizeof(::google::privacy::dlp::v2::ListJobTriggersRequest)},
  { 1131, -1, sizeof(::google::privacy::dlp::v2::ListJobTriggersResponse)},
  { 1138, -1, sizeof(::google::privacy::dlp::v2::DeleteJobTriggerRequest)},
  { 1144, -1, sizeof(::google::privacy::dlp::v2::InspectJobConfig)},
  { 1153, -1, sizeof(::google::privacy::dlp::v2::DlpJob)},
  { 1169, -1, sizeof(::google::privacy::dlp::v2::GetDlpJobRequest)},
  { 1175, -1, sizeof(::google::privacy::dlp::v2::ListDlpJobsRequest)},
  { 1187, -1, sizeof(::google::privacy::dlp::v2::ListDlpJobsResponse)},
  { 1194, -1, sizeof(::google::privacy::dlp::v2::CancelDlpJobRequest)},
  { 1200, -1, sizeof(::google::privacy::dlp::v2::FinishDlpJobRequest)},
  { 1206, -1, sizeof(::google::privacy::dlp::v2::DeleteDlpJobRequest)},
  { 1212, -1, sizeof(::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest)},
  { 1221, -1, sizeof(::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest)},
  { 1229, -1, sizeof(::google::privacy::dlp::v2::GetDeidentifyTemplateRequest)},
  { 1235, -1, sizeof(::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest)},
  { 1245, -1, sizeof(::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse)},
  { 1252, -1, sizeof(::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest)},
  { 1258, -1, sizeof(::google::privacy::dlp::v2::LargeCustomDictionaryConfig)},
  { 1267, -1, sizeof(::google::privacy::dlp::v2::LargeCustomDictionaryStats)},
  { 1273, -1, sizeof(::google::privacy::dlp::v2::StoredInfoTypeConfig)},
  { 1284, -1, sizeof(::google::privacy::dlp::v2::StoredInfoTypeStats)},
  { 1291, -1, sizeof(::google::privacy::dlp::v2::StoredInfoTypeVersion)},
  { 1301, -1, sizeof(::google::privacy::dlp::v2::StoredInfoType)},
  { 1309, -1, sizeof(::google::privacy::dlp::v2::CreateStoredInfoTypeRequest)},
  { 1318, -1, sizeof(::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest)},
  { 1326, -1, sizeof(::google::privacy::dlp::v2::GetStoredInfoTypeRequest)},
  { 1332, -1, sizeof(::google::privacy::dlp::v2::ListStoredInfoTypesRequest)},
  { 1342, -1, sizeof(::google::privacy::dlp::v2::ListStoredInfoTypesResponse)},
  { 1349, -1, sizeof(::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest)},
  { 1355, -1, sizeof(::google::privacy::dlp::v2::HybridInspectJobTriggerRequest)},
  { 1362, -1, sizeof(::google::privacy::dlp::v2::HybridInspectDlpJobRequest)},
  { 1369, -1, sizeof(::google::privacy::dlp::v2::HybridContentItem)},
  { 1376, 1383, sizeof(::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse)},
  { 1385, -1, sizeof(::google::privacy::dlp::v2::HybridFindingDetails)},
  { 1395, -1, sizeof(::google::privacy::dlp::v2::HybridInspectResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ExcludeInfoTypes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ExclusionRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectionRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectionRuleSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectConfig_FindingLimits_InfoTypeLimit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectConfig_FindingLimits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ByteContentItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ContentItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Table_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Finding_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Finding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ContentLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_MetadataLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StorageMetadataLabel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DocumentLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TableLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Container_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ImageLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_BoundingBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RedactImageRequest_ImageRedactionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RedactImageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RedactImageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeidentifyContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeidentifyContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ReidentifyContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ReidentifyContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectContentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectContentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_OutputStorageConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InfoTypeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectDataSourceDetails_RequestedOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectDataSourceDetails_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectDataSourceDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridInspectStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InfoTypeDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListInfoTypesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListInfoTypesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RiskAnalysisJobConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_QuasiId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StatisticalTable_QuasiIdentifierField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StatisticalTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_NumericalStatsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_CategoricalStatsConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_KAnonymityConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_LDiversityConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_DeltaPresenceEstimationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrivacyMetric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KAnonymityResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_LDiversityResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_KMapEstimationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ValueFrequency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_QuoteInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DateTime_TimeZone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DateTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TransformationErrorHandling_ThrowError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TransformationErrorHandling_LeaveUntransformed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TransformationErrorHandling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TimePartConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CryptoHashConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CryptoDeterministicConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ReplaceValueConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ReplaceWithInfoTypeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RedactConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CharsToIgnore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CharacterMaskConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_FixedSizeBucketingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_BucketingConfig_Bucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_BucketingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TransientCryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_UnwrappedCryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_KmsWrappedCryptoKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DateShiftConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InfoTypeTransformations_InfoTypeTransformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InfoTypeTransformations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_FieldTransformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordTransformations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordSuppression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordCondition_Condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordCondition_Conditions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordCondition_Expressions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TransformationOverview_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TransformationSummary_SummaryResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TransformationSummary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Schedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Manual_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeidentifyTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_JobTrigger_Trigger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_JobTrigger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Action_SaveFindings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Action_PublishToPubSub_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Action_PublishSummaryToCscc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Action_PublishFindingsToCloudDataCatalog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Action_JobNotificationEmails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Action_PublishToStackdriver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CreateInspectTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_UpdateInspectTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_GetInspectTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListInspectTemplatesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListInspectTemplatesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeleteInspectTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CreateJobTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ActivateJobTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_UpdateJobTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_GetJobTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CreateDlpJobRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListJobTriggersRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListJobTriggersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeleteJobTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InspectJobConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DlpJob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_GetDlpJobRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListDlpJobsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListDlpJobsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CancelDlpJobRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_FinishDlpJobRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeleteDlpJobRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CreateDeidentifyTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_UpdateDeidentifyTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_GetDeidentifyTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListDeidentifyTemplatesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListDeidentifyTemplatesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeleteDeidentifyTemplateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_LargeCustomDictionaryConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_LargeCustomDictionaryStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StoredInfoTypeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StoredInfoTypeVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StoredInfoType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CreateStoredInfoTypeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_UpdateStoredInfoTypeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_GetStoredInfoTypeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListStoredInfoTypesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_ListStoredInfoTypesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DeleteStoredInfoTypeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridInspectJobTriggerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridInspectDlpJobRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridContentItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridFindingDetails_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridFindingDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridInspectResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto = {
  {}, AddDescriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto, "google/privacy/dlp/v2/dlp.proto", schemas,
  file_default_instances, TableStruct_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto::offsets,
  file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto, 174, file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto, file_level_service_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto,
};

const char descriptor_table_protodef_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[] =
  "\n\037google/privacy/dlp/v2/dlp.proto\022\025googl"
  "e.privacy.dlp.v2\032\027google/api/client.prot"
  "o\032\037google/api/field_behavior.proto\032\031goog"
  "le/api/resource.proto\032#google/privacy/dl"
  "p/v2/storage.proto\032\036google/protobuf/dura"
  "tion.proto\032\033google/protobuf/empty.proto\032"
  " google/protobuf/field_mask.proto\032\037googl"
  "e/protobuf/timestamp.proto\032\027google/rpc/s"
  "tatus.proto\032\026google/type/date.proto\032\033goo"
  "gle/type/dayofweek.proto\032\033google/type/ti"
  "meofday.proto\032\034google/api/annotations.pr"
  "oto\"G\n\020ExcludeInfoTypes\0223\n\ninfo_types\030\001 "
  "\003(\0132\037.google.privacy.dlp.v2.InfoType\"\240\002\n"
  "\rExclusionRule\022F\n\ndictionary\030\001 \001(\01320.goo"
  "gle.privacy.dlp.v2.CustomInfoType.Dictio"
  "naryH\000\022<\n\005regex\030\002 \001(\0132+.google.privacy.d"
  "lp.v2.CustomInfoType.RegexH\000\022E\n\022exclude_"
  "info_types\030\003 \001(\0132\'.google.privacy.dlp.v2"
  ".ExcludeInfoTypesH\000\022:\n\rmatching_type\030\004 \001"
  "(\0162#.google.privacy.dlp.v2.MatchingTypeB"
  "\006\n\004type\"\261\001\n\016InspectionRule\022W\n\014hotword_ru"
  "le\030\001 \001(\0132\?.google.privacy.dlp.v2.CustomI"
  "nfoType.DetectionRule.HotwordRuleH\000\022>\n\016e"
  "xclusion_rule\030\002 \001(\0132$.google.privacy.dlp"
  ".v2.ExclusionRuleH\000B\006\n\004type\"~\n\021Inspectio"
  "nRuleSet\0223\n\ninfo_types\030\001 \003(\0132\037.google.pr"
  "ivacy.dlp.v2.InfoType\0224\n\005rules\030\002 \003(\0132%.g"
  "oogle.privacy.dlp.v2.InspectionRule\"\307\005\n\r"
  "InspectConfig\0223\n\ninfo_types\030\001 \003(\0132\037.goog"
  "le.privacy.dlp.v2.InfoType\0229\n\016min_likeli"
  "hood\030\002 \001(\0162!.google.privacy.dlp.v2.Likel"
  "ihood\022B\n\006limits\030\003 \001(\01322.google.privacy.d"
  "lp.v2.InspectConfig.FindingLimits\022\025\n\rinc"
  "lude_quote\030\004 \001(\010\022\032\n\022exclude_info_types\030\005"
  " \001(\010\022@\n\021custom_info_types\030\006 \003(\0132%.google"
  ".privacy.dlp.v2.CustomInfoType\022=\n\017conten"
  "t_options\030\010 \003(\0162$.google.privacy.dlp.v2."
  "ContentOption\022:\n\010rule_set\030\n \003(\0132(.google"
  ".privacy.dlp.v2.InspectionRuleSet\032\221\002\n\rFi"
  "ndingLimits\022\035\n\025max_findings_per_item\030\001 \001"
  "(\005\022 \n\030max_findings_per_request\030\002 \001(\005\022d\n\032"
  "max_findings_per_info_type\030\003 \003(\0132@.googl"
  "e.privacy.dlp.v2.InspectConfig.FindingLi"
  "mits.InfoTypeLimit\032Y\n\rInfoTypeLimit\0222\n\ti"
  "nfo_type\030\001 \001(\0132\037.google.privacy.dlp.v2.I"
  "nfoType\022\024\n\014max_findings\030\002 \001(\005\"\230\002\n\017ByteCo"
  "ntentItem\022>\n\004type\030\001 \001(\01620.google.privacy"
  ".dlp.v2.ByteContentItem.BytesType\022\014\n\004dat"
  "a\030\002 \001(\014\"\266\001\n\tBytesType\022\032\n\026BYTES_TYPE_UNSP"
  "ECIFIED\020\000\022\t\n\005IMAGE\020\006\022\016\n\nIMAGE_JPEG\020\001\022\r\n\t"
  "IMAGE_BMP\020\002\022\r\n\tIMAGE_PNG\020\003\022\r\n\tIMAGE_SVG\020"
  "\004\022\r\n\tTEXT_UTF8\020\005\022\021\n\rWORD_DOCUMENT\020\007\022\007\n\003P"
  "DF\020\010\022\010\n\004AVRO\020\013\022\007\n\003CSV\020\014\022\007\n\003TSV\020\r\"\227\001\n\013Con"
  "tentItem\022\017\n\005value\030\003 \001(\tH\000\022-\n\005table\030\004 \001(\013"
  "2\034.google.privacy.dlp.v2.TableH\000\022;\n\tbyte"
  "_item\030\005 \001(\0132&.google.privacy.dlp.v2.Byte"
  "ContentItemH\000B\013\n\tdata_item\"\235\001\n\005Table\022/\n\007"
  "headers\030\001 \003(\0132\036.google.privacy.dlp.v2.Fi"
  "eldId\022.\n\004rows\030\002 \003(\0132 .google.privacy.dlp"
  ".v2.Table.Row\0323\n\003Row\022,\n\006values\030\001 \003(\0132\034.g"
  "oogle.privacy.dlp.v2.Value\"]\n\rInspectRes"
  "ult\0220\n\010findings\030\001 \003(\0132\036.google.privacy.d"
  "lp.v2.Finding\022\032\n\022findings_truncated\030\002 \001("
  "\010\"\313\005\n\007Finding\022\014\n\004name\030\016 \001(\t\022\r\n\005quote\030\001 \001"
  "(\t\0222\n\tinfo_type\030\002 \001(\0132\037.google.privacy.d"
  "lp.v2.InfoType\0225\n\nlikelihood\030\003 \001(\0162!.goo"
  "gle.privacy.dlp.v2.Likelihood\0221\n\010locatio"
  "n\030\004 \001(\0132\037.google.privacy.dlp.v2.Location"
  "\022/\n\013create_time\030\006 \001(\0132\032.google.protobuf."
  "Timestamp\0224\n\nquote_info\030\007 \001(\0132 .google.p"
  "rivacy.dlp.v2.QuoteInfo\0225\n\rresource_name"
  "\030\010 \001(\tB\036\372A\033\n\031dlp.googleapis.com/DlpJob\0228"
  "\n\014trigger_name\030\t \001(\tB\"\372A\037\n\035dlp.googleapi"
  "s.com/JobTrigger\022:\n\006labels\030\n \003(\0132*.googl"
  "e.privacy.dlp.v2.Finding.LabelsEntry\0223\n\017"
  "job_create_time\030\013 \001(\0132\032.google.protobuf."
  "Timestamp\0220\n\010job_name\030\r \001(\tB\036\372A\033\n\031dlp.go"
  "ogleapis.com/DlpJob\032-\n\013LabelsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001:[\352AX\n\032dlp.goo"
  "gleapis.com/Finding\022:projects/{project}/"
  "locations/{location}/findings/{finding}\""
  "\353\001\n\010Location\0220\n\nbyte_range\030\001 \001(\0132\034.googl"
  "e.privacy.dlp.v2.Range\0225\n\017codepoint_rang"
  "e\030\002 \001(\0132\034.google.privacy.dlp.v2.Range\022A\n"
  "\021content_locations\030\007 \003(\0132&.google.privac"
  "y.dlp.v2.ContentLocation\0223\n\tcontainer\030\010 "
  "\001(\0132 .google.privacy.dlp.v2.Container\"\227\003"
  "\n\017ContentLocation\022\026\n\016container_name\030\001 \001("
  "\t\022@\n\017record_location\030\002 \001(\0132%.google.priv"
  "acy.dlp.v2.RecordLocationH\000\022>\n\016image_loc"
  "ation\030\003 \001(\0132$.google.privacy.dlp.v2.Imag"
  "eLocationH\000\022D\n\021document_location\030\005 \001(\0132\'"
  ".google.privacy.dlp.v2.DocumentLocationH"
  "\000\022D\n\021metadata_location\030\010 \001(\0132\'.google.pr"
  "ivacy.dlp.v2.MetadataLocationH\000\0227\n\023conta"
  "iner_timestamp\030\006 \001(\0132\032.google.protobuf.T"
  "imestamp\022\031\n\021container_version\030\007 \001(\tB\n\n\010l"
  "ocation\"\224\001\n\020MetadataLocation\0221\n\004type\030\001 \001"
  "(\0162#.google.privacy.dlp.v2.MetadataType\022"
  "D\n\rstorage_label\030\003 \001(\0132+.google.privacy."
  "dlp.v2.StorageMetadataLabelH\000B\007\n\005label\"#"
  "\n\024StorageMetadataLabel\022\013\n\003key\030\001 \001(\t\"\'\n\020D"
  "ocumentLocation\022\023\n\013file_offset\030\001 \001(\003\"\266\001\n"
  "\016RecordLocation\0224\n\nrecord_key\030\001 \001(\0132 .go"
  "ogle.privacy.dlp.v2.RecordKey\0220\n\010field_i"
  "d\030\002 \001(\0132\036.google.privacy.dlp.v2.FieldId\022"
  "<\n\016table_location\030\003 \001(\0132$.google.privacy"
  ".dlp.v2.TableLocation\"\"\n\rTableLocation\022\021"
  "\n\trow_index\030\001 \001(\003\"\254\001\n\tContainer\022\014\n\004type\030"
  "\001 \001(\t\022\022\n\nproject_id\030\002 \001(\t\022\021\n\tfull_path\030\003"
  " \001(\t\022\021\n\troot_path\030\004 \001(\t\022\025\n\rrelative_path"
  "\030\005 \001(\t\022/\n\013update_time\030\006 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\017\n\007version\030\007 \001(\t\"#\n\005Rang"
  "e\022\r\n\005start\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\"K\n\rImageLo"
  "cation\022:\n\016bounding_boxes\030\001 \003(\0132\".google."
  "privacy.dlp.v2.BoundingBox\"G\n\013BoundingBo"
  "x\022\013\n\003top\030\001 \001(\005\022\014\n\004left\030\002 \001(\005\022\r\n\005width\030\003 "
  "\001(\005\022\016\n\006height\030\004 \001(\005\"\374\003\n\022RedactImageReque"
  "st\0222\n\006parent\030\001 \001(\tB\"\372A\037\022\035dlp.googleapis."
  "com/DlpContent\022\023\n\013location_id\030\010 \001(\t\022<\n\016i"
  "nspect_config\030\002 \001(\0132$.google.privacy.dlp"
  ".v2.InspectConfig\022_\n\027image_redaction_con"
  "figs\030\005 \003(\0132>.google.privacy.dlp.v2.Redac"
  "tImageRequest.ImageRedactionConfig\022\030\n\020in"
  "clude_findings\030\006 \001(\010\0229\n\tbyte_item\030\007 \001(\0132"
  "&.google.privacy.dlp.v2.ByteContentItem\032"
  "\250\001\n\024ImageRedactionConfig\0224\n\tinfo_type\030\001 "
  "\001(\0132\037.google.privacy.dlp.v2.InfoTypeH\000\022\031"
  "\n\017redact_all_text\030\002 \001(\010H\000\0225\n\017redaction_c"
  "olor\030\003 \001(\0132\034.google.privacy.dlp.v2.Color"
  "B\010\n\006target\"1\n\005Color\022\013\n\003red\030\001 \001(\002\022\r\n\005gree"
  "n\030\002 \001(\002\022\014\n\004blue\030\003 \001(\002\"\203\001\n\023RedactImageRes"
  "ponse\022\026\n\016redacted_image\030\001 \001(\014\022\026\n\016extract"
  "ed_text\030\002 \001(\t\022<\n\016inspect_result\030\003 \001(\0132$."
  "google.privacy.dlp.v2.InspectResult\"\330\002\n\030"
  "DeidentifyContentRequest\0222\n\006parent\030\001 \001(\t"
  "B\"\372A\037\022\035dlp.googleapis.com/DlpContent\022B\n\021"
  "deidentify_config\030\002 \001(\0132\'.google.privacy"
  ".dlp.v2.DeidentifyConfig\022<\n\016inspect_conf"
  "ig\030\003 \001(\0132$.google.privacy.dlp.v2.Inspect"
  "Config\0220\n\004item\030\004 \001(\0132\".google.privacy.dl"
  "p.v2.ContentItem\022\035\n\025inspect_template_nam"
  "e\030\005 \001(\t\022 \n\030deidentify_template_name\030\006 \001("
  "\t\022\023\n\013location_id\030\007 \001(\t\"\216\001\n\031DeidentifyCon"
  "tentResponse\0220\n\004item\030\001 \001(\0132\".google.priv"
  "acy.dlp.v2.ContentItem\022\?\n\010overview\030\002 \001(\013"
  "2-.google.privacy.dlp.v2.TransformationO"
  "verview\"\333\002\n\030ReidentifyContentRequest\0225\n\006"
  "parent\030\001 \001(\tB%\340A\002\372A\037\022\035dlp.googleapis.com"
  "/DlpContent\022B\n\021reidentify_config\030\002 \001(\0132\'"
  ".google.privacy.dlp.v2.DeidentifyConfig\022"
  "<\n\016inspect_config\030\003 \001(\0132$.google.privacy"
  ".dlp.v2.InspectConfig\0220\n\004item\030\004 \001(\0132\".go"
  "ogle.privacy.dlp.v2.ContentItem\022\035\n\025inspe"
  "ct_template_name\030\005 \001(\t\022 \n\030reidentify_tem"
  "plate_name\030\006 \001(\t\022\023\n\013location_id\030\007 \001(\t\"\216\001"
  "\n\031ReidentifyContentResponse\0220\n\004item\030\001 \001("
  "\0132\".google.privacy.dlp.v2.ContentItem\022\?\n"
  "\010overview\030\002 \001(\0132-.google.privacy.dlp.v2."
  "TransformationOverview\"\357\001\n\025InspectConten"
  "tRequest\0222\n\006parent\030\001 \001(\tB\"\372A\037\022\035dlp.googl"
  "eapis.com/DlpContent\022<\n\016inspect_config\030\002"
  " \001(\0132$.google.privacy.dlp.v2.InspectConf"
  "ig\0220\n\004item\030\003 \001(\0132\".google.privacy.dlp.v2"
  ".ContentItem\022\035\n\025inspect_template_name\030\004 "
  "\001(\t\022\023\n\013location_id\030\005 \001(\t\"N\n\026InspectConte"
  "ntResponse\0224\n\006result\030\001 \001(\0132$.google.priv"
  "acy.dlp.v2.InspectResult\"\267\002\n\023OutputStora"
  "geConfig\0225\n\005table\030\001 \001(\0132$.google.privacy"
  ".dlp.v2.BigQueryTableH\000\022N\n\routput_schema"
  "\030\003 \001(\01627.google.privacy.dlp.v2.OutputSto"
  "rageConfig.OutputSchema\"\220\001\n\014OutputSchema"
  "\022\035\n\031OUTPUT_SCHEMA_UNSPECIFIED\020\000\022\021\n\rBASIC"
  "_COLUMNS\020\001\022\017\n\013GCS_COLUMNS\020\002\022\025\n\021DATASTORE"
  "_COLUMNS\020\003\022\025\n\021BIG_QUERY_COLUMNS\020\004\022\017\n\013ALL"
  "_COLUMNS\020\005B\006\n\004type\"R\n\rInfoTypeStats\0222\n\ti"
  "nfo_type\030\001 \001(\0132\037.google.privacy.dlp.v2.I"
  "nfoType\022\r\n\005count\030\002 \001(\003\"\244\004\n\030InspectDataSo"
  "urceDetails\022[\n\021requested_options\030\002 \001(\0132@"
  ".google.privacy.dlp.v2.InspectDataSource"
  "Details.RequestedOptions\022F\n\006result\030\003 \001(\013"
  "26.google.privacy.dlp.v2.InspectDataSour"
  "ceDetails.Result\032\232\001\n\020RequestedOptions\022I\n"
  "\031snapshot_inspect_template\030\001 \001(\0132&.googl"
  "e.privacy.dlp.v2.InspectTemplate\022;\n\njob_"
  "config\030\003 \001(\0132\'.google.privacy.dlp.v2.Ins"
  "pectJobConfig\032\305\001\n\006Result\022\027\n\017processed_by"
  "tes\030\001 \001(\003\022\035\n\025total_estimated_bytes\030\002 \001(\003"
  "\022=\n\017info_type_stats\030\003 \003(\0132$.google.priva"
  "cy.dlp.v2.InfoTypeStats\022D\n\014hybrid_stats\030"
  "\007 \001(\0132..google.privacy.dlp.v2.HybridInsp"
  "ectStatistics\"`\n\027HybridInspectStatistics"
  "\022\027\n\017processed_count\030\001 \001(\003\022\025\n\raborted_cou"
  "nt\030\002 \001(\003\022\025\n\rpending_count\030\003 \001(\003\"\220\001\n\023Info"
  "TypeDescription\022\014\n\004name\030\001 \001(\t\022\024\n\014display"
  "_name\030\002 \001(\t\022@\n\014supported_by\030\003 \003(\0162*.goog"
  "le.privacy.dlp.v2.InfoTypeSupportedBy\022\023\n"
  "\013description\030\004 \001(\t\"b\n\024ListInfoTypesReque"
  "st\022\016\n\006parent\030\004 \001(\t\022\025\n\rlanguage_code\030\001 \001("
  "\t\022\016\n\006filter\030\002 \001(\t\022\023\n\013location_id\030\003 \001(\t\"W"
  "\n\025ListInfoTypesResponse\022>\n\ninfo_types\030\001 "
  "\003(\0132*.google.privacy.dlp.v2.InfoTypeDesc"
  "ription\"\301\001\n\025RiskAnalysisJobConfig\022<\n\016pri"
  "vacy_metric\030\001 \001(\0132$.google.privacy.dlp.v"
  "2.PrivacyMetric\022:\n\014source_table\030\002 \001(\0132$."
  "google.privacy.dlp.v2.BigQueryTable\022.\n\007a"
  "ctions\030\003 \003(\0132\035.google.privacy.dlp.v2.Act"
  "ion\"\274\001\n\007QuasiId\0222\n\005field\030\001 \001(\0132\036.google."
  "privacy.dlp.v2.FieldIdB\003\340A\002\0224\n\tinfo_type"
  "\030\002 \001(\0132\037.google.privacy.dlp.v2.InfoTypeH"
  "\000\022\024\n\ncustom_tag\030\003 \001(\tH\000\022*\n\010inferred\030\004 \001("
  "\0132\026.google.protobuf.EmptyH\000B\005\n\003tag\"\276\002\n\020S"
  "tatisticalTable\0228\n\005table\030\003 \001(\0132$.google."
  "privacy.dlp.v2.BigQueryTableB\003\340A\002\022T\n\tqua"
  "si_ids\030\001 \003(\0132<.google.privacy.dlp.v2.Sta"
  "tisticalTable.QuasiIdentifierFieldB\003\340A\002\022"
  "\?\n\022relative_frequency\030\002 \001(\0132\036.google.pri"
  "vacy.dlp.v2.FieldIdB\003\340A\002\032Y\n\024QuasiIdentif"
  "ierField\022-\n\005field\030\001 \001(\0132\036.google.privacy"
  ".dlp.v2.FieldId\022\022\n\ncustom_tag\030\002 \001(\t\"\223\017\n\r"
  "PrivacyMetric\022[\n\026numerical_stats_config\030"
  "\001 \001(\01329.google.privacy.dlp.v2.PrivacyMet"
  "ric.NumericalStatsConfigH\000\022_\n\030categorica"
  "l_stats_config\030\002 \001(\0132;.google.privacy.dl"
  "p.v2.PrivacyMetric.CategoricalStatsConfi"
  "gH\000\022S\n\022k_anonymity_config\030\003 \001(\01325.google"
  ".privacy.dlp.v2.PrivacyMetric.KAnonymity"
  "ConfigH\000\022S\n\022l_diversity_config\030\004 \001(\01325.g"
  "oogle.privacy.dlp.v2.PrivacyMetric.LDive"
  "rsityConfigH\000\022\\\n\027k_map_estimation_config"
  "\030\005 \001(\01329.google.privacy.dlp.v2.PrivacyMe"
  "tric.KMapEstimationConfigH\000\022n\n delta_pre"
  "sence_estimation_config\030\006 \001(\0132B.google.p"
  "rivacy.dlp.v2.PrivacyMetric.DeltaPresenc"
  "eEstimationConfigH\000\032E\n\024NumericalStatsCon"
  "fig\022-\n\005field\030\001 \001(\0132\036.google.privacy.dlp."
  "v2.FieldId\032G\n\026CategoricalStatsConfig\022-\n\005"
  "field\030\001 \001(\0132\036.google.privacy.dlp.v2.Fiel"
  "dId\032y\n\020KAnonymityConfig\0221\n\tquasi_ids\030\001 \003"
  "(\0132\036.google.privacy.dlp.v2.FieldId\0222\n\ten"
  "tity_id\030\002 \001(\0132\037.google.privacy.dlp.v2.En"
  "tityId\032\202\001\n\020LDiversityConfig\0221\n\tquasi_ids"
  "\030\001 \003(\0132\036.google.privacy.dlp.v2.FieldId\022;"
  "\n\023sensitive_attribute\030\002 \001(\0132\036.google.pri"
  "vacy.dlp.v2.FieldId\032\201\006\n\024KMapEstimationCo"
  "nfig\022]\n\tquasi_ids\030\001 \003(\0132E.google.privacy"
  ".dlp.v2.PrivacyMetric.KMapEstimationConf"
  "ig.TaggedFieldB\003\340A\002\022\023\n\013region_code\030\002 \001(\t"
  "\022b\n\020auxiliary_tables\030\003 \003(\0132H.google.priv"
  "acy.dlp.v2.PrivacyMetric.KMapEstimationC"
  "onfig.AuxiliaryTable\032\300\001\n\013TaggedField\0222\n\005"
  "field\030\001 \001(\0132\036.google.privacy.dlp.v2.Fiel"
  "dIdB\003\340A\002\0224\n\tinfo_type\030\002 \001(\0132\037.google.pri"
  "vacy.dlp.v2.InfoTypeH\000\022\024\n\ncustom_tag\030\003 \001"
  "(\tH\000\022*\n\010inferred\030\004 \001(\0132\026.google.protobuf"
  ".EmptyH\000B\005\n\003tag\032\315\002\n\016AuxiliaryTable\0228\n\005ta"
  "ble\030\003 \001(\0132$.google.privacy.dlp.v2.BigQue"
  "ryTableB\003\340A\002\022m\n\tquasi_ids\030\001 \003(\0132U.google"
  ".privacy.dlp.v2.PrivacyMetric.KMapEstima"
  "tionConfig.AuxiliaryTable.QuasiIdFieldB\003"
  "\340A\002\022\?\n\022relative_frequency\030\002 \001(\0132\036.google"
  ".privacy.dlp.v2.FieldIdB\003\340A\002\032Q\n\014QuasiIdF"
  "ield\022-\n\005field\030\001 \001(\0132\036.google.privacy.dlp"
  ".v2.FieldId\022\022\n\ncustom_tag\030\002 \001(\t\032\257\001\n\035Delt"
  "aPresenceEstimationConfig\0226\n\tquasi_ids\030\001"
  " \003(\0132\036.google.privacy.dlp.v2.QuasiIdB\003\340A"
  "\002\022\023\n\013region_code\030\002 \001(\t\022A\n\020auxiliary_tabl"
  "es\030\003 \003(\0132\'.google.privacy.dlp.v2.Statist"
  "icalTableB\006\n\004type\"\301\037\n\034AnalyzeDataSourceR"
  "iskDetails\022F\n\030requested_privacy_metric\030\001"
  " \001(\0132$.google.privacy.dlp.v2.PrivacyMetr"
  "ic\022D\n\026requested_source_table\030\002 \001(\0132$.goo"
  "gle.privacy.dlp.v2.BigQueryTable\022j\n\026nume"
  "rical_stats_result\030\003 \001(\0132H.google.privac"
  "y.dlp.v2.AnalyzeDataSourceRiskDetails.Nu"
  "mericalStatsResultH\000\022n\n\030categorical_stat"
  "s_result\030\004 \001(\0132J.google.privacy.dlp.v2.A"
  "nalyzeDataSourceRiskDetails.CategoricalS"
  "tatsResultH\000\022b\n\022k_anonymity_result\030\005 \001(\013"
  "2D.google.privacy.dlp.v2.AnalyzeDataSour"
  "ceRiskDetails.KAnonymityResultH\000\022b\n\022l_di"
  "versity_result\030\006 \001(\0132D.google.privacy.dl"
  "p.v2.AnalyzeDataSourceRiskDetails.LDiver"
  "sityResultH\000\022k\n\027k_map_estimation_result\030"
  "\007 \001(\0132H.google.privacy.dlp.v2.AnalyzeDat"
  "aSourceRiskDetails.KMapEstimationResultH"
  "\000\022}\n delta_presence_estimation_result\030\t "
  "\001(\0132Q.google.privacy.dlp.v2.AnalyzeDataS"
  "ourceRiskDetails.DeltaPresenceEstimation"
  "ResultH\000\022k\n\021requested_options\030\n \001(\0132P.go"
  "ogle.privacy.dlp.v2.AnalyzeDataSourceRis"
  "kDetails.RequestedRiskAnalysisOptions\032\257\001"
  "\n\024NumericalStatsResult\022/\n\tmin_value\030\001 \001("
  "\0132\034.google.privacy.dlp.v2.Value\022/\n\tmax_v"
  "alue\030\002 \001(\0132\034.google.privacy.dlp.v2.Value"
  "\0225\n\017quantile_values\030\004 \003(\0132\034.google.priva"
  "cy.dlp.v2.Value\032\215\003\n\026CategoricalStatsResu"
  "lt\022\225\001\n!value_frequency_histogram_buckets"
  "\030\005 \003(\0132j.google.privacy.dlp.v2.AnalyzeDa"
  "taSourceRiskDetails.CategoricalStatsResu"
  "lt.CategoricalStatsHistogramBucket\032\332\001\n\037C"
  "ategoricalStatsHistogramBucket\022#\n\033value_"
  "frequency_lower_bound\030\001 \001(\003\022#\n\033value_fre"
  "quency_upper_bound\030\002 \001(\003\022\023\n\013bucket_size\030"
  "\003 \001(\003\022<\n\rbucket_values\030\004 \003(\0132%.google.pr"
  "ivacy.dlp.v2.ValueFrequency\022\032\n\022bucket_va"
  "lue_count\030\005 \001(\003\032\265\004\n\020KAnonymityResult\022\213\001\n"
  "#equivalence_class_histogram_buckets\030\005 \003"
  "(\0132^.google.privacy.dlp.v2.AnalyzeDataSo"
  "urceRiskDetails.KAnonymityResult.KAnonym"
  "ityHistogramBucket\032t\n\032KAnonymityEquivale"
  "nceClass\0226\n\020quasi_ids_values\030\001 \003(\0132\034.goo"
  "gle.privacy.dlp.v2.Value\022\036\n\026equivalence_"
  "class_size\030\002 \001(\003\032\234\002\n\031KAnonymityHistogram"
  "Bucket\022*\n\"equivalence_class_size_lower_b"
  "ound\030\001 \001(\003\022*\n\"equivalence_class_size_upp"
  "er_bound\030\002 \001(\003\022\023\n\013bucket_size\030\003 \001(\003\022v\n\rb"
  "ucket_values\030\004 \003(\0132_.google.privacy.dlp."
  "v2.AnalyzeDataSourceRiskDetails.KAnonymi"
  "tyResult.KAnonymityEquivalenceClass\022\032\n\022b"
  "ucket_value_count\030\005 \001(\003\032\260\005\n\020LDiversityRe"
  "sult\022\223\001\n+sensitive_value_frequency_histo"
  "gram_buckets\030\005 \003(\0132^.google.privacy.dlp."
  "v2.AnalyzeDataSourceRiskDetails.LDiversi"
  "tyResult.LDiversityHistogramBucket\032\340\001\n\032L"
  "DiversityEquivalenceClass\0226\n\020quasi_ids_v"
  "alues\030\001 \003(\0132\034.google.privacy.dlp.v2.Valu"
  "e\022\036\n\026equivalence_class_size\030\002 \001(\003\022%\n\035num"
  "_distinct_sensitive_values\030\003 \001(\003\022C\n\024top_"
  "sensitive_values\030\004 \003(\0132%.google.privacy."
  "dlp.v2.ValueFrequency\032\242\002\n\031LDiversityHist"
  "ogramBucket\022-\n%sensitive_value_frequency"
  "_lower_bound\030\001 \001(\003\022-\n%sensitive_value_fr"
  "equency_upper_bound\030\002 \001(\003\022\023\n\013bucket_size"
  "\030\003 \001(\003\022v\n\rbucket_values\030\004 \003(\0132_.google.p"
  "rivacy.dlp.v2.AnalyzeDataSourceRiskDetai"
  "ls.LDiversityResult.LDiversityEquivalenc"
  "eClass\022\032\n\022bucket_value_count\030\005 \001(\003\032\225\004\n\024K"
  "MapEstimationResult\022\212\001\n\032k_map_estimation"
  "_histogram\030\001 \003(\0132f.google.privacy.dlp.v2"
  ".AnalyzeDataSourceRiskDetails.KMapEstima"
  "tionResult.KMapEstimationHistogramBucket"
  "\032r\n\033KMapEstimationQuasiIdValues\0226\n\020quasi"
  "_ids_values\030\001 \003(\0132\034.google.privacy.dlp.v"
  "2.Value\022\033\n\023estimated_anonymity\030\002 \001(\003\032\373\001\n"
  "\035KMapEstimationHistogramBucket\022\025\n\rmin_an"
  "onymity\030\001 \001(\003\022\025\n\rmax_anonymity\030\002 \001(\003\022\023\n\013"
  "bucket_size\030\005 \001(\003\022{\n\rbucket_values\030\006 \003(\013"
  "2d.google.privacy.dlp.v2.AnalyzeDataSour"
  "ceRiskDetails.KMapEstimationResult.KMapE"
  "stimationQuasiIdValues\022\032\n\022bucket_value_c"
  "ount\030\007 \001(\003\032\344\004\n\035DeltaPresenceEstimationRe"
  "sult\022\245\001\n#delta_presence_estimation_histo"
  "gram\030\001 \003(\0132x.google.privacy.dlp.v2.Analy"
  "zeDataSourceRiskDetails.DeltaPresenceEst"
  "imationResult.DeltaPresenceEstimationHis"
  "togramBucket\032}\n$DeltaPresenceEstimationQ"
  "uasiIdValues\0226\n\020quasi_ids_values\030\001 \003(\0132\034"
  ".google.privacy.dlp.v2.Value\022\035\n\025estimate"
  "d_probability\030\002 \001(\001\032\233\002\n&DeltaPresenceEst"
  "imationHistogramBucket\022\027\n\017min_probabilit"
  "y\030\001 \001(\001\022\027\n\017max_probability\030\002 \001(\001\022\023\n\013buck"
  "et_size\030\005 \001(\003\022\215\001\n\rbucket_values\030\006 \003(\0132v."
  "google.privacy.dlp.v2.AnalyzeDataSourceR"
  "iskDetails.DeltaPresenceEstimationResult"
  ".DeltaPresenceEstimationQuasiIdValues\022\032\n"
  "\022bucket_value_count\030\007 \001(\003\032`\n\034RequestedRi"
  "skAnalysisOptions\022@\n\njob_config\030\001 \001(\0132,."
  "google.privacy.dlp.v2.RiskAnalysisJobCon"
  "figB\010\n\006result\"L\n\016ValueFrequency\022+\n\005value"
  "\030\001 \001(\0132\034.google.privacy.dlp.v2.Value\022\r\n\005"
  "count\030\002 \001(\003\"\263\002\n\005Value\022\027\n\rinteger_value\030\001"
  " \001(\003H\000\022\025\n\013float_value\030\002 \001(\001H\000\022\026\n\014string_"
  "value\030\003 \001(\tH\000\022\027\n\rboolean_value\030\004 \001(\010H\000\0225"
  "\n\017timestamp_value\030\005 \001(\0132\032.google.protobu"
  "f.TimestampH\000\022,\n\ntime_value\030\006 \001(\0132\026.goog"
  "le.type.TimeOfDayH\000\022\'\n\ndate_value\030\007 \001(\0132"
  "\021.google.type.DateH\000\0223\n\021day_of_week_valu"
  "e\030\010 \001(\0162\026.google.type.DayOfWeekH\000B\006\n\004typ"
  "e\"Q\n\tQuoteInfo\0224\n\tdate_time\030\002 \001(\0132\037.goog"
  "le.privacy.dlp.v2.DateTimeH\000B\016\n\014parsed_q"
  "uote\"\337\001\n\010DateTime\022\037\n\004date\030\001 \001(\0132\021.google"
  ".type.Date\022+\n\013day_of_week\030\002 \001(\0162\026.google"
  ".type.DayOfWeek\022$\n\004time\030\003 \001(\0132\026.google.t"
  "ype.TimeOfDay\022;\n\ttime_zone\030\004 \001(\0132(.googl"
  "e.privacy.dlp.v2.DateTime.TimeZone\032\"\n\010Ti"
  "meZone\022\026\n\016offset_minutes\030\001 \001(\005\"\244\002\n\020Deide"
  "ntifyConfig\022S\n\031info_type_transformations"
  "\030\001 \001(\0132..google.privacy.dlp.v2.InfoTypeT"
  "ransformationsH\000\022N\n\026record_transformatio"
  "ns\030\002 \001(\0132,.google.privacy.dlp.v2.RecordT"
  "ransformationsH\000\022Y\n\035transformation_error"
  "_handling\030\003 \001(\01322.google.privacy.dlp.v2."
  "TransformationErrorHandlingB\020\n\016transform"
  "ation\"\205\002\n\033TransformationErrorHandling\022T\n"
  "\013throw_error\030\001 \001(\0132=.google.privacy.dlp."
  "v2.TransformationErrorHandling.ThrowErro"
  "rH\000\022d\n\023leave_untransformed\030\002 \001(\0132E.googl"
  "e.privacy.dlp.v2.TransformationErrorHand"
  "ling.LeaveUntransformedH\000\032\014\n\nThrowError\032"
  "\024\n\022LeaveUntransformedB\006\n\004mode\"\365\006\n\027Primit"
  "iveTransformation\022C\n\016replace_config\030\001 \001("
  "\0132).google.privacy.dlp.v2.ReplaceValueCo"
  "nfigH\000\022<\n\rredact_config\030\002 \001(\0132#.google.p"
  "rivacy.dlp.v2.RedactConfigH\000\022K\n\025characte"
  "r_mask_config\030\003 \001(\0132*.google.privacy.dlp"
  ".v2.CharacterMaskConfigH\000\022Y\n\035crypto_repl"
  "ace_ffx_fpe_config\030\004 \001(\01320.google.privac"
  "y.dlp.v2.CryptoReplaceFfxFpeConfigH\000\022V\n\033"
  "fixed_size_bucketing_config\030\005 \001(\0132/.goog"
  "le.privacy.dlp.v2.FixedSizeBucketingConf"
  "igH\000\022B\n\020bucketing_config\030\006 \001(\0132&.google."
  "privacy.dlp.v2.BucketingConfigH\000\022Y\n\035repl"
  "ace_with_info_type_config\030\007 \001(\01320.google"
  ".privacy.dlp.v2.ReplaceWithInfoTypeConfi"
  "gH\000\022A\n\020time_part_config\030\010 \001(\0132%.google.p"
  "rivacy.dlp.v2.TimePartConfigH\000\022E\n\022crypto"
  "_hash_config\030\t \001(\0132\'.google.privacy.dlp."
  "v2.CryptoHashConfigH\000\022C\n\021date_shift_conf"
  "ig\030\013 \001(\0132&.google.privacy.dlp.v2.DateShi"
  "ftConfigH\000\022W\n\033crypto_deterministic_confi"
  "g\030\014 \001(\01320.google.privacy.dlp.v2.CryptoDe"
  "terministicConfigH\000B\020\n\016transformation\"\334\001"
  "\n\016TimePartConfig\022G\n\017part_to_extract\030\001 \001("
  "\0162..google.privacy.dlp.v2.TimePartConfig"
  ".TimePart\"\200\001\n\010TimePart\022\031\n\025TIME_PART_UNSP"
  "ECIFIED\020\000\022\010\n\004YEAR\020\001\022\t\n\005MONTH\020\002\022\020\n\014DAY_OF"
  "_MONTH\020\003\022\017\n\013DAY_OF_WEEK\020\004\022\020\n\014WEEK_OF_YEA"
  "R\020\005\022\017\n\013HOUR_OF_DAY\020\006\"H\n\020CryptoHashConfig"
  "\0224\n\ncrypto_key\030\001 \001(\0132 .google.privacy.dl"
  "p.v2.CryptoKey\"\300\001\n\031CryptoDeterministicCo"
  "nfig\0224\n\ncrypto_key\030\001 \001(\0132 .google.privac"
  "y.dlp.v2.CryptoKey\022<\n\023surrogate_info_typ"
  "e\030\002 \001(\0132\037.google.privacy.dlp.v2.InfoType"
  "\022/\n\007context\030\003 \001(\0132\036.google.privacy.dlp.v"
  "2.FieldId\"E\n\022ReplaceValueConfig\022/\n\tnew_v"
  "alue\030\001 \001(\0132\034.google.privacy.dlp.v2.Value"
  "\"\033\n\031ReplaceWithInfoTypeConfig\"\016\n\014RedactC"
  "onfig\"\266\002\n\rCharsToIgnore\022\034\n\022characters_to"
  "_skip\030\001 \001(\tH\000\022_\n\033common_characters_to_ig"
  "nore\030\002 \001(\01628.google.privacy.dlp.v2.Chars"
  "ToIgnore.CommonCharsToIgnoreH\000\"\227\001\n\023Commo"
  "nCharsToIgnore\022&\n\"COMMON_CHARS_TO_IGNORE"
  "_UNSPECIFIED\020\000\022\013\n\007NUMERIC\020\001\022\024\n\020ALPHA_UPP"
  "ER_CASE\020\002\022\024\n\020ALPHA_LOWER_CASE\020\003\022\017\n\013PUNCT"
  "UATION\020\004\022\016\n\nWHITESPACE\020\005B\014\n\ncharacters\"\243"
  "\001\n\023CharacterMaskConfig\022\031\n\021masking_charac"
  "ter\030\001 \001(\t\022\026\n\016number_to_mask\030\002 \001(\005\022\025\n\rrev"
  "erse_order\030\003 \001(\010\022B\n\024characters_to_ignore"
  "\030\004 \003(\0132$.google.privacy.dlp.v2.CharsToIg"
  "nore\"\244\001\n\030FixedSizeBucketingConfig\0226\n\013low"
  "er_bound\030\001 \001(\0132\034.google.privacy.dlp.v2.V"
  "alueB\003\340A\002\0226\n\013upper_bound\030\002 \001(\0132\034.google."
  "privacy.dlp.v2.ValueB\003\340A\002\022\030\n\013bucket_size"
  "\030\003 \001(\001B\003\340A\002\"\360\001\n\017BucketingConfig\022>\n\007bucke"
  "ts\030\001 \003(\0132-.google.privacy.dlp.v2.Bucketi"
  "ngConfig.Bucket\032\234\001\n\006Bucket\022)\n\003min\030\001 \001(\0132"
  "\034.google.privacy.dlp.v2.Value\022)\n\003max\030\002 \001"
  "(\0132\034.google.privacy.dlp.v2.Value\022<\n\021repl"
  "acement_value\030\003 \001(\0132\034.google.privacy.dlp"
  ".v2.ValueB\003\340A\002\"\371\003\n\031CryptoReplaceFfxFpeCo"
  "nfig\0229\n\ncrypto_key\030\001 \001(\0132 .google.privac"
  "y.dlp.v2.CryptoKeyB\003\340A\002\022/\n\007context\030\002 \001(\013"
  "2\036.google.privacy.dlp.v2.FieldId\022c\n\017comm"
  "on_alphabet\030\004 \001(\0162H.google.privacy.dlp.v"
  "2.CryptoReplaceFfxFpeConfig.FfxCommonNat"
  "iveAlphabetH\000\022\031\n\017custom_alphabet\030\005 \001(\tH\000"
  "\022\017\n\005radix\030\006 \001(\005H\000\022<\n\023surrogate_info_type"
  "\030\010 \001(\0132\037.google.privacy.dlp.v2.InfoType\""
  "\224\001\n\027FfxCommonNativeAlphabet\022*\n&FFX_COMMO"
  "N_NATIVE_ALPHABET_UNSPECIFIED\020\000\022\013\n\007NUMER"
  "IC\020\001\022\017\n\013HEXADECIMAL\020\002\022\034\n\030UPPER_CASE_ALPH"
  "A_NUMERIC\020\003\022\021\n\rALPHA_NUMERIC\020\004B\n\n\010alphab"
  "et\"\330\001\n\tCryptoKey\022>\n\ttransient\030\001 \001(\0132).go"
  "ogle.privacy.dlp.v2.TransientCryptoKeyH\000"
  "\022>\n\tunwrapped\030\002 \001(\0132).google.privacy.dlp"
  ".v2.UnwrappedCryptoKeyH\000\022A\n\013kms_wrapped\030"
  "\003 \001(\0132*.google.privacy.dlp.v2.KmsWrapped"
  "CryptoKeyH\000B\010\n\006source\"\'\n\022TransientCrypto"
  "Key\022\021\n\004name\030\001 \001(\tB\003\340A\002\"&\n\022UnwrappedCrypt"
  "oKey\022\020\n\003key\030\001 \001(\014B\003\340A\002\"M\n\023KmsWrappedCryp"
  "toKey\022\030\n\013wrapped_key\030\001 \001(\014B\003\340A\002\022\034\n\017crypt"
  "o_key_name\030\002 \001(\tB\003\340A\002\"\302\001\n\017DateShiftConfi"
  "g\022\035\n\020upper_bound_days\030\001 \001(\005B\003\340A\002\022\035\n\020lowe"
  "r_bound_days\030\002 \001(\005B\003\340A\002\022/\n\007context\030\003 \001(\013"
  "2\036.google.privacy.dlp.v2.FieldId\0226\n\ncryp"
  "to_key\030\004 \001(\0132 .google.privacy.dlp.v2.Cry"
  "ptoKeyH\000B\010\n\006method\"\245\002\n\027InfoTypeTransform"
  "ations\022c\n\017transformations\030\001 \003(\0132E.google"
  ".privacy.dlp.v2.InfoTypeTransformations."
  "InfoTypeTransformationB\003\340A\002\032\244\001\n\026InfoType"
  "Transformation\0223\n\ninfo_types\030\001 \003(\0132\037.goo"
  "gle.privacy.dlp.v2.InfoType\022U\n\030primitive"
  "_transformation\030\002 \001(\0132..google.privacy.d"
  "lp.v2.PrimitiveTransformationB\003\340A\002\"\300\002\n\023F"
  "ieldTransformation\0223\n\006fields\030\001 \003(\0132\036.goo"
  "gle.privacy.dlp.v2.FieldIdB\003\340A\002\0229\n\tcondi"
  "tion\030\003 \001(\0132&.google.privacy.dlp.v2.Recor"
  "dCondition\022R\n\030primitive_transformation\030\004"
  " \001(\0132..google.privacy.dlp.v2.PrimitiveTr"
  "ansformationH\000\022S\n\031info_type_transformati"
  "ons\030\005 \001(\0132..google.privacy.dlp.v2.InfoTy"
  "peTransformationsH\000B\020\n\016transformation\"\251\001"
  "\n\025RecordTransformations\022I\n\025field_transfo"
  "rmations\030\001 \003(\0132*.google.privacy.dlp.v2.F"
  "ieldTransformation\022E\n\023record_suppression"
  "s\030\002 \003(\0132(.google.privacy.dlp.v2.RecordSu"
  "ppression\"N\n\021RecordSuppression\0229\n\tcondit"
  "ion\030\001 \001(\0132&.google.privacy.dlp.v2.Record"
  "Condition\"\334\004\n\017RecordCondition\022G\n\013express"
  "ions\030\003 \001(\01322.google.privacy.dlp.v2.Recor"
  "dCondition.Expressions\032\256\001\n\tCondition\0222\n\005"
  "field\030\001 \001(\0132\036.google.privacy.dlp.v2.Fiel"
  "dIdB\003\340A\002\022@\n\010operator\030\003 \001(\0162).google.priv"
  "acy.dlp.v2.RelationalOperatorB\003\340A\002\022+\n\005va"
  "lue\030\004 \001(\0132\034.google.privacy.dlp.v2.Value\032"
  "R\n\nConditions\022D\n\nconditions\030\001 \003(\01320.goog"
  "le.privacy.dlp.v2.RecordCondition.Condit"
  "ion\032\372\001\n\013Expressions\022\\\n\020logical_operator\030"
  "\001 \001(\0162B.google.privacy.dlp.v2.RecordCond"
  "ition.Expressions.LogicalOperator\022G\n\ncon"
  "ditions\030\003 \001(\01321.google.privacy.dlp.v2.Re"
  "cordCondition.ConditionsH\000\"<\n\017LogicalOpe"
  "rator\022 \n\034LOGICAL_OPERATOR_UNSPECIFIED\020\000\022"
  "\007\n\003AND\020\001B\006\n\004type\"\203\001\n\026TransformationOverv"
  "iew\022\031\n\021transformed_bytes\030\002 \001(\003\022N\n\030transf"
  "ormation_summaries\030\003 \003(\0132,.google.privac"
  "y.dlp.v2.TransformationSummary\"\237\005\n\025Trans"
  "formationSummary\0222\n\tinfo_type\030\001 \001(\0132\037.go"
  "ogle.privacy.dlp.v2.InfoType\022-\n\005field\030\002 "
  "\001(\0132\036.google.privacy.dlp.v2.FieldId\022F\n\016t"
  "ransformation\030\003 \001(\0132..google.privacy.dlp"
  ".v2.PrimitiveTransformation\022I\n\025field_tra"
  "nsformations\030\005 \003(\0132*.google.privacy.dlp."
  "v2.FieldTransformation\022A\n\017record_suppres"
  "s\030\006 \001(\0132(.google.privacy.dlp.v2.RecordSu"
  "ppression\022K\n\007results\030\004 \003(\0132:.google.priv"
  "acy.dlp.v2.TransformationSummary.Summary"
  "Result\022\031\n\021transformed_bytes\030\007 \001(\003\032\204\001\n\rSu"
  "mmaryResult\022\r\n\005count\030\001 \001(\003\022S\n\004code\030\002 \001(\016"
  "2E.google.privacy.dlp.v2.TransformationS"
  "ummary.TransformationResultCode\022\017\n\007detai"
  "ls\030\003 \001(\t\"^\n\030TransformationResultCode\022*\n&"
  "TRANSFORMATION_RESULT_CODE_UNSPECIFIED\020\000"
  "\022\013\n\007SUCCESS\020\001\022\t\n\005ERROR\020\002\"U\n\010Schedule\022\?\n\032"
  "recurrence_period_duration\030\001 \001(\0132\031.googl"
  "e.protobuf.DurationH\000B\010\n\006option\"\010\n\006Manua"
  "l\"\302\004\n\017InspectTemplate\022\021\n\004name\030\001 \001(\tB\003\340A\003"
  "\022\024\n\014display_name\030\002 \001(\t\022\023\n\013description\030\003 "
  "\001(\t\0224\n\013create_time\030\004 \001(\0132\032.google.protob"
  "uf.TimestampB\003\340A\003\0224\n\013update_time\030\005 \001(\0132\032"
  ".google.protobuf.TimestampB\003\340A\003\022<\n\016inspe"
  "ct_config\030\006 \001(\0132$.google.privacy.dlp.v2."
  "InspectConfig:\306\002\352A\302\002\n\"dlp.googleapis.com"
  "/InspectTemplate\022@organizations/{organiz"
  "ation}/inspectTemplates/{inspect_templat"
  "e}\0226projects/{project}/inspectTemplates/"
  "{inspect_template}\022Uorganizations/{organ"
  "ization}/locations/{location}/inspectTem"
  "plates/{inspect_template}\022Kprojects/{pro"
  "ject}/locations/{location}/inspectTempla"
  "tes/{inspect_template}\"\346\004\n\022DeidentifyTem"
  "plate\022\021\n\004name\030\001 \001(\tB\003\340A\003\022\024\n\014display_name"
  "\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\0224\n\013create_ti"
  "me\030\004 \001(\0132\032.google.protobuf.TimestampB\003\340A"
  "\003\0224\n\013update_time\030\005 \001(\0132\032.google.protobuf"
  ".TimestampB\003\340A\003\022B\n\021deidentify_config\030\006 \001"
  "(\0132\'.google.privacy.dlp.v2.DeidentifyCon"
  "fig:\341\002\352A\335\002\n%dlp.googleapis.com/Deidentif"
  "yTemplate\022Forganizations/{organization}/"
  "deidentifyTemplates/{deidentify_template"
  "}\022<projects/{project}/deidentifyTemplate"
  "s/{deidentify_template}\022[organizations/{"
  "organization}/locations/{location}/deide"
  "ntifyTemplates/{deidentify_template}\022Qpr"
  "ojects/{project}/locations/{location}/de"
  "identifyTemplates/{deidentify_template}\""
  "\\\n\005Error\022#\n\007details\030\001 \001(\0132\022.google.rpc.S"
  "tatus\022.\n\ntimestamps\030\002 \003(\0132\032.google.proto"
  "buf.Timestamp\"\274\006\n\nJobTrigger\022\014\n\004name\030\001 \001"
  "(\t\022\024\n\014display_name\030\002 \001(\t\022\023\n\013description\030"
  "\003 \001(\t\022>\n\013inspect_job\030\004 \001(\0132\'.google.priv"
  "acy.dlp.v2.InspectJobConfigH\000\022;\n\010trigger"
  "s\030\005 \003(\0132).google.privacy.dlp.v2.JobTrigg"
  "er.Trigger\0221\n\006errors\030\006 \003(\0132\034.google.priv"
  "acy.dlp.v2.ErrorB\003\340A\003\0224\n\013create_time\030\007 \001"
  "(\0132\032.google.protobuf.TimestampB\003\340A\003\0224\n\013u"
  "pdate_time\030\010 \001(\0132\032.google.protobuf.Times"
  "tampB\003\340A\003\0226\n\rlast_run_time\030\t \001(\0132\032.googl"
  "e.protobuf.TimestampB\003\340A\003\022=\n\006status\030\n \001("
  "\0162(.google.privacy.dlp.v2.JobTrigger.Sta"
  "tusB\003\340A\002\032z\n\007Trigger\0223\n\010schedule\030\001 \001(\0132\037."
  "google.privacy.dlp.v2.ScheduleH\000\022/\n\006manu"
  "al\030\002 \001(\0132\035.google.privacy.dlp.v2.ManualH"
  "\000B\t\n\007trigger\"H\n\006Status\022\026\n\022STATUS_UNSPECI"
  "FIED\020\000\022\013\n\007HEALTHY\020\001\022\n\n\006PAUSED\020\002\022\r\n\tCANCE"
  "LLED\020\003:\224\001\352A\220\001\n\035dlp.googleapis.com/JobTri"
  "gger\022,projects/{project}/jobTriggers/{jo"
  "b_trigger}\022Aprojects/{project}/locations"
  "/{location}/jobTriggers/{job_trigger}B\005\n"
  "\003job\"\364\005\n\006Action\022C\n\rsave_findings\030\001 \001(\0132*"
  ".google.privacy.dlp.v2.Action.SaveFindin"
  "gsH\000\022@\n\007pub_sub\030\002 \001(\0132-.google.privacy.d"
  "lp.v2.Action.PublishToPubSubH\000\022U\n\027publis"
  "h_summary_to_cscc\030\003 \001(\01322.google.privacy"
  ".dlp.v2.Action.PublishSummaryToCsccH\000\022q\n"
  "&publish_findings_to_cloud_data_catalog\030"
  "\005 \001(\0132\?.google.privacy.dlp.v2.Action.Pub"
  "lishFindingsToCloudDataCatalogH\000\022V\n\027job_"
  "notification_emails\030\010 \001(\01323.google.priva"
  "cy.dlp.v2.Action.JobNotificationEmailsH\000"
  "\022T\n\026publish_to_stackdriver\030\t \001(\01322.googl"
  "e.privacy.dlp.v2.Action.PublishToStackdr"
  "iverH\000\032Q\n\014SaveFindings\022A\n\routput_config\030"
  "\001 \001(\0132*.google.privacy.dlp.v2.OutputStor"
  "ageConfig\032 \n\017PublishToPubSub\022\r\n\005topic\030\001 "
  "\001(\t\032\026\n\024PublishSummaryToCscc\032#\n!PublishFi"
  "ndingsToCloudDataCatalog\032\027\n\025JobNotificat"
  "ionEmails\032\026\n\024PublishToStackdriverB\010\n\006act"
  "ion\"\313\001\n\034CreateInspectTemplateRequest\022:\n\006"
  "parent\030\001 \001(\tB*\340A\002\372A$\022\"dlp.googleapis.com"
  "/InspectTemplate\022E\n\020inspect_template\030\002 \001"
  "(\0132&.google.privacy.dlp.v2.InspectTempla"
  "teB\003\340A\002\022\023\n\013template_id\030\003 \001(\t\022\023\n\013location"
  "_id\030\004 \001(\t\"\313\001\n\034UpdateInspectTemplateReque"
  "st\0228\n\004name\030\001 \001(\tB*\340A\002\372A$\n\"dlp.googleapis"
  ".com/InspectTemplate\022@\n\020inspect_template"
  "\030\002 \001(\0132&.google.privacy.dlp.v2.InspectTe"
  "mplate\022/\n\013update_mask\030\003 \001(\0132\032.google.pro"
  "tobuf.FieldMask\"U\n\031GetInspectTemplateReq"
  "uest\0228\n\004name\030\001 \001(\tB*\340A\002\372A$\n\"dlp.googleap"
  "is.com/InspectTemplate\"\247\001\n\033ListInspectTe"
  "mplatesRequest\022:\n\006parent\030\001 \001(\tB*\340A\002\372A$\022\""
  "dlp.googleapis.com/InspectTemplate\022\022\n\npa"
  "ge_token\030\002 \001(\t\022\021\n\tpage_size\030\003 \001(\005\022\020\n\010ord"
  "er_by\030\004 \001(\t\022\023\n\013location_id\030\005 \001(\t\"z\n\034List"
  "InspectTemplatesResponse\022A\n\021inspect_temp"
  "lates\030\001 \003(\0132&.google.privacy.dlp.v2.Insp"
  "ectTemplate\022\027\n\017next_page_token\030\002 \001(\t\"X\n\034"
  "DeleteInspectTemplateRequest\0228\n\004name\030\001 \001"
  "(\tB*\340A\002\372A$\n\"dlp.googleapis.com/InspectTe"
  "mplate\"\266\001\n\027CreateJobTriggerRequest\0225\n\006pa"
  "rent\030\001 \001(\tB%\340A\002\372A\037\022\035dlp.googleapis.com/J"
  "obTrigger\022;\n\013job_trigger\030\002 \001(\0132!.google."
  "privacy.dlp.v2.JobTriggerB\003\340A\002\022\022\n\ntrigge"
  "r_id\030\003 \001(\t\022\023\n\013location_id\030\004 \001(\t\"P\n\031Activ"
  "ateJobTriggerRequest\0223\n\004name\030\001 \001(\tB%\340A\002\372"
  "A\037\n\035dlp.googleapis.com/JobTrigger\"\267\001\n\027Up"
  "dateJobTriggerRequest\0223\n\004name\030\001 \001(\tB%\340A\002"
  "\372A\037\n\035dlp.googleapis.com/JobTrigger\0226\n\013jo"
  "b_trigger\030\002 \001(\0132!.google.privacy.dlp.v2."
  "JobTrigger\022/\n\013update_mask\030\003 \001(\0132\032.google"
  ".protobuf.FieldMask\"K\n\024GetJobTriggerRequ"
  "est\0223\n\004name\030\001 \001(\tB%\340A\002\372A\037\n\035dlp.googleapi"
  "s.com/JobTrigger\"\366\001\n\023CreateDlpJobRequest"
  "\0221\n\006parent\030\001 \001(\tB!\340A\002\372A\033\022\031dlp.googleapis"
  ".com/DlpJob\022>\n\013inspect_job\030\002 \001(\0132\'.googl"
  "e.privacy.dlp.v2.InspectJobConfigH\000\022@\n\010r"
  "isk_job\030\003 \001(\0132,.google.privacy.dlp.v2.Ri"
  "skAnalysisJobConfigH\000\022\016\n\006job_id\030\004 \001(\t\022\023\n"
  "\013location_id\030\005 \001(\tB\005\n\003job\"\255\001\n\026ListJobTri"
  "ggersRequest\0225\n\006parent\030\001 \001(\tB%\340A\002\372A\037\022\035dl"
  "p.googleapis.com/JobTrigger\022\022\n\npage_toke"
  "n\030\002 \001(\t\022\021\n\tpage_size\030\003 \001(\005\022\020\n\010order_by\030\004"
  " \001(\t\022\016\n\006filter\030\005 \001(\t\022\023\n\013location_id\030\007 \001("
  "\t\"k\n\027ListJobTriggersResponse\0227\n\014job_trig"
  "gers\030\001 \003(\0132!.google.privacy.dlp.v2.JobTr"
  "igger\022\027\n\017next_page_token\030\002 \001(\t\"N\n\027Delete"
  "JobTriggerRequest\0223\n\004name\030\001 \001(\tB%\340A\002\372A\037\n"
  "\035dlp.googleapis.com/JobTrigger\"\335\001\n\020Inspe"
  "ctJobConfig\022<\n\016storage_config\030\001 \001(\0132$.go"
  "ogle.privacy.dlp.v2.StorageConfig\022<\n\016ins"
  "pect_config\030\002 \001(\0132$.google.privacy.dlp.v"
  "2.InspectConfig\022\035\n\025inspect_template_name"
  "\030\003 \001(\t\022.\n\007actions\030\004 \003(\0132\035.google.privacy"
  ".dlp.v2.Action\"\353\005\n\006DlpJob\022\014\n\004name\030\001 \001(\t\022"
  "/\n\004type\030\002 \001(\0162!.google.privacy.dlp.v2.Dl"
  "pJobType\0225\n\005state\030\003 \001(\0162&.google.privacy"
  ".dlp.v2.DlpJob.JobState\022K\n\014risk_details\030"
  "\004 \001(\01323.google.privacy.dlp.v2.AnalyzeDat"
  "aSourceRiskDetailsH\000\022J\n\017inspect_details\030"
  "\005 \001(\0132/.google.privacy.dlp.v2.InspectDat"
  "aSourceDetailsH\000\022/\n\013create_time\030\006 \001(\0132\032."
  "google.protobuf.Timestamp\022.\n\nstart_time\030"
  "\007 \001(\0132\032.google.protobuf.Timestamp\022,\n\010end"
  "_time\030\010 \001(\0132\032.google.protobuf.Timestamp\022"
  "\030\n\020job_trigger_name\030\n \001(\t\022,\n\006errors\030\013 \003("
  "\0132\034.google.privacy.dlp.v2.Error\"o\n\010JobSt"
  "ate\022\031\n\025JOB_STATE_UNSPECIFIED\020\000\022\013\n\007PENDIN"
  "G\020\001\022\013\n\007RUNNING\020\002\022\010\n\004DONE\020\003\022\014\n\010CANCELED\020\004"
  "\022\n\n\006FAILED\020\005\022\n\n\006ACTIVE\020\006:\177\352A|\n\031dlp.googl"
  "eapis.com/DlpJob\022$projects/{project}/dlp"
  "Jobs/{dlp_job}\0229projects/{project}/locat"
  "ions/{location}/dlpJobs/{dlp_job}B\t\n\007det"
  "ails\"C\n\020GetDlpJobRequest\022/\n\004name\030\001 \001(\tB!"
  "\340A\002\372A\033\n\031dlp.googleapis.com/DlpJob\"\326\001\n\022Li"
  "stDlpJobsRequest\0221\n\006parent\030\004 \001(\tB!\340A\002\372A\033"
  "\022\031dlp.googleapis.com/DlpJob\022\016\n\006filter\030\001 "
  "\001(\t\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001"
  "(\t\022/\n\004type\030\005 \001(\0162!.google.privacy.dlp.v2"
  ".DlpJobType\022\020\n\010order_by\030\006 \001(\t\022\023\n\013locatio"
  "n_id\030\007 \001(\t\"[\n\023ListDlpJobsResponse\022+\n\004job"
  "s\030\001 \003(\0132\035.google.privacy.dlp.v2.DlpJob\022\027"
  "\n\017next_page_token\030\002 \001(\t\"F\n\023CancelDlpJobR"
  "equest\022/\n\004name\030\001 \001(\tB!\340A\002\372A\033\n\031dlp.google"
  "apis.com/DlpJob\"F\n\023FinishDlpJobRequest\022/"
  "\n\004name\030\001 \001(\tB!\340A\002\372A\033\n\031dlp.googleapis.com"
  "/DlpJob\"F\n\023DeleteDlpJobRequest\022/\n\004name\030\001"
  " \001(\tB!\340A\002\372A\033\n\031dlp.googleapis.com/DlpJob\""
  "\327\001\n\037CreateDeidentifyTemplateRequest\022=\n\006p"
  "arent\030\001 \001(\tB-\340A\002\372A\'\022%dlp.googleapis.com/"
  "DeidentifyTemplate\022K\n\023deidentify_templat"
  "e\030\002 \001(\0132).google.privacy.dlp.v2.Deidenti"
  "fyTemplateB\003\340A\002\022\023\n\013template_id\030\003 \001(\t\022\023\n\013"
  "location_id\030\004 \001(\t\"\327\001\n\037UpdateDeidentifyTe"
  "mplateRequest\022;\n\004name\030\001 \001(\tB-\340A\002\372A\'\n%dlp"
  ".googleapis.com/DeidentifyTemplate\022F\n\023de"
  "identify_template\030\002 \001(\0132).google.privacy"
  ".dlp.v2.DeidentifyTemplate\022/\n\013update_mas"
  "k\030\003 \001(\0132\032.google.protobuf.FieldMask\"[\n\034G"
  "etDeidentifyTemplateRequest\022;\n\004name\030\001 \001("
  "\tB-\340A\002\372A\'\n%dlp.googleapis.com/Deidentify"
  "Template\"\255\001\n\036ListDeidentifyTemplatesRequ"
  "est\022=\n\006parent\030\001 \001(\tB-\340A\002\372A\'\022%dlp.googlea"
  "pis.com/DeidentifyTemplate\022\022\n\npage_token"
  "\030\002 \001(\t\022\021\n\tpage_size\030\003 \001(\005\022\020\n\010order_by\030\004 "
  "\001(\t\022\023\n\013location_id\030\005 \001(\t\"\203\001\n\037ListDeident"
  "ifyTemplatesResponse\022G\n\024deidentify_templ"
  "ates\030\001 \003(\0132).google.privacy.dlp.v2.Deide"
  "ntifyTemplate\022\027\n\017next_page_token\030\002 \001(\t\"^"
  "\n\037DeleteDeidentifyTemplateRequest\022;\n\004nam"
  "e\030\001 \001(\tB-\340A\002\372A\'\n%dlp.googleapis.com/Deid"
  "entifyTemplate\"\364\001\n\033LargeCustomDictionary"
  "Config\022<\n\013output_path\030\001 \001(\0132\'.google.pri"
  "vacy.dlp.v2.CloudStoragePath\022L\n\026cloud_st"
  "orage_file_set\030\002 \001(\0132*.google.privacy.dl"
  "p.v2.CloudStorageFileSetH\000\022\?\n\017big_query_"
  "field\030\003 \001(\0132$.google.privacy.dlp.v2.BigQ"
  "ueryFieldH\000B\010\n\006source\"8\n\032LargeCustomDict"
  "ionaryStats\022\032\n\022approx_num_phrases\030\001 \001(\003\""
  "\246\002\n\024StoredInfoTypeConfig\022\024\n\014display_name"
  "\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022U\n\027large_cus"
  "tom_dictionary\030\003 \001(\01322.google.privacy.dl"
  "p.v2.LargeCustomDictionaryConfigH\000\022F\n\ndi"
  "ctionary\030\004 \001(\01320.google.privacy.dlp.v2.C"
  "ustomInfoType.DictionaryH\000\022<\n\005regex\030\005 \001("
  "\0132+.google.privacy.dlp.v2.CustomInfoType"
  ".RegexH\000B\006\n\004type\"s\n\023StoredInfoTypeStats\022"
  "T\n\027large_custom_dictionary\030\001 \001(\01321.googl"
  "e.privacy.dlp.v2.LargeCustomDictionarySt"
  "atsH\000B\006\n\004type\"\251\002\n\025StoredInfoTypeVersion\022"
  ";\n\006config\030\001 \001(\0132+.google.privacy.dlp.v2."
  "StoredInfoTypeConfig\022/\n\013create_time\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\0229\n\005state\030\003"
  " \001(\0162*.google.privacy.dlp.v2.StoredInfoT"
  "ypeState\022,\n\006errors\030\004 \003(\0132\034.google.privac"
  "y.dlp.v2.Error\0229\n\005stats\030\005 \001(\0132*.google.p"
  "rivacy.dlp.v2.StoredInfoTypeStats\"\361\003\n\016St"
  "oredInfoType\022\014\n\004name\030\001 \001(\t\022E\n\017current_ve"
  "rsion\030\002 \001(\0132,.google.privacy.dlp.v2.Stor"
  "edInfoTypeVersion\022F\n\020pending_versions\030\003 "
  "\003(\0132,.google.privacy.dlp.v2.StoredInfoTy"
  "peVersion:\301\002\352A\275\002\n!dlp.googleapis.com/Sto"
  "redInfoType\022\?organizations/{organization"
  "}/storedInfoTypes/{stored_info_type}\0225pr"
  "ojects/{project}/storedInfoTypes/{stored"
  "_info_type}\022Torganizations/{organization"
  "}/locations/{location}/storedInfoTypes/{"
  "stored_info_type}\022Jprojects/{project}/lo"
  "cations/{location}/storedInfoTypes/{stor"
  "ed_info_type}\"\314\001\n\033CreateStoredInfoTypeRe"
  "quest\0229\n\006parent\030\001 \001(\tB)\340A\002\372A#\022!dlp.googl"
  "eapis.com/StoredInfoType\022@\n\006config\030\002 \001(\013"
  "2+.google.privacy.dlp.v2.StoredInfoTypeC"
  "onfigB\003\340A\002\022\033\n\023stored_info_type_id\030\003 \001(\t\022"
  "\023\n\013location_id\030\004 \001(\t\"\304\001\n\033UpdateStoredInf"
  "oTypeRequest\0227\n\004name\030\001 \001(\tB)\340A\002\372A#\n!dlp."
  "googleapis.com/StoredInfoType\022;\n\006config\030"
  "\002 \001(\0132+.google.privacy.dlp.v2.StoredInfo"
  "TypeConfig\022/\n\013update_mask\030\003 \001(\0132\032.google"
  ".protobuf.FieldMask\"S\n\030GetStoredInfoType"
  "Request\0227\n\004name\030\001 \001(\tB)\340A\002\372A#\n!dlp.googl"
  "eapis.com/StoredInfoType\"\245\001\n\032ListStoredI"
  "nfoTypesRequest\0229\n\006parent\030\001 \001(\tB)\340A\002\372A#\022"
  "!dlp.googleapis.com/StoredInfoType\022\022\n\npa"
  "ge_token\030\002 \001(\t\022\021\n\tpage_size\030\003 \001(\005\022\020\n\010ord"
  "er_by\030\004 \001(\t\022\023\n\013location_id\030\005 \001(\t\"x\n\033List"
  "StoredInfoTypesResponse\022@\n\021stored_info_t"
  "ypes\030\001 \003(\0132%.google.privacy.dlp.v2.Store"
  "dInfoType\022\027\n\017next_page_token\030\002 \001(\t\"V\n\033De"
  "leteStoredInfoTypeRequest\0227\n\004name\030\001 \001(\tB"
  ")\340A\002\372A#\n!dlp.googleapis.com/StoredInfoTy"
  "pe\"\224\001\n\036HybridInspectJobTriggerRequest\0223\n"
  "\004name\030\001 \001(\tB%\340A\002\372A\037\n\035dlp.googleapis.com/"
  "JobTrigger\022=\n\013hybrid_item\030\003 \001(\0132(.google"
  ".privacy.dlp.v2.HybridContentItem\"\214\001\n\032Hy"
  "bridInspectDlpJobRequest\022/\n\004name\030\001 \001(\tB!"
  "\340A\002\372A\033\n\031dlp.googleapis.com/DlpJob\022=\n\013hyb"
  "rid_item\030\003 \001(\0132(.google.privacy.dlp.v2.H"
  "ybridContentItem\"\213\001\n\021HybridContentItem\0220"
  "\n\004item\030\001 \001(\0132\".google.privacy.dlp.v2.Con"
  "tentItem\022D\n\017finding_details\030\002 \001(\0132+.goog"
  "le.privacy.dlp.v2.HybridFindingDetails\"\260"
  "\002\n\024HybridFindingDetails\022;\n\021container_det"
  "ails\030\001 \001(\0132 .google.privacy.dlp.v2.Conta"
  "iner\022\023\n\013file_offset\030\002 \001(\003\022\022\n\nrow_offset\030"
  "\003 \001(\003\022:\n\rtable_options\030\004 \001(\0132#.google.pr"
  "ivacy.dlp.v2.TableOptions\022G\n\006labels\030\005 \003("
  "\01327.google.privacy.dlp.v2.HybridFindingD"
  "etails.LabelsEntry\032-\n\013LabelsEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\027\n\025HybridInspe"
  "ctResponse*\273\001\n\022RelationalOperator\022#\n\037REL"
  "ATIONAL_OPERATOR_UNSPECIFIED\020\000\022\014\n\010EQUAL_"
  "TO\020\001\022\020\n\014NOT_EQUAL_TO\020\002\022\020\n\014GREATER_THAN\020\003"
  "\022\r\n\tLESS_THAN\020\004\022\032\n\026GREATER_THAN_OR_EQUAL"
  "S\020\005\022\027\n\023LESS_THAN_OR_EQUALS\020\006\022\n\n\006EXISTS\020\007"
  "*\215\001\n\014MatchingType\022\035\n\031MATCHING_TYPE_UNSPE"
  "CIFIED\020\000\022\034\n\030MATCHING_TYPE_FULL_MATCH\020\001\022\037"
  "\n\033MATCHING_TYPE_PARTIAL_MATCH\020\002\022\037\n\033MATCH"
  "ING_TYPE_INVERSE_MATCH\020\003*M\n\rContentOptio"
  "n\022\027\n\023CONTENT_UNSPECIFIED\020\000\022\020\n\014CONTENT_TE"
  "XT\020\001\022\021\n\rCONTENT_IMAGE\020\002*B\n\014MetadataType\022"
  "\034\n\030METADATATYPE_UNSPECIFIED\020\000\022\024\n\020STORAGE"
  "_METADATA\020\002*P\n\023InfoTypeSupportedBy\022\031\n\025EN"
  "UM_TYPE_UNSPECIFIED\020\000\022\013\n\007INSPECT\020\001\022\021\n\rRI"
  "SK_ANALYSIS\020\002*R\n\nDlpJobType\022\034\n\030DLP_JOB_T"
  "YPE_UNSPECIFIED\020\000\022\017\n\013INSPECT_JOB\020\001\022\025\n\021RI"
  "SK_ANALYSIS_JOB\020\002*n\n\023StoredInfoTypeState"
  "\022&\n\"STORED_INFO_TYPE_STATE_UNSPECIFIED\020\000"
  "\022\013\n\007PENDING\020\001\022\t\n\005READY\020\002\022\n\n\006FAILED\020\003\022\013\n\007"
  "INVALID\020\0042\303I\n\nDlpService\022\333\001\n\016InspectCont"
  "ent\022,.google.privacy.dlp.v2.InspectConte"
  "ntRequest\032-.google.privacy.dlp.v2.Inspec"
  "tContentResponse\"l\202\323\344\223\002f\"\'/v2/{parent=pr"
  "ojects/*}/content:inspect:\001*Z8\"3/v2/{par"
  "ent=projects/*/locations/*}/content:insp"
  "ect:\001*\022\314\001\n\013RedactImage\022).google.privacy."
  "dlp.v2.RedactImageRequest\032*.google.priva"
  "cy.dlp.v2.RedactImageResponse\"f\202\323\344\223\002`\"$/"
  "v2/{parent=projects/*}/image:redact:\001*Z5"
  "\"0/v2/{parent=projects/*/locations/*}/im"
  "age:redact:\001*\022\352\001\n\021DeidentifyContent\022/.go"
  "ogle.privacy.dlp.v2.DeidentifyContentReq"
  "uest\0320.google.privacy.dlp.v2.DeidentifyC"
  "ontentResponse\"r\202\323\344\223\002l\"*/v2/{parent=proj"
  "ects/*}/content:deidentify:\001*Z;\"6/v2/{pa"
  "rent=projects/*/locations/*}/content:dei"
  "dentify:\001*\022\352\001\n\021ReidentifyContent\022/.googl"
  "e.privacy.dlp.v2.ReidentifyContentReques"
  "t\0320.google.privacy.dlp.v2.ReidentifyCont"
  "entResponse\"r\202\323\344\223\002l\"*/v2/{parent=project"
  "s/*}/content:reidentify:\001*Z;\"6/v2/{paren"
  "t=projects/*/locations/*}/content:reiden"
  "tify:\001*\022\260\001\n\rListInfoTypes\022+.google.priva"
  "cy.dlp.v2.ListInfoTypesRequest\032,.google."
  "privacy.dlp.v2.ListInfoTypesResponse\"D\202\323"
  "\344\223\0025\022\r/v2/infoTypesZ$\022\"/v2/{parent=locat"
  "ions/*}/infoTypes\332A\006parent\022\364\002\n\025CreateIns"
  "pectTemplate\0223.google.privacy.dlp.v2.Cre"
  "ateInspectTemplateRequest\032&.google.priva"
  "cy.dlp.v2.InspectTemplate\"\375\001\202\323\344\223\002\334\001\"-/v2"
  "/{parent=organizations/*}/inspectTemplat"
  "es:\001*Z>\"9/v2/{parent=organizations/*/loc"
  "ations/*}/inspectTemplates:\001*Z-\"(/v2/{pa"
  "rent=projects/*}/inspectTemplates:\001*Z9\"4"
  "/v2/{parent=projects/*/locations/*}/insp"
  "ectTemplates:\001*\332A\027parent,inspect_templat"
  "e\022\376\002\n\025UpdateInspectTemplate\0223.google.pri"
  "vacy.dlp.v2.UpdateInspectTemplateRequest"
  "\032&.google.privacy.dlp.v2.InspectTemplate"
  "\"\207\002\202\323\344\223\002\334\0012-/v2/{name=organizations/*/in"
  "spectTemplates/*}:\001*Z>29/v2/{name=organi"
  "zations/*/locations/*/inspectTemplates/*"
  "}:\001*Z-2(/v2/{name=projects/*/inspectTemp"
  "lates/*}:\001*Z924/v2/{name=projects/*/loca"
  "tions/*/inspectTemplates/*}:\001*\332A!name,in"
  "spect_template,update_mask\022\317\002\n\022GetInspec"
  "tTemplate\0220.google.privacy.dlp.v2.GetIns"
  "pectTemplateRequest\032&.google.privacy.dlp"
  ".v2.InspectTemplate\"\336\001\202\323\344\223\002\320\001\022-/v2/{name"
  "=organizations/*/inspectTemplates/*}Z;\0229"
  "/v2/{name=organizations/*/locations/*/in"
  "spectTemplates/*}Z*\022(/v2/{name=projects/"
  "*/inspectTemplates/*}Z6\0224/v2/{name=proje"
  "cts/*/locations/*/inspectTemplates/*}\332A\004"
  "name\022\342\002\n\024ListInspectTemplates\0222.google.p"
  "rivacy.dlp.v2.ListInspectTemplatesReques"
  "t\0323.google.privacy.dlp.v2.ListInspectTem"
  "platesResponse\"\340\001\202\323\344\223\002\320\001\022-/v2/{parent=or"
  "ganizations/*}/inspectTemplatesZ;\0229/v2/{"
  "parent=organizations/*/locations/*}/insp"
  "ectTemplatesZ*\022(/v2/{parent=projects/*}/"
  "inspectTemplatesZ6\0224/v2/{parent=projects"
  "/*/locations/*}/inspectTemplates\332A\006paren"
  "t\022\305\002\n\025DeleteInspectTemplate\0223.google.pri"
  "vacy.dlp.v2.DeleteInspectTemplateRequest"
  "\032\026.google.protobuf.Empty\"\336\001\202\323\344\223\002\320\001*-/v2/"
  "{name=organizations/*/inspectTemplates/*"
  "}Z;*9/v2/{name=organizations/*/locations"
  "/*/inspectTemplates/*}Z**(/v2/{name=proj"
  "ects/*/inspectTemplates/*}Z6*4/v2/{name="
  "projects/*/locations/*/inspectTemplates/"
  "*}\332A\004name\022\214\003\n\030CreateDeidentifyTemplate\0226"
  ".google.privacy.dlp.v2.CreateDeidentifyT"
  "emplateRequest\032).google.privacy.dlp.v2.D"
  "eidentifyTemplate\"\214\002\202\323\344\223\002\350\001\"0/v2/{parent"
  "=organizations/*}/deidentifyTemplates:\001*"
  "ZA\"</v2/{parent=organizations/*/location"
  "s/*}/deidentifyTemplates:\001*Z0\"+/v2/{pare"
  "nt=projects/*}/deidentifyTemplates:\001*Z<\""
  "7/v2/{parent=projects/*/locations/*}/dei"
  "dentifyTemplates:\001*\332A\032parent,deidentify_"
  "template\022\226\003\n\030UpdateDeidentifyTemplate\0226."
  "google.privacy.dlp.v2.UpdateDeidentifyTe"
  "mplateRequest\032).google.privacy.dlp.v2.De"
  "identifyTemplate\"\226\002\202\323\344\223\002\350\00120/v2/{name=or"
  "ganizations/*/deidentifyTemplates/*}:\001*Z"
  "A2</v2/{name=organizations/*/locations/*"
  "/deidentifyTemplates/*}:\001*Z02+/v2/{name="
  "projects/*/deidentifyTemplates/*}:\001*Z<27"
  "/v2/{name=projects/*/locations/*/deident"
  "ifyTemplates/*}:\001*\332A$name,deidentify_tem"
  "plate,update_mask\022\344\002\n\025GetDeidentifyTempl"
  "ate\0223.google.privacy.dlp.v2.GetDeidentif"
  "yTemplateRequest\032).google.privacy.dlp.v2"
  ".DeidentifyTemplate\"\352\001\202\323\344\223\002\334\001\0220/v2/{name"
  "=organizations/*/deidentifyTemplates/*}Z"
  ">\022</v2/{name=organizations/*/locations/*"
  "/deidentifyTemplates/*}Z-\022+/v2/{name=pro"
  "jects/*/deidentifyTemplates/*}Z9\0227/v2/{n"
  "ame=projects/*/locations/*/deidentifyTem"
  "plates/*}\332A\004name\022\367\002\n\027ListDeidentifyTempl"
  "ates\0225.google.privacy.dlp.v2.ListDeident"
  "ifyTemplatesRequest\0326.google.privacy.dlp"
  ".v2.ListDeidentifyTemplatesResponse\"\354\001\202\323"
  "\344\223\002\334\001\0220/v2/{parent=organizations/*}/deid"
  "entifyTemplatesZ>\022</v2/{parent=organizat"
  "ions/*/locations/*}/deidentifyTemplatesZ"
  "-\022+/v2/{parent=projects/*}/deidentifyTem"
  "platesZ9\0227/v2/{parent=projects/*/locatio"
  "ns/*}/deidentifyTemplates\332A\006parent\022\327\002\n\030D"
  "eleteDeidentifyTemplate\0226.google.privacy"
  ".dlp.v2.DeleteDeidentifyTemplateRequest\032"
  "\026.google.protobuf.Empty\"\352\001\202\323\344\223\002\334\001*0/v2/{"
  "name=organizations/*/deidentifyTemplates"
  "/*}Z>*</v2/{name=organizations/*/locatio"
  "ns/*/deidentifyTemplates/*}Z-*+/v2/{name"
  "=projects/*/deidentifyTemplates/*}Z9*7/v"
  "2/{name=projects/*/locations/*/deidentif"
  "yTemplates/*}\332A\004name\022\340\001\n\020CreateJobTrigge"
  "r\022..google.privacy.dlp.v2.CreateJobTrigg"
  "erRequest\032!.google.privacy.dlp.v2.JobTri"
  "gger\"y\202\323\344\223\002^\"#/v2/{parent=projects/*}/jo"
  "bTriggers:\001*Z4\"//v2/{parent=projects/*/l"
  "ocations/*}/jobTriggers:\001*\332A\022parent,job_"
  "trigger\022\353\001\n\020UpdateJobTrigger\022..google.pr"
  "ivacy.dlp.v2.UpdateJobTriggerRequest\032!.g"
  "oogle.privacy.dlp.v2.JobTrigger\"\203\001\202\323\344\223\002^"
  "2#/v2/{name=projects/*/jobTriggers/*}:\001*"
  "Z42//v2/{name=projects/*/locations/*/job"
  "Triggers/*}:\001*\332A\034name,job_trigger,update"
  "_mask\022\317\001\n\027HybridInspectJobTrigger\0225.goog"
  "le.privacy.dlp.v2.HybridInspectJobTrigge"
  "rRequest\032,.google.privacy.dlp.v2.HybridI"
  "nspectResponse\"O\202\323\344\223\002B\"=/v2/{name=projec"
  "ts/*/locations/*/jobTriggers/*}:hybridIn"
  "spect:\001*\332A\004name\022\306\001\n\rGetJobTrigger\022+.goog"
  "le.privacy.dlp.v2.GetJobTriggerRequest\032!"
  ".google.privacy.dlp.v2.JobTrigger\"e\202\323\344\223\002"
  "X\022#/v2/{name=projects/*/jobTriggers/*}Z1"
  "\022//v2/{name=projects/*/locations/*/jobTr"
  "iggers/*}\332A\004name\022\331\001\n\017ListJobTriggers\022-.g"
  "oogle.privacy.dlp.v2.ListJobTriggersRequ"
  "est\032..google.privacy.dlp.v2.ListJobTrigg"
  "ersResponse\"g\202\323\344\223\002X\022#/v2/{parent=project"
  "s/*}/jobTriggersZ1\022//v2/{parent=projects"
  "/*/locations/*}/jobTriggers\332A\006parent\022\301\001\n"
  "\020DeleteJobTrigger\022..google.privacy.dlp.v"
  "2.DeleteJobTriggerRequest\032\026.google.proto"
  "buf.Empty\"e\202\323\344\223\002X*#/v2/{name=projects/*/"
  "jobTriggers/*}Z1*//v2/{name=projects/*/l"
  "ocations/*/jobTriggers/*}\332A\004name\022\335\001\n\022Act"
  "ivateJobTrigger\0220.google.privacy.dlp.v2."
  "ActivateJobTriggerRequest\032\035.google.priva"
  "cy.dlp.v2.DlpJob\"v\202\323\344\223\002p\",/v2/{name=proj"
  "ects/*/jobTriggers/*}:activate:\001*Z=\"8/v2"
  "/{name=projects/*/locations/*/jobTrigger"
  "s/*}:activate:\001*\022\337\001\n\014CreateDlpJob\022*.goog"
  "le.privacy.dlp.v2.CreateDlpJobRequest\032\035."
  "google.privacy.dlp.v2.DlpJob\"\203\001\202\323\344\223\002V\"\037/"
  "v2/{parent=projects/*}/dlpJobs:\001*Z0\"+/v2"
  "/{parent=projects/*/locations/*}/dlpJobs"
  ":\001*\332A\022parent,inspect_job\332A\017parent,risk_j"
  "ob\022\305\001\n\013ListDlpJobs\022).google.privacy.dlp."
  "v2.ListDlpJobsRequest\032*.google.privacy.d"
  "lp.v2.ListDlpJobsResponse\"_\202\323\344\223\002P\022\037/v2/{"
  "parent=projects/*}/dlpJobsZ-\022+/v2/{paren"
  "t=projects/*/locations/*}/dlpJobs\332A\006pare"
  "nt\022\262\001\n\tGetDlpJob\022\'.google.privacy.dlp.v2"
  ".GetDlpJobRequest\032\035.google.privacy.dlp.v"
  "2.DlpJob\"]\202\323\344\223\002P\022\037/v2/{name=projects/*/d"
  "lpJobs/*}Z-\022+/v2/{name=projects/*/locati"
  "ons/*/dlpJobs/*}\332A\004name\022\261\001\n\014DeleteDlpJob"
  "\022*.google.privacy.dlp.v2.DeleteDlpJobReq"
  "uest\032\026.google.protobuf.Empty\"]\202\323\344\223\002P*\037/v"
  "2/{name=projects/*/dlpJobs/*}Z-*+/v2/{na"
  "me=projects/*/locations/*/dlpJobs/*}\332A\004n"
  "ame\022\276\001\n\014CancelDlpJob\022*.google.privacy.dl"
  "p.v2.CancelDlpJobRequest\032\026.google.protob"
  "uf.Empty\"j\202\323\344\223\002d\"&/v2/{name=projects/*/d"
  "lpJobs/*}:cancel:\001*Z7\"2/v2/{name=project"
  "s/*/locations/*/dlpJobs/*}:cancel:\001*\022\343\002\n"
  "\024CreateStoredInfoType\0222.google.privacy.d"
  "lp.v2.CreateStoredInfoTypeRequest\032%.goog"
  "le.privacy.dlp.v2.StoredInfoType\"\357\001\202\323\344\223\002"
  "\330\001\",/v2/{parent=organizations/*}/storedI"
  "nfoTypes:\001*Z=\"8/v2/{parent=organizations"
  "/*/locations/*}/storedInfoTypes:\001*Z,\"\'/v"
  "2/{parent=projects/*}/storedInfoTypes:\001*"
  "Z8\"3/v2/{parent=projects/*/locations/*}/"
  "storedInfoTypes:\001*\332A\rparent,config\022\355\002\n\024U"
  "pdateStoredInfoType\0222.google.privacy.dlp"
  ".v2.UpdateStoredInfoTypeRequest\032%.google"
  ".privacy.dlp.v2.StoredInfoType\"\371\001\202\323\344\223\002\330\001"
  "2,/v2/{name=organizations/*/storedInfoTy"
  "pes/*}:\001*Z=28/v2/{name=organizations/*/l"
  "ocations/*/storedInfoTypes/*}:\001*Z,2\'/v2/"
  "{name=projects/*/storedInfoTypes/*}:\001*Z8"
  "23/v2/{name=projects/*/locations/*/store"
  "dInfoTypes/*}:\001*\332A\027name,config,update_ma"
  "sk\022\310\002\n\021GetStoredInfoType\022/.google.privac"
  "y.dlp.v2.GetStoredInfoTypeRequest\032%.goog"
  "le.privacy.dlp.v2.StoredInfoType\"\332\001\202\323\344\223\002"
  "\314\001\022,/v2/{name=organizations/*/storedInfo"
  "Types/*}Z:\0228/v2/{name=organizations/*/lo"
  "cations/*/storedInfoTypes/*}Z)\022\'/v2/{nam"
  "e=projects/*/storedInfoTypes/*}Z5\0223/v2/{"
  "name=projects/*/locations/*/storedInfoTy"
  "pes/*}\332A\004name\022\333\002\n\023ListStoredInfoTypes\0221."
  "google.privacy.dlp.v2.ListStoredInfoType"
  "sRequest\0322.google.privacy.dlp.v2.ListSto"
  "redInfoTypesResponse\"\334\001\202\323\344\223\002\314\001\022,/v2/{par"
  "ent=organizations/*}/storedInfoTypesZ:\0228"
  "/v2/{parent=organizations/*/locations/*}"
  "/storedInfoTypesZ)\022\'/v2/{parent=projects"
  "/*}/storedInfoTypesZ5\0223/v2/{parent=proje"
  "cts/*/locations/*}/storedInfoTypes\332A\006par"
  "ent\022\277\002\n\024DeleteStoredInfoType\0222.google.pr"
  "ivacy.dlp.v2.DeleteStoredInfoTypeRequest"
  "\032\026.google.protobuf.Empty\"\332\001\202\323\344\223\002\314\001*,/v2/"
  "{name=organizations/*/storedInfoTypes/*}"
  "Z:*8/v2/{name=organizations/*/locations/"
  "*/storedInfoTypes/*}Z)*\'/v2/{name=projec"
  "ts/*/storedInfoTypes/*}Z5*3/v2/{name=pro"
  "jects/*/locations/*/storedInfoTypes/*}\332A"
  "\004name\022\303\001\n\023HybridInspectDlpJob\0221.google.p"
  "rivacy.dlp.v2.HybridInspectDlpJobRequest"
  "\032,.google.privacy.dlp.v2.HybridInspectRe"
  "sponse\"K\202\323\344\223\002>\"9/v2/{name=projects/*/loc"
  "ations/*/dlpJobs/*}:hybridInspect:\001*\332A\004n"
  "ame\022\221\001\n\014FinishDlpJob\022*.google.privacy.dl"
  "p.v2.FinishDlpJobRequest\032\026.google.protob"
  "uf.Empty\"=\202\323\344\223\0027\"2/v2/{name=projects/*/l"
  "ocations/*/dlpJobs/*}:finish:\001*\032F\312A\022dlp."
  "googleapis.com\322A.https://www.googleapis."
  "com/auth/cloud-platformB\372\002\n\031com.google.p"
  "rivacy.dlp.v2B\010DlpProtoP\001Z8google.golang"
  ".org/genproto/googleapis/privacy/dlp/v2;"
  "dlp\252\002\023Google.Cloud.Dlp.V2\312\002\023Google\\Cloud"
  "\\Dlp\\V2\352\002\026Google::Cloud::Dlp::V2\352Ar\n\035dlp"
  ".googleapis.com/DlpContent\022\035projects/{pr"
  "oject}/dlpContent\0222projects/{project}/lo"
  "cations/{location}/dlpContent\352A\\\n\'dlp.go"
  "ogleapis.com/OrganizationLocation\0221organ"
  "izations/{organization}/locations/{locat"
  "ion}b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto = {
  false, InitDefaults_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto, 
  descriptor_table_protodef_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto,
  "google/privacy/dlp/v2/dlp.proto", &assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto, 43012,
};

void AddDescriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[13] =
  {
    ::AddDescriptors_google_2fapi_2fclient_2eproto,
    ::AddDescriptors_google_2fapi_2ffield_5fbehavior_2eproto,
    ::AddDescriptors_google_2fapi_2fresource_2eproto,
    ::AddDescriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fempty_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ffield_5fmask_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2frpc_2fstatus_2eproto,
    ::AddDescriptors_google_2ftype_2fdate_2eproto,
    ::AddDescriptors_google_2ftype_2fdayofweek_2eproto,
    ::AddDescriptors_google_2ftype_2ftimeofday_2eproto,
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto, deps, 13);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto = []() { AddDescriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto(); return true; }();
namespace google {
namespace privacy {
namespace dlp {
namespace v2 {
const ::google::protobuf::EnumDescriptor* ByteContentItem_BytesType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[0];
}
bool ByteContentItem_BytesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ByteContentItem_BytesType ByteContentItem::BYTES_TYPE_UNSPECIFIED;
const ByteContentItem_BytesType ByteContentItem::IMAGE;
const ByteContentItem_BytesType ByteContentItem::IMAGE_JPEG;
const ByteContentItem_BytesType ByteContentItem::IMAGE_BMP;
const ByteContentItem_BytesType ByteContentItem::IMAGE_PNG;
const ByteContentItem_BytesType ByteContentItem::IMAGE_SVG;
const ByteContentItem_BytesType ByteContentItem::TEXT_UTF8;
const ByteContentItem_BytesType ByteContentItem::WORD_DOCUMENT;
const ByteContentItem_BytesType ByteContentItem::PDF;
const ByteContentItem_BytesType ByteContentItem::AVRO;
const ByteContentItem_BytesType ByteContentItem::CSV;
const ByteContentItem_BytesType ByteContentItem::TSV;
const ByteContentItem_BytesType ByteContentItem::BytesType_MIN;
const ByteContentItem_BytesType ByteContentItem::BytesType_MAX;
const int ByteContentItem::BytesType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OutputStorageConfig_OutputSchema_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[1];
}
bool OutputStorageConfig_OutputSchema_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OutputStorageConfig_OutputSchema OutputStorageConfig::OUTPUT_SCHEMA_UNSPECIFIED;
const OutputStorageConfig_OutputSchema OutputStorageConfig::BASIC_COLUMNS;
const OutputStorageConfig_OutputSchema OutputStorageConfig::GCS_COLUMNS;
const OutputStorageConfig_OutputSchema OutputStorageConfig::DATASTORE_COLUMNS;
const OutputStorageConfig_OutputSchema OutputStorageConfig::BIG_QUERY_COLUMNS;
const OutputStorageConfig_OutputSchema OutputStorageConfig::ALL_COLUMNS;
const OutputStorageConfig_OutputSchema OutputStorageConfig::OutputSchema_MIN;
const OutputStorageConfig_OutputSchema OutputStorageConfig::OutputSchema_MAX;
const int OutputStorageConfig::OutputSchema_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimePartConfig_TimePart_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[2];
}
bool TimePartConfig_TimePart_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimePartConfig_TimePart TimePartConfig::TIME_PART_UNSPECIFIED;
const TimePartConfig_TimePart TimePartConfig::YEAR;
const TimePartConfig_TimePart TimePartConfig::MONTH;
const TimePartConfig_TimePart TimePartConfig::DAY_OF_MONTH;
const TimePartConfig_TimePart TimePartConfig::DAY_OF_WEEK;
const TimePartConfig_TimePart TimePartConfig::WEEK_OF_YEAR;
const TimePartConfig_TimePart TimePartConfig::HOUR_OF_DAY;
const TimePartConfig_TimePart TimePartConfig::TimePart_MIN;
const TimePartConfig_TimePart TimePartConfig::TimePart_MAX;
const int TimePartConfig::TimePart_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CharsToIgnore_CommonCharsToIgnore_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[3];
}
bool CharsToIgnore_CommonCharsToIgnore_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::COMMON_CHARS_TO_IGNORE_UNSPECIFIED;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::NUMERIC;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::ALPHA_UPPER_CASE;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::ALPHA_LOWER_CASE;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::PUNCTUATION;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::WHITESPACE;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::CommonCharsToIgnore_MIN;
const CharsToIgnore_CommonCharsToIgnore CharsToIgnore::CommonCharsToIgnore_MAX;
const int CharsToIgnore::CommonCharsToIgnore_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[4];
}
bool CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::NUMERIC;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::HEXADECIMAL;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::UPPER_CASE_ALPHA_NUMERIC;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::ALPHA_NUMERIC;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::FfxCommonNativeAlphabet_MIN;
const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet CryptoReplaceFfxFpeConfig::FfxCommonNativeAlphabet_MAX;
const int CryptoReplaceFfxFpeConfig::FfxCommonNativeAlphabet_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RecordCondition_Expressions_LogicalOperator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[5];
}
bool RecordCondition_Expressions_LogicalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::LOGICAL_OPERATOR_UNSPECIFIED;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::AND;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::LogicalOperator_MIN;
const RecordCondition_Expressions_LogicalOperator RecordCondition_Expressions::LogicalOperator_MAX;
const int RecordCondition_Expressions::LogicalOperator_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TransformationSummary_TransformationResultCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[6];
}
bool TransformationSummary_TransformationResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransformationSummary_TransformationResultCode TransformationSummary::TRANSFORMATION_RESULT_CODE_UNSPECIFIED;
const TransformationSummary_TransformationResultCode TransformationSummary::SUCCESS;
const TransformationSummary_TransformationResultCode TransformationSummary::ERROR;
const TransformationSummary_TransformationResultCode TransformationSummary::TransformationResultCode_MIN;
const TransformationSummary_TransformationResultCode TransformationSummary::TransformationResultCode_MAX;
const int TransformationSummary::TransformationResultCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* JobTrigger_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[7];
}
bool JobTrigger_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JobTrigger_Status JobTrigger::STATUS_UNSPECIFIED;
const JobTrigger_Status JobTrigger::HEALTHY;
const JobTrigger_Status JobTrigger::PAUSED;
const JobTrigger_Status JobTrigger::CANCELLED;
const JobTrigger_Status JobTrigger::Status_MIN;
const JobTrigger_Status JobTrigger::Status_MAX;
const int JobTrigger::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DlpJob_JobState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[8];
}
bool DlpJob_JobState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DlpJob_JobState DlpJob::JOB_STATE_UNSPECIFIED;
const DlpJob_JobState DlpJob::PENDING;
const DlpJob_JobState DlpJob::RUNNING;
const DlpJob_JobState DlpJob::DONE;
const DlpJob_JobState DlpJob::CANCELED;
const DlpJob_JobState DlpJob::FAILED;
const DlpJob_JobState DlpJob::ACTIVE;
const DlpJob_JobState DlpJob::JobState_MIN;
const DlpJob_JobState DlpJob::JobState_MAX;
const int DlpJob::JobState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RelationalOperator_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[9];
}
bool RelationalOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchingType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[10];
}
bool MatchingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContentOption_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[11];
}
bool ContentOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MetadataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[12];
}
bool MetadataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InfoTypeSupportedBy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[13];
}
bool InfoTypeSupportedBy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DlpJobType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[14];
}
bool DlpJobType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StoredInfoTypeState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[15];
}
bool StoredInfoTypeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ExcludeInfoTypes::InitAsDefaultInstance() {
}
class ExcludeInfoTypes::HasBitSetters {
 public:
};

void ExcludeInfoTypes::clear_info_types() {
  info_types_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExcludeInfoTypes::kInfoTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExcludeInfoTypes::ExcludeInfoTypes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ExcludeInfoTypes)
}
ExcludeInfoTypes::ExcludeInfoTypes(const ExcludeInfoTypes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      info_types_(from.info_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ExcludeInfoTypes)
}

void ExcludeInfoTypes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

ExcludeInfoTypes::~ExcludeInfoTypes() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ExcludeInfoTypes)
  SharedDtor();
}

void ExcludeInfoTypes::SharedDtor() {
}

void ExcludeInfoTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExcludeInfoTypes& ExcludeInfoTypes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExcludeInfoTypes_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ExcludeInfoTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExcludeInfoTypes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExcludeInfoTypes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
          object = msg->add_info_types();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExcludeInfoTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ExcludeInfoTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ExcludeInfoTypes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExcludeInfoTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->info_types(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ExcludeInfoTypes)
}

::google::protobuf::uint8* ExcludeInfoTypes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ExcludeInfoTypes)
  return target;
}

size_t ExcludeInfoTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExcludeInfoTypes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const ExcludeInfoTypes* source =
      ::google::protobuf::DynamicCastToGenerated<ExcludeInfoTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ExcludeInfoTypes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ExcludeInfoTypes)
    MergeFrom(*source);
  }
}

void ExcludeInfoTypes::MergeFrom(const ExcludeInfoTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
}

void ExcludeInfoTypes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExcludeInfoTypes::CopyFrom(const ExcludeInfoTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ExcludeInfoTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcludeInfoTypes::IsInitialized() const {
  return true;
}

void ExcludeInfoTypes::Swap(ExcludeInfoTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExcludeInfoTypes::InternalSwap(ExcludeInfoTypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&info_types_)->InternalSwap(CastToBase(&other->info_types_));
}

::google::protobuf::Metadata ExcludeInfoTypes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExclusionRule::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_ExclusionRule_default_instance_.dictionary_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Dictionary*>(
      ::google::privacy::dlp::v2::CustomInfoType_Dictionary::internal_default_instance());
  ::google::privacy::dlp::v2::_ExclusionRule_default_instance_.regex_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Regex*>(
      ::google::privacy::dlp::v2::CustomInfoType_Regex::internal_default_instance());
  ::google::privacy::dlp::v2::_ExclusionRule_default_instance_.exclude_info_types_ = const_cast< ::google::privacy::dlp::v2::ExcludeInfoTypes*>(
      ::google::privacy::dlp::v2::ExcludeInfoTypes::internal_default_instance());
}
class ExclusionRule::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CustomInfoType_Dictionary& dictionary(const ExclusionRule* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_Regex& regex(const ExclusionRule* msg);
  static const ::google::privacy::dlp::v2::ExcludeInfoTypes& exclude_info_types(const ExclusionRule* msg);
};

const ::google::privacy::dlp::v2::CustomInfoType_Dictionary&
ExclusionRule::HasBitSetters::dictionary(const ExclusionRule* msg) {
  return *msg->type_.dictionary_;
}
const ::google::privacy::dlp::v2::CustomInfoType_Regex&
ExclusionRule::HasBitSetters::regex(const ExclusionRule* msg) {
  return *msg->type_.regex_;
}
const ::google::privacy::dlp::v2::ExcludeInfoTypes&
ExclusionRule::HasBitSetters::exclude_info_types(const ExclusionRule* msg) {
  return *msg->type_.exclude_info_types_;
}
void ExclusionRule::set_allocated_dictionary(::google::privacy::dlp::v2::CustomInfoType_Dictionary* dictionary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (dictionary) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dictionary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dictionary, submessage_arena);
    }
    set_has_dictionary();
    type_.dictionary_ = dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ExclusionRule.dictionary)
}
void ExclusionRule::clear_dictionary() {
  if (has_dictionary()) {
    delete type_.dictionary_;
    clear_has_type();
  }
}
void ExclusionRule::set_allocated_regex(::google::privacy::dlp::v2::CustomInfoType_Regex* regex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (regex) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, regex, submessage_arena);
    }
    set_has_regex();
    type_.regex_ = regex;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ExclusionRule.regex)
}
void ExclusionRule::clear_regex() {
  if (has_regex()) {
    delete type_.regex_;
    clear_has_type();
  }
}
void ExclusionRule::set_allocated_exclude_info_types(::google::privacy::dlp::v2::ExcludeInfoTypes* exclude_info_types) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (exclude_info_types) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exclude_info_types = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exclude_info_types, submessage_arena);
    }
    set_has_exclude_info_types();
    type_.exclude_info_types_ = exclude_info_types;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ExclusionRule.exclude_info_types)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExclusionRule::kDictionaryFieldNumber;
const int ExclusionRule::kRegexFieldNumber;
const int ExclusionRule::kExcludeInfoTypesFieldNumber;
const int ExclusionRule::kMatchingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExclusionRule::ExclusionRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ExclusionRule)
}
ExclusionRule::ExclusionRule(const ExclusionRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matching_type_ = from.matching_type_;
  clear_has_type();
  switch (from.type_case()) {
    case kDictionary: {
      mutable_dictionary()->::google::privacy::dlp::v2::CustomInfoType_Dictionary::MergeFrom(from.dictionary());
      break;
    }
    case kRegex: {
      mutable_regex()->::google::privacy::dlp::v2::CustomInfoType_Regex::MergeFrom(from.regex());
      break;
    }
    case kExcludeInfoTypes: {
      mutable_exclude_info_types()->::google::privacy::dlp::v2::ExcludeInfoTypes::MergeFrom(from.exclude_info_types());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ExclusionRule)
}

void ExclusionRule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  matching_type_ = 0;
  clear_has_type();
}

ExclusionRule::~ExclusionRule() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ExclusionRule)
  SharedDtor();
}

void ExclusionRule::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void ExclusionRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExclusionRule& ExclusionRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExclusionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ExclusionRule::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.ExclusionRule)
  switch (type_case()) {
    case kDictionary: {
      delete type_.dictionary_;
      break;
    }
    case kRegex: {
      delete type_.regex_;
      break;
    }
    case kExcludeInfoTypes: {
      delete type_.exclude_info_types_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ExclusionRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ExclusionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matching_type_ = 0;
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExclusionRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExclusionRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Dictionary::_InternalParse;
        object = msg->mutable_dictionary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Regex::_InternalParse;
        object = msg->mutable_regex();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ExcludeInfoTypes exclude_info_types = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ExcludeInfoTypes::_InternalParse;
        object = msg->mutable_exclude_info_types();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.MatchingType matching_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_matching_type(static_cast<::google::privacy::dlp::v2::MatchingType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExclusionRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ExclusionRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ExcludeInfoTypes exclude_info_types = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exclude_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.MatchingType matching_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_matching_type(static_cast< ::google::privacy::dlp::v2::MatchingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ExclusionRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ExclusionRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExclusionRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ExclusionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 1;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::dictionary(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 2;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::regex(this), output);
  }

  // .google.privacy.dlp.v2.ExcludeInfoTypes exclude_info_types = 3;
  if (has_exclude_info_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::exclude_info_types(this), output);
  }

  // .google.privacy.dlp.v2.MatchingType matching_type = 4;
  if (this->matching_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->matching_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ExclusionRule)
}

::google::protobuf::uint8* ExclusionRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ExclusionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 1;
  if (has_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::dictionary(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 2;
  if (has_regex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::regex(this), target);
  }

  // .google.privacy.dlp.v2.ExcludeInfoTypes exclude_info_types = 3;
  if (has_exclude_info_types()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::exclude_info_types(this), target);
  }

  // .google.privacy.dlp.v2.MatchingType matching_type = 4;
  if (this->matching_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->matching_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ExclusionRule)
  return target;
}

size_t ExclusionRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ExclusionRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.MatchingType matching_type = 4;
  if (this->matching_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->matching_type());
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 1;
    case kDictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.dictionary_);
      break;
    }
    // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 2;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.regex_);
      break;
    }
    // .google.privacy.dlp.v2.ExcludeInfoTypes exclude_info_types = 3;
    case kExcludeInfoTypes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.exclude_info_types_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExclusionRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ExclusionRule)
  GOOGLE_DCHECK_NE(&from, this);
  const ExclusionRule* source =
      ::google::protobuf::DynamicCastToGenerated<ExclusionRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ExclusionRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ExclusionRule)
    MergeFrom(*source);
  }
}

void ExclusionRule::MergeFrom(const ExclusionRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ExclusionRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.matching_type() != 0) {
    set_matching_type(from.matching_type());
  }
  switch (from.type_case()) {
    case kDictionary: {
      mutable_dictionary()->::google::privacy::dlp::v2::CustomInfoType_Dictionary::MergeFrom(from.dictionary());
      break;
    }
    case kRegex: {
      mutable_regex()->::google::privacy::dlp::v2::CustomInfoType_Regex::MergeFrom(from.regex());
      break;
    }
    case kExcludeInfoTypes: {
      mutable_exclude_info_types()->::google::privacy::dlp::v2::ExcludeInfoTypes::MergeFrom(from.exclude_info_types());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ExclusionRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ExclusionRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExclusionRule::CopyFrom(const ExclusionRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ExclusionRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExclusionRule::IsInitialized() const {
  return true;
}

void ExclusionRule::Swap(ExclusionRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExclusionRule::InternalSwap(ExclusionRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(matching_type_, other->matching_type_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ExclusionRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectionRule::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectionRule_default_instance_.hotword_rule_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule*>(
      ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::internal_default_instance());
  ::google::privacy::dlp::v2::_InspectionRule_default_instance_.exclusion_rule_ = const_cast< ::google::privacy::dlp::v2::ExclusionRule*>(
      ::google::privacy::dlp::v2::ExclusionRule::internal_default_instance());
}
class InspectionRule::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule& hotword_rule(const InspectionRule* msg);
  static const ::google::privacy::dlp::v2::ExclusionRule& exclusion_rule(const InspectionRule* msg);
};

const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule&
InspectionRule::HasBitSetters::hotword_rule(const InspectionRule* msg) {
  return *msg->type_.hotword_rule_;
}
const ::google::privacy::dlp::v2::ExclusionRule&
InspectionRule::HasBitSetters::exclusion_rule(const InspectionRule* msg) {
  return *msg->type_.exclusion_rule_;
}
void InspectionRule::set_allocated_hotword_rule(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule* hotword_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (hotword_rule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hotword_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hotword_rule, submessage_arena);
    }
    set_has_hotword_rule();
    type_.hotword_rule_ = hotword_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectionRule.hotword_rule)
}
void InspectionRule::clear_hotword_rule() {
  if (has_hotword_rule()) {
    delete type_.hotword_rule_;
    clear_has_type();
  }
}
void InspectionRule::set_allocated_exclusion_rule(::google::privacy::dlp::v2::ExclusionRule* exclusion_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (exclusion_rule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exclusion_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exclusion_rule, submessage_arena);
    }
    set_has_exclusion_rule();
    type_.exclusion_rule_ = exclusion_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.InspectionRule.exclusion_rule)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectionRule::kHotwordRuleFieldNumber;
const int InspectionRule::kExclusionRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectionRule::InspectionRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectionRule)
}
InspectionRule::InspectionRule(const InspectionRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kHotwordRule: {
      mutable_hotword_rule()->::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::MergeFrom(from.hotword_rule());
      break;
    }
    case kExclusionRule: {
      mutable_exclusion_rule()->::google::privacy::dlp::v2::ExclusionRule::MergeFrom(from.exclusion_rule());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectionRule)
}

void InspectionRule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_type();
}

InspectionRule::~InspectionRule() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectionRule)
  SharedDtor();
}

void InspectionRule::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void InspectionRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectionRule& InspectionRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectionRule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectionRule::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.InspectionRule)
  switch (type_case()) {
    case kHotwordRule: {
      delete type_.hotword_rule_;
      break;
    }
    case kExclusionRule: {
      delete type_.exclusion_rule_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void InspectionRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectionRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectionRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::_InternalParse;
        object = msg->mutable_hotword_rule();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ExclusionRule exclusion_rule = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ExclusionRule::_InternalParse;
        object = msg->mutable_exclusion_rule();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectionRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectionRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hotword_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ExclusionRule exclusion_rule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exclusion_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectionRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectionRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectionRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
  if (has_hotword_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hotword_rule(this), output);
  }

  // .google.privacy.dlp.v2.ExclusionRule exclusion_rule = 2;
  if (has_exclusion_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::exclusion_rule(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectionRule)
}

::google::protobuf::uint8* InspectionRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
  if (has_hotword_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hotword_rule(this), target);
  }

  // .google.privacy.dlp.v2.ExclusionRule exclusion_rule = 2;
  if (has_exclusion_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::exclusion_rule(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectionRule)
  return target;
}

size_t InspectionRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectionRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
    case kHotwordRule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.hotword_rule_);
      break;
    }
    // .google.privacy.dlp.v2.ExclusionRule exclusion_rule = 2;
    case kExclusionRule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.exclusion_rule_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectionRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectionRule)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectionRule* source =
      ::google::protobuf::DynamicCastToGenerated<InspectionRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectionRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectionRule)
    MergeFrom(*source);
  }
}

void InspectionRule::MergeFrom(const InspectionRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectionRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kHotwordRule: {
      mutable_hotword_rule()->::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::MergeFrom(from.hotword_rule());
      break;
    }
    case kExclusionRule: {
      mutable_exclusion_rule()->::google::privacy::dlp::v2::ExclusionRule::MergeFrom(from.exclusion_rule());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void InspectionRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectionRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectionRule::CopyFrom(const InspectionRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectionRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectionRule::IsInitialized() const {
  return true;
}

void InspectionRule::Swap(InspectionRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectionRule::InternalSwap(InspectionRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata InspectionRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectionRuleSet::InitAsDefaultInstance() {
}
class InspectionRuleSet::HasBitSetters {
 public:
};

void InspectionRuleSet::clear_info_types() {
  info_types_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectionRuleSet::kInfoTypesFieldNumber;
const int InspectionRuleSet::kRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectionRuleSet::InspectionRuleSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectionRuleSet)
}
InspectionRuleSet::InspectionRuleSet(const InspectionRuleSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      info_types_(from.info_types_),
      rules_(from.rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectionRuleSet)
}

void InspectionRuleSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

InspectionRuleSet::~InspectionRuleSet() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectionRuleSet)
  SharedDtor();
}

void InspectionRuleSet::SharedDtor() {
}

void InspectionRuleSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectionRuleSet& InspectionRuleSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectionRuleSet_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectionRuleSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectionRuleSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  rules_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectionRuleSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectionRuleSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
          object = msg->add_info_types();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.privacy.dlp.v2.InspectionRule rules = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InspectionRule::_InternalParse;
          object = msg->add_rules();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectionRuleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectionRuleSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.InspectionRule rules = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectionRuleSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectionRuleSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectionRuleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectionRuleSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->info_types(static_cast<int>(i)),
      output);
  }

  // repeated .google.privacy.dlp.v2.InspectionRule rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->rules(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectionRuleSet)
}

::google::protobuf::uint8* InspectionRuleSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectionRuleSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), target);
  }

  // repeated .google.privacy.dlp.v2.InspectionRule rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rules(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectionRuleSet)
  return target;
}

size_t InspectionRuleSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectionRuleSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.InspectionRule rules = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rules(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectionRuleSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectionRuleSet)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectionRuleSet* source =
      ::google::protobuf::DynamicCastToGenerated<InspectionRuleSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectionRuleSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectionRuleSet)
    MergeFrom(*source);
  }
}

void InspectionRuleSet::MergeFrom(const InspectionRuleSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectionRuleSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
  rules_.MergeFrom(from.rules_);
}

void InspectionRuleSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectionRuleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectionRuleSet::CopyFrom(const InspectionRuleSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectionRuleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectionRuleSet::IsInitialized() const {
  return true;
}

void InspectionRuleSet::Swap(InspectionRuleSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectionRuleSet::InternalSwap(InspectionRuleSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&info_types_)->InternalSwap(CastToBase(&other->info_types_));
  CastToBase(&rules_)->InternalSwap(CastToBase(&other->rules_));
}

::google::protobuf::Metadata InspectionRuleSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectConfig_FindingLimits_InfoTypeLimit::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectConfig_FindingLimits_InfoTypeLimit_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
}
class InspectConfig_FindingLimits_InfoTypeLimit::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InfoType& info_type(const InspectConfig_FindingLimits_InfoTypeLimit* msg);
};

const ::google::privacy::dlp::v2::InfoType&
InspectConfig_FindingLimits_InfoTypeLimit::HasBitSetters::info_type(const InspectConfig_FindingLimits_InfoTypeLimit* msg) {
  return *msg->info_type_;
}
void InspectConfig_FindingLimits_InfoTypeLimit::clear_info_type() {
  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig_FindingLimits_InfoTypeLimit::kInfoTypeFieldNumber;
const int InspectConfig_FindingLimits_InfoTypeLimit::kMaxFindingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig_FindingLimits_InfoTypeLimit::InspectConfig_FindingLimits_InfoTypeLimit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
}
InspectConfig_FindingLimits_InfoTypeLimit::InspectConfig_FindingLimits_InfoTypeLimit(const InspectConfig_FindingLimits_InfoTypeLimit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2::InfoType(*from.info_type_);
  } else {
    info_type_ = nullptr;
  }
  max_findings_ = from.max_findings_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
}

void InspectConfig_FindingLimits_InfoTypeLimit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_findings_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(max_findings_));
}

InspectConfig_FindingLimits_InfoTypeLimit::~InspectConfig_FindingLimits_InfoTypeLimit() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  SharedDtor();
}

void InspectConfig_FindingLimits_InfoTypeLimit::SharedDtor() {
  if (this != internal_default_instance()) delete info_type_;
}

void InspectConfig_FindingLimits_InfoTypeLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectConfig_FindingLimits_InfoTypeLimit& InspectConfig_FindingLimits_InfoTypeLimit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectConfig_FindingLimits_InfoTypeLimit_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectConfig_FindingLimits_InfoTypeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
  max_findings_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectConfig_FindingLimits_InfoTypeLimit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectConfig_FindingLimits_InfoTypeLimit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 max_findings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_findings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectConfig_FindingLimits_InfoTypeLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_findings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectConfig_FindingLimits_InfoTypeLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info_type(this), output);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_findings(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
}

::google::protobuf::uint8* InspectConfig_FindingLimits_InfoTypeLimit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info_type(this), target);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_findings(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  return target;
}

size_t InspectConfig_FindingLimits_InfoTypeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_type_);
  }

  // int32 max_findings = 2;
  if (this->max_findings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectConfig_FindingLimits_InfoTypeLimit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig_FindingLimits_InfoTypeLimit* source =
      ::google::protobuf::DynamicCastToGenerated<InspectConfig_FindingLimits_InfoTypeLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
    MergeFrom(*source);
  }
}

void InspectConfig_FindingLimits_InfoTypeLimit::MergeFrom(const InspectConfig_FindingLimits_InfoTypeLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
  }
  if (from.max_findings() != 0) {
    set_max_findings(from.max_findings());
  }
}

void InspectConfig_FindingLimits_InfoTypeLimit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig_FindingLimits_InfoTypeLimit::CopyFrom(const InspectConfig_FindingLimits_InfoTypeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig_FindingLimits_InfoTypeLimit::IsInitialized() const {
  return true;
}

void InspectConfig_FindingLimits_InfoTypeLimit::Swap(InspectConfig_FindingLimits_InfoTypeLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig_FindingLimits_InfoTypeLimit::InternalSwap(InspectConfig_FindingLimits_InfoTypeLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_type_, other->info_type_);
  swap(max_findings_, other->max_findings_);
}

::google::protobuf::Metadata InspectConfig_FindingLimits_InfoTypeLimit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectConfig_FindingLimits::InitAsDefaultInstance() {
}
class InspectConfig_FindingLimits::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig_FindingLimits::kMaxFindingsPerItemFieldNumber;
const int InspectConfig_FindingLimits::kMaxFindingsPerRequestFieldNumber;
const int InspectConfig_FindingLimits::kMaxFindingsPerInfoTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig_FindingLimits::InspectConfig_FindingLimits()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectConfig.FindingLimits)
}
InspectConfig_FindingLimits::InspectConfig_FindingLimits(const InspectConfig_FindingLimits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      max_findings_per_info_type_(from.max_findings_per_info_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_findings_per_item_, &from.max_findings_per_item_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_findings_per_request_) -
    reinterpret_cast<char*>(&max_findings_per_item_)) + sizeof(max_findings_per_request_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectConfig.FindingLimits)
}

void InspectConfig_FindingLimits::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&max_findings_per_item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_findings_per_request_) -
      reinterpret_cast<char*>(&max_findings_per_item_)) + sizeof(max_findings_per_request_));
}

InspectConfig_FindingLimits::~InspectConfig_FindingLimits() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  SharedDtor();
}

void InspectConfig_FindingLimits::SharedDtor() {
}

void InspectConfig_FindingLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectConfig_FindingLimits& InspectConfig_FindingLimits::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectConfig_FindingLimits_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectConfig_FindingLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_findings_per_info_type_.Clear();
  ::memset(&max_findings_per_item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_findings_per_request_) -
      reinterpret_cast<char*>(&max_findings_per_item_)) + sizeof(max_findings_per_request_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectConfig_FindingLimits::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectConfig_FindingLimits*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 max_findings_per_item = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_max_findings_per_item(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 max_findings_per_request = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_findings_per_request(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit::_InternalParse;
          object = msg->add_max_findings_per_info_type();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectConfig_FindingLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_findings_per_item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_per_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_findings_per_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_findings_per_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_max_findings_per_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectConfig_FindingLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_findings_per_item = 1;
  if (this->max_findings_per_item() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_findings_per_item(), output);
  }

  // int32 max_findings_per_request = 2;
  if (this->max_findings_per_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_findings_per_request(), output);
  }

  // repeated .google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->max_findings_per_info_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->max_findings_per_info_type(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectConfig.FindingLimits)
}

::google::protobuf::uint8* InspectConfig_FindingLimits::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_findings_per_item = 1;
  if (this->max_findings_per_item() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_findings_per_item(), target);
  }

  // int32 max_findings_per_request = 2;
  if (this->max_findings_per_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_findings_per_request(), target);
  }

  // repeated .google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->max_findings_per_info_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->max_findings_per_info_type(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  return target;
}

size_t InspectConfig_FindingLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->max_findings_per_info_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->max_findings_per_info_type(static_cast<int>(i)));
    }
  }

  // int32 max_findings_per_item = 1;
  if (this->max_findings_per_item() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings_per_item());
  }

  // int32 max_findings_per_request = 2;
  if (this->max_findings_per_request() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_findings_per_request());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectConfig_FindingLimits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig_FindingLimits* source =
      ::google::protobuf::DynamicCastToGenerated<InspectConfig_FindingLimits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectConfig.FindingLimits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectConfig.FindingLimits)
    MergeFrom(*source);
  }
}

void InspectConfig_FindingLimits::MergeFrom(const InspectConfig_FindingLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  max_findings_per_info_type_.MergeFrom(from.max_findings_per_info_type_);
  if (from.max_findings_per_item() != 0) {
    set_max_findings_per_item(from.max_findings_per_item());
  }
  if (from.max_findings_per_request() != 0) {
    set_max_findings_per_request(from.max_findings_per_request());
  }
}

void InspectConfig_FindingLimits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig_FindingLimits::CopyFrom(const InspectConfig_FindingLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectConfig.FindingLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig_FindingLimits::IsInitialized() const {
  return true;
}

void InspectConfig_FindingLimits::Swap(InspectConfig_FindingLimits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig_FindingLimits::InternalSwap(InspectConfig_FindingLimits* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&max_findings_per_info_type_)->InternalSwap(CastToBase(&other->max_findings_per_info_type_));
  swap(max_findings_per_item_, other->max_findings_per_item_);
  swap(max_findings_per_request_, other->max_findings_per_request_);
}

::google::protobuf::Metadata InspectConfig_FindingLimits::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectConfig_default_instance_._instance.get_mutable()->limits_ = const_cast< ::google::privacy::dlp::v2::InspectConfig_FindingLimits*>(
      ::google::privacy::dlp::v2::InspectConfig_FindingLimits::internal_default_instance());
}
class InspectConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectConfig_FindingLimits& limits(const InspectConfig* msg);
};

const ::google::privacy::dlp::v2::InspectConfig_FindingLimits&
InspectConfig::HasBitSetters::limits(const InspectConfig* msg) {
  return *msg->limits_;
}
void InspectConfig::clear_info_types() {
  info_types_.Clear();
}
void InspectConfig::clear_custom_info_types() {
  custom_info_types_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectConfig::kInfoTypesFieldNumber;
const int InspectConfig::kMinLikelihoodFieldNumber;
const int InspectConfig::kLimitsFieldNumber;
const int InspectConfig::kIncludeQuoteFieldNumber;
const int InspectConfig::kExcludeInfoTypesFieldNumber;
const int InspectConfig::kCustomInfoTypesFieldNumber;
const int InspectConfig::kContentOptionsFieldNumber;
const int InspectConfig::kRuleSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectConfig::InspectConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectConfig)
}
InspectConfig::InspectConfig(const InspectConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      info_types_(from.info_types_),
      custom_info_types_(from.custom_info_types_),
      content_options_(from.content_options_),
      rule_set_(from.rule_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_limits()) {
    limits_ = new ::google::privacy::dlp::v2::InspectConfig_FindingLimits(*from.limits_);
  } else {
    limits_ = nullptr;
  }
  ::memcpy(&min_likelihood_, &from.min_likelihood_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclude_info_types_) -
    reinterpret_cast<char*>(&min_likelihood_)) + sizeof(exclude_info_types_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectConfig)
}

void InspectConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&limits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_info_types_) -
      reinterpret_cast<char*>(&limits_)) + sizeof(exclude_info_types_));
}

InspectConfig::~InspectConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectConfig)
  SharedDtor();
}

void InspectConfig::SharedDtor() {
  if (this != internal_default_instance()) delete limits_;
}

void InspectConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectConfig& InspectConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  custom_info_types_.Clear();
  content_options_.Clear();
  rule_set_.Clear();
  if (GetArenaNoVirtual() == nullptr && limits_ != nullptr) {
    delete limits_;
  }
  limits_ = nullptr;
  ::memset(&min_likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclude_info_types_) -
      reinterpret_cast<char*>(&min_likelihood_)) + sizeof(exclude_info_types_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
          object = msg->add_info_types();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.Likelihood min_likelihood = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_min_likelihood(static_cast<::google::privacy::dlp::v2::Likelihood>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectConfig_FindingLimits::_InternalParse;
        object = msg->mutable_limits();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool include_quote = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_include_quote(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool exclude_info_types = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_exclude_info_types(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::CustomInfoType::_InternalParse;
          object = msg->add_custom_info_types();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .google.privacy.dlp.v2.ContentOption content_options = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 66) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_content_options();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_content_options(static_cast<::google::privacy::dlp::v2::ContentOption>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
        break;
      }
      // repeated .google.privacy.dlp.v2.InspectionRuleSet rule_set = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InspectionRuleSet::_InternalParse;
          object = msg->add_rule_set();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Likelihood min_likelihood = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_min_likelihood(static_cast< ::google::privacy::dlp::v2::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_quote = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_quote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exclude_info_types = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclude_info_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_custom_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.ContentOption content_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_content_options(static_cast< ::google::privacy::dlp::v2::ContentOption >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_content_options(static_cast< ::google::privacy::dlp::v2::ContentOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.InspectionRuleSet rule_set = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rule_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->info_types(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->min_likelihood(), output);
  }

  // .google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
  if (this->has_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::limits(this), output);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_quote(), output);
  }

  // bool exclude_info_types = 5;
  if (this->exclude_info_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->exclude_info_types(), output);
  }

  // repeated .google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->custom_info_types(static_cast<int>(i)),
      output);
  }

  // repeated .google.privacy.dlp.v2.ContentOption content_options = 8;
  if (this->content_options_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_content_options_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->content_options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->content_options(i), output);
  }

  // repeated .google.privacy.dlp.v2.InspectionRuleSet rule_set = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rule_set_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->rule_set(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectConfig)
}

::google::protobuf::uint8* InspectConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->min_likelihood(), target);
  }

  // .google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
  if (this->has_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::limits(this), target);
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_quote(), target);
  }

  // bool exclude_info_types = 5;
  if (this->exclude_info_types() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->exclude_info_types(), target);
  }

  // repeated .google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->custom_info_types(static_cast<int>(i)), target);
  }

  // repeated .google.privacy.dlp.v2.ContentOption content_options = 8;
  if (this->content_options_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _content_options_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->content_options_, target);
  }

  // repeated .google.privacy.dlp.v2.InspectionRuleSet rule_set = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rule_set_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->rule_set(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectConfig)
  return target;
}

size_t InspectConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->custom_info_types(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.ContentOption content_options = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->content_options_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->content_options(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _content_options_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.privacy.dlp.v2.InspectionRuleSet rule_set = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->rule_set_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rule_set(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
  if (this->has_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limits_);
  }

  // .google.privacy.dlp.v2.Likelihood min_likelihood = 2;
  if (this->min_likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->min_likelihood());
  }

  // bool include_quote = 4;
  if (this->include_quote() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_info_types = 5;
  if (this->exclude_info_types() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectConfig* source =
      ::google::protobuf::DynamicCastToGenerated<InspectConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectConfig)
    MergeFrom(*source);
  }
}

void InspectConfig::MergeFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
  custom_info_types_.MergeFrom(from.custom_info_types_);
  content_options_.MergeFrom(from.content_options_);
  rule_set_.MergeFrom(from.rule_set_);
  if (from.has_limits()) {
    mutable_limits()->::google::privacy::dlp::v2::InspectConfig_FindingLimits::MergeFrom(from.limits());
  }
  if (from.min_likelihood() != 0) {
    set_min_likelihood(from.min_likelihood());
  }
  if (from.include_quote() != 0) {
    set_include_quote(from.include_quote());
  }
  if (from.exclude_info_types() != 0) {
    set_exclude_info_types(from.exclude_info_types());
  }
}

void InspectConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectConfig::CopyFrom(const InspectConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectConfig::IsInitialized() const {
  return true;
}

void InspectConfig::Swap(InspectConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectConfig::InternalSwap(InspectConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&info_types_)->InternalSwap(CastToBase(&other->info_types_));
  CastToBase(&custom_info_types_)->InternalSwap(CastToBase(&other->custom_info_types_));
  content_options_.InternalSwap(&other->content_options_);
  CastToBase(&rule_set_)->InternalSwap(CastToBase(&other->rule_set_));
  swap(limits_, other->limits_);
  swap(min_likelihood_, other->min_likelihood_);
  swap(include_quote_, other->include_quote_);
  swap(exclude_info_types_, other->exclude_info_types_);
}

::google::protobuf::Metadata InspectConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ByteContentItem::InitAsDefaultInstance() {
}
class ByteContentItem::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ByteContentItem::kTypeFieldNumber;
const int ByteContentItem::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ByteContentItem::ByteContentItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ByteContentItem)
}
ByteContentItem::ByteContentItem(const ByteContentItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ByteContentItem)
}

void ByteContentItem::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

ByteContentItem::~ByteContentItem() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ByteContentItem)
  SharedDtor();
}

void ByteContentItem::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ByteContentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ByteContentItem& ByteContentItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ByteContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ByteContentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ByteContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ByteContentItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ByteContentItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::google::privacy::dlp::v2::ByteContentItem_BytesType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ByteContentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ByteContentItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::privacy::dlp::v2::ByteContentItem_BytesType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ByteContentItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ByteContentItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ByteContentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ByteContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ByteContentItem)
}

::google::protobuf::uint8* ByteContentItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ByteContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ByteContentItem)
  return target;
}

size_t ByteContentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ByteContentItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ByteContentItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ByteContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ByteContentItem* source =
      ::google::protobuf::DynamicCastToGenerated<ByteContentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ByteContentItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ByteContentItem)
    MergeFrom(*source);
  }
}

void ByteContentItem::MergeFrom(const ByteContentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ByteContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ByteContentItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ByteContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ByteContentItem::CopyFrom(const ByteContentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ByteContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ByteContentItem::IsInitialized() const {
  return true;
}

void ByteContentItem::Swap(ByteContentItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ByteContentItem::InternalSwap(ByteContentItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata ByteContentItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ContentItem::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_ContentItem_default_instance_.value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2::_ContentItem_default_instance_.table_ = const_cast< ::google::privacy::dlp::v2::Table*>(
      ::google::privacy::dlp::v2::Table::internal_default_instance());
  ::google::privacy::dlp::v2::_ContentItem_default_instance_.byte_item_ = const_cast< ::google::privacy::dlp::v2::ByteContentItem*>(
      ::google::privacy::dlp::v2::ByteContentItem::internal_default_instance());
}
class ContentItem::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Table& table(const ContentItem* msg);
  static const ::google::privacy::dlp::v2::ByteContentItem& byte_item(const ContentItem* msg);
};

const ::google::privacy::dlp::v2::Table&
ContentItem::HasBitSetters::table(const ContentItem* msg) {
  return *msg->data_item_.table_;
}
const ::google::privacy::dlp::v2::ByteContentItem&
ContentItem::HasBitSetters::byte_item(const ContentItem* msg) {
  return *msg->data_item_.byte_item_;
}
void ContentItem::set_allocated_table(::google::privacy::dlp::v2::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_item();
  if (table) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    data_item_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentItem.table)
}
void ContentItem::set_allocated_byte_item(::google::privacy::dlp::v2::ByteContentItem* byte_item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data_item();
  if (byte_item) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      byte_item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, byte_item, submessage_arena);
    }
    set_has_byte_item();
    data_item_.byte_item_ = byte_item;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentItem.byte_item)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentItem::kValueFieldNumber;
const int ContentItem::kTableFieldNumber;
const int ContentItem::kByteItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentItem::ContentItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ContentItem)
}
ContentItem::ContentItem(const ContentItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data_item();
  switch (from.data_item_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2::Table::MergeFrom(from.table());
      break;
    }
    case kByteItem: {
      mutable_byte_item()->::google::privacy::dlp::v2::ByteContentItem::MergeFrom(from.byte_item());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ContentItem)
}

void ContentItem::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_data_item();
}

ContentItem::~ContentItem() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ContentItem)
  SharedDtor();
}

void ContentItem::SharedDtor() {
  if (has_data_item()) {
    clear_data_item();
  }
}

void ContentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentItem& ContentItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ContentItem::clear_data_item() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.ContentItem)
  switch (data_item_case()) {
    case kValue: {
      data_item_.value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTable: {
      delete data_item_.table_;
      break;
    }
    case kByteItem: {
      delete data_item_.byte_item_;
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ITEM_NOT_SET;
}


void ContentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data_item();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContentItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ContentItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ContentItem.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.Table table = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Table::_InternalParse;
        object = msg->mutable_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ByteContentItem byte_item = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ByteContentItem::_InternalParse;
        object = msg->mutable_byte_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ContentItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ContentItem.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Table table = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ByteContentItem byte_item = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_byte_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ContentItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ContentItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ContentItem.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // .google.privacy.dlp.v2.Table table = 4;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::table(this), output);
  }

  // .google.privacy.dlp.v2.ByteContentItem byte_item = 5;
  if (has_byte_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::byte_item(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ContentItem)
}

::google::protobuf::uint8* ContentItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ContentItem.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // .google.privacy.dlp.v2.Table table = 4;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::table(this), target);
  }

  // .google.privacy.dlp.v2.ByteContentItem byte_item = 5;
  if (has_byte_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::byte_item(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ContentItem)
  return target;
}

size_t ContentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ContentItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_item_case()) {
    // string value = 3;
    case kValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
      break;
    }
    // .google.privacy.dlp.v2.Table table = 4;
    case kTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_item_.table_);
      break;
    }
    // .google.privacy.dlp.v2.ByteContentItem byte_item = 5;
    case kByteItem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_item_.byte_item_);
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentItem* source =
      ::google::protobuf::DynamicCastToGenerated<ContentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ContentItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ContentItem)
    MergeFrom(*source);
  }
}

void ContentItem::MergeFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_item_case()) {
    case kValue: {
      set_value(from.value());
      break;
    }
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2::Table::MergeFrom(from.table());
      break;
    }
    case kByteItem: {
      mutable_byte_item()->::google::privacy::dlp::v2::ByteContentItem::MergeFrom(from.byte_item());
      break;
    }
    case DATA_ITEM_NOT_SET: {
      break;
    }
  }
}

void ContentItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentItem::CopyFrom(const ContentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentItem::IsInitialized() const {
  return true;
}

void ContentItem::Swap(ContentItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentItem::InternalSwap(ContentItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_item_, other->data_item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ContentItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Table_Row::InitAsDefaultInstance() {
}
class Table_Row::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table_Row::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table_Row::Table_Row()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Table.Row)
}
Table_Row::Table_Row(const Table_Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Table.Row)
}

void Table_Row::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Table_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

Table_Row::~Table_Row() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Table.Row)
  SharedDtor();
}

void Table_Row::SharedDtor() {
}

void Table_Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Table_Row& Table_Row::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Table_Row_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Table_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Table_Row::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Table_Row*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.Value values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
          object = msg->add_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Table_Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Table.Row)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.Value values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Table.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Table.Row)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Table_Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Table.Row)
}

::google::protobuf::uint8* Table_Row::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Table.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Table.Row)
  return target;
}

size_t Table_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Table.Row)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table_Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Table.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Table_Row* source =
      ::google::protobuf::DynamicCastToGenerated<Table_Row>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Table.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Table.Row)
    MergeFrom(*source);
  }
}

void Table_Row::MergeFrom(const Table_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Table.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Table_Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Table.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_Row::CopyFrom(const Table_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Table.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_Row::IsInitialized() const {
  return true;
}

void Table_Row::Swap(Table_Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table_Row::InternalSwap(Table_Row* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
}

::google::protobuf::Metadata Table_Row::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Table::InitAsDefaultInstance() {
}
class Table::HasBitSetters {
 public:
};

void Table::clear_headers() {
  headers_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kHeadersFieldNumber;
const int Table::kRowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      headers_(from.headers_),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Table)
}

void Table::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Table)
  SharedDtor();
}

void Table::SharedDtor() {
}

void Table::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Table& Table::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  rows_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Table::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Table*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.FieldId headers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
          object = msg->add_headers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.privacy.dlp.v2.Table.Row rows = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Table_Row::_InternalParse;
          object = msg->add_rows();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Table)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.FieldId headers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Table.Row rows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Table)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->headers(static_cast<int>(i)),
      output);
  }

  // repeated .google.privacy.dlp.v2.Table.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->rows(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId headers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->headers(static_cast<int>(i)), target);
  }

  // repeated .google.privacy.dlp.v2.Table.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rows_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->rows(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Table)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId headers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.Table.Row rows = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rows_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rows(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::DynamicCastToGenerated<Table>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  rows_.MergeFrom(from.rows_);
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  CastToBase(&rows_)->InternalSwap(CastToBase(&other->rows_));
}

::google::protobuf::Metadata Table::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectResult::InitAsDefaultInstance() {
}
class InspectResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectResult::kFindingsFieldNumber;
const int InspectResult::kFindingsTruncatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectResult::InspectResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectResult)
}
InspectResult::InspectResult(const InspectResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      findings_(from.findings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  findings_truncated_ = from.findings_truncated_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectResult)
}

void InspectResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  findings_truncated_ = false;
}

InspectResult::~InspectResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectResult)
  SharedDtor();
}

void InspectResult::SharedDtor() {
}

void InspectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectResult& InspectResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  findings_.Clear();
  findings_truncated_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.Finding findings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Finding::_InternalParse;
          object = msg->add_findings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bool findings_truncated = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_findings_truncated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.Finding findings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_findings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool findings_truncated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &findings_truncated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Finding findings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->findings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->findings(static_cast<int>(i)),
      output);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->findings_truncated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectResult)
}

::google::protobuf::uint8* InspectResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Finding findings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->findings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->findings(static_cast<int>(i)), target);
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->findings_truncated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectResult)
  return target;
}

size_t InspectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Finding findings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->findings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->findings(static_cast<int>(i)));
    }
  }

  // bool findings_truncated = 2;
  if (this->findings_truncated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectResult* source =
      ::google::protobuf::DynamicCastToGenerated<InspectResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectResult)
    MergeFrom(*source);
  }
}

void InspectResult::MergeFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  findings_.MergeFrom(from.findings_);
  if (from.findings_truncated() != 0) {
    set_findings_truncated(from.findings_truncated());
  }
}

void InspectResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectResult::CopyFrom(const InspectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectResult::IsInitialized() const {
  return true;
}

void InspectResult::Swap(InspectResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectResult::InternalSwap(InspectResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&findings_)->InternalSwap(CastToBase(&other->findings_));
  swap(findings_truncated_, other->findings_truncated_);
}

::google::protobuf::Metadata InspectResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

Finding_LabelsEntry_DoNotUse::Finding_LabelsEntry_DoNotUse() {}
Finding_LabelsEntry_DoNotUse::Finding_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Finding_LabelsEntry_DoNotUse::MergeFrom(const Finding_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Finding_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[12];
}
void Finding_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Finding_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Finding_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.privacy.dlp.v2.Finding.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.privacy.dlp.v2.Finding.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Finding::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Finding_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2::_Finding_default_instance_._instance.get_mutable()->location_ = const_cast< ::google::privacy::dlp::v2::Location*>(
      ::google::privacy::dlp::v2::Location::internal_default_instance());
  ::google::privacy::dlp::v2::_Finding_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_Finding_default_instance_._instance.get_mutable()->quote_info_ = const_cast< ::google::privacy::dlp::v2::QuoteInfo*>(
      ::google::privacy::dlp::v2::QuoteInfo::internal_default_instance());
  ::google::privacy::dlp::v2::_Finding_default_instance_._instance.get_mutable()->job_create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Finding::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InfoType& info_type(const Finding* msg);
  static const ::google::privacy::dlp::v2::Location& location(const Finding* msg);
  static const ::google::protobuf::Timestamp& create_time(const Finding* msg);
  static const ::google::privacy::dlp::v2::QuoteInfo& quote_info(const Finding* msg);
  static const ::google::protobuf::Timestamp& job_create_time(const Finding* msg);
};

const ::google::privacy::dlp::v2::InfoType&
Finding::HasBitSetters::info_type(const Finding* msg) {
  return *msg->info_type_;
}
const ::google::privacy::dlp::v2::Location&
Finding::HasBitSetters::location(const Finding* msg) {
  return *msg->location_;
}
const ::google::protobuf::Timestamp&
Finding::HasBitSetters::create_time(const Finding* msg) {
  return *msg->create_time_;
}
const ::google::privacy::dlp::v2::QuoteInfo&
Finding::HasBitSetters::quote_info(const Finding* msg) {
  return *msg->quote_info_;
}
const ::google::protobuf::Timestamp&
Finding::HasBitSetters::job_create_time(const Finding* msg) {
  return *msg->job_create_time_;
}
void Finding::clear_info_type() {
  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
}
void Finding::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void Finding::clear_job_create_time() {
  if (GetArenaNoVirtual() == nullptr && job_create_time_ != nullptr) {
    delete job_create_time_;
  }
  job_create_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Finding::kNameFieldNumber;
const int Finding::kQuoteFieldNumber;
const int Finding::kInfoTypeFieldNumber;
const int Finding::kLikelihoodFieldNumber;
const int Finding::kLocationFieldNumber;
const int Finding::kCreateTimeFieldNumber;
const int Finding::kQuoteInfoFieldNumber;
const int Finding::kResourceNameFieldNumber;
const int Finding::kTriggerNameFieldNumber;
const int Finding::kLabelsFieldNumber;
const int Finding::kJobCreateTimeFieldNumber;
const int Finding::kJobNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Finding::Finding()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Finding)
}
Finding::Finding(const Finding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quote().size() > 0) {
    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resource_name().size() > 0) {
    resource_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_name_);
  }
  trigger_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trigger_name().size() > 0) {
    trigger_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_name_);
  }
  job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.job_name().size() > 0) {
    job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_name_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2::InfoType(*from.info_type_);
  } else {
    info_type_ = nullptr;
  }
  if (from.has_location()) {
    location_ = new ::google::privacy::dlp::v2::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from.has_quote_info()) {
    quote_info_ = new ::google::privacy::dlp::v2::QuoteInfo(*from.quote_info_);
  } else {
    quote_info_ = nullptr;
  }
  if (from.has_job_create_time()) {
    job_create_time_ = new ::google::protobuf::Timestamp(*from.job_create_time_);
  } else {
    job_create_time_ = nullptr;
  }
  likelihood_ = from.likelihood_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Finding)
}

void Finding::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Finding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  quote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&likelihood_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(likelihood_));
}

Finding::~Finding() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Finding)
  SharedDtor();
}

void Finding::SharedDtor() {
  quote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_type_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete quote_info_;
  if (this != internal_default_instance()) delete job_create_time_;
}

void Finding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Finding& Finding::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Finding_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Finding::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  quote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quote_info_ != nullptr) {
    delete quote_info_;
  }
  quote_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && job_create_time_ != nullptr) {
    delete job_create_time_;
  }
  job_create_time_ = nullptr;
  likelihood_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Finding::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Finding*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string quote = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Finding.quote");
        object = msg->mutable_quote();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InfoType info_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Likelihood likelihood = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_likelihood(static_cast<::google::privacy::dlp::v2::Likelihood>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.Location location = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Location::_InternalParse;
        object = msg->mutable_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.QuoteInfo quote_info = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::QuoteInfo::_InternalParse;
        object = msg->mutable_quote_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string resource_name = 8 [(.google.api.resource_reference) = {
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Finding.resource_name");
        object = msg->mutable_resource_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trigger_name = 9 [(.google.api.resource_reference) = {
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Finding.trigger_name");
        object = msg->mutable_trigger_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> labels = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp job_create_time = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_job_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string job_name = 13 [(.google.api.resource_reference) = {
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Finding.job_name");
        object = msg->mutable_job_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Finding.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Finding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Finding)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string quote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->quote().data(), static_cast<int>(this->quote().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Finding.quote"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InfoType info_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Likelihood likelihood = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_likelihood(static_cast< ::google::privacy::dlp::v2::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Location location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.QuoteInfo quote_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quote_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resource_name = 8 [(.google.api.resource_reference) = {
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource_name().data(), static_cast<int>(this->resource_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Finding.resource_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trigger_name = 9 [(.google.api.resource_reference) = {
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trigger_name().data(), static_cast<int>(this->trigger_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Finding.trigger_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          Finding_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Finding_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Finding.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Finding.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp job_create_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_name = 13 [(.google.api.resource_reference) = {
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_name().data(), static_cast<int>(this->job_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Finding.job_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Finding.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Finding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Finding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Finding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), static_cast<int>(this->quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.quote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->quote(), output);
  }

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::info_type(this), output);
  }

  // .google.privacy.dlp.v2.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->likelihood(), output);
  }

  // .google.privacy.dlp.v2.Location location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::location(this), output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::create_time(this), output);
  }

  // .google.privacy.dlp.v2.QuoteInfo quote_info = 7;
  if (this->has_quote_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::quote_info(this), output);
  }

  // string resource_name = 8 [(.google.api.resource_reference) = {
  if (this->resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_name().data(), static_cast<int>(this->resource_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.resource_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->resource_name(), output);
  }

  // string trigger_name = 9 [(.google.api.resource_reference) = {
  if (this->trigger_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_name().data(), static_cast<int>(this->trigger_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.trigger_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->trigger_name(), output);
  }

  // map<string, string> labels = 10;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.Finding.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.Finding.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Finding_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(10, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Finding_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(10, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Timestamp job_create_time = 11;
  if (this->has_job_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::job_create_time(this), output);
  }

  // string job_name = 13 [(.google.api.resource_reference) = {
  if (this->job_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), static_cast<int>(this->job_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->job_name(), output);
  }

  // string name = 14;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Finding)
}

::google::protobuf::uint8* Finding::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Finding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string quote = 1;
  if (this->quote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->quote().data(), static_cast<int>(this->quote().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.quote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quote(), target);
  }

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::info_type(this), target);
  }

  // .google.privacy.dlp.v2.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->likelihood(), target);
  }

  // .google.privacy.dlp.v2.Location location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::location(this), target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::create_time(this), target);
  }

  // .google.privacy.dlp.v2.QuoteInfo quote_info = 7;
  if (this->has_quote_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::quote_info(this), target);
  }

  // string resource_name = 8 [(.google.api.resource_reference) = {
  if (this->resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_name().data(), static_cast<int>(this->resource_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.resource_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->resource_name(), target);
  }

  // string trigger_name = 9 [(.google.api.resource_reference) = {
  if (this->trigger_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_name().data(), static_cast<int>(this->trigger_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.trigger_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->trigger_name(), target);
  }

  // map<string, string> labels = 10;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.Finding.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.Finding.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Finding_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Finding_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(10, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Timestamp job_create_time = 11;
  if (this->has_job_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::job_create_time(this), target);
  }

  // string job_name = 13 [(.google.api.resource_reference) = {
  if (this->job_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_name().data(), static_cast<int>(this->job_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->job_name(), target);
  }

  // string name = 14;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Finding.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Finding)
  return target;
}

size_t Finding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Finding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<Finding_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string quote = 1;
  if (this->quote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->quote());
  }

  // string resource_name = 8 [(.google.api.resource_reference) = {
  if (this->resource_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_name());
  }

  // string trigger_name = 9 [(.google.api.resource_reference) = {
  if (this->trigger_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trigger_name());
  }

  // string job_name = 13 [(.google.api.resource_reference) = {
  if (this->job_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_name());
  }

  // string name = 14;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_type_);
  }

  // .google.privacy.dlp.v2.Location location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.privacy.dlp.v2.QuoteInfo quote_info = 7;
  if (this->has_quote_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quote_info_);
  }

  // .google.protobuf.Timestamp job_create_time = 11;
  if (this->has_job_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_create_time_);
  }

  // .google.privacy.dlp.v2.Likelihood likelihood = 3;
  if (this->likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->likelihood());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Finding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  const Finding* source =
      ::google::protobuf::DynamicCastToGenerated<Finding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Finding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Finding)
    MergeFrom(*source);
  }
}

void Finding::MergeFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Finding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.quote().size() > 0) {

    quote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quote_);
  }
  if (from.resource_name().size() > 0) {

    resource_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_name_);
  }
  if (from.trigger_name().size() > 0) {

    trigger_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_name_);
  }
  if (from.job_name().size() > 0) {

    job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_name_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
  }
  if (from.has_location()) {
    mutable_location()->::google::privacy::dlp::v2::Location::MergeFrom(from.location());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_quote_info()) {
    mutable_quote_info()->::google::privacy::dlp::v2::QuoteInfo::MergeFrom(from.quote_info());
  }
  if (from.has_job_create_time()) {
    mutable_job_create_time()->::google::protobuf::Timestamp::MergeFrom(from.job_create_time());
  }
  if (from.likelihood() != 0) {
    set_likelihood(from.likelihood());
  }
}

void Finding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finding::CopyFrom(const Finding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Finding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finding::IsInitialized() const {
  return true;
}

void Finding::Swap(Finding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Finding::InternalSwap(Finding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  quote_.Swap(&other->quote_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resource_name_.Swap(&other->resource_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_name_.Swap(&other->trigger_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  job_name_.Swap(&other->job_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_type_, other->info_type_);
  swap(location_, other->location_);
  swap(create_time_, other->create_time_);
  swap(quote_info_, other->quote_info_);
  swap(job_create_time_, other->job_create_time_);
  swap(likelihood_, other->likelihood_);
}

::google::protobuf::Metadata Finding::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Location_default_instance_._instance.get_mutable()->byte_range_ = const_cast< ::google::privacy::dlp::v2::Range*>(
      ::google::privacy::dlp::v2::Range::internal_default_instance());
  ::google::privacy::dlp::v2::_Location_default_instance_._instance.get_mutable()->codepoint_range_ = const_cast< ::google::privacy::dlp::v2::Range*>(
      ::google::privacy::dlp::v2::Range::internal_default_instance());
  ::google::privacy::dlp::v2::_Location_default_instance_._instance.get_mutable()->container_ = const_cast< ::google::privacy::dlp::v2::Container*>(
      ::google::privacy::dlp::v2::Container::internal_default_instance());
}
class Location::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Range& byte_range(const Location* msg);
  static const ::google::privacy::dlp::v2::Range& codepoint_range(const Location* msg);
  static const ::google::privacy::dlp::v2::Container& container(const Location* msg);
};

const ::google::privacy::dlp::v2::Range&
Location::HasBitSetters::byte_range(const Location* msg) {
  return *msg->byte_range_;
}
const ::google::privacy::dlp::v2::Range&
Location::HasBitSetters::codepoint_range(const Location* msg) {
  return *msg->codepoint_range_;
}
const ::google::privacy::dlp::v2::Container&
Location::HasBitSetters::container(const Location* msg) {
  return *msg->container_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kByteRangeFieldNumber;
const int Location::kCodepointRangeFieldNumber;
const int Location::kContentLocationsFieldNumber;
const int Location::kContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      content_locations_(from.content_locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_byte_range()) {
    byte_range_ = new ::google::privacy::dlp::v2::Range(*from.byte_range_);
  } else {
    byte_range_ = nullptr;
  }
  if (from.has_codepoint_range()) {
    codepoint_range_ = new ::google::privacy::dlp::v2::Range(*from.codepoint_range_);
  } else {
    codepoint_range_ = nullptr;
  }
  if (from.has_container()) {
    container_ = new ::google::privacy::dlp::v2::Container(*from.container_);
  } else {
    container_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Location)
}

void Location::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Location_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&byte_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&container_) -
      reinterpret_cast<char*>(&byte_range_)) + sizeof(container_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != internal_default_instance()) delete byte_range_;
  if (this != internal_default_instance()) delete codepoint_range_;
  if (this != internal_default_instance()) delete container_;
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Location_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_locations_.Clear();
  if (GetArenaNoVirtual() == nullptr && byte_range_ != nullptr) {
    delete byte_range_;
  }
  byte_range_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && codepoint_range_ != nullptr) {
    delete codepoint_range_;
  }
  codepoint_range_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && container_ != nullptr) {
    delete container_;
  }
  container_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Location::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Location*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Range byte_range = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Range::_InternalParse;
        object = msg->mutable_byte_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Range codepoint_range = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Range::_InternalParse;
        object = msg->mutable_codepoint_range();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.ContentLocation content_locations = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::ContentLocation::_InternalParse;
          object = msg->add_content_locations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.Container container = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Container::_InternalParse;
        object = msg->mutable_container();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Location)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Range byte_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_byte_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Range codepoint_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_codepoint_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.ContentLocation content_locations = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_content_locations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Container container = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Range byte_range = 1;
  if (this->has_byte_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::byte_range(this), output);
  }

  // .google.privacy.dlp.v2.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::codepoint_range(this), output);
  }

  // repeated .google.privacy.dlp.v2.ContentLocation content_locations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_locations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->content_locations(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.Container container = 8;
  if (this->has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::container(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Range byte_range = 1;
  if (this->has_byte_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::byte_range(this), target);
  }

  // .google.privacy.dlp.v2.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::codepoint_range(this), target);
  }

  // repeated .google.privacy.dlp.v2.ContentLocation content_locations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_locations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->content_locations(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.Container container = 8;
  if (this->has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::container(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.ContentLocation content_locations = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->content_locations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content_locations(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.Range byte_range = 1;
  if (this->has_byte_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *byte_range_);
  }

  // .google.privacy.dlp.v2.Range codepoint_range = 2;
  if (this->has_codepoint_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *codepoint_range_);
  }

  // .google.privacy.dlp.v2.Container container = 8;
  if (this->has_container()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *container_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_locations_.MergeFrom(from.content_locations_);
  if (from.has_byte_range()) {
    mutable_byte_range()->::google::privacy::dlp::v2::Range::MergeFrom(from.byte_range());
  }
  if (from.has_codepoint_range()) {
    mutable_codepoint_range()->::google::privacy::dlp::v2::Range::MergeFrom(from.codepoint_range());
  }
  if (from.has_container()) {
    mutable_container()->::google::privacy::dlp::v2::Container::MergeFrom(from.container());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&content_locations_)->InternalSwap(CastToBase(&other->content_locations_));
  swap(byte_range_, other->byte_range_);
  swap(codepoint_range_, other->codepoint_range_);
  swap(container_, other->container_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ContentLocation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_ContentLocation_default_instance_.record_location_ = const_cast< ::google::privacy::dlp::v2::RecordLocation*>(
      ::google::privacy::dlp::v2::RecordLocation::internal_default_instance());
  ::google::privacy::dlp::v2::_ContentLocation_default_instance_.image_location_ = const_cast< ::google::privacy::dlp::v2::ImageLocation*>(
      ::google::privacy::dlp::v2::ImageLocation::internal_default_instance());
  ::google::privacy::dlp::v2::_ContentLocation_default_instance_.document_location_ = const_cast< ::google::privacy::dlp::v2::DocumentLocation*>(
      ::google::privacy::dlp::v2::DocumentLocation::internal_default_instance());
  ::google::privacy::dlp::v2::_ContentLocation_default_instance_.metadata_location_ = const_cast< ::google::privacy::dlp::v2::MetadataLocation*>(
      ::google::privacy::dlp::v2::MetadataLocation::internal_default_instance());
  ::google::privacy::dlp::v2::_ContentLocation_default_instance_._instance.get_mutable()->container_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class ContentLocation::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::RecordLocation& record_location(const ContentLocation* msg);
  static const ::google::privacy::dlp::v2::ImageLocation& image_location(const ContentLocation* msg);
  static const ::google::privacy::dlp::v2::DocumentLocation& document_location(const ContentLocation* msg);
  static const ::google::privacy::dlp::v2::MetadataLocation& metadata_location(const ContentLocation* msg);
  static const ::google::protobuf::Timestamp& container_timestamp(const ContentLocation* msg);
};

const ::google::privacy::dlp::v2::RecordLocation&
ContentLocation::HasBitSetters::record_location(const ContentLocation* msg) {
  return *msg->location_.record_location_;
}
const ::google::privacy::dlp::v2::ImageLocation&
ContentLocation::HasBitSetters::image_location(const ContentLocation* msg) {
  return *msg->location_.image_location_;
}
const ::google::privacy::dlp::v2::DocumentLocation&
ContentLocation::HasBitSetters::document_location(const ContentLocation* msg) {
  return *msg->location_.document_location_;
}
const ::google::privacy::dlp::v2::MetadataLocation&
ContentLocation::HasBitSetters::metadata_location(const ContentLocation* msg) {
  return *msg->location_.metadata_location_;
}
const ::google::protobuf::Timestamp&
ContentLocation::HasBitSetters::container_timestamp(const ContentLocation* msg) {
  return *msg->container_timestamp_;
}
void ContentLocation::set_allocated_record_location(::google::privacy::dlp::v2::RecordLocation* record_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_location();
  if (record_location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record_location, submessage_arena);
    }
    set_has_record_location();
    location_.record_location_ = record_location;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentLocation.record_location)
}
void ContentLocation::set_allocated_image_location(::google::privacy::dlp::v2::ImageLocation* image_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_location();
  if (image_location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_location, submessage_arena);
    }
    set_has_image_location();
    location_.image_location_ = image_location;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentLocation.image_location)
}
void ContentLocation::set_allocated_document_location(::google::privacy::dlp::v2::DocumentLocation* document_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_location();
  if (document_location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      document_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, document_location, submessage_arena);
    }
    set_has_document_location();
    location_.document_location_ = document_location;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentLocation.document_location)
}
void ContentLocation::set_allocated_metadata_location(::google::privacy::dlp::v2::MetadataLocation* metadata_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_location();
  if (metadata_location) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata_location, submessage_arena);
    }
    set_has_metadata_location();
    location_.metadata_location_ = metadata_location;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.ContentLocation.metadata_location)
}
void ContentLocation::clear_container_timestamp() {
  if (GetArenaNoVirtual() == nullptr && container_timestamp_ != nullptr) {
    delete container_timestamp_;
  }
  container_timestamp_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentLocation::kContainerNameFieldNumber;
const int ContentLocation::kRecordLocationFieldNumber;
const int ContentLocation::kImageLocationFieldNumber;
const int ContentLocation::kDocumentLocationFieldNumber;
const int ContentLocation::kMetadataLocationFieldNumber;
const int ContentLocation::kContainerTimestampFieldNumber;
const int ContentLocation::kContainerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentLocation::ContentLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ContentLocation)
}
ContentLocation::ContentLocation(const ContentLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_name().size() > 0) {
    container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_name_);
  }
  container_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.container_version().size() > 0) {
    container_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_version_);
  }
  if (from.has_container_timestamp()) {
    container_timestamp_ = new ::google::protobuf::Timestamp(*from.container_timestamp_);
  } else {
    container_timestamp_ = nullptr;
  }
  clear_has_location();
  switch (from.location_case()) {
    case kRecordLocation: {
      mutable_record_location()->::google::privacy::dlp::v2::RecordLocation::MergeFrom(from.record_location());
      break;
    }
    case kImageLocation: {
      mutable_image_location()->::google::privacy::dlp::v2::ImageLocation::MergeFrom(from.image_location());
      break;
    }
    case kDocumentLocation: {
      mutable_document_location()->::google::privacy::dlp::v2::DocumentLocation::MergeFrom(from.document_location());
      break;
    }
    case kMetadataLocation: {
      mutable_metadata_location()->::google::privacy::dlp::v2::MetadataLocation::MergeFrom(from.metadata_location());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ContentLocation)
}

void ContentLocation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  container_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_timestamp_ = nullptr;
  clear_has_location();
}

ContentLocation::~ContentLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ContentLocation)
  SharedDtor();
}

void ContentLocation::SharedDtor() {
  container_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete container_timestamp_;
  if (has_location()) {
    clear_location();
  }
}

void ContentLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentLocation& ContentLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ContentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ContentLocation::clear_location() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.ContentLocation)
  switch (location_case()) {
    case kRecordLocation: {
      delete location_.record_location_;
      break;
    }
    case kImageLocation: {
      delete location_.image_location_;
      break;
    }
    case kDocumentLocation: {
      delete location_.document_location_;
      break;
    }
    case kMetadataLocation: {
      delete location_.metadata_location_;
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCATION_NOT_SET;
}


void ContentLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ContentLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && container_timestamp_ != nullptr) {
    delete container_timestamp_;
  }
  container_timestamp_ = nullptr;
  clear_location();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContentLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ContentLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string container_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ContentLocation.container_name");
        object = msg->mutable_container_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.RecordLocation record_location = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordLocation::_InternalParse;
        object = msg->mutable_record_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ImageLocation image_location = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ImageLocation::_InternalParse;
        object = msg->mutable_image_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.DocumentLocation document_location = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DocumentLocation::_InternalParse;
        object = msg->mutable_document_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp container_timestamp = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_container_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string container_version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ContentLocation.container_version");
        object = msg->mutable_container_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.MetadataLocation metadata_location = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::MetadataLocation::_InternalParse;
        object = msg->mutable_metadata_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContentLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ContentLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string container_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_name().data(), static_cast<int>(this->container_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ContentLocation.container_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RecordLocation record_location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ImageLocation image_location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DocumentLocation document_location = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_document_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp container_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_container_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string container_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->container_version().data(), static_cast<int>(this->container_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ContentLocation.container_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.MetadataLocation metadata_location = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ContentLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ContentLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContentLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ContentLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_name = 1;
  if (this->container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_name().data(), static_cast<int>(this->container_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ContentLocation.container_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->container_name(), output);
  }

  // .google.privacy.dlp.v2.RecordLocation record_location = 2;
  if (has_record_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::record_location(this), output);
  }

  // .google.privacy.dlp.v2.ImageLocation image_location = 3;
  if (has_image_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::image_location(this), output);
  }

  // .google.privacy.dlp.v2.DocumentLocation document_location = 5;
  if (has_document_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::document_location(this), output);
  }

  // .google.protobuf.Timestamp container_timestamp = 6;
  if (this->has_container_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::container_timestamp(this), output);
  }

  // string container_version = 7;
  if (this->container_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_version().data(), static_cast<int>(this->container_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ContentLocation.container_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->container_version(), output);
  }

  // .google.privacy.dlp.v2.MetadataLocation metadata_location = 8;
  if (has_metadata_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::metadata_location(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ContentLocation)
}

::google::protobuf::uint8* ContentLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ContentLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string container_name = 1;
  if (this->container_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_name().data(), static_cast<int>(this->container_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ContentLocation.container_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->container_name(), target);
  }

  // .google.privacy.dlp.v2.RecordLocation record_location = 2;
  if (has_record_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::record_location(this), target);
  }

  // .google.privacy.dlp.v2.ImageLocation image_location = 3;
  if (has_image_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::image_location(this), target);
  }

  // .google.privacy.dlp.v2.DocumentLocation document_location = 5;
  if (has_document_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::document_location(this), target);
  }

  // .google.protobuf.Timestamp container_timestamp = 6;
  if (this->has_container_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::container_timestamp(this), target);
  }

  // string container_version = 7;
  if (this->container_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->container_version().data(), static_cast<int>(this->container_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ContentLocation.container_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->container_version(), target);
  }

  // .google.privacy.dlp.v2.MetadataLocation metadata_location = 8;
  if (has_metadata_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::metadata_location(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ContentLocation)
  return target;
}

size_t ContentLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ContentLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string container_name = 1;
  if (this->container_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_name());
  }

  // string container_version = 7;
  if (this->container_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->container_version());
  }

  // .google.protobuf.Timestamp container_timestamp = 6;
  if (this->has_container_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *container_timestamp_);
  }

  switch (location_case()) {
    // .google.privacy.dlp.v2.RecordLocation record_location = 2;
    case kRecordLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_.record_location_);
      break;
    }
    // .google.privacy.dlp.v2.ImageLocation image_location = 3;
    case kImageLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_.image_location_);
      break;
    }
    // .google.privacy.dlp.v2.DocumentLocation document_location = 5;
    case kDocumentLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_.document_location_);
      break;
    }
    // .google.privacy.dlp.v2.MetadataLocation metadata_location = 8;
    case kMetadataLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_.metadata_location_);
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ContentLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentLocation* source =
      ::google::protobuf::DynamicCastToGenerated<ContentLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ContentLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ContentLocation)
    MergeFrom(*source);
  }
}

void ContentLocation::MergeFrom(const ContentLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ContentLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.container_name().size() > 0) {

    container_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_name_);
  }
  if (from.container_version().size() > 0) {

    container_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.container_version_);
  }
  if (from.has_container_timestamp()) {
    mutable_container_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.container_timestamp());
  }
  switch (from.location_case()) {
    case kRecordLocation: {
      mutable_record_location()->::google::privacy::dlp::v2::RecordLocation::MergeFrom(from.record_location());
      break;
    }
    case kImageLocation: {
      mutable_image_location()->::google::privacy::dlp::v2::ImageLocation::MergeFrom(from.image_location());
      break;
    }
    case kDocumentLocation: {
      mutable_document_location()->::google::privacy::dlp::v2::DocumentLocation::MergeFrom(from.document_location());
      break;
    }
    case kMetadataLocation: {
      mutable_metadata_location()->::google::privacy::dlp::v2::MetadataLocation::MergeFrom(from.metadata_location());
      break;
    }
    case LOCATION_NOT_SET: {
      break;
    }
  }
}

void ContentLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ContentLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentLocation::CopyFrom(const ContentLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ContentLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentLocation::IsInitialized() const {
  return true;
}

void ContentLocation::Swap(ContentLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentLocation::InternalSwap(ContentLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  container_name_.Swap(&other->container_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  container_version_.Swap(&other->container_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(container_timestamp_, other->container_timestamp_);
  swap(location_, other->location_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ContentLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MetadataLocation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_MetadataLocation_default_instance_.storage_label_ = const_cast< ::google::privacy::dlp::v2::StorageMetadataLabel*>(
      ::google::privacy::dlp::v2::StorageMetadataLabel::internal_default_instance());
}
class MetadataLocation::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::StorageMetadataLabel& storage_label(const MetadataLocation* msg);
};

const ::google::privacy::dlp::v2::StorageMetadataLabel&
MetadataLocation::HasBitSetters::storage_label(const MetadataLocation* msg) {
  return *msg->label_.storage_label_;
}
void MetadataLocation::set_allocated_storage_label(::google::privacy::dlp::v2::StorageMetadataLabel* storage_label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_label();
  if (storage_label) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, storage_label, submessage_arena);
    }
    set_has_storage_label();
    label_.storage_label_ = storage_label;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.MetadataLocation.storage_label)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetadataLocation::kTypeFieldNumber;
const int MetadataLocation::kStorageLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetadataLocation::MetadataLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.MetadataLocation)
}
MetadataLocation::MetadataLocation(const MetadataLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_label();
  switch (from.label_case()) {
    case kStorageLabel: {
      mutable_storage_label()->::google::privacy::dlp::v2::StorageMetadataLabel::MergeFrom(from.storage_label());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.MetadataLocation)
}

void MetadataLocation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  type_ = 0;
  clear_has_label();
}

MetadataLocation::~MetadataLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.MetadataLocation)
  SharedDtor();
}

void MetadataLocation::SharedDtor() {
  if (has_label()) {
    clear_label();
  }
}

void MetadataLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetadataLocation& MetadataLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MetadataLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void MetadataLocation::clear_label() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.MetadataLocation)
  switch (label_case()) {
    case kStorageLabel: {
      delete label_.storage_label_;
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LABEL_NOT_SET;
}


void MetadataLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.MetadataLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_label();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetadataLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MetadataLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.MetadataType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::google::privacy::dlp::v2::MetadataType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.StorageMetadataLabel storage_label = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StorageMetadataLabel::_InternalParse;
        object = msg->mutable_storage_label();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetadataLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.MetadataLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.MetadataType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::privacy::dlp::v2::MetadataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StorageMetadataLabel storage_label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.MetadataLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.MetadataLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetadataLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.MetadataLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.MetadataType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .google.privacy.dlp.v2.StorageMetadataLabel storage_label = 3;
  if (has_storage_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::storage_label(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.MetadataLocation)
}

::google::protobuf::uint8* MetadataLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.MetadataLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.MetadataType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .google.privacy.dlp.v2.StorageMetadataLabel storage_label = 3;
  if (has_storage_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::storage_label(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.MetadataLocation)
  return target;
}

size_t MetadataLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.MetadataLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.MetadataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (label_case()) {
    // .google.privacy.dlp.v2.StorageMetadataLabel storage_label = 3;
    case kStorageLabel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *label_.storage_label_);
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.MetadataLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MetadataLocation* source =
      ::google::protobuf::DynamicCastToGenerated<MetadataLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.MetadataLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.MetadataLocation)
    MergeFrom(*source);
  }
}

void MetadataLocation::MergeFrom(const MetadataLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.MetadataLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.label_case()) {
    case kStorageLabel: {
      mutable_storage_label()->::google::privacy::dlp::v2::StorageMetadataLabel::MergeFrom(from.storage_label());
      break;
    }
    case LABEL_NOT_SET: {
      break;
    }
  }
}

void MetadataLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.MetadataLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataLocation::CopyFrom(const MetadataLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.MetadataLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataLocation::IsInitialized() const {
  return true;
}

void MetadataLocation::Swap(MetadataLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetadataLocation::InternalSwap(MetadataLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(label_, other->label_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata MetadataLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StorageMetadataLabel::InitAsDefaultInstance() {
}
class StorageMetadataLabel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageMetadataLabel::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageMetadataLabel::StorageMetadataLabel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StorageMetadataLabel)
}
StorageMetadataLabel::StorageMetadataLabel(const StorageMetadataLabel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StorageMetadataLabel)
}

void StorageMetadataLabel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StorageMetadataLabel::~StorageMetadataLabel() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StorageMetadataLabel)
  SharedDtor();
}

void StorageMetadataLabel::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StorageMetadataLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageMetadataLabel& StorageMetadataLabel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StorageMetadataLabel_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void StorageMetadataLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StorageMetadataLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StorageMetadataLabel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StorageMetadataLabel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.StorageMetadataLabel.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StorageMetadataLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StorageMetadataLabel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.StorageMetadataLabel.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StorageMetadataLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StorageMetadataLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StorageMetadataLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StorageMetadataLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StorageMetadataLabel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StorageMetadataLabel)
}

::google::protobuf::uint8* StorageMetadataLabel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StorageMetadataLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StorageMetadataLabel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StorageMetadataLabel)
  return target;
}

size_t StorageMetadataLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StorageMetadataLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageMetadataLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StorageMetadataLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageMetadataLabel* source =
      ::google::protobuf::DynamicCastToGenerated<StorageMetadataLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StorageMetadataLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StorageMetadataLabel)
    MergeFrom(*source);
  }
}

void StorageMetadataLabel::MergeFrom(const StorageMetadataLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StorageMetadataLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void StorageMetadataLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StorageMetadataLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageMetadataLabel::CopyFrom(const StorageMetadataLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StorageMetadataLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageMetadataLabel::IsInitialized() const {
  return true;
}

void StorageMetadataLabel::Swap(StorageMetadataLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageMetadataLabel::InternalSwap(StorageMetadataLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StorageMetadataLabel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DocumentLocation::InitAsDefaultInstance() {
}
class DocumentLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentLocation::kFileOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentLocation::DocumentLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DocumentLocation)
}
DocumentLocation::DocumentLocation(const DocumentLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_offset_ = from.file_offset_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DocumentLocation)
}

void DocumentLocation::SharedCtor() {
  file_offset_ = PROTOBUF_LONGLONG(0);
}

DocumentLocation::~DocumentLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DocumentLocation)
  SharedDtor();
}

void DocumentLocation::SharedDtor() {
}

void DocumentLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DocumentLocation& DocumentLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DocumentLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DocumentLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DocumentLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DocumentLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DocumentLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 file_offset = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_file_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DocumentLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DocumentLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 file_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DocumentLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DocumentLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DocumentLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DocumentLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 file_offset = 1;
  if (this->file_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->file_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DocumentLocation)
}

::google::protobuf::uint8* DocumentLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DocumentLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 file_offset = 1;
  if (this->file_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->file_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DocumentLocation)
  return target;
}

size_t DocumentLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DocumentLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 file_offset = 1;
  if (this->file_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DocumentLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentLocation* source =
      ::google::protobuf::DynamicCastToGenerated<DocumentLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DocumentLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DocumentLocation)
    MergeFrom(*source);
  }
}

void DocumentLocation::MergeFrom(const DocumentLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DocumentLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_offset() != 0) {
    set_file_offset(from.file_offset());
  }
}

void DocumentLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DocumentLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentLocation::CopyFrom(const DocumentLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DocumentLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentLocation::IsInitialized() const {
  return true;
}

void DocumentLocation::Swap(DocumentLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentLocation::InternalSwap(DocumentLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(file_offset_, other->file_offset_);
}

::google::protobuf::Metadata DocumentLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordLocation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RecordLocation_default_instance_._instance.get_mutable()->record_key_ = const_cast< ::google::privacy::dlp::v2::RecordKey*>(
      ::google::privacy::dlp::v2::RecordKey::internal_default_instance());
  ::google::privacy::dlp::v2::_RecordLocation_default_instance_._instance.get_mutable()->field_id_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2::_RecordLocation_default_instance_._instance.get_mutable()->table_location_ = const_cast< ::google::privacy::dlp::v2::TableLocation*>(
      ::google::privacy::dlp::v2::TableLocation::internal_default_instance());
}
class RecordLocation::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::RecordKey& record_key(const RecordLocation* msg);
  static const ::google::privacy::dlp::v2::FieldId& field_id(const RecordLocation* msg);
  static const ::google::privacy::dlp::v2::TableLocation& table_location(const RecordLocation* msg);
};

const ::google::privacy::dlp::v2::RecordKey&
RecordLocation::HasBitSetters::record_key(const RecordLocation* msg) {
  return *msg->record_key_;
}
const ::google::privacy::dlp::v2::FieldId&
RecordLocation::HasBitSetters::field_id(const RecordLocation* msg) {
  return *msg->field_id_;
}
const ::google::privacy::dlp::v2::TableLocation&
RecordLocation::HasBitSetters::table_location(const RecordLocation* msg) {
  return *msg->table_location_;
}
void RecordLocation::clear_record_key() {
  if (GetArenaNoVirtual() == nullptr && record_key_ != nullptr) {
    delete record_key_;
  }
  record_key_ = nullptr;
}
void RecordLocation::clear_field_id() {
  if (GetArenaNoVirtual() == nullptr && field_id_ != nullptr) {
    delete field_id_;
  }
  field_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordLocation::kRecordKeyFieldNumber;
const int RecordLocation::kFieldIdFieldNumber;
const int RecordLocation::kTableLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordLocation::RecordLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordLocation)
}
RecordLocation::RecordLocation(const RecordLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_record_key()) {
    record_key_ = new ::google::privacy::dlp::v2::RecordKey(*from.record_key_);
  } else {
    record_key_ = nullptr;
  }
  if (from.has_field_id()) {
    field_id_ = new ::google::privacy::dlp::v2::FieldId(*from.field_id_);
  } else {
    field_id_ = nullptr;
  }
  if (from.has_table_location()) {
    table_location_ = new ::google::privacy::dlp::v2::TableLocation(*from.table_location_);
  } else {
    table_location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordLocation)
}

void RecordLocation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&record_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_location_) -
      reinterpret_cast<char*>(&record_key_)) + sizeof(table_location_));
}

RecordLocation::~RecordLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordLocation)
  SharedDtor();
}

void RecordLocation::SharedDtor() {
  if (this != internal_default_instance()) delete record_key_;
  if (this != internal_default_instance()) delete field_id_;
  if (this != internal_default_instance()) delete table_location_;
}

void RecordLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordLocation& RecordLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RecordLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && record_key_ != nullptr) {
    delete record_key_;
  }
  record_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && field_id_ != nullptr) {
    delete field_id_;
  }
  field_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && table_location_ != nullptr) {
    delete table_location_;
  }
  table_location_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.RecordKey record_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordKey::_InternalParse;
        object = msg->mutable_record_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.FieldId field_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.TableLocation table_location = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TableLocation::_InternalParse;
        object = msg->mutable_table_location();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.RecordKey record_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId field_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TableLocation table_location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordKey record_key = 1;
  if (this->has_record_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::record_key(this), output);
  }

  // .google.privacy.dlp.v2.FieldId field_id = 2;
  if (this->has_field_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::field_id(this), output);
  }

  // .google.privacy.dlp.v2.TableLocation table_location = 3;
  if (this->has_table_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::table_location(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordLocation)
}

::google::protobuf::uint8* RecordLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordKey record_key = 1;
  if (this->has_record_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::record_key(this), target);
  }

  // .google.privacy.dlp.v2.FieldId field_id = 2;
  if (this->has_field_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::field_id(this), target);
  }

  // .google.privacy.dlp.v2.TableLocation table_location = 3;
  if (this->has_table_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::table_location(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordLocation)
  return target;
}

size_t RecordLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordKey record_key = 1;
  if (this->has_record_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *record_key_);
  }

  // .google.privacy.dlp.v2.FieldId field_id = 2;
  if (this->has_field_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_id_);
  }

  // .google.privacy.dlp.v2.TableLocation table_location = 3;
  if (this->has_table_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_location_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordLocation* source =
      ::google::protobuf::DynamicCastToGenerated<RecordLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordLocation)
    MergeFrom(*source);
  }
}

void RecordLocation::MergeFrom(const RecordLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_record_key()) {
    mutable_record_key()->::google::privacy::dlp::v2::RecordKey::MergeFrom(from.record_key());
  }
  if (from.has_field_id()) {
    mutable_field_id()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field_id());
  }
  if (from.has_table_location()) {
    mutable_table_location()->::google::privacy::dlp::v2::TableLocation::MergeFrom(from.table_location());
  }
}

void RecordLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordLocation::CopyFrom(const RecordLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordLocation::IsInitialized() const {
  return true;
}

void RecordLocation::Swap(RecordLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordLocation::InternalSwap(RecordLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(record_key_, other->record_key_);
  swap(field_id_, other->field_id_);
  swap(table_location_, other->table_location_);
}

::google::protobuf::Metadata RecordLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TableLocation::InitAsDefaultInstance() {
}
class TableLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableLocation::kRowIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableLocation::TableLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TableLocation)
}
TableLocation::TableLocation(const TableLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_index_ = from.row_index_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TableLocation)
}

void TableLocation::SharedCtor() {
  row_index_ = PROTOBUF_LONGLONG(0);
}

TableLocation::~TableLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TableLocation)
  SharedDtor();
}

void TableLocation::SharedDtor() {
}

void TableLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableLocation& TableLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TableLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TableLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_index_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TableLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 row_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_row_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TableLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 row_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &row_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TableLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TableLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->row_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TableLocation)
}

::google::protobuf::uint8* TableLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TableLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->row_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TableLocation)
  return target;
}

size_t TableLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TableLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 row_index = 1;
  if (this->row_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->row_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TableLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const TableLocation* source =
      ::google::protobuf::DynamicCastToGenerated<TableLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TableLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TableLocation)
    MergeFrom(*source);
  }
}

void TableLocation::MergeFrom(const TableLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TableLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row_index() != 0) {
    set_row_index(from.row_index());
  }
}

void TableLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TableLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableLocation::CopyFrom(const TableLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TableLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableLocation::IsInitialized() const {
  return true;
}

void TableLocation::Swap(TableLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableLocation::InternalSwap(TableLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(row_index_, other->row_index_);
}

::google::protobuf::Metadata TableLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Container::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Container_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Container::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& update_time(const Container* msg);
};

const ::google::protobuf::Timestamp&
Container::HasBitSetters::update_time(const Container* msg) {
  return *msg->update_time_;
}
void Container::clear_update_time() {
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Container::kTypeFieldNumber;
const int Container::kProjectIdFieldNumber;
const int Container::kFullPathFieldNumber;
const int Container::kRootPathFieldNumber;
const int Container::kRelativePathFieldNumber;
const int Container::kUpdateTimeFieldNumber;
const int Container::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Container::Container()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Container)
}
Container::Container(const Container& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  full_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.full_path().size() > 0) {
    full_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_path_);
  }
  root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.root_path().size() > 0) {
    root_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_path_);
  }
  relative_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.relative_path().size() > 0) {
    relative_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_path_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Container)
}

void Container::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Container_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relative_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = nullptr;
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Container)
  SharedDtor();
}

void Container::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relative_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_time_;
}

void Container::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Container& Container::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Container_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Container::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  full_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relative_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Container::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Container*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Container.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string project_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Container.project_id");
        object = msg->mutable_project_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string full_path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Container.full_path");
        object = msg->mutable_full_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string root_path = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Container.root_path");
        object = msg->mutable_root_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string relative_path = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Container.relative_path");
        object = msg->mutable_relative_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp update_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_update_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string version = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Container.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Container)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Container.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Container.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string full_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_path().data(), static_cast<int>(this->full_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Container.full_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string root_path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->root_path().data(), static_cast<int>(this->root_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Container.root_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string relative_path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->relative_path().data(), static_cast<int>(this->relative_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Container.relative_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Container.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Container)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project_id(), output);
  }

  // string full_path = 3;
  if (this->full_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_path().data(), static_cast<int>(this->full_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.full_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->full_path(), output);
  }

  // string root_path = 4;
  if (this->root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), static_cast<int>(this->root_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.root_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->root_path(), output);
  }

  // string relative_path = 5;
  if (this->relative_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relative_path().data(), static_cast<int>(this->relative_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.relative_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->relative_path(), output);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::update_time(this), output);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Container)
}

::google::protobuf::uint8* Container::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Container)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project_id(), target);
  }

  // string full_path = 3;
  if (this->full_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_path().data(), static_cast<int>(this->full_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.full_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->full_path(), target);
  }

  // string root_path = 4;
  if (this->root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), static_cast<int>(this->root_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.root_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->root_path(), target);
  }

  // string relative_path = 5;
  if (this->relative_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relative_path().data(), static_cast<int>(this->relative_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.relative_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->relative_path(), target);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::update_time(this), target);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Container.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Container)
  return target;
}

size_t Container::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Container)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string full_path = 3;
  if (this->full_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_path());
  }

  // string root_path = 4;
  if (this->root_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->root_path());
  }

  // string relative_path = 5;
  if (this->relative_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relative_path());
  }

  // string version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Container)
  GOOGLE_DCHECK_NE(&from, this);
  const Container* source =
      ::google::protobuf::DynamicCastToGenerated<Container>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Container)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Container)
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Container)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.full_path().size() > 0) {

    full_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_path_);
  }
  if (from.root_path().size() > 0) {

    root_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_path_);
  }
  if (from.relative_path().size() > 0) {

    relative_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_path_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Container)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  return true;
}

void Container::Swap(Container* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Container::InternalSwap(Container* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  project_id_.Swap(&other->project_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  full_path_.Swap(&other->full_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  root_path_.Swap(&other->root_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  relative_path_.Swap(&other->relative_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_time_, other->update_time_);
}

::google::protobuf::Metadata Container::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Range::InitAsDefaultInstance() {
}
class Range::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Range::kStartFieldNumber;
const int Range::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Range::Range()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Range)
}
Range::Range(const Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Range)
}

void Range::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Range)
  SharedDtor();
}

void Range::SharedDtor() {
}

void Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Range& Range::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Range_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Range::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Range::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Range*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Range)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Range)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Range)
}

::google::protobuf::uint8* Range::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Range)
  return target;
}

size_t Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Range)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Range* source =
      ::google::protobuf::DynamicCastToGenerated<Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Range)
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  return true;
}

void Range::Swap(Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Range::InternalSwap(Range* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::google::protobuf::Metadata Range::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ImageLocation::InitAsDefaultInstance() {
}
class ImageLocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageLocation::kBoundingBoxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageLocation::ImageLocation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ImageLocation)
}
ImageLocation::ImageLocation(const ImageLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bounding_boxes_(from.bounding_boxes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ImageLocation)
}

void ImageLocation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

ImageLocation::~ImageLocation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ImageLocation)
  SharedDtor();
}

void ImageLocation::SharedDtor() {
}

void ImageLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageLocation& ImageLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ImageLocation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ImageLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounding_boxes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImageLocation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ImageLocation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::BoundingBox::_InternalParse;
          object = msg->add_bounding_boxes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImageLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ImageLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bounding_boxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ImageLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ImageLocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImageLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_boxes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->bounding_boxes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ImageLocation)
}

::google::protobuf::uint8* ImageLocation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ImageLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bounding_boxes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->bounding_boxes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ImageLocation)
  return target;
}

size_t ImageLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ImageLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bounding_boxes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bounding_boxes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageLocation* source =
      ::google::protobuf::DynamicCastToGenerated<ImageLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ImageLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ImageLocation)
    MergeFrom(*source);
  }
}

void ImageLocation::MergeFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ImageLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounding_boxes_.MergeFrom(from.bounding_boxes_);
}

void ImageLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageLocation::CopyFrom(const ImageLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ImageLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageLocation::IsInitialized() const {
  return true;
}

void ImageLocation::Swap(ImageLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageLocation::InternalSwap(ImageLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bounding_boxes_)->InternalSwap(CastToBase(&other->bounding_boxes_));
}

::google::protobuf::Metadata ImageLocation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
}
class BoundingBox::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox::kTopFieldNumber;
const int BoundingBox::kLeftFieldNumber;
const int BoundingBox::kWidthFieldNumber;
const int BoundingBox::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox::BoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&top_, &from.top_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&top_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::memset(&top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&top_)) + sizeof(height_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
}

void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BoundingBox_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&top_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundingBox::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BoundingBox*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 top = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_top(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 left = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 width = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 height = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.BoundingBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 top = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.BoundingBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 top = 1;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->top(), output);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.BoundingBox)
}

::google::protobuf::uint8* BoundingBox::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 top = 1;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->top(), target);
  }

  // int32 left = 2;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.BoundingBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 top = 1;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top());
  }

  // int32 left = 2;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::google::protobuf::DynamicCastToGenerated<BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.BoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(top_, other->top_);
  swap(left_, other->left_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RedactImageRequest_ImageRedactionConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RedactImageRequest_ImageRedactionConfig_default_instance_.info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2::_RedactImageRequest_ImageRedactionConfig_default_instance_.redact_all_text_ = false;
  ::google::privacy::dlp::v2::_RedactImageRequest_ImageRedactionConfig_default_instance_._instance.get_mutable()->redaction_color_ = const_cast< ::google::privacy::dlp::v2::Color*>(
      ::google::privacy::dlp::v2::Color::internal_default_instance());
}
class RedactImageRequest_ImageRedactionConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InfoType& info_type(const RedactImageRequest_ImageRedactionConfig* msg);
  static const ::google::privacy::dlp::v2::Color& redaction_color(const RedactImageRequest_ImageRedactionConfig* msg);
};

const ::google::privacy::dlp::v2::InfoType&
RedactImageRequest_ImageRedactionConfig::HasBitSetters::info_type(const RedactImageRequest_ImageRedactionConfig* msg) {
  return *msg->target_.info_type_;
}
const ::google::privacy::dlp::v2::Color&
RedactImageRequest_ImageRedactionConfig::HasBitSetters::redaction_color(const RedactImageRequest_ImageRedactionConfig* msg) {
  return *msg->redaction_color_;
}
void RedactImageRequest_ImageRedactionConfig::set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    set_has_info_type();
    target_.info_type_ = info_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.info_type)
}
void RedactImageRequest_ImageRedactionConfig::clear_info_type() {
  if (has_info_type()) {
    delete target_.info_type_;
    clear_has_target();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactImageRequest_ImageRedactionConfig::kInfoTypeFieldNumber;
const int RedactImageRequest_ImageRedactionConfig::kRedactAllTextFieldNumber;
const int RedactImageRequest_ImageRedactionConfig::kRedactionColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactImageRequest_ImageRedactionConfig::RedactImageRequest_ImageRedactionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
}
RedactImageRequest_ImageRedactionConfig::RedactImageRequest_ImageRedactionConfig(const RedactImageRequest_ImageRedactionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_redaction_color()) {
    redaction_color_ = new ::google::privacy::dlp::v2::Color(*from.redaction_color_);
  } else {
    redaction_color_ = nullptr;
  }
  clear_has_target();
  switch (from.target_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kRedactAllText: {
      set_redact_all_text(from.redact_all_text());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
}

void RedactImageRequest_ImageRedactionConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  redaction_color_ = nullptr;
  clear_has_target();
}

RedactImageRequest_ImageRedactionConfig::~RedactImageRequest_ImageRedactionConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  SharedDtor();
}

void RedactImageRequest_ImageRedactionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete redaction_color_;
  if (has_target()) {
    clear_target();
  }
}

void RedactImageRequest_ImageRedactionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedactImageRequest_ImageRedactionConfig& RedactImageRequest_ImageRedactionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RedactImageRequest_ImageRedactionConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RedactImageRequest_ImageRedactionConfig::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  switch (target_case()) {
    case kInfoType: {
      delete target_.info_type_;
      break;
    }
    case kRedactAllText: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void RedactImageRequest_ImageRedactionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && redaction_color_ != nullptr) {
    delete redaction_color_;
  }
  redaction_color_ = nullptr;
  clear_target();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RedactImageRequest_ImageRedactionConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RedactImageRequest_ImageRedactionConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool redact_all_text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_redact_all_text(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.Color redaction_color = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Color::_InternalParse;
        object = msg->mutable_redaction_color();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RedactImageRequest_ImageRedactionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool redact_all_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_.redact_all_text_)));
          set_has_redact_all_text();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Color redaction_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_redaction_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RedactImageRequest_ImageRedactionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info_type(this), output);
  }

  // bool redact_all_text = 2;
  if (has_redact_all_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->redact_all_text(), output);
  }

  // .google.privacy.dlp.v2.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::redaction_color(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
}

::google::protobuf::uint8* RedactImageRequest_ImageRedactionConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info_type(this), target);
  }

  // bool redact_all_text = 2;
  if (has_redact_all_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->redact_all_text(), target);
  }

  // .google.privacy.dlp.v2.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::redaction_color(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  return target;
}

size_t RedactImageRequest_ImageRedactionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Color redaction_color = 3;
  if (this->has_redaction_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *redaction_color_);
  }

  switch (target_case()) {
    // .google.privacy.dlp.v2.InfoType info_type = 1;
    case kInfoType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.info_type_);
      break;
    }
    // bool redact_all_text = 2;
    case kRedactAllText: {
      total_size += 1 + 1;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedactImageRequest_ImageRedactionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactImageRequest_ImageRedactionConfig* source =
      ::google::protobuf::DynamicCastToGenerated<RedactImageRequest_ImageRedactionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
    MergeFrom(*source);
  }
}

void RedactImageRequest_ImageRedactionConfig::MergeFrom(const RedactImageRequest_ImageRedactionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_redaction_color()) {
    mutable_redaction_color()->::google::privacy::dlp::v2::Color::MergeFrom(from.redaction_color());
  }
  switch (from.target_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kRedactAllText: {
      set_redact_all_text(from.redact_all_text());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void RedactImageRequest_ImageRedactionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactImageRequest_ImageRedactionConfig::CopyFrom(const RedactImageRequest_ImageRedactionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactImageRequest_ImageRedactionConfig::IsInitialized() const {
  return true;
}

void RedactImageRequest_ImageRedactionConfig::Swap(RedactImageRequest_ImageRedactionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactImageRequest_ImageRedactionConfig::InternalSwap(RedactImageRequest_ImageRedactionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(redaction_color_, other->redaction_color_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata RedactImageRequest_ImageRedactionConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RedactImageRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RedactImageRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2::InspectConfig*>(
      ::google::privacy::dlp::v2::InspectConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_RedactImageRequest_default_instance_._instance.get_mutable()->byte_item_ = const_cast< ::google::privacy::dlp::v2::ByteContentItem*>(
      ::google::privacy::dlp::v2::ByteContentItem::internal_default_instance());
}
class RedactImageRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectConfig& inspect_config(const RedactImageRequest* msg);
  static const ::google::privacy::dlp::v2::ByteContentItem& byte_item(const RedactImageRequest* msg);
};

const ::google::privacy::dlp::v2::InspectConfig&
RedactImageRequest::HasBitSetters::inspect_config(const RedactImageRequest* msg) {
  return *msg->inspect_config_;
}
const ::google::privacy::dlp::v2::ByteContentItem&
RedactImageRequest::HasBitSetters::byte_item(const RedactImageRequest* msg) {
  return *msg->byte_item_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactImageRequest::kParentFieldNumber;
const int RedactImageRequest::kLocationIdFieldNumber;
const int RedactImageRequest::kInspectConfigFieldNumber;
const int RedactImageRequest::kImageRedactionConfigsFieldNumber;
const int RedactImageRequest::kIncludeFindingsFieldNumber;
const int RedactImageRequest::kByteItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactImageRequest::RedactImageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RedactImageRequest)
}
RedactImageRequest::RedactImageRequest(const RedactImageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      image_redaction_configs_(from.image_redaction_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = nullptr;
  }
  if (from.has_byte_item()) {
    byte_item_ = new ::google::privacy::dlp::v2::ByteContentItem(*from.byte_item_);
  } else {
    byte_item_ = nullptr;
  }
  include_findings_ = from.include_findings_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RedactImageRequest)
}

void RedactImageRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RedactImageRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inspect_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_findings_) -
      reinterpret_cast<char*>(&inspect_config_)) + sizeof(include_findings_));
}

RedactImageRequest::~RedactImageRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RedactImageRequest)
  SharedDtor();
}

void RedactImageRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inspect_config_;
  if (this != internal_default_instance()) delete byte_item_;
}

void RedactImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedactImageRequest& RedactImageRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RedactImageRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RedactImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RedactImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_redaction_configs_.Clear();
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && inspect_config_ != nullptr) {
    delete inspect_config_;
  }
  inspect_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && byte_item_ != nullptr) {
    delete byte_item_;
  }
  byte_item_ = nullptr;
  include_findings_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RedactImageRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RedactImageRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.RedactImageRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectConfig::_InternalParse;
        object = msg->mutable_inspect_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig::_InternalParse;
          object = msg->add_image_redaction_configs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // bool include_findings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_include_findings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.ByteContentItem byte_item = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ByteContentItem::_InternalParse;
        object = msg->mutable_byte_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string location_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.RedactImageRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RedactImageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RedactImageRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.RedactImageRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_image_redaction_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_findings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_findings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ByteContentItem byte_item = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_byte_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.RedactImageRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RedactImageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RedactImageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RedactImageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RedactImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RedactImageRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inspect_config(this), output);
  }

  // repeated .google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_redaction_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->image_redaction_configs(static_cast<int>(i)),
      output);
  }

  // bool include_findings = 6;
  if (this->include_findings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_findings(), output);
  }

  // .google.privacy.dlp.v2.ByteContentItem byte_item = 7;
  if (this->has_byte_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::byte_item(this), output);
  }

  // string location_id = 8;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RedactImageRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RedactImageRequest)
}

::google::protobuf::uint8* RedactImageRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RedactImageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RedactImageRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inspect_config(this), target);
  }

  // repeated .google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_redaction_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->image_redaction_configs(static_cast<int>(i)), target);
  }

  // bool include_findings = 6;
  if (this->include_findings() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_findings(), target);
  }

  // .google.privacy.dlp.v2.ByteContentItem byte_item = 7;
  if (this->has_byte_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::byte_item(this), target);
  }

  // string location_id = 8;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RedactImageRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RedactImageRequest)
  return target;
}

size_t RedactImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RedactImageRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->image_redaction_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_redaction_configs(static_cast<int>(i)));
    }
  }

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string location_id = 8;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_config_);
  }

  // .google.privacy.dlp.v2.ByteContentItem byte_item = 7;
  if (this->has_byte_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *byte_item_);
  }

  // bool include_findings = 6;
  if (this->include_findings() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedactImageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RedactImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactImageRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RedactImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RedactImageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RedactImageRequest)
    MergeFrom(*source);
  }
}

void RedactImageRequest::MergeFrom(const RedactImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RedactImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_redaction_configs_.MergeFrom(from.image_redaction_configs_);
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2::InspectConfig::MergeFrom(from.inspect_config());
  }
  if (from.has_byte_item()) {
    mutable_byte_item()->::google::privacy::dlp::v2::ByteContentItem::MergeFrom(from.byte_item());
  }
  if (from.include_findings() != 0) {
    set_include_findings(from.include_findings());
  }
}

void RedactImageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RedactImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactImageRequest::CopyFrom(const RedactImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RedactImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactImageRequest::IsInitialized() const {
  return true;
}

void RedactImageRequest::Swap(RedactImageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactImageRequest::InternalSwap(RedactImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&image_redaction_configs_)->InternalSwap(CastToBase(&other->image_redaction_configs_));
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inspect_config_, other->inspect_config_);
  swap(byte_item_, other->byte_item_);
  swap(include_findings_, other->include_findings_);
}

::google::protobuf::Metadata RedactImageRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
class Color::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRedFieldNumber;
const int Color::kGreenFieldNumber;
const int Color::kBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Color)
}

void Color::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Color_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Color::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Color*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float red = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_red(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float green = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_green(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float blue = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_blue(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Color)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float red = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float green = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Color)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float red = 1;
  if (this->red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->red(), output);
  }

  // float green = 2;
  if (this->green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->green(), output);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float red = 1;
  if (this->red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->red(), target);
  }

  // float green = 2;
  if (this->green() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->green(), target);
  }

  // float blue = 3;
  if (this->blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->blue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Color)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float red = 1;
  if (this->red() != 0) {
    total_size += 1 + 4;
  }

  // float green = 2;
  if (this->green() != 0) {
    total_size += 1 + 4;
  }

  // float blue = 3;
  if (this->blue() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    set_red(from.red());
  }
  if (from.green() != 0) {
    set_green(from.green());
  }
  if (from.blue() != 0) {
    set_blue(from.blue());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(blue_, other->blue_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RedactImageResponse::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RedactImageResponse_default_instance_._instance.get_mutable()->inspect_result_ = const_cast< ::google::privacy::dlp::v2::InspectResult*>(
      ::google::privacy::dlp::v2::InspectResult::internal_default_instance());
}
class RedactImageResponse::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectResult& inspect_result(const RedactImageResponse* msg);
};

const ::google::privacy::dlp::v2::InspectResult&
RedactImageResponse::HasBitSetters::inspect_result(const RedactImageResponse* msg) {
  return *msg->inspect_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedactImageResponse::kRedactedImageFieldNumber;
const int RedactImageResponse::kExtractedTextFieldNumber;
const int RedactImageResponse::kInspectResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactImageResponse::RedactImageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RedactImageResponse)
}
RedactImageResponse::RedactImageResponse(const RedactImageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redacted_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.redacted_image().size() > 0) {
    redacted_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redacted_image_);
  }
  extracted_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extracted_text().size() > 0) {
    extracted_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extracted_text_);
  }
  if (from.has_inspect_result()) {
    inspect_result_ = new ::google::privacy::dlp::v2::InspectResult(*from.inspect_result_);
  } else {
    inspect_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RedactImageResponse)
}

void RedactImageResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RedactImageResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  redacted_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extracted_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_result_ = nullptr;
}

RedactImageResponse::~RedactImageResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RedactImageResponse)
  SharedDtor();
}

void RedactImageResponse::SharedDtor() {
  redacted_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extracted_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inspect_result_;
}

void RedactImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedactImageResponse& RedactImageResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RedactImageResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RedactImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RedactImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redacted_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extracted_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && inspect_result_ != nullptr) {
    delete inspect_result_;
  }
  inspect_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RedactImageResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RedactImageResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes redacted_image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_redacted_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string extracted_text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.RedactImageResponse.extracted_text");
        object = msg->mutable_extracted_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InspectResult inspect_result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectResult::_InternalParse;
        object = msg->mutable_inspect_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RedactImageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RedactImageResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes redacted_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_redacted_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extracted_text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extracted_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extracted_text().data(), static_cast<int>(this->extracted_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.RedactImageResponse.extracted_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectResult inspect_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RedactImageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RedactImageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RedactImageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RedactImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes redacted_image = 1;
  if (this->redacted_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->redacted_image(), output);
  }

  // string extracted_text = 2;
  if (this->extracted_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extracted_text().data(), static_cast<int>(this->extracted_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RedactImageResponse.extracted_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extracted_text(), output);
  }

  // .google.privacy.dlp.v2.InspectResult inspect_result = 3;
  if (this->has_inspect_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::inspect_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RedactImageResponse)
}

::google::protobuf::uint8* RedactImageResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RedactImageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes redacted_image = 1;
  if (this->redacted_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->redacted_image(), target);
  }

  // string extracted_text = 2;
  if (this->extracted_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extracted_text().data(), static_cast<int>(this->extracted_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RedactImageResponse.extracted_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extracted_text(), target);
  }

  // .google.privacy.dlp.v2.InspectResult inspect_result = 3;
  if (this->has_inspect_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::inspect_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RedactImageResponse)
  return target;
}

size_t RedactImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RedactImageResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes redacted_image = 1;
  if (this->redacted_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->redacted_image());
  }

  // string extracted_text = 2;
  if (this->extracted_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extracted_text());
  }

  // .google.privacy.dlp.v2.InspectResult inspect_result = 3;
  if (this->has_inspect_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedactImageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RedactImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactImageResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RedactImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RedactImageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RedactImageResponse)
    MergeFrom(*source);
  }
}

void RedactImageResponse::MergeFrom(const RedactImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RedactImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.redacted_image().size() > 0) {

    redacted_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redacted_image_);
  }
  if (from.extracted_text().size() > 0) {

    extracted_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extracted_text_);
  }
  if (from.has_inspect_result()) {
    mutable_inspect_result()->::google::privacy::dlp::v2::InspectResult::MergeFrom(from.inspect_result());
  }
}

void RedactImageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RedactImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactImageResponse::CopyFrom(const RedactImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RedactImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactImageResponse::IsInitialized() const {
  return true;
}

void RedactImageResponse::Swap(RedactImageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactImageResponse::InternalSwap(RedactImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  redacted_image_.Swap(&other->redacted_image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extracted_text_.Swap(&other->extracted_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inspect_result_, other->inspect_result_);
}

::google::protobuf::Metadata RedactImageResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeidentifyContentRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DeidentifyContentRequest_default_instance_._instance.get_mutable()->deidentify_config_ = const_cast< ::google::privacy::dlp::v2::DeidentifyConfig*>(
      ::google::privacy::dlp::v2::DeidentifyConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_DeidentifyContentRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2::InspectConfig*>(
      ::google::privacy::dlp::v2::InspectConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_DeidentifyContentRequest_default_instance_._instance.get_mutable()->item_ = const_cast< ::google::privacy::dlp::v2::ContentItem*>(
      ::google::privacy::dlp::v2::ContentItem::internal_default_instance());
}
class DeidentifyContentRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::DeidentifyConfig& deidentify_config(const DeidentifyContentRequest* msg);
  static const ::google::privacy::dlp::v2::InspectConfig& inspect_config(const DeidentifyContentRequest* msg);
  static const ::google::privacy::dlp::v2::ContentItem& item(const DeidentifyContentRequest* msg);
};

const ::google::privacy::dlp::v2::DeidentifyConfig&
DeidentifyContentRequest::HasBitSetters::deidentify_config(const DeidentifyContentRequest* msg) {
  return *msg->deidentify_config_;
}
const ::google::privacy::dlp::v2::InspectConfig&
DeidentifyContentRequest::HasBitSetters::inspect_config(const DeidentifyContentRequest* msg) {
  return *msg->inspect_config_;
}
const ::google::privacy::dlp::v2::ContentItem&
DeidentifyContentRequest::HasBitSetters::item(const DeidentifyContentRequest* msg) {
  return *msg->item_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentifyContentRequest::kParentFieldNumber;
const int DeidentifyContentRequest::kDeidentifyConfigFieldNumber;
const int DeidentifyContentRequest::kInspectConfigFieldNumber;
const int DeidentifyContentRequest::kItemFieldNumber;
const int DeidentifyContentRequest::kInspectTemplateNameFieldNumber;
const int DeidentifyContentRequest::kDeidentifyTemplateNameFieldNumber;
const int DeidentifyContentRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentifyContentRequest::DeidentifyContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeidentifyContentRequest)
}
DeidentifyContentRequest::DeidentifyContentRequest(const DeidentifyContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inspect_template_name().size() > 0) {
    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  deidentify_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deidentify_template_name().size() > 0) {
    deidentify_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deidentify_template_name_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_deidentify_config()) {
    deidentify_config_ = new ::google::privacy::dlp::v2::DeidentifyConfig(*from.deidentify_config_);
  } else {
    deidentify_config_ = nullptr;
  }
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = nullptr;
  }
  if (from.has_item()) {
    item_ = new ::google::privacy::dlp::v2::ContentItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeidentifyContentRequest)
}

void DeidentifyContentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deidentify_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deidentify_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_) -
      reinterpret_cast<char*>(&deidentify_config_)) + sizeof(item_));
}

DeidentifyContentRequest::~DeidentifyContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeidentifyContentRequest)
  SharedDtor();
}

void DeidentifyContentRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deidentify_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deidentify_config_;
  if (this != internal_default_instance()) delete inspect_config_;
  if (this != internal_default_instance()) delete item_;
}

void DeidentifyContentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeidentifyContentRequest& DeidentifyContentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeidentifyContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deidentify_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && deidentify_config_ != nullptr) {
    delete deidentify_config_;
  }
  deidentify_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inspect_config_ != nullptr) {
    delete inspect_config_;
  }
  inspect_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeidentifyContentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeidentifyContentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeidentifyContentRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DeidentifyConfig::_InternalParse;
        object = msg->mutable_deidentify_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectConfig::_InternalParse;
        object = msg->mutable_inspect_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ContentItem item = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ContentItem::_InternalParse;
        object = msg->mutable_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string inspect_template_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name");
        object = msg->mutable_inspect_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string deidentify_template_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name");
        object = msg->mutable_deidentify_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeidentifyContentRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeidentifyContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeidentifyContentRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deidentify_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ContentItem item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inspect_template_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inspect_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deidentify_template_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deidentify_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deidentify_template_name().data(), static_cast<int>(this->deidentify_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeidentifyContentRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeidentifyContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeidentifyContentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeidentifyContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
  if (this->has_deidentify_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::deidentify_config(this), output);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::inspect_config(this), output);
  }

  // .google.privacy.dlp.v2.ContentItem item = 4;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::item(this), output);
  }

  // string inspect_template_name = 5;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->inspect_template_name(), output);
  }

  // string deidentify_template_name = 6;
  if (this->deidentify_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deidentify_template_name().data(), static_cast<int>(this->deidentify_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->deidentify_template_name(), output);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeidentifyContentRequest)
}

::google::protobuf::uint8* DeidentifyContentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
  if (this->has_deidentify_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::deidentify_config(this), target);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::inspect_config(this), target);
  }

  // .google.privacy.dlp.v2.ContentItem item = 4;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::item(this), target);
  }

  // string inspect_template_name = 5;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.inspect_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inspect_template_name(), target);
  }

  // string deidentify_template_name = 6;
  if (this->deidentify_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deidentify_template_name().data(), static_cast<int>(this->deidentify_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deidentify_template_name(), target);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyContentRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeidentifyContentRequest)
  return target;
}

size_t DeidentifyContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string inspect_template_name = 5;
  if (this->inspect_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inspect_template_name());
  }

  // string deidentify_template_name = 6;
  if (this->deidentify_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deidentify_template_name());
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
  if (this->has_deidentify_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deidentify_config_);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_config_);
  }

  // .google.privacy.dlp.v2.ContentItem item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifyContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentifyContentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeidentifyContentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeidentifyContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeidentifyContentRequest)
    MergeFrom(*source);
  }
}

void DeidentifyContentRequest::MergeFrom(const DeidentifyContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.inspect_template_name().size() > 0) {

    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  if (from.deidentify_template_name().size() > 0) {

    deidentify_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deidentify_template_name_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_deidentify_config()) {
    mutable_deidentify_config()->::google::privacy::dlp::v2::DeidentifyConfig::MergeFrom(from.deidentify_config());
  }
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2::InspectConfig::MergeFrom(from.inspect_config());
  }
  if (from.has_item()) {
    mutable_item()->::google::privacy::dlp::v2::ContentItem::MergeFrom(from.item());
  }
}

void DeidentifyContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentifyContentRequest::CopyFrom(const DeidentifyContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeidentifyContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifyContentRequest::IsInitialized() const {
  return true;
}

void DeidentifyContentRequest::Swap(DeidentifyContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentifyContentRequest::InternalSwap(DeidentifyContentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inspect_template_name_.Swap(&other->inspect_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deidentify_template_name_.Swap(&other->deidentify_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(deidentify_config_, other->deidentify_config_);
  swap(inspect_config_, other->inspect_config_);
  swap(item_, other->item_);
}

::google::protobuf::Metadata DeidentifyContentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeidentifyContentResponse::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DeidentifyContentResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::google::privacy::dlp::v2::ContentItem*>(
      ::google::privacy::dlp::v2::ContentItem::internal_default_instance());
  ::google::privacy::dlp::v2::_DeidentifyContentResponse_default_instance_._instance.get_mutable()->overview_ = const_cast< ::google::privacy::dlp::v2::TransformationOverview*>(
      ::google::privacy::dlp::v2::TransformationOverview::internal_default_instance());
}
class DeidentifyContentResponse::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::ContentItem& item(const DeidentifyContentResponse* msg);
  static const ::google::privacy::dlp::v2::TransformationOverview& overview(const DeidentifyContentResponse* msg);
};

const ::google::privacy::dlp::v2::ContentItem&
DeidentifyContentResponse::HasBitSetters::item(const DeidentifyContentResponse* msg) {
  return *msg->item_;
}
const ::google::privacy::dlp::v2::TransformationOverview&
DeidentifyContentResponse::HasBitSetters::overview(const DeidentifyContentResponse* msg) {
  return *msg->overview_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentifyContentResponse::kItemFieldNumber;
const int DeidentifyContentResponse::kOverviewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentifyContentResponse::DeidentifyContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeidentifyContentResponse)
}
DeidentifyContentResponse::DeidentifyContentResponse(const DeidentifyContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::google::privacy::dlp::v2::ContentItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from.has_overview()) {
    overview_ = new ::google::privacy::dlp::v2::TransformationOverview(*from.overview_);
  } else {
    overview_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeidentifyContentResponse)
}

void DeidentifyContentResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overview_) -
      reinterpret_cast<char*>(&item_)) + sizeof(overview_));
}

DeidentifyContentResponse::~DeidentifyContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeidentifyContentResponse)
  SharedDtor();
}

void DeidentifyContentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete overview_;
}

void DeidentifyContentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeidentifyContentResponse& DeidentifyContentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeidentifyContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && overview_ != nullptr) {
    delete overview_;
  }
  overview_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeidentifyContentResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeidentifyContentResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.ContentItem item = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ContentItem::_InternalParse;
        object = msg->mutable_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.TransformationOverview overview = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TransformationOverview::_InternalParse;
        object = msg->mutable_overview();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeidentifyContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.ContentItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TransformationOverview overview = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeidentifyContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeidentifyContentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeidentifyContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::item(this), output);
  }

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  if (this->has_overview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::overview(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeidentifyContentResponse)
}

::google::protobuf::uint8* DeidentifyContentResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::item(this), target);
  }

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  if (this->has_overview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::overview(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeidentifyContentResponse)
  return target;
}

size_t DeidentifyContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  if (this->has_overview()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overview_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifyContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentifyContentResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DeidentifyContentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeidentifyContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeidentifyContentResponse)
    MergeFrom(*source);
  }
}

void DeidentifyContentResponse::MergeFrom(const DeidentifyContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    mutable_item()->::google::privacy::dlp::v2::ContentItem::MergeFrom(from.item());
  }
  if (from.has_overview()) {
    mutable_overview()->::google::privacy::dlp::v2::TransformationOverview::MergeFrom(from.overview());
  }
}

void DeidentifyContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentifyContentResponse::CopyFrom(const DeidentifyContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeidentifyContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifyContentResponse::IsInitialized() const {
  return true;
}

void DeidentifyContentResponse::Swap(DeidentifyContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentifyContentResponse::InternalSwap(DeidentifyContentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(overview_, other->overview_);
}

::google::protobuf::Metadata DeidentifyContentResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReidentifyContentRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_ReidentifyContentRequest_default_instance_._instance.get_mutable()->reidentify_config_ = const_cast< ::google::privacy::dlp::v2::DeidentifyConfig*>(
      ::google::privacy::dlp::v2::DeidentifyConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_ReidentifyContentRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2::InspectConfig*>(
      ::google::privacy::dlp::v2::InspectConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_ReidentifyContentRequest_default_instance_._instance.get_mutable()->item_ = const_cast< ::google::privacy::dlp::v2::ContentItem*>(
      ::google::privacy::dlp::v2::ContentItem::internal_default_instance());
}
class ReidentifyContentRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::DeidentifyConfig& reidentify_config(const ReidentifyContentRequest* msg);
  static const ::google::privacy::dlp::v2::InspectConfig& inspect_config(const ReidentifyContentRequest* msg);
  static const ::google::privacy::dlp::v2::ContentItem& item(const ReidentifyContentRequest* msg);
};

const ::google::privacy::dlp::v2::DeidentifyConfig&
ReidentifyContentRequest::HasBitSetters::reidentify_config(const ReidentifyContentRequest* msg) {
  return *msg->reidentify_config_;
}
const ::google::privacy::dlp::v2::InspectConfig&
ReidentifyContentRequest::HasBitSetters::inspect_config(const ReidentifyContentRequest* msg) {
  return *msg->inspect_config_;
}
const ::google::privacy::dlp::v2::ContentItem&
ReidentifyContentRequest::HasBitSetters::item(const ReidentifyContentRequest* msg) {
  return *msg->item_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReidentifyContentRequest::kParentFieldNumber;
const int ReidentifyContentRequest::kReidentifyConfigFieldNumber;
const int ReidentifyContentRequest::kInspectConfigFieldNumber;
const int ReidentifyContentRequest::kItemFieldNumber;
const int ReidentifyContentRequest::kInspectTemplateNameFieldNumber;
const int ReidentifyContentRequest::kReidentifyTemplateNameFieldNumber;
const int ReidentifyContentRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReidentifyContentRequest::ReidentifyContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ReidentifyContentRequest)
}
ReidentifyContentRequest::ReidentifyContentRequest(const ReidentifyContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inspect_template_name().size() > 0) {
    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  reidentify_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reidentify_template_name().size() > 0) {
    reidentify_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reidentify_template_name_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_reidentify_config()) {
    reidentify_config_ = new ::google::privacy::dlp::v2::DeidentifyConfig(*from.reidentify_config_);
  } else {
    reidentify_config_ = nullptr;
  }
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = nullptr;
  }
  if (from.has_item()) {
    item_ = new ::google::privacy::dlp::v2::ContentItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ReidentifyContentRequest)
}

void ReidentifyContentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reidentify_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reidentify_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_) -
      reinterpret_cast<char*>(&reidentify_config_)) + sizeof(item_));
}

ReidentifyContentRequest::~ReidentifyContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ReidentifyContentRequest)
  SharedDtor();
}

void ReidentifyContentRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reidentify_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reidentify_config_;
  if (this != internal_default_instance()) delete inspect_config_;
  if (this != internal_default_instance()) delete item_;
}

void ReidentifyContentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReidentifyContentRequest& ReidentifyContentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReidentifyContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ReidentifyContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reidentify_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reidentify_config_ != nullptr) {
    delete reidentify_config_;
  }
  reidentify_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inspect_config_ != nullptr) {
    delete inspect_config_;
  }
  inspect_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReidentifyContentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReidentifyContentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ReidentifyContentRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DeidentifyConfig::_InternalParse;
        object = msg->mutable_reidentify_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectConfig::_InternalParse;
        object = msg->mutable_inspect_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ContentItem item = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ContentItem::_InternalParse;
        object = msg->mutable_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string inspect_template_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name");
        object = msg->mutable_inspect_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reidentify_template_name = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name");
        object = msg->mutable_reidentify_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ReidentifyContentRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReidentifyContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ReidentifyContentRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reidentify_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ContentItem item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inspect_template_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inspect_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reidentify_template_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reidentify_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reidentify_template_name().data(), static_cast<int>(this->reidentify_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ReidentifyContentRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ReidentifyContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ReidentifyContentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReidentifyContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
  if (this->has_reidentify_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::reidentify_config(this), output);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::inspect_config(this), output);
  }

  // .google.privacy.dlp.v2.ContentItem item = 4;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::item(this), output);
  }

  // string inspect_template_name = 5;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->inspect_template_name(), output);
  }

  // string reidentify_template_name = 6;
  if (this->reidentify_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reidentify_template_name().data(), static_cast<int>(this->reidentify_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reidentify_template_name(), output);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ReidentifyContentRequest)
}

::google::protobuf::uint8* ReidentifyContentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
  if (this->has_reidentify_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::reidentify_config(this), target);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::inspect_config(this), target);
  }

  // .google.privacy.dlp.v2.ContentItem item = 4;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::item(this), target);
  }

  // string inspect_template_name = 5;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.inspect_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inspect_template_name(), target);
  }

  // string reidentify_template_name = 6;
  if (this->reidentify_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reidentify_template_name().data(), static_cast<int>(this->reidentify_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.reidentify_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reidentify_template_name(), target);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ReidentifyContentRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ReidentifyContentRequest)
  return target;
}

size_t ReidentifyContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string inspect_template_name = 5;
  if (this->inspect_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inspect_template_name());
  }

  // string reidentify_template_name = 6;
  if (this->reidentify_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reidentify_template_name());
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
  if (this->has_reidentify_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reidentify_config_);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 3;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_config_);
  }

  // .google.privacy.dlp.v2.ContentItem item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReidentifyContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReidentifyContentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ReidentifyContentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ReidentifyContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ReidentifyContentRequest)
    MergeFrom(*source);
  }
}

void ReidentifyContentRequest::MergeFrom(const ReidentifyContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.inspect_template_name().size() > 0) {

    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  if (from.reidentify_template_name().size() > 0) {

    reidentify_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reidentify_template_name_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_reidentify_config()) {
    mutable_reidentify_config()->::google::privacy::dlp::v2::DeidentifyConfig::MergeFrom(from.reidentify_config());
  }
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2::InspectConfig::MergeFrom(from.inspect_config());
  }
  if (from.has_item()) {
    mutable_item()->::google::privacy::dlp::v2::ContentItem::MergeFrom(from.item());
  }
}

void ReidentifyContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReidentifyContentRequest::CopyFrom(const ReidentifyContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ReidentifyContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReidentifyContentRequest::IsInitialized() const {
  return true;
}

void ReidentifyContentRequest::Swap(ReidentifyContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReidentifyContentRequest::InternalSwap(ReidentifyContentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inspect_template_name_.Swap(&other->inspect_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reidentify_template_name_.Swap(&other->reidentify_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reidentify_config_, other->reidentify_config_);
  swap(inspect_config_, other->inspect_config_);
  swap(item_, other->item_);
}

::google::protobuf::Metadata ReidentifyContentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReidentifyContentResponse::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_ReidentifyContentResponse_default_instance_._instance.get_mutable()->item_ = const_cast< ::google::privacy::dlp::v2::ContentItem*>(
      ::google::privacy::dlp::v2::ContentItem::internal_default_instance());
  ::google::privacy::dlp::v2::_ReidentifyContentResponse_default_instance_._instance.get_mutable()->overview_ = const_cast< ::google::privacy::dlp::v2::TransformationOverview*>(
      ::google::privacy::dlp::v2::TransformationOverview::internal_default_instance());
}
class ReidentifyContentResponse::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::ContentItem& item(const ReidentifyContentResponse* msg);
  static const ::google::privacy::dlp::v2::TransformationOverview& overview(const ReidentifyContentResponse* msg);
};

const ::google::privacy::dlp::v2::ContentItem&
ReidentifyContentResponse::HasBitSetters::item(const ReidentifyContentResponse* msg) {
  return *msg->item_;
}
const ::google::privacy::dlp::v2::TransformationOverview&
ReidentifyContentResponse::HasBitSetters::overview(const ReidentifyContentResponse* msg) {
  return *msg->overview_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReidentifyContentResponse::kItemFieldNumber;
const int ReidentifyContentResponse::kOverviewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReidentifyContentResponse::ReidentifyContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ReidentifyContentResponse)
}
ReidentifyContentResponse::ReidentifyContentResponse(const ReidentifyContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::google::privacy::dlp::v2::ContentItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from.has_overview()) {
    overview_ = new ::google::privacy::dlp::v2::TransformationOverview(*from.overview_);
  } else {
    overview_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ReidentifyContentResponse)
}

void ReidentifyContentResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overview_) -
      reinterpret_cast<char*>(&item_)) + sizeof(overview_));
}

ReidentifyContentResponse::~ReidentifyContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ReidentifyContentResponse)
  SharedDtor();
}

void ReidentifyContentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete overview_;
}

void ReidentifyContentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReidentifyContentResponse& ReidentifyContentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReidentifyContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ReidentifyContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && overview_ != nullptr) {
    delete overview_;
  }
  overview_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReidentifyContentResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReidentifyContentResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.ContentItem item = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ContentItem::_InternalParse;
        object = msg->mutable_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.TransformationOverview overview = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TransformationOverview::_InternalParse;
        object = msg->mutable_overview();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReidentifyContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.ContentItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TransformationOverview overview = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ReidentifyContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ReidentifyContentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReidentifyContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::item(this), output);
  }

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  if (this->has_overview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::overview(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ReidentifyContentResponse)
}

::google::protobuf::uint8* ReidentifyContentResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::item(this), target);
  }

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  if (this->has_overview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::overview(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ReidentifyContentResponse)
  return target;
}

size_t ReidentifyContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .google.privacy.dlp.v2.TransformationOverview overview = 2;
  if (this->has_overview()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overview_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReidentifyContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReidentifyContentResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ReidentifyContentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ReidentifyContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ReidentifyContentResponse)
    MergeFrom(*source);
  }
}

void ReidentifyContentResponse::MergeFrom(const ReidentifyContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    mutable_item()->::google::privacy::dlp::v2::ContentItem::MergeFrom(from.item());
  }
  if (from.has_overview()) {
    mutable_overview()->::google::privacy::dlp::v2::TransformationOverview::MergeFrom(from.overview());
  }
}

void ReidentifyContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReidentifyContentResponse::CopyFrom(const ReidentifyContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ReidentifyContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReidentifyContentResponse::IsInitialized() const {
  return true;
}

void ReidentifyContentResponse::Swap(ReidentifyContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReidentifyContentResponse::InternalSwap(ReidentifyContentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(overview_, other->overview_);
}

::google::protobuf::Metadata ReidentifyContentResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectContentRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectContentRequest_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2::InspectConfig*>(
      ::google::privacy::dlp::v2::InspectConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_InspectContentRequest_default_instance_._instance.get_mutable()->item_ = const_cast< ::google::privacy::dlp::v2::ContentItem*>(
      ::google::privacy::dlp::v2::ContentItem::internal_default_instance());
}
class InspectContentRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectConfig& inspect_config(const InspectContentRequest* msg);
  static const ::google::privacy::dlp::v2::ContentItem& item(const InspectContentRequest* msg);
};

const ::google::privacy::dlp::v2::InspectConfig&
InspectContentRequest::HasBitSetters::inspect_config(const InspectContentRequest* msg) {
  return *msg->inspect_config_;
}
const ::google::privacy::dlp::v2::ContentItem&
InspectContentRequest::HasBitSetters::item(const InspectContentRequest* msg) {
  return *msg->item_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentRequest::kParentFieldNumber;
const int InspectContentRequest::kInspectConfigFieldNumber;
const int InspectContentRequest::kItemFieldNumber;
const int InspectContentRequest::kInspectTemplateNameFieldNumber;
const int InspectContentRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentRequest::InspectContentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectContentRequest)
}
InspectContentRequest::InspectContentRequest(const InspectContentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inspect_template_name().size() > 0) {
    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = nullptr;
  }
  if (from.has_item()) {
    item_ = new ::google::privacy::dlp::v2::ContentItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectContentRequest)
}

void InspectContentRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inspect_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_) -
      reinterpret_cast<char*>(&inspect_config_)) + sizeof(item_));
}

InspectContentRequest::~InspectContentRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectContentRequest)
  SharedDtor();
}

void InspectContentRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inspect_config_;
  if (this != internal_default_instance()) delete item_;
}

void InspectContentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectContentRequest& InspectContentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectContentRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectContentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && inspect_config_ != nullptr) {
    delete inspect_config_;
  }
  inspect_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectContentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectContentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InspectContentRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectConfig::_InternalParse;
        object = msg->mutable_inspect_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ContentItem item = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ContentItem::_InternalParse;
        object = msg->mutable_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string inspect_template_name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InspectContentRequest.inspect_template_name");
        object = msg->mutable_inspect_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InspectContentRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectContentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InspectContentRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ContentItem item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inspect_template_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inspect_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InspectContentRequest.inspect_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InspectContentRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectContentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectContentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectContentRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inspect_config(this), output);
  }

  // .google.privacy.dlp.v2.ContentItem item = 3;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::item(this), output);
  }

  // string inspect_template_name = 4;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectContentRequest.inspect_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->inspect_template_name(), output);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectContentRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectContentRequest)
}

::google::protobuf::uint8* InspectContentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectContentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectContentRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inspect_config(this), target);
  }

  // .google.privacy.dlp.v2.ContentItem item = 3;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::item(this), target);
  }

  // string inspect_template_name = 4;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectContentRequest.inspect_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inspect_template_name(), target);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectContentRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectContentRequest)
  return target;
}

size_t InspectContentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectContentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string inspect_template_name = 4;
  if (this->inspect_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inspect_template_name());
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_config_);
  }

  // .google.privacy.dlp.v2.ContentItem item = 3;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<InspectContentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectContentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectContentRequest)
    MergeFrom(*source);
  }
}

void InspectContentRequest::MergeFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectContentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.inspect_template_name().size() > 0) {

    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2::InspectConfig::MergeFrom(from.inspect_config());
  }
  if (from.has_item()) {
    mutable_item()->::google::privacy::dlp::v2::ContentItem::MergeFrom(from.item());
  }
}

void InspectContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentRequest::CopyFrom(const InspectContentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectContentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentRequest::IsInitialized() const {
  return true;
}

void InspectContentRequest::Swap(InspectContentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentRequest::InternalSwap(InspectContentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inspect_template_name_.Swap(&other->inspect_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inspect_config_, other->inspect_config_);
  swap(item_, other->item_);
}

::google::protobuf::Metadata InspectContentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectContentResponse::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectContentResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::google::privacy::dlp::v2::InspectResult*>(
      ::google::privacy::dlp::v2::InspectResult::internal_default_instance());
}
class InspectContentResponse::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectResult& result(const InspectContentResponse* msg);
};

const ::google::privacy::dlp::v2::InspectResult&
InspectContentResponse::HasBitSetters::result(const InspectContentResponse* msg) {
  return *msg->result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectContentResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectContentResponse::InspectContentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectContentResponse)
}
InspectContentResponse::InspectContentResponse(const InspectContentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::google::privacy::dlp::v2::InspectResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectContentResponse)
}

void InspectContentResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  result_ = nullptr;
}

InspectContentResponse::~InspectContentResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectContentResponse)
  SharedDtor();
}

void InspectContentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void InspectContentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectContentResponse& InspectContentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectContentResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectContentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectContentResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectContentResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InspectResult result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectResult::_InternalParse;
        object = msg->mutable_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectContentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InspectResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectContentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectContentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectResult result = 1;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectContentResponse)
}

::google::protobuf::uint8* InspectContentResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectContentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectResult result = 1;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectContentResponse)
  return target;
}

size_t InspectContentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectContentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectContentResponse* source =
      ::google::protobuf::DynamicCastToGenerated<InspectContentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectContentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectContentResponse)
    MergeFrom(*source);
  }
}

void InspectContentResponse::MergeFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectContentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::google::privacy::dlp::v2::InspectResult::MergeFrom(from.result());
  }
}

void InspectContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectContentResponse::CopyFrom(const InspectContentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectContentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectContentResponse::IsInitialized() const {
  return true;
}

void InspectContentResponse::Swap(InspectContentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectContentResponse::InternalSwap(InspectContentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata InspectContentResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OutputStorageConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_OutputStorageConfig_default_instance_.table_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
}
class OutputStorageConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::BigQueryTable& table(const OutputStorageConfig* msg);
};

const ::google::privacy::dlp::v2::BigQueryTable&
OutputStorageConfig::HasBitSetters::table(const OutputStorageConfig* msg) {
  return *msg->type_.table_;
}
void OutputStorageConfig::set_allocated_table(::google::privacy::dlp::v2::BigQueryTable* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (table) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    type_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.OutputStorageConfig.table)
}
void OutputStorageConfig::clear_table() {
  if (has_table()) {
    delete type_.table_;
    clear_has_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutputStorageConfig::kTableFieldNumber;
const int OutputStorageConfig::kOutputSchemaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutputStorageConfig::OutputStorageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.OutputStorageConfig)
}
OutputStorageConfig::OutputStorageConfig(const OutputStorageConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_schema_ = from.output_schema_;
  clear_has_type();
  switch (from.type_case()) {
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.table());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.OutputStorageConfig)
}

void OutputStorageConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  output_schema_ = 0;
  clear_has_type();
}

OutputStorageConfig::~OutputStorageConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.OutputStorageConfig)
  SharedDtor();
}

void OutputStorageConfig::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void OutputStorageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputStorageConfig& OutputStorageConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OutputStorageConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void OutputStorageConfig::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.OutputStorageConfig)
  switch (type_case()) {
    case kTable: {
      delete type_.table_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void OutputStorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_schema_ = 0;
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OutputStorageConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OutputStorageConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.BigQueryTable table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_output_schema(static_cast<::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OutputStorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.OutputStorageConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.BigQueryTable table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_schema(static_cast< ::google::privacy::dlp::v2::OutputStorageConfig_OutputSchema >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.OutputStorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.OutputStorageConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OutputStorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::table(this), output);
  }

  // .google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
  if (this->output_schema() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->output_schema(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.OutputStorageConfig)
}

::google::protobuf::uint8* OutputStorageConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.OutputStorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::table(this), target);
  }

  // .google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
  if (this->output_schema() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->output_schema(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.OutputStorageConfig)
  return target;
}

size_t OutputStorageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.OutputStorageConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
  if (this->output_schema() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_schema());
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2.BigQueryTable table = 1;
    case kTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.table_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputStorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.OutputStorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputStorageConfig* source =
      ::google::protobuf::DynamicCastToGenerated<OutputStorageConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.OutputStorageConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.OutputStorageConfig)
    MergeFrom(*source);
  }
}

void OutputStorageConfig::MergeFrom(const OutputStorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.OutputStorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_schema() != 0) {
    set_output_schema(from.output_schema());
  }
  switch (from.type_case()) {
    case kTable: {
      mutable_table()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.table());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void OutputStorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.OutputStorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputStorageConfig::CopyFrom(const OutputStorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.OutputStorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputStorageConfig::IsInitialized() const {
  return true;
}

void OutputStorageConfig::Swap(OutputStorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutputStorageConfig::InternalSwap(OutputStorageConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(output_schema_, other->output_schema_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata OutputStorageConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeStats::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InfoTypeStats_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
}
class InfoTypeStats::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InfoType& info_type(const InfoTypeStats* msg);
};

const ::google::privacy::dlp::v2::InfoType&
InfoTypeStats::HasBitSetters::info_type(const InfoTypeStats* msg) {
  return *msg->info_type_;
}
void InfoTypeStats::clear_info_type() {
  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeStats::kInfoTypeFieldNumber;
const int InfoTypeStats::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeStats::InfoTypeStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InfoTypeStats)
}
InfoTypeStats::InfoTypeStats(const InfoTypeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2::InfoType(*from.info_type_);
  } else {
    info_type_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InfoTypeStats)
}

void InfoTypeStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(count_));
}

InfoTypeStats::~InfoTypeStats() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InfoTypeStats)
  SharedDtor();
}

void InfoTypeStats::SharedDtor() {
  if (this != internal_default_instance()) delete info_type_;
}

void InfoTypeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoTypeStats& InfoTypeStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InfoTypeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InfoTypeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
  count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InfoTypeStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InfoTypeStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InfoTypeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InfoTypeStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InfoTypeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InfoTypeStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InfoTypeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InfoTypeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info_type(this), output);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InfoTypeStats)
}

::google::protobuf::uint8* InfoTypeStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InfoTypeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info_type(this), target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InfoTypeStats)
  return target;
}

size_t InfoTypeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InfoTypeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_type_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoTypeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InfoTypeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeStats* source =
      ::google::protobuf::DynamicCastToGenerated<InfoTypeStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InfoTypeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InfoTypeStats)
    MergeFrom(*source);
  }
}

void InfoTypeStats::MergeFrom(const InfoTypeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InfoTypeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void InfoTypeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InfoTypeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeStats::CopyFrom(const InfoTypeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InfoTypeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeStats::IsInitialized() const {
  return true;
}

void InfoTypeStats::Swap(InfoTypeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeStats::InternalSwap(InfoTypeStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_type_, other->info_type_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata InfoTypeStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectDataSourceDetails_RequestedOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectDataSourceDetails_RequestedOptions_default_instance_._instance.get_mutable()->snapshot_inspect_template_ = const_cast< ::google::privacy::dlp::v2::InspectTemplate*>(
      ::google::privacy::dlp::v2::InspectTemplate::internal_default_instance());
  ::google::privacy::dlp::v2::_InspectDataSourceDetails_RequestedOptions_default_instance_._instance.get_mutable()->job_config_ = const_cast< ::google::privacy::dlp::v2::InspectJobConfig*>(
      ::google::privacy::dlp::v2::InspectJobConfig::internal_default_instance());
}
class InspectDataSourceDetails_RequestedOptions::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectTemplate& snapshot_inspect_template(const InspectDataSourceDetails_RequestedOptions* msg);
  static const ::google::privacy::dlp::v2::InspectJobConfig& job_config(const InspectDataSourceDetails_RequestedOptions* msg);
};

const ::google::privacy::dlp::v2::InspectTemplate&
InspectDataSourceDetails_RequestedOptions::HasBitSetters::snapshot_inspect_template(const InspectDataSourceDetails_RequestedOptions* msg) {
  return *msg->snapshot_inspect_template_;
}
const ::google::privacy::dlp::v2::InspectJobConfig&
InspectDataSourceDetails_RequestedOptions::HasBitSetters::job_config(const InspectDataSourceDetails_RequestedOptions* msg) {
  return *msg->job_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectDataSourceDetails_RequestedOptions::kSnapshotInspectTemplateFieldNumber;
const int InspectDataSourceDetails_RequestedOptions::kJobConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectDataSourceDetails_RequestedOptions::InspectDataSourceDetails_RequestedOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
}
InspectDataSourceDetails_RequestedOptions::InspectDataSourceDetails_RequestedOptions(const InspectDataSourceDetails_RequestedOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snapshot_inspect_template()) {
    snapshot_inspect_template_ = new ::google::privacy::dlp::v2::InspectTemplate(*from.snapshot_inspect_template_);
  } else {
    snapshot_inspect_template_ = nullptr;
  }
  if (from.has_job_config()) {
    job_config_ = new ::google::privacy::dlp::v2::InspectJobConfig(*from.job_config_);
  } else {
    job_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
}

void InspectDataSourceDetails_RequestedOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&snapshot_inspect_template_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_config_) -
      reinterpret_cast<char*>(&snapshot_inspect_template_)) + sizeof(job_config_));
}

InspectDataSourceDetails_RequestedOptions::~InspectDataSourceDetails_RequestedOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  SharedDtor();
}

void InspectDataSourceDetails_RequestedOptions::SharedDtor() {
  if (this != internal_default_instance()) delete snapshot_inspect_template_;
  if (this != internal_default_instance()) delete job_config_;
}

void InspectDataSourceDetails_RequestedOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectDataSourceDetails_RequestedOptions& InspectDataSourceDetails_RequestedOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectDataSourceDetails_RequestedOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectDataSourceDetails_RequestedOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && snapshot_inspect_template_ != nullptr) {
    delete snapshot_inspect_template_;
  }
  snapshot_inspect_template_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && job_config_ != nullptr) {
    delete job_config_;
  }
  job_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectDataSourceDetails_RequestedOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectDataSourceDetails_RequestedOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectTemplate::_InternalParse;
        object = msg->mutable_snapshot_inspect_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InspectJobConfig job_config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectJobConfig::_InternalParse;
        object = msg->mutable_job_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectDataSourceDetails_RequestedOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snapshot_inspect_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectJobConfig job_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectDataSourceDetails_RequestedOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
  if (this->has_snapshot_inspect_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::snapshot_inspect_template(this), output);
  }

  // .google.privacy.dlp.v2.InspectJobConfig job_config = 3;
  if (this->has_job_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::job_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
}

::google::protobuf::uint8* InspectDataSourceDetails_RequestedOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
  if (this->has_snapshot_inspect_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::snapshot_inspect_template(this), target);
  }

  // .google.privacy.dlp.v2.InspectJobConfig job_config = 3;
  if (this->has_job_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::job_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  return target;
}

size_t InspectDataSourceDetails_RequestedOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
  if (this->has_snapshot_inspect_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *snapshot_inspect_template_);
  }

  // .google.privacy.dlp.v2.InspectJobConfig job_config = 3;
  if (this->has_job_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectDataSourceDetails_RequestedOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectDataSourceDetails_RequestedOptions* source =
      ::google::protobuf::DynamicCastToGenerated<InspectDataSourceDetails_RequestedOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
    MergeFrom(*source);
  }
}

void InspectDataSourceDetails_RequestedOptions::MergeFrom(const InspectDataSourceDetails_RequestedOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snapshot_inspect_template()) {
    mutable_snapshot_inspect_template()->::google::privacy::dlp::v2::InspectTemplate::MergeFrom(from.snapshot_inspect_template());
  }
  if (from.has_job_config()) {
    mutable_job_config()->::google::privacy::dlp::v2::InspectJobConfig::MergeFrom(from.job_config());
  }
}

void InspectDataSourceDetails_RequestedOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectDataSourceDetails_RequestedOptions::CopyFrom(const InspectDataSourceDetails_RequestedOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectDataSourceDetails_RequestedOptions::IsInitialized() const {
  return true;
}

void InspectDataSourceDetails_RequestedOptions::Swap(InspectDataSourceDetails_RequestedOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectDataSourceDetails_RequestedOptions::InternalSwap(InspectDataSourceDetails_RequestedOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(snapshot_inspect_template_, other->snapshot_inspect_template_);
  swap(job_config_, other->job_config_);
}

::google::protobuf::Metadata InspectDataSourceDetails_RequestedOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectDataSourceDetails_Result::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectDataSourceDetails_Result_default_instance_._instance.get_mutable()->hybrid_stats_ = const_cast< ::google::privacy::dlp::v2::HybridInspectStatistics*>(
      ::google::privacy::dlp::v2::HybridInspectStatistics::internal_default_instance());
}
class InspectDataSourceDetails_Result::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::HybridInspectStatistics& hybrid_stats(const InspectDataSourceDetails_Result* msg);
};

const ::google::privacy::dlp::v2::HybridInspectStatistics&
InspectDataSourceDetails_Result::HasBitSetters::hybrid_stats(const InspectDataSourceDetails_Result* msg) {
  return *msg->hybrid_stats_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectDataSourceDetails_Result::kProcessedBytesFieldNumber;
const int InspectDataSourceDetails_Result::kTotalEstimatedBytesFieldNumber;
const int InspectDataSourceDetails_Result::kInfoTypeStatsFieldNumber;
const int InspectDataSourceDetails_Result::kHybridStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectDataSourceDetails_Result::InspectDataSourceDetails_Result()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
}
InspectDataSourceDetails_Result::InspectDataSourceDetails_Result(const InspectDataSourceDetails_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      info_type_stats_(from.info_type_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hybrid_stats()) {
    hybrid_stats_ = new ::google::privacy::dlp::v2::HybridInspectStatistics(*from.hybrid_stats_);
  } else {
    hybrid_stats_ = nullptr;
  }
  ::memcpy(&processed_bytes_, &from.processed_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_estimated_bytes_) -
    reinterpret_cast<char*>(&processed_bytes_)) + sizeof(total_estimated_bytes_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
}

void InspectDataSourceDetails_Result::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&hybrid_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_estimated_bytes_) -
      reinterpret_cast<char*>(&hybrid_stats_)) + sizeof(total_estimated_bytes_));
}

InspectDataSourceDetails_Result::~InspectDataSourceDetails_Result() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  SharedDtor();
}

void InspectDataSourceDetails_Result::SharedDtor() {
  if (this != internal_default_instance()) delete hybrid_stats_;
}

void InspectDataSourceDetails_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectDataSourceDetails_Result& InspectDataSourceDetails_Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectDataSourceDetails_Result_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectDataSourceDetails_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_type_stats_.Clear();
  if (GetArenaNoVirtual() == nullptr && hybrid_stats_ != nullptr) {
    delete hybrid_stats_;
  }
  hybrid_stats_ = nullptr;
  ::memset(&processed_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_estimated_bytes_) -
      reinterpret_cast<char*>(&processed_bytes_)) + sizeof(total_estimated_bytes_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectDataSourceDetails_Result::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectDataSourceDetails_Result*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 processed_bytes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_processed_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 total_estimated_bytes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_total_estimated_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InfoTypeStats::_InternalParse;
          object = msg->add_info_type_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.HybridInspectStatistics hybrid_stats = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::HybridInspectStatistics::_InternalParse;
        object = msg->mutable_hybrid_stats();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectDataSourceDetails_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 processed_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_estimated_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_estimated_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info_type_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.HybridInspectStatistics hybrid_stats = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hybrid_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectDataSourceDetails_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->processed_bytes(), output);
  }

  // int64 total_estimated_bytes = 2;
  if (this->total_estimated_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_estimated_bytes(), output);
  }

  // repeated .google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_type_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->info_type_stats(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.HybridInspectStatistics hybrid_stats = 7;
  if (this->has_hybrid_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::hybrid_stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
}

::google::protobuf::uint8* InspectDataSourceDetails_Result::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->processed_bytes(), target);
  }

  // int64 total_estimated_bytes = 2;
  if (this->total_estimated_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_estimated_bytes(), target);
  }

  // repeated .google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_type_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->info_type_stats(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.HybridInspectStatistics hybrid_stats = 7;
  if (this->has_hybrid_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::hybrid_stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  return target;
}

size_t InspectDataSourceDetails_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->info_type_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_type_stats(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.HybridInspectStatistics hybrid_stats = 7;
  if (this->has_hybrid_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hybrid_stats_);
  }

  // int64 processed_bytes = 1;
  if (this->processed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processed_bytes());
  }

  // int64 total_estimated_bytes = 2;
  if (this->total_estimated_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_estimated_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectDataSourceDetails_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectDataSourceDetails_Result* source =
      ::google::protobuf::DynamicCastToGenerated<InspectDataSourceDetails_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
    MergeFrom(*source);
  }
}

void InspectDataSourceDetails_Result::MergeFrom(const InspectDataSourceDetails_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_type_stats_.MergeFrom(from.info_type_stats_);
  if (from.has_hybrid_stats()) {
    mutable_hybrid_stats()->::google::privacy::dlp::v2::HybridInspectStatistics::MergeFrom(from.hybrid_stats());
  }
  if (from.processed_bytes() != 0) {
    set_processed_bytes(from.processed_bytes());
  }
  if (from.total_estimated_bytes() != 0) {
    set_total_estimated_bytes(from.total_estimated_bytes());
  }
}

void InspectDataSourceDetails_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectDataSourceDetails_Result::CopyFrom(const InspectDataSourceDetails_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectDataSourceDetails.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectDataSourceDetails_Result::IsInitialized() const {
  return true;
}

void InspectDataSourceDetails_Result::Swap(InspectDataSourceDetails_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectDataSourceDetails_Result::InternalSwap(InspectDataSourceDetails_Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&info_type_stats_)->InternalSwap(CastToBase(&other->info_type_stats_));
  swap(hybrid_stats_, other->hybrid_stats_);
  swap(processed_bytes_, other->processed_bytes_);
  swap(total_estimated_bytes_, other->total_estimated_bytes_);
}

::google::protobuf::Metadata InspectDataSourceDetails_Result::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectDataSourceDetails::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectDataSourceDetails_default_instance_._instance.get_mutable()->requested_options_ = const_cast< ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions*>(
      ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions::internal_default_instance());
  ::google::privacy::dlp::v2::_InspectDataSourceDetails_default_instance_._instance.get_mutable()->result_ = const_cast< ::google::privacy::dlp::v2::InspectDataSourceDetails_Result*>(
      ::google::privacy::dlp::v2::InspectDataSourceDetails_Result::internal_default_instance());
}
class InspectDataSourceDetails::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions& requested_options(const InspectDataSourceDetails* msg);
  static const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result& result(const InspectDataSourceDetails* msg);
};

const ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions&
InspectDataSourceDetails::HasBitSetters::requested_options(const InspectDataSourceDetails* msg) {
  return *msg->requested_options_;
}
const ::google::privacy::dlp::v2::InspectDataSourceDetails_Result&
InspectDataSourceDetails::HasBitSetters::result(const InspectDataSourceDetails* msg) {
  return *msg->result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectDataSourceDetails::kRequestedOptionsFieldNumber;
const int InspectDataSourceDetails::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectDataSourceDetails::InspectDataSourceDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectDataSourceDetails)
}
InspectDataSourceDetails::InspectDataSourceDetails(const InspectDataSourceDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_requested_options()) {
    requested_options_ = new ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions(*from.requested_options_);
  } else {
    requested_options_ = nullptr;
  }
  if (from.has_result()) {
    result_ = new ::google::privacy::dlp::v2::InspectDataSourceDetails_Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectDataSourceDetails)
}

void InspectDataSourceDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&requested_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&requested_options_)) + sizeof(result_));
}

InspectDataSourceDetails::~InspectDataSourceDetails() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectDataSourceDetails)
  SharedDtor();
}

void InspectDataSourceDetails::SharedDtor() {
  if (this != internal_default_instance()) delete requested_options_;
  if (this != internal_default_instance()) delete result_;
}

void InspectDataSourceDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectDataSourceDetails& InspectDataSourceDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectDataSourceDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectDataSourceDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && requested_options_ != nullptr) {
    delete requested_options_;
  }
  requested_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectDataSourceDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectDataSourceDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions::_InternalParse;
        object = msg->mutable_requested_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectDataSourceDetails_Result::_InternalParse;
        object = msg->mutable_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectDataSourceDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectDataSourceDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectDataSourceDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectDataSourceDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
  if (this->has_requested_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::requested_options(this), output);
  }

  // .google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
  if (this->has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectDataSourceDetails)
}

::google::protobuf::uint8* InspectDataSourceDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
  if (this->has_requested_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::requested_options(this), target);
  }

  // .google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
  if (this->has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectDataSourceDetails)
  return target;
}

size_t InspectDataSourceDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
  if (this->has_requested_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requested_options_);
  }

  // .google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
  if (this->has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectDataSourceDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectDataSourceDetails* source =
      ::google::protobuf::DynamicCastToGenerated<InspectDataSourceDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectDataSourceDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectDataSourceDetails)
    MergeFrom(*source);
  }
}

void InspectDataSourceDetails::MergeFrom(const InspectDataSourceDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requested_options()) {
    mutable_requested_options()->::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions::MergeFrom(from.requested_options());
  }
  if (from.has_result()) {
    mutable_result()->::google::privacy::dlp::v2::InspectDataSourceDetails_Result::MergeFrom(from.result());
  }
}

void InspectDataSourceDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectDataSourceDetails::CopyFrom(const InspectDataSourceDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectDataSourceDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectDataSourceDetails::IsInitialized() const {
  return true;
}

void InspectDataSourceDetails::Swap(InspectDataSourceDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectDataSourceDetails::InternalSwap(InspectDataSourceDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(requested_options_, other->requested_options_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata InspectDataSourceDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HybridInspectStatistics::InitAsDefaultInstance() {
}
class HybridInspectStatistics::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridInspectStatistics::kProcessedCountFieldNumber;
const int HybridInspectStatistics::kAbortedCountFieldNumber;
const int HybridInspectStatistics::kPendingCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridInspectStatistics::HybridInspectStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.HybridInspectStatistics)
}
HybridInspectStatistics::HybridInspectStatistics(const HybridInspectStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&processed_count_, &from.processed_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_count_) -
    reinterpret_cast<char*>(&processed_count_)) + sizeof(pending_count_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.HybridInspectStatistics)
}

void HybridInspectStatistics::SharedCtor() {
  ::memset(&processed_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_count_) -
      reinterpret_cast<char*>(&processed_count_)) + sizeof(pending_count_));
}

HybridInspectStatistics::~HybridInspectStatistics() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.HybridInspectStatistics)
  SharedDtor();
}

void HybridInspectStatistics::SharedDtor() {
}

void HybridInspectStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridInspectStatistics& HybridInspectStatistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HybridInspectStatistics_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void HybridInspectStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.HybridInspectStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&processed_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_count_) -
      reinterpret_cast<char*>(&processed_count_)) + sizeof(pending_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HybridInspectStatistics::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HybridInspectStatistics*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 processed_count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_processed_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 aborted_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_aborted_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 pending_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_pending_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridInspectStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.HybridInspectStatistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 processed_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 aborted_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aborted_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 pending_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.HybridInspectStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.HybridInspectStatistics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HybridInspectStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.HybridInspectStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_count = 1;
  if (this->processed_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->processed_count(), output);
  }

  // int64 aborted_count = 2;
  if (this->aborted_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->aborted_count(), output);
  }

  // int64 pending_count = 3;
  if (this->pending_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pending_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.HybridInspectStatistics)
}

::google::protobuf::uint8* HybridInspectStatistics::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.HybridInspectStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 processed_count = 1;
  if (this->processed_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->processed_count(), target);
  }

  // int64 aborted_count = 2;
  if (this->aborted_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->aborted_count(), target);
  }

  // int64 pending_count = 3;
  if (this->pending_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pending_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.HybridInspectStatistics)
  return target;
}

size_t HybridInspectStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.HybridInspectStatistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 processed_count = 1;
  if (this->processed_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processed_count());
  }

  // int64 aborted_count = 2;
  if (this->aborted_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->aborted_count());
  }

  // int64 pending_count = 3;
  if (this->pending_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pending_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridInspectStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.HybridInspectStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridInspectStatistics* source =
      ::google::protobuf::DynamicCastToGenerated<HybridInspectStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.HybridInspectStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.HybridInspectStatistics)
    MergeFrom(*source);
  }
}

void HybridInspectStatistics::MergeFrom(const HybridInspectStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.HybridInspectStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processed_count() != 0) {
    set_processed_count(from.processed_count());
  }
  if (from.aborted_count() != 0) {
    set_aborted_count(from.aborted_count());
  }
  if (from.pending_count() != 0) {
    set_pending_count(from.pending_count());
  }
}

void HybridInspectStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.HybridInspectStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridInspectStatistics::CopyFrom(const HybridInspectStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.HybridInspectStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridInspectStatistics::IsInitialized() const {
  return true;
}

void HybridInspectStatistics::Swap(HybridInspectStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridInspectStatistics::InternalSwap(HybridInspectStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(processed_count_, other->processed_count_);
  swap(aborted_count_, other->aborted_count_);
  swap(pending_count_, other->pending_count_);
}

::google::protobuf::Metadata HybridInspectStatistics::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeDescription::InitAsDefaultInstance() {
}
class InfoTypeDescription::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeDescription::kNameFieldNumber;
const int InfoTypeDescription::kDisplayNameFieldNumber;
const int InfoTypeDescription::kSupportedByFieldNumber;
const int InfoTypeDescription::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeDescription::InfoTypeDescription()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InfoTypeDescription)
}
InfoTypeDescription::InfoTypeDescription(const InfoTypeDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      supported_by_(from.supported_by_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InfoTypeDescription)
}

void InfoTypeDescription::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InfoTypeDescription::~InfoTypeDescription() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InfoTypeDescription)
  SharedDtor();
}

void InfoTypeDescription::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoTypeDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoTypeDescription& InfoTypeDescription::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InfoTypeDescription_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InfoTypeDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_by_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InfoTypeDescription::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InfoTypeDescription*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InfoTypeDescription.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string display_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InfoTypeDescription.display_name");
        object = msg->mutable_display_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_supported_by();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_supported_by(static_cast<::google::privacy::dlp::v2::InfoTypeSupportedBy>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // string description = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InfoTypeDescription.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InfoTypeDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InfoTypeDescription)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InfoTypeDescription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InfoTypeDescription.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_supported_by(static_cast< ::google::privacy::dlp::v2::InfoTypeSupportedBy >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_supported_by(static_cast< ::google::privacy::dlp::v2::InfoTypeSupportedBy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InfoTypeDescription.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InfoTypeDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InfoTypeDescription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InfoTypeDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoTypeDescription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoTypeDescription.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // repeated .google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
  if (this->supported_by_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_supported_by_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->supported_by_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->supported_by(i), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoTypeDescription.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InfoTypeDescription)
}

::google::protobuf::uint8* InfoTypeDescription::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InfoTypeDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoTypeDescription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoTypeDescription.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // repeated .google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
  if (this->supported_by_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _supported_by_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->supported_by_, target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoTypeDescription.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InfoTypeDescription)
  return target;
}

size_t InfoTypeDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InfoTypeDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->supported_by_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supported_by(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _supported_by_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoTypeDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeDescription* source =
      ::google::protobuf::DynamicCastToGenerated<InfoTypeDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InfoTypeDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InfoTypeDescription)
    MergeFrom(*source);
  }
}

void InfoTypeDescription::MergeFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InfoTypeDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_by_.MergeFrom(from.supported_by_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void InfoTypeDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeDescription::CopyFrom(const InfoTypeDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InfoTypeDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeDescription::IsInitialized() const {
  return true;
}

void InfoTypeDescription::Swap(InfoTypeDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeDescription::InternalSwap(InfoTypeDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  supported_by_.InternalSwap(&other->supported_by_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata InfoTypeDescription::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListInfoTypesRequest::InitAsDefaultInstance() {
}
class ListInfoTypesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesRequest::kParentFieldNumber;
const int ListInfoTypesRequest::kLanguageCodeFieldNumber;
const int ListInfoTypesRequest::kFilterFieldNumber;
const int ListInfoTypesRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesRequest::ListInfoTypesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListInfoTypesRequest)
}
ListInfoTypesRequest::ListInfoTypesRequest(const ListInfoTypesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListInfoTypesRequest)
}

void ListInfoTypesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListInfoTypesRequest::~ListInfoTypesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListInfoTypesRequest)
  SharedDtor();
}

void ListInfoTypesRequest::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInfoTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInfoTypesRequest& ListInfoTypesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListInfoTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListInfoTypesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListInfoTypesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string language_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInfoTypesRequest.language_code");
        object = msg->mutable_language_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInfoTypesRequest.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInfoTypesRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string parent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInfoTypesRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListInfoTypesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInfoTypesRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInfoTypesRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInfoTypesRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInfoTypesRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListInfoTypesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListInfoTypesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListInfoTypesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // string location_id = 3;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->location_id(), output);
  }

  // string parent = 4;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListInfoTypesRequest)
}

::google::protobuf::uint8* ListInfoTypesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // string location_id = 3;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->location_id(), target);
  }

  // string parent = 4;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInfoTypesRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListInfoTypesRequest)
  return target;
}

size_t ListInfoTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string location_id = 3;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // string parent = 4;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInfoTypesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListInfoTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListInfoTypesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListInfoTypesRequest)
    MergeFrom(*source);
  }
}

void ListInfoTypesRequest::MergeFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {

    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
}

void ListInfoTypesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesRequest::CopyFrom(const ListInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesRequest::IsInitialized() const {
  return true;
}

void ListInfoTypesRequest::Swap(ListInfoTypesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesRequest::InternalSwap(ListInfoTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_code_.Swap(&other->language_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListInfoTypesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListInfoTypesResponse::InitAsDefaultInstance() {
}
class ListInfoTypesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInfoTypesResponse::kInfoTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInfoTypesResponse::ListInfoTypesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListInfoTypesResponse)
}
ListInfoTypesResponse::ListInfoTypesResponse(const ListInfoTypesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      info_types_(from.info_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListInfoTypesResponse)
}

void ListInfoTypesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

ListInfoTypesResponse::~ListInfoTypesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListInfoTypesResponse)
  SharedDtor();
}

void ListInfoTypesResponse::SharedDtor() {
}

void ListInfoTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInfoTypesResponse& ListInfoTypesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListInfoTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListInfoTypesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListInfoTypesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InfoTypeDescription::_InternalParse;
          object = msg->add_info_types();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListInfoTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListInfoTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListInfoTypesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListInfoTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->info_types(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListInfoTypesResponse)
}

::google::protobuf::uint8* ListInfoTypesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListInfoTypesResponse)
  return target;
}

size_t ListInfoTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInfoTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInfoTypesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListInfoTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListInfoTypesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListInfoTypesResponse)
    MergeFrom(*source);
  }
}

void ListInfoTypesResponse::MergeFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
}

void ListInfoTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInfoTypesResponse::CopyFrom(const ListInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInfoTypesResponse::IsInitialized() const {
  return true;
}

void ListInfoTypesResponse::Swap(ListInfoTypesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInfoTypesResponse::InternalSwap(ListInfoTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&info_types_)->InternalSwap(CastToBase(&other->info_types_));
}

::google::protobuf::Metadata ListInfoTypesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RiskAnalysisJobConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RiskAnalysisJobConfig_default_instance_._instance.get_mutable()->privacy_metric_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric*>(
      ::google::privacy::dlp::v2::PrivacyMetric::internal_default_instance());
  ::google::privacy::dlp::v2::_RiskAnalysisJobConfig_default_instance_._instance.get_mutable()->source_table_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
}
class RiskAnalysisJobConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::PrivacyMetric& privacy_metric(const RiskAnalysisJobConfig* msg);
  static const ::google::privacy::dlp::v2::BigQueryTable& source_table(const RiskAnalysisJobConfig* msg);
};

const ::google::privacy::dlp::v2::PrivacyMetric&
RiskAnalysisJobConfig::HasBitSetters::privacy_metric(const RiskAnalysisJobConfig* msg) {
  return *msg->privacy_metric_;
}
const ::google::privacy::dlp::v2::BigQueryTable&
RiskAnalysisJobConfig::HasBitSetters::source_table(const RiskAnalysisJobConfig* msg) {
  return *msg->source_table_;
}
void RiskAnalysisJobConfig::clear_source_table() {
  if (GetArenaNoVirtual() == nullptr && source_table_ != nullptr) {
    delete source_table_;
  }
  source_table_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RiskAnalysisJobConfig::kPrivacyMetricFieldNumber;
const int RiskAnalysisJobConfig::kSourceTableFieldNumber;
const int RiskAnalysisJobConfig::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RiskAnalysisJobConfig::RiskAnalysisJobConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RiskAnalysisJobConfig)
}
RiskAnalysisJobConfig::RiskAnalysisJobConfig(const RiskAnalysisJobConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_privacy_metric()) {
    privacy_metric_ = new ::google::privacy::dlp::v2::PrivacyMetric(*from.privacy_metric_);
  } else {
    privacy_metric_ = nullptr;
  }
  if (from.has_source_table()) {
    source_table_ = new ::google::privacy::dlp::v2::BigQueryTable(*from.source_table_);
  } else {
    source_table_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RiskAnalysisJobConfig)
}

void RiskAnalysisJobConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&privacy_metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_table_) -
      reinterpret_cast<char*>(&privacy_metric_)) + sizeof(source_table_));
}

RiskAnalysisJobConfig::~RiskAnalysisJobConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  SharedDtor();
}

void RiskAnalysisJobConfig::SharedDtor() {
  if (this != internal_default_instance()) delete privacy_metric_;
  if (this != internal_default_instance()) delete source_table_;
}

void RiskAnalysisJobConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RiskAnalysisJobConfig& RiskAnalysisJobConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RiskAnalysisJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RiskAnalysisJobConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  if (GetArenaNoVirtual() == nullptr && privacy_metric_ != nullptr) {
    delete privacy_metric_;
  }
  privacy_metric_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_table_ != nullptr) {
    delete source_table_;
  }
  source_table_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RiskAnalysisJobConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RiskAnalysisJobConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric::_InternalParse;
        object = msg->mutable_privacy_metric();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BigQueryTable source_table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_source_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.Action actions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Action::_InternalParse;
          object = msg->add_actions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RiskAnalysisJobConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_privacy_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryTable source_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Action actions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RiskAnalysisJobConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
  if (this->has_privacy_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::privacy_metric(this), output);
  }

  // .google.privacy.dlp.v2.BigQueryTable source_table = 2;
  if (this->has_source_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::source_table(this), output);
  }

  // repeated .google.privacy.dlp.v2.Action actions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RiskAnalysisJobConfig)
}

::google::protobuf::uint8* RiskAnalysisJobConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
  if (this->has_privacy_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::privacy_metric(this), target);
  }

  // .google.privacy.dlp.v2.BigQueryTable source_table = 2;
  if (this->has_source_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::source_table(this), target);
  }

  // repeated .google.privacy.dlp.v2.Action actions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->actions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  return target;
}

size_t RiskAnalysisJobConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Action actions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
  if (this->has_privacy_metric()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *privacy_metric_);
  }

  // .google.privacy.dlp.v2.BigQueryTable source_table = 2;
  if (this->has_source_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RiskAnalysisJobConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RiskAnalysisJobConfig* source =
      ::google::protobuf::DynamicCastToGenerated<RiskAnalysisJobConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RiskAnalysisJobConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RiskAnalysisJobConfig)
    MergeFrom(*source);
  }
}

void RiskAnalysisJobConfig::MergeFrom(const RiskAnalysisJobConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.has_privacy_metric()) {
    mutable_privacy_metric()->::google::privacy::dlp::v2::PrivacyMetric::MergeFrom(from.privacy_metric());
  }
  if (from.has_source_table()) {
    mutable_source_table()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.source_table());
  }
}

void RiskAnalysisJobConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskAnalysisJobConfig::CopyFrom(const RiskAnalysisJobConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RiskAnalysisJobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskAnalysisJobConfig::IsInitialized() const {
  return true;
}

void RiskAnalysisJobConfig::Swap(RiskAnalysisJobConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RiskAnalysisJobConfig::InternalSwap(RiskAnalysisJobConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  swap(privacy_metric_, other->privacy_metric_);
  swap(source_table_, other->source_table_);
}

::google::protobuf::Metadata RiskAnalysisJobConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuasiId::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_QuasiId_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2::_QuasiId_default_instance_.info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2::_QuasiId_default_instance_.custom_tag_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2::_QuasiId_default_instance_.inferred_ = const_cast< ::google::protobuf::Empty*>(
      ::google::protobuf::Empty::internal_default_instance());
}
class QuasiId::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const QuasiId* msg);
  static const ::google::privacy::dlp::v2::InfoType& info_type(const QuasiId* msg);
  static const ::google::protobuf::Empty& inferred(const QuasiId* msg);
};

const ::google::privacy::dlp::v2::FieldId&
QuasiId::HasBitSetters::field(const QuasiId* msg) {
  return *msg->field_;
}
const ::google::privacy::dlp::v2::InfoType&
QuasiId::HasBitSetters::info_type(const QuasiId* msg) {
  return *msg->tag_.info_type_;
}
const ::google::protobuf::Empty&
QuasiId::HasBitSetters::inferred(const QuasiId* msg) {
  return *msg->tag_.inferred_;
}
void QuasiId::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
void QuasiId::set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tag();
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    set_has_info_type();
    tag_.info_type_ = info_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.QuasiId.info_type)
}
void QuasiId::clear_info_type() {
  if (has_info_type()) {
    delete tag_.info_type_;
    clear_has_tag();
  }
}
void QuasiId::set_allocated_inferred(::google::protobuf::Empty* inferred) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tag();
  if (inferred) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(inferred)->GetArena();
    if (message_arena != submessage_arena) {
      inferred = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inferred, submessage_arena);
    }
    set_has_inferred();
    tag_.inferred_ = inferred;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.QuasiId.inferred)
}
void QuasiId::clear_inferred() {
  if (has_inferred()) {
    delete tag_.inferred_;
    clear_has_tag();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuasiId::kFieldFieldNumber;
const int QuasiId::kInfoTypeFieldNumber;
const int QuasiId::kCustomTagFieldNumber;
const int QuasiId::kInferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuasiId::QuasiId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.QuasiId)
}
QuasiId::QuasiId(const QuasiId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  clear_has_tag();
  switch (from.tag_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kCustomTag: {
      set_custom_tag(from.custom_tag());
      break;
    }
    case kInferred: {
      mutable_inferred()->::google::protobuf::Empty::MergeFrom(from.inferred());
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.QuasiId)
}

void QuasiId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_QuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  field_ = nullptr;
  clear_has_tag();
}

QuasiId::~QuasiId() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.QuasiId)
  SharedDtor();
}

void QuasiId::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
  if (has_tag()) {
    clear_tag();
  }
}

void QuasiId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuasiId& QuasiId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuasiId_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void QuasiId::clear_tag() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.QuasiId)
  switch (tag_case()) {
    case kInfoType: {
      delete tag_.info_type_;
      break;
    }
    case kCustomTag: {
      tag_.custom_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInferred: {
      delete tag_.inferred_;
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TAG_NOT_SET;
}


void QuasiId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.QuasiId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  clear_tag();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuasiId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuasiId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InfoType info_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string custom_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.QuasiId.custom_tag");
        object = msg->mutable_custom_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Empty inferred = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Empty::_InternalParse;
        object = msg->mutable_inferred();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuasiId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.QuasiId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InfoType info_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.QuasiId.custom_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Empty inferred = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inferred()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.QuasiId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.QuasiId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuasiId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.QuasiId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::info_type(this), output);
  }

  // string custom_tag = 3;
  if (has_custom_tag()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.QuasiId.custom_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->custom_tag(), output);
  }

  // .google.protobuf.Empty inferred = 4;
  if (has_inferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::inferred(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.QuasiId)
}

::google::protobuf::uint8* QuasiId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.QuasiId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::info_type(this), target);
  }

  // string custom_tag = 3;
  if (has_custom_tag()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.QuasiId.custom_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->custom_tag(), target);
  }

  // .google.protobuf.Empty inferred = 4;
  if (has_inferred()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::inferred(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.QuasiId)
  return target;
}

size_t QuasiId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.QuasiId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  switch (tag_case()) {
    // .google.privacy.dlp.v2.InfoType info_type = 2;
    case kInfoType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tag_.info_type_);
      break;
    }
    // string custom_tag = 3;
    case kCustomTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_tag());
      break;
    }
    // .google.protobuf.Empty inferred = 4;
    case kInferred: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tag_.inferred_);
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuasiId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.QuasiId)
  GOOGLE_DCHECK_NE(&from, this);
  const QuasiId* source =
      ::google::protobuf::DynamicCastToGenerated<QuasiId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.QuasiId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.QuasiId)
    MergeFrom(*source);
  }
}

void QuasiId::MergeFrom(const QuasiId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.QuasiId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
  switch (from.tag_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kCustomTag: {
      set_custom_tag(from.custom_tag());
      break;
    }
    case kInferred: {
      mutable_inferred()->::google::protobuf::Empty::MergeFrom(from.inferred());
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
}

void QuasiId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.QuasiId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuasiId::CopyFrom(const QuasiId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.QuasiId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuasiId::IsInitialized() const {
  return true;
}

void QuasiId::Swap(QuasiId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuasiId::InternalSwap(QuasiId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_, other->field_);
  swap(tag_, other->tag_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata QuasiId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StatisticalTable_QuasiIdentifierField::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StatisticalTable_QuasiIdentifierField_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class StatisticalTable_QuasiIdentifierField::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const StatisticalTable_QuasiIdentifierField* msg);
};

const ::google::privacy::dlp::v2::FieldId&
StatisticalTable_QuasiIdentifierField::HasBitSetters::field(const StatisticalTable_QuasiIdentifierField* msg) {
  return *msg->field_;
}
void StatisticalTable_QuasiIdentifierField::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticalTable_QuasiIdentifierField::kFieldFieldNumber;
const int StatisticalTable_QuasiIdentifierField::kCustomTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticalTable_QuasiIdentifierField::StatisticalTable_QuasiIdentifierField()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
}
StatisticalTable_QuasiIdentifierField::StatisticalTable_QuasiIdentifierField(const StatisticalTable_QuasiIdentifierField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.custom_tag().size() > 0) {
    custom_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_tag_);
  }
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
}

void StatisticalTable_QuasiIdentifierField::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_ = nullptr;
}

StatisticalTable_QuasiIdentifierField::~StatisticalTable_QuasiIdentifierField() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  SharedDtor();
}

void StatisticalTable_QuasiIdentifierField::SharedDtor() {
  custom_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_;
}

void StatisticalTable_QuasiIdentifierField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticalTable_QuasiIdentifierField& StatisticalTable_QuasiIdentifierField::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StatisticalTable_QuasiIdentifierField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void StatisticalTable_QuasiIdentifierField::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatisticalTable_QuasiIdentifierField::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StatisticalTable_QuasiIdentifierField*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string custom_tag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag");
        object = msg->mutable_custom_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatisticalTable_QuasiIdentifierField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatisticalTable_QuasiIdentifierField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  // string custom_tag = 2;
  if (this->custom_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->custom_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
}

::google::protobuf::uint8* StatisticalTable_QuasiIdentifierField::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  // string custom_tag = 2;
  if (this->custom_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.custom_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->custom_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  return target;
}

size_t StatisticalTable_QuasiIdentifierField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string custom_tag = 2;
  if (this->custom_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_tag());
  }

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticalTable_QuasiIdentifierField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticalTable_QuasiIdentifierField* source =
      ::google::protobuf::DynamicCastToGenerated<StatisticalTable_QuasiIdentifierField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
    MergeFrom(*source);
  }
}

void StatisticalTable_QuasiIdentifierField::MergeFrom(const StatisticalTable_QuasiIdentifierField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.custom_tag().size() > 0) {

    custom_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_tag_);
  }
  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
}

void StatisticalTable_QuasiIdentifierField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticalTable_QuasiIdentifierField::CopyFrom(const StatisticalTable_QuasiIdentifierField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticalTable_QuasiIdentifierField::IsInitialized() const {
  return true;
}

void StatisticalTable_QuasiIdentifierField::Swap(StatisticalTable_QuasiIdentifierField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticalTable_QuasiIdentifierField::InternalSwap(StatisticalTable_QuasiIdentifierField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  custom_tag_.Swap(&other->custom_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_, other->field_);
}

::google::protobuf::Metadata StatisticalTable_QuasiIdentifierField::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StatisticalTable::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StatisticalTable_default_instance_._instance.get_mutable()->table_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
  ::google::privacy::dlp::v2::_StatisticalTable_default_instance_._instance.get_mutable()->relative_frequency_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class StatisticalTable::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::BigQueryTable& table(const StatisticalTable* msg);
  static const ::google::privacy::dlp::v2::FieldId& relative_frequency(const StatisticalTable* msg);
};

const ::google::privacy::dlp::v2::BigQueryTable&
StatisticalTable::HasBitSetters::table(const StatisticalTable* msg) {
  return *msg->table_;
}
const ::google::privacy::dlp::v2::FieldId&
StatisticalTable::HasBitSetters::relative_frequency(const StatisticalTable* msg) {
  return *msg->relative_frequency_;
}
void StatisticalTable::clear_table() {
  if (GetArenaNoVirtual() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
}
void StatisticalTable::clear_relative_frequency() {
  if (GetArenaNoVirtual() == nullptr && relative_frequency_ != nullptr) {
    delete relative_frequency_;
  }
  relative_frequency_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticalTable::kTableFieldNumber;
const int StatisticalTable::kQuasiIdsFieldNumber;
const int StatisticalTable::kRelativeFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticalTable::StatisticalTable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StatisticalTable)
}
StatisticalTable::StatisticalTable(const StatisticalTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_(from.quasi_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relative_frequency()) {
    relative_frequency_ = new ::google::privacy::dlp::v2::FieldId(*from.relative_frequency_);
  } else {
    relative_frequency_ = nullptr;
  }
  if (from.has_table()) {
    table_ = new ::google::privacy::dlp::v2::BigQueryTable(*from.table_);
  } else {
    table_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StatisticalTable)
}

void StatisticalTable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&relative_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&relative_frequency_)) + sizeof(table_));
}

StatisticalTable::~StatisticalTable() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StatisticalTable)
  SharedDtor();
}

void StatisticalTable::SharedDtor() {
  if (this != internal_default_instance()) delete relative_frequency_;
  if (this != internal_default_instance()) delete table_;
}

void StatisticalTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticalTable& StatisticalTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StatisticalTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void StatisticalTable::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StatisticalTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && relative_frequency_ != nullptr) {
    delete relative_frequency_;
  }
  relative_frequency_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatisticalTable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StatisticalTable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField::_InternalParse;
          object = msg->add_quasi_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_relative_frequency();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatisticalTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StatisticalTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StatisticalTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StatisticalTable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatisticalTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StatisticalTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_relative_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::relative_frequency(this), output);
  }

  // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::table(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StatisticalTable)
}

::google::protobuf::uint8* StatisticalTable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StatisticalTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_relative_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::relative_frequency(this), target);
  }

  // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::table(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StatisticalTable)
  return target;
}

size_t StatisticalTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StatisticalTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_relative_frequency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_frequency_);
  }

  // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticalTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StatisticalTable)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticalTable* source =
      ::google::protobuf::DynamicCastToGenerated<StatisticalTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StatisticalTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StatisticalTable)
    MergeFrom(*source);
  }
}

void StatisticalTable::MergeFrom(const StatisticalTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StatisticalTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  if (from.has_relative_frequency()) {
    mutable_relative_frequency()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.relative_frequency());
  }
  if (from.has_table()) {
    mutable_table()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.table());
  }
}

void StatisticalTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StatisticalTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticalTable::CopyFrom(const StatisticalTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StatisticalTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticalTable::IsInitialized() const {
  return true;
}

void StatisticalTable::Swap(StatisticalTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticalTable::InternalSwap(StatisticalTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_)->InternalSwap(CastToBase(&other->quasi_ids_));
  swap(relative_frequency_, other->relative_frequency_);
  swap(table_, other->table_);
}

::google::protobuf::Metadata StatisticalTable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_NumericalStatsConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_NumericalStatsConfig_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class PrivacyMetric_NumericalStatsConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const PrivacyMetric_NumericalStatsConfig* msg);
};

const ::google::privacy::dlp::v2::FieldId&
PrivacyMetric_NumericalStatsConfig::HasBitSetters::field(const PrivacyMetric_NumericalStatsConfig* msg) {
  return *msg->field_;
}
void PrivacyMetric_NumericalStatsConfig::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_NumericalStatsConfig::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_NumericalStatsConfig::PrivacyMetric_NumericalStatsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
}
PrivacyMetric_NumericalStatsConfig::PrivacyMetric_NumericalStatsConfig(const PrivacyMetric_NumericalStatsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
}

void PrivacyMetric_NumericalStatsConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  field_ = nullptr;
}

PrivacyMetric_NumericalStatsConfig::~PrivacyMetric_NumericalStatsConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  SharedDtor();
}

void PrivacyMetric_NumericalStatsConfig::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void PrivacyMetric_NumericalStatsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_NumericalStatsConfig& PrivacyMetric_NumericalStatsConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_NumericalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_NumericalStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_NumericalStatsConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_NumericalStatsConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_NumericalStatsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_NumericalStatsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
}

::google::protobuf::uint8* PrivacyMetric_NumericalStatsConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  return target;
}

size_t PrivacyMetric_NumericalStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_NumericalStatsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_NumericalStatsConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_NumericalStatsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_NumericalStatsConfig::MergeFrom(const PrivacyMetric_NumericalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
}

void PrivacyMetric_NumericalStatsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_NumericalStatsConfig::CopyFrom(const PrivacyMetric_NumericalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_NumericalStatsConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_NumericalStatsConfig::Swap(PrivacyMetric_NumericalStatsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_NumericalStatsConfig::InternalSwap(PrivacyMetric_NumericalStatsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_, other->field_);
}

::google::protobuf::Metadata PrivacyMetric_NumericalStatsConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_CategoricalStatsConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_CategoricalStatsConfig_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class PrivacyMetric_CategoricalStatsConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const PrivacyMetric_CategoricalStatsConfig* msg);
};

const ::google::privacy::dlp::v2::FieldId&
PrivacyMetric_CategoricalStatsConfig::HasBitSetters::field(const PrivacyMetric_CategoricalStatsConfig* msg) {
  return *msg->field_;
}
void PrivacyMetric_CategoricalStatsConfig::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_CategoricalStatsConfig::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_CategoricalStatsConfig::PrivacyMetric_CategoricalStatsConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
}
PrivacyMetric_CategoricalStatsConfig::PrivacyMetric_CategoricalStatsConfig(const PrivacyMetric_CategoricalStatsConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
}

void PrivacyMetric_CategoricalStatsConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  field_ = nullptr;
}

PrivacyMetric_CategoricalStatsConfig::~PrivacyMetric_CategoricalStatsConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  SharedDtor();
}

void PrivacyMetric_CategoricalStatsConfig::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void PrivacyMetric_CategoricalStatsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_CategoricalStatsConfig& PrivacyMetric_CategoricalStatsConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_CategoricalStatsConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_CategoricalStatsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_CategoricalStatsConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_CategoricalStatsConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_CategoricalStatsConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_CategoricalStatsConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
}

::google::protobuf::uint8* PrivacyMetric_CategoricalStatsConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  return target;
}

size_t PrivacyMetric_CategoricalStatsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_CategoricalStatsConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_CategoricalStatsConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_CategoricalStatsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_CategoricalStatsConfig::MergeFrom(const PrivacyMetric_CategoricalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
}

void PrivacyMetric_CategoricalStatsConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_CategoricalStatsConfig::CopyFrom(const PrivacyMetric_CategoricalStatsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_CategoricalStatsConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_CategoricalStatsConfig::Swap(PrivacyMetric_CategoricalStatsConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_CategoricalStatsConfig::InternalSwap(PrivacyMetric_CategoricalStatsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_, other->field_);
}

::google::protobuf::Metadata PrivacyMetric_CategoricalStatsConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_KAnonymityConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_KAnonymityConfig_default_instance_._instance.get_mutable()->entity_id_ = const_cast< ::google::privacy::dlp::v2::EntityId*>(
      ::google::privacy::dlp::v2::EntityId::internal_default_instance());
}
class PrivacyMetric_KAnonymityConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::EntityId& entity_id(const PrivacyMetric_KAnonymityConfig* msg);
};

const ::google::privacy::dlp::v2::EntityId&
PrivacyMetric_KAnonymityConfig::HasBitSetters::entity_id(const PrivacyMetric_KAnonymityConfig* msg) {
  return *msg->entity_id_;
}
void PrivacyMetric_KAnonymityConfig::clear_quasi_ids() {
  quasi_ids_.Clear();
}
void PrivacyMetric_KAnonymityConfig::clear_entity_id() {
  if (GetArenaNoVirtual() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_KAnonymityConfig::kQuasiIdsFieldNumber;
const int PrivacyMetric_KAnonymityConfig::kEntityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_KAnonymityConfig::PrivacyMetric_KAnonymityConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
}
PrivacyMetric_KAnonymityConfig::PrivacyMetric_KAnonymityConfig(const PrivacyMetric_KAnonymityConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_(from.quasi_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity_id()) {
    entity_id_ = new ::google::privacy::dlp::v2::EntityId(*from.entity_id_);
  } else {
    entity_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
}

void PrivacyMetric_KAnonymityConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  entity_id_ = nullptr;
}

PrivacyMetric_KAnonymityConfig::~PrivacyMetric_KAnonymityConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  SharedDtor();
}

void PrivacyMetric_KAnonymityConfig::SharedDtor() {
  if (this != internal_default_instance()) delete entity_id_;
}

void PrivacyMetric_KAnonymityConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_KAnonymityConfig& PrivacyMetric_KAnonymityConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_KAnonymityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_KAnonymityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && entity_id_ != nullptr) {
    delete entity_id_;
  }
  entity_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_KAnonymityConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_KAnonymityConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
          object = msg->add_quasi_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.EntityId entity_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::EntityId::_InternalParse;
        object = msg->mutable_entity_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_KAnonymityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.EntityId entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_KAnonymityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.EntityId entity_id = 2;
  if (this->has_entity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::entity_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
}

::google::protobuf::uint8* PrivacyMetric_KAnonymityConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.EntityId entity_id = 2;
  if (this->has_entity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::entity_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  return target;
}

size_t PrivacyMetric_KAnonymityConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.EntityId entity_id = 2;
  if (this->has_entity_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entity_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_KAnonymityConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_KAnonymityConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_KAnonymityConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_KAnonymityConfig::MergeFrom(const PrivacyMetric_KAnonymityConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  if (from.has_entity_id()) {
    mutable_entity_id()->::google::privacy::dlp::v2::EntityId::MergeFrom(from.entity_id());
  }
}

void PrivacyMetric_KAnonymityConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_KAnonymityConfig::CopyFrom(const PrivacyMetric_KAnonymityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_KAnonymityConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_KAnonymityConfig::Swap(PrivacyMetric_KAnonymityConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_KAnonymityConfig::InternalSwap(PrivacyMetric_KAnonymityConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_)->InternalSwap(CastToBase(&other->quasi_ids_));
  swap(entity_id_, other->entity_id_);
}

::google::protobuf::Metadata PrivacyMetric_KAnonymityConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_LDiversityConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_LDiversityConfig_default_instance_._instance.get_mutable()->sensitive_attribute_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class PrivacyMetric_LDiversityConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& sensitive_attribute(const PrivacyMetric_LDiversityConfig* msg);
};

const ::google::privacy::dlp::v2::FieldId&
PrivacyMetric_LDiversityConfig::HasBitSetters::sensitive_attribute(const PrivacyMetric_LDiversityConfig* msg) {
  return *msg->sensitive_attribute_;
}
void PrivacyMetric_LDiversityConfig::clear_quasi_ids() {
  quasi_ids_.Clear();
}
void PrivacyMetric_LDiversityConfig::clear_sensitive_attribute() {
  if (GetArenaNoVirtual() == nullptr && sensitive_attribute_ != nullptr) {
    delete sensitive_attribute_;
  }
  sensitive_attribute_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_LDiversityConfig::kQuasiIdsFieldNumber;
const int PrivacyMetric_LDiversityConfig::kSensitiveAttributeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_LDiversityConfig::PrivacyMetric_LDiversityConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
}
PrivacyMetric_LDiversityConfig::PrivacyMetric_LDiversityConfig(const PrivacyMetric_LDiversityConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_(from.quasi_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensitive_attribute()) {
    sensitive_attribute_ = new ::google::privacy::dlp::v2::FieldId(*from.sensitive_attribute_);
  } else {
    sensitive_attribute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
}

void PrivacyMetric_LDiversityConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  sensitive_attribute_ = nullptr;
}

PrivacyMetric_LDiversityConfig::~PrivacyMetric_LDiversityConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  SharedDtor();
}

void PrivacyMetric_LDiversityConfig::SharedDtor() {
  if (this != internal_default_instance()) delete sensitive_attribute_;
}

void PrivacyMetric_LDiversityConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_LDiversityConfig& PrivacyMetric_LDiversityConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_LDiversityConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_LDiversityConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && sensitive_attribute_ != nullptr) {
    delete sensitive_attribute_;
  }
  sensitive_attribute_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_LDiversityConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_LDiversityConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
          object = msg->add_quasi_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_sensitive_attribute();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_LDiversityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensitive_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_LDiversityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
  if (this->has_sensitive_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sensitive_attribute(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
}

::google::protobuf::uint8* PrivacyMetric_LDiversityConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
  if (this->has_sensitive_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sensitive_attribute(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  return target;
}

size_t PrivacyMetric_LDiversityConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId quasi_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
  if (this->has_sensitive_attribute()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensitive_attribute_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_LDiversityConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_LDiversityConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_LDiversityConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_LDiversityConfig::MergeFrom(const PrivacyMetric_LDiversityConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  if (from.has_sensitive_attribute()) {
    mutable_sensitive_attribute()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.sensitive_attribute());
  }
}

void PrivacyMetric_LDiversityConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_LDiversityConfig::CopyFrom(const PrivacyMetric_LDiversityConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_LDiversityConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_LDiversityConfig::Swap(PrivacyMetric_LDiversityConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_LDiversityConfig::InternalSwap(PrivacyMetric_LDiversityConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_)->InternalSwap(CastToBase(&other->quasi_ids_));
  swap(sensitive_attribute_, other->sensitive_attribute_);
}

::google::protobuf::Metadata PrivacyMetric_LDiversityConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_KMapEstimationConfig_TaggedField::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_.info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_.custom_tag_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_TaggedField_default_instance_.inferred_ = const_cast< ::google::protobuf::Empty*>(
      ::google::protobuf::Empty::internal_default_instance());
}
class PrivacyMetric_KMapEstimationConfig_TaggedField::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const PrivacyMetric_KMapEstimationConfig_TaggedField* msg);
  static const ::google::privacy::dlp::v2::InfoType& info_type(const PrivacyMetric_KMapEstimationConfig_TaggedField* msg);
  static const ::google::protobuf::Empty& inferred(const PrivacyMetric_KMapEstimationConfig_TaggedField* msg);
};

const ::google::privacy::dlp::v2::FieldId&
PrivacyMetric_KMapEstimationConfig_TaggedField::HasBitSetters::field(const PrivacyMetric_KMapEstimationConfig_TaggedField* msg) {
  return *msg->field_;
}
const ::google::privacy::dlp::v2::InfoType&
PrivacyMetric_KMapEstimationConfig_TaggedField::HasBitSetters::info_type(const PrivacyMetric_KMapEstimationConfig_TaggedField* msg) {
  return *msg->tag_.info_type_;
}
const ::google::protobuf::Empty&
PrivacyMetric_KMapEstimationConfig_TaggedField::HasBitSetters::inferred(const PrivacyMetric_KMapEstimationConfig_TaggedField* msg) {
  return *msg->tag_.inferred_;
}
void PrivacyMetric_KMapEstimationConfig_TaggedField::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
void PrivacyMetric_KMapEstimationConfig_TaggedField::set_allocated_info_type(::google::privacy::dlp::v2::InfoType* info_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tag();
  if (info_type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type, submessage_arena);
    }
    set_has_info_type();
    tag_.info_type_ = info_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.info_type)
}
void PrivacyMetric_KMapEstimationConfig_TaggedField::clear_info_type() {
  if (has_info_type()) {
    delete tag_.info_type_;
    clear_has_tag();
  }
}
void PrivacyMetric_KMapEstimationConfig_TaggedField::set_allocated_inferred(::google::protobuf::Empty* inferred) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_tag();
  if (inferred) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(inferred)->GetArena();
    if (message_arena != submessage_arena) {
      inferred = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inferred, submessage_arena);
    }
    set_has_inferred();
    tag_.inferred_ = inferred;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.inferred)
}
void PrivacyMetric_KMapEstimationConfig_TaggedField::clear_inferred() {
  if (has_inferred()) {
    delete tag_.inferred_;
    clear_has_tag();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_KMapEstimationConfig_TaggedField::kFieldFieldNumber;
const int PrivacyMetric_KMapEstimationConfig_TaggedField::kInfoTypeFieldNumber;
const int PrivacyMetric_KMapEstimationConfig_TaggedField::kCustomTagFieldNumber;
const int PrivacyMetric_KMapEstimationConfig_TaggedField::kInferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_KMapEstimationConfig_TaggedField::PrivacyMetric_KMapEstimationConfig_TaggedField()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
}
PrivacyMetric_KMapEstimationConfig_TaggedField::PrivacyMetric_KMapEstimationConfig_TaggedField(const PrivacyMetric_KMapEstimationConfig_TaggedField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  clear_has_tag();
  switch (from.tag_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kCustomTag: {
      set_custom_tag(from.custom_tag());
      break;
    }
    case kInferred: {
      mutable_inferred()->::google::protobuf::Empty::MergeFrom(from.inferred());
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  field_ = nullptr;
  clear_has_tag();
}

PrivacyMetric_KMapEstimationConfig_TaggedField::~PrivacyMetric_KMapEstimationConfig_TaggedField() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  SharedDtor();
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
  if (has_tag()) {
    clear_tag();
  }
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_KMapEstimationConfig_TaggedField& PrivacyMetric_KMapEstimationConfig_TaggedField::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_KMapEstimationConfig_TaggedField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_KMapEstimationConfig_TaggedField::clear_tag() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  switch (tag_case()) {
    case kInfoType: {
      delete tag_.info_type_;
      break;
    }
    case kCustomTag: {
      tag_.custom_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInferred: {
      delete tag_.inferred_;
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TAG_NOT_SET;
}


void PrivacyMetric_KMapEstimationConfig_TaggedField::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  clear_tag();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_KMapEstimationConfig_TaggedField::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_KMapEstimationConfig_TaggedField*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InfoType info_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string custom_tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag");
        object = msg->mutable_custom_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Empty inferred = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Empty::_InternalParse;
        object = msg->mutable_inferred();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_KMapEstimationConfig_TaggedField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InfoType info_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Empty inferred = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inferred()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_KMapEstimationConfig_TaggedField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::info_type(this), output);
  }

  // string custom_tag = 3;
  if (has_custom_tag()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->custom_tag(), output);
  }

  // .google.protobuf.Empty inferred = 4;
  if (has_inferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::inferred(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
}

::google::protobuf::uint8* PrivacyMetric_KMapEstimationConfig_TaggedField::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  // .google.privacy.dlp.v2.InfoType info_type = 2;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::info_type(this), target);
  }

  // string custom_tag = 3;
  if (has_custom_tag()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.custom_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->custom_tag(), target);
  }

  // .google.protobuf.Empty inferred = 4;
  if (has_inferred()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::inferred(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  return target;
}

size_t PrivacyMetric_KMapEstimationConfig_TaggedField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  switch (tag_case()) {
    // .google.privacy.dlp.v2.InfoType info_type = 2;
    case kInfoType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tag_.info_type_);
      break;
    }
    // string custom_tag = 3;
    case kCustomTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_tag());
      break;
    }
    // .google.protobuf.Empty inferred = 4;
    case kInferred: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tag_.inferred_);
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_KMapEstimationConfig_TaggedField* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_KMapEstimationConfig_TaggedField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
    MergeFrom(*source);
  }
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::MergeFrom(const PrivacyMetric_KMapEstimationConfig_TaggedField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
  switch (from.tag_case()) {
    case kInfoType: {
      mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
      break;
    }
    case kCustomTag: {
      set_custom_tag(from.custom_tag());
      break;
    }
    case kInferred: {
      mutable_inferred()->::google::protobuf::Empty::MergeFrom(from.inferred());
      break;
    }
    case TAG_NOT_SET: {
      break;
    }
  }
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::CopyFrom(const PrivacyMetric_KMapEstimationConfig_TaggedField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_KMapEstimationConfig_TaggedField::IsInitialized() const {
  return true;
}

void PrivacyMetric_KMapEstimationConfig_TaggedField::Swap(PrivacyMetric_KMapEstimationConfig_TaggedField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_KMapEstimationConfig_TaggedField::InternalSwap(PrivacyMetric_KMapEstimationConfig_TaggedField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_, other->field_);
  swap(tag_, other->tag_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata PrivacyMetric_KMapEstimationConfig_TaggedField::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* msg);
};

const ::google::privacy::dlp::v2::FieldId&
PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::HasBitSetters::field(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* msg) {
  return *msg->field_;
}
void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::kFieldFieldNumber;
const int PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::kCustomTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
}
PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.custom_tag().size() > 0) {
    custom_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_tag_);
  }
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  custom_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_ = nullptr;
}

PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::~PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  SharedDtor();
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::SharedDtor() {
  custom_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_;
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string custom_tag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag");
        object = msg->mutable_custom_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  // string custom_tag = 2;
  if (this->custom_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->custom_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
}

::google::protobuf::uint8* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  // string custom_tag = 2;
  if (this->custom_tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_tag().data(), static_cast<int>(this->custom_tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.custom_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->custom_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  return target;
}

size_t PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string custom_tag = 2;
  if (this->custom_tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->custom_tag());
  }

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
    MergeFrom(*source);
  }
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::MergeFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.custom_tag().size() > 0) {

    custom_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_tag_);
  }
  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::CopyFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::IsInitialized() const {
  return true;
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::Swap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::InternalSwap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  custom_tag_.Swap(&other->custom_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(field_, other->field_);
}

::google::protobuf::Metadata PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_default_instance_._instance.get_mutable()->table_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_default_instance_._instance.get_mutable()->relative_frequency_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::BigQueryTable& table(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* msg);
  static const ::google::privacy::dlp::v2::FieldId& relative_frequency(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* msg);
};

const ::google::privacy::dlp::v2::BigQueryTable&
PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::HasBitSetters::table(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* msg) {
  return *msg->table_;
}
const ::google::privacy::dlp::v2::FieldId&
PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::HasBitSetters::relative_frequency(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* msg) {
  return *msg->relative_frequency_;
}
void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::clear_table() {
  if (GetArenaNoVirtual() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
}
void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::clear_relative_frequency() {
  if (GetArenaNoVirtual() == nullptr && relative_frequency_ != nullptr) {
    delete relative_frequency_;
  }
  relative_frequency_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::kTableFieldNumber;
const int PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::kQuasiIdsFieldNumber;
const int PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::kRelativeFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
}
PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_(from.quasi_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relative_frequency()) {
    relative_frequency_ = new ::google::privacy::dlp::v2::FieldId(*from.relative_frequency_);
  } else {
    relative_frequency_ = nullptr;
  }
  if (from.has_table()) {
    table_ = new ::google::privacy::dlp::v2::BigQueryTable(*from.table_);
  } else {
    table_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&relative_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&relative_frequency_)) + sizeof(table_));
}

PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::~PrivacyMetric_KMapEstimationConfig_AuxiliaryTable() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  SharedDtor();
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::SharedDtor() {
  if (this != internal_default_instance()) delete relative_frequency_;
  if (this != internal_default_instance()) delete table_;
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && relative_frequency_ != nullptr) {
    delete relative_frequency_;
  }
  relative_frequency_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField::_InternalParse;
          object = msg->add_quasi_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_relative_frequency();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_relative_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::relative_frequency(this), output);
  }

  // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::table(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
}

::google::protobuf::uint8* PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_relative_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::relative_frequency(this), target);
  }

  // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::table(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  return target;
}

size_t PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.FieldId relative_frequency = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_relative_frequency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_frequency_);
  }

  // .google.privacy.dlp.v2.BigQueryTable table = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
    MergeFrom(*source);
  }
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::MergeFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  if (from.has_relative_frequency()) {
    mutable_relative_frequency()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.relative_frequency());
  }
  if (from.has_table()) {
    mutable_table()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.table());
  }
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::CopyFrom(const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::IsInitialized() const {
  return true;
}

void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::Swap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::InternalSwap(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_)->InternalSwap(CastToBase(&other->quasi_ids_));
  swap(relative_frequency_, other->relative_frequency_);
  swap(table_, other->table_);
}

::google::protobuf::Metadata PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_KMapEstimationConfig::InitAsDefaultInstance() {
}
class PrivacyMetric_KMapEstimationConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_KMapEstimationConfig::kQuasiIdsFieldNumber;
const int PrivacyMetric_KMapEstimationConfig::kRegionCodeFieldNumber;
const int PrivacyMetric_KMapEstimationConfig::kAuxiliaryTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_KMapEstimationConfig::PrivacyMetric_KMapEstimationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
}
PrivacyMetric_KMapEstimationConfig::PrivacyMetric_KMapEstimationConfig(const PrivacyMetric_KMapEstimationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_(from.quasi_ids_),
      auxiliary_tables_(from.auxiliary_tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region_code().size() > 0) {
    region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
}

void PrivacyMetric_KMapEstimationConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrivacyMetric_KMapEstimationConfig::~PrivacyMetric_KMapEstimationConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  SharedDtor();
}

void PrivacyMetric_KMapEstimationConfig::SharedDtor() {
  region_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrivacyMetric_KMapEstimationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_KMapEstimationConfig& PrivacyMetric_KMapEstimationConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_KMapEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_KMapEstimationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  auxiliary_tables_.Clear();
  region_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_KMapEstimationConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_KMapEstimationConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField::_InternalParse;
          object = msg->add_quasi_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string region_code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code");
        object = msg->mutable_region_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable::_InternalParse;
          object = msg->add_auxiliary_tables();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_KMapEstimationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region_code().data(), static_cast<int>(this->region_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auxiliary_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_KMapEstimationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids(static_cast<int>(i)),
      output);
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region_code().data(), static_cast<int>(this->region_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->region_code(), output);
  }

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auxiliary_tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->auxiliary_tables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
}

::google::protobuf::uint8* PrivacyMetric_KMapEstimationConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), target);
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region_code().data(), static_cast<int>(this->region_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.region_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->region_code(), target);
  }

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auxiliary_tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->auxiliary_tables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  return target;
}

size_t PrivacyMetric_KMapEstimationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->auxiliary_tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auxiliary_tables(static_cast<int>(i)));
    }
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_KMapEstimationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_KMapEstimationConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_KMapEstimationConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_KMapEstimationConfig::MergeFrom(const PrivacyMetric_KMapEstimationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  auxiliary_tables_.MergeFrom(from.auxiliary_tables_);
  if (from.region_code().size() > 0) {

    region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
  }
}

void PrivacyMetric_KMapEstimationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_KMapEstimationConfig::CopyFrom(const PrivacyMetric_KMapEstimationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_KMapEstimationConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_KMapEstimationConfig::Swap(PrivacyMetric_KMapEstimationConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_KMapEstimationConfig::InternalSwap(PrivacyMetric_KMapEstimationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_)->InternalSwap(CastToBase(&other->quasi_ids_));
  CastToBase(&auxiliary_tables_)->InternalSwap(CastToBase(&other->auxiliary_tables_));
  region_code_.Swap(&other->region_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PrivacyMetric_KMapEstimationConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric_DeltaPresenceEstimationConfig::InitAsDefaultInstance() {
}
class PrivacyMetric_DeltaPresenceEstimationConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric_DeltaPresenceEstimationConfig::kQuasiIdsFieldNumber;
const int PrivacyMetric_DeltaPresenceEstimationConfig::kRegionCodeFieldNumber;
const int PrivacyMetric_DeltaPresenceEstimationConfig::kAuxiliaryTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric_DeltaPresenceEstimationConfig::PrivacyMetric_DeltaPresenceEstimationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
}
PrivacyMetric_DeltaPresenceEstimationConfig::PrivacyMetric_DeltaPresenceEstimationConfig(const PrivacyMetric_DeltaPresenceEstimationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_(from.quasi_ids_),
      auxiliary_tables_(from.auxiliary_tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region_code().size() > 0) {
    region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
}

void PrivacyMetric_DeltaPresenceEstimationConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  region_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PrivacyMetric_DeltaPresenceEstimationConfig::~PrivacyMetric_DeltaPresenceEstimationConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  SharedDtor();
}

void PrivacyMetric_DeltaPresenceEstimationConfig::SharedDtor() {
  region_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrivacyMetric_DeltaPresenceEstimationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric_DeltaPresenceEstimationConfig& PrivacyMetric_DeltaPresenceEstimationConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_DeltaPresenceEstimationConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric_DeltaPresenceEstimationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_.Clear();
  auxiliary_tables_.Clear();
  region_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric_DeltaPresenceEstimationConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric_DeltaPresenceEstimationConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.QuasiId quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::QuasiId::_InternalParse;
          object = msg->add_quasi_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string region_code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code");
        object = msg->mutable_region_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::StatisticalTable::_InternalParse;
          object = msg->add_auxiliary_tables();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric_DeltaPresenceEstimationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.QuasiId quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string region_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->region_code().data(), static_cast<int>(this->region_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_auxiliary_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric_DeltaPresenceEstimationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.QuasiId quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids(static_cast<int>(i)),
      output);
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region_code().data(), static_cast<int>(this->region_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->region_code(), output);
  }

  // repeated .google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auxiliary_tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->auxiliary_tables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
}

::google::protobuf::uint8* PrivacyMetric_DeltaPresenceEstimationConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.QuasiId quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids(static_cast<int>(i)), target);
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->region_code().data(), static_cast<int>(this->region_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.region_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->region_code(), target);
  }

  // repeated .google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auxiliary_tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->auxiliary_tables(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  return target;
}

size_t PrivacyMetric_DeltaPresenceEstimationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.QuasiId quasi_ids = 1 [(.google.api.field_behavior) = REQUIRED];
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->auxiliary_tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->auxiliary_tables(static_cast<int>(i)));
    }
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->region_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric_DeltaPresenceEstimationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric_DeltaPresenceEstimationConfig* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric_DeltaPresenceEstimationConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
    MergeFrom(*source);
  }
}

void PrivacyMetric_DeltaPresenceEstimationConfig::MergeFrom(const PrivacyMetric_DeltaPresenceEstimationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_.MergeFrom(from.quasi_ids_);
  auxiliary_tables_.MergeFrom(from.auxiliary_tables_);
  if (from.region_code().size() > 0) {

    region_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_code_);
  }
}

void PrivacyMetric_DeltaPresenceEstimationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric_DeltaPresenceEstimationConfig::CopyFrom(const PrivacyMetric_DeltaPresenceEstimationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric_DeltaPresenceEstimationConfig::IsInitialized() const {
  return true;
}

void PrivacyMetric_DeltaPresenceEstimationConfig::Swap(PrivacyMetric_DeltaPresenceEstimationConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric_DeltaPresenceEstimationConfig::InternalSwap(PrivacyMetric_DeltaPresenceEstimationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_)->InternalSwap(CastToBase(&other->quasi_ids_));
  CastToBase(&auxiliary_tables_)->InternalSwap(CastToBase(&other->auxiliary_tables_));
  region_code_.Swap(&other->region_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PrivacyMetric_DeltaPresenceEstimationConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrivacyMetric::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrivacyMetric_default_instance_.numerical_stats_config_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig*>(
      ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_default_instance_.categorical_stats_config_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig*>(
      ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_default_instance_.k_anonymity_config_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig*>(
      ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_default_instance_.l_diversity_config_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig*>(
      ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_default_instance_.k_map_estimation_config_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig*>(
      ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrivacyMetric_default_instance_.delta_presence_estimation_config_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig*>(
      ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig::internal_default_instance());
}
class PrivacyMetric::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig& numerical_stats_config(const PrivacyMetric* msg);
  static const ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig& categorical_stats_config(const PrivacyMetric* msg);
  static const ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig& k_anonymity_config(const PrivacyMetric* msg);
  static const ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig& l_diversity_config(const PrivacyMetric* msg);
  static const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig& k_map_estimation_config(const PrivacyMetric* msg);
  static const ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig& delta_presence_estimation_config(const PrivacyMetric* msg);
};

const ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig&
PrivacyMetric::HasBitSetters::numerical_stats_config(const PrivacyMetric* msg) {
  return *msg->type_.numerical_stats_config_;
}
const ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig&
PrivacyMetric::HasBitSetters::categorical_stats_config(const PrivacyMetric* msg) {
  return *msg->type_.categorical_stats_config_;
}
const ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig&
PrivacyMetric::HasBitSetters::k_anonymity_config(const PrivacyMetric* msg) {
  return *msg->type_.k_anonymity_config_;
}
const ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig&
PrivacyMetric::HasBitSetters::l_diversity_config(const PrivacyMetric* msg) {
  return *msg->type_.l_diversity_config_;
}
const ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig&
PrivacyMetric::HasBitSetters::k_map_estimation_config(const PrivacyMetric* msg) {
  return *msg->type_.k_map_estimation_config_;
}
const ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig&
PrivacyMetric::HasBitSetters::delta_presence_estimation_config(const PrivacyMetric* msg) {
  return *msg->type_.delta_presence_estimation_config_;
}
void PrivacyMetric::set_allocated_numerical_stats_config(::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* numerical_stats_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (numerical_stats_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      numerical_stats_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, numerical_stats_config, submessage_arena);
    }
    set_has_numerical_stats_config();
    type_.numerical_stats_config_ = numerical_stats_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.numerical_stats_config)
}
void PrivacyMetric::set_allocated_categorical_stats_config(::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* categorical_stats_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (categorical_stats_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      categorical_stats_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, categorical_stats_config, submessage_arena);
    }
    set_has_categorical_stats_config();
    type_.categorical_stats_config_ = categorical_stats_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.categorical_stats_config)
}
void PrivacyMetric::set_allocated_k_anonymity_config(::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* k_anonymity_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (k_anonymity_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      k_anonymity_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k_anonymity_config, submessage_arena);
    }
    set_has_k_anonymity_config();
    type_.k_anonymity_config_ = k_anonymity_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.k_anonymity_config)
}
void PrivacyMetric::set_allocated_l_diversity_config(::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* l_diversity_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (l_diversity_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      l_diversity_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, l_diversity_config, submessage_arena);
    }
    set_has_l_diversity_config();
    type_.l_diversity_config_ = l_diversity_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.l_diversity_config)
}
void PrivacyMetric::set_allocated_k_map_estimation_config(::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* k_map_estimation_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (k_map_estimation_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      k_map_estimation_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k_map_estimation_config, submessage_arena);
    }
    set_has_k_map_estimation_config();
    type_.k_map_estimation_config_ = k_map_estimation_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.k_map_estimation_config)
}
void PrivacyMetric::set_allocated_delta_presence_estimation_config(::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* delta_presence_estimation_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (delta_presence_estimation_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delta_presence_estimation_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delta_presence_estimation_config, submessage_arena);
    }
    set_has_delta_presence_estimation_config();
    type_.delta_presence_estimation_config_ = delta_presence_estimation_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrivacyMetric.delta_presence_estimation_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivacyMetric::kNumericalStatsConfigFieldNumber;
const int PrivacyMetric::kCategoricalStatsConfigFieldNumber;
const int PrivacyMetric::kKAnonymityConfigFieldNumber;
const int PrivacyMetric::kLDiversityConfigFieldNumber;
const int PrivacyMetric::kKMapEstimationConfigFieldNumber;
const int PrivacyMetric::kDeltaPresenceEstimationConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivacyMetric::PrivacyMetric()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrivacyMetric)
}
PrivacyMetric::PrivacyMetric(const PrivacyMetric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kNumericalStatsConfig: {
      mutable_numerical_stats_config()->::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig::MergeFrom(from.numerical_stats_config());
      break;
    }
    case kCategoricalStatsConfig: {
      mutable_categorical_stats_config()->::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig::MergeFrom(from.categorical_stats_config());
      break;
    }
    case kKAnonymityConfig: {
      mutable_k_anonymity_config()->::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig::MergeFrom(from.k_anonymity_config());
      break;
    }
    case kLDiversityConfig: {
      mutable_l_diversity_config()->::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig::MergeFrom(from.l_diversity_config());
      break;
    }
    case kKMapEstimationConfig: {
      mutable_k_map_estimation_config()->::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig::MergeFrom(from.k_map_estimation_config());
      break;
    }
    case kDeltaPresenceEstimationConfig: {
      mutable_delta_presence_estimation_config()->::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig::MergeFrom(from.delta_presence_estimation_config());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrivacyMetric)
}

void PrivacyMetric::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_type();
}

PrivacyMetric::~PrivacyMetric() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrivacyMetric)
  SharedDtor();
}

void PrivacyMetric::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void PrivacyMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyMetric& PrivacyMetric::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrivacyMetric_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrivacyMetric::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.PrivacyMetric)
  switch (type_case()) {
    case kNumericalStatsConfig: {
      delete type_.numerical_stats_config_;
      break;
    }
    case kCategoricalStatsConfig: {
      delete type_.categorical_stats_config_;
      break;
    }
    case kKAnonymityConfig: {
      delete type_.k_anonymity_config_;
      break;
    }
    case kLDiversityConfig: {
      delete type_.l_diversity_config_;
      break;
    }
    case kKMapEstimationConfig: {
      delete type_.k_map_estimation_config_;
      break;
    }
    case kDeltaPresenceEstimationConfig: {
      delete type_.delta_presence_estimation_config_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void PrivacyMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrivacyMetric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyMetric::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrivacyMetric*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig::_InternalParse;
        object = msg->mutable_numerical_stats_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig::_InternalParse;
        object = msg->mutable_categorical_stats_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig::_InternalParse;
        object = msg->mutable_k_anonymity_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig::_InternalParse;
        object = msg->mutable_l_diversity_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig::_InternalParse;
        object = msg->mutable_k_map_estimation_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig::_InternalParse;
        object = msg->mutable_delta_presence_estimation_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyMetric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrivacyMetric)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_numerical_stats_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_categorical_stats_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_k_anonymity_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_l_diversity_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_k_map_estimation_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delta_presence_estimation_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrivacyMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrivacyMetric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyMetric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrivacyMetric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
  if (has_numerical_stats_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::numerical_stats_config(this), output);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
  if (has_categorical_stats_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::categorical_stats_config(this), output);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
  if (has_k_anonymity_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::k_anonymity_config(this), output);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
  if (has_l_diversity_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::l_diversity_config(this), output);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
  if (has_k_map_estimation_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::k_map_estimation_config(this), output);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
  if (has_delta_presence_estimation_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::delta_presence_estimation_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrivacyMetric)
}

::google::protobuf::uint8* PrivacyMetric::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrivacyMetric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
  if (has_numerical_stats_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::numerical_stats_config(this), target);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
  if (has_categorical_stats_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::categorical_stats_config(this), target);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
  if (has_k_anonymity_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::k_anonymity_config(this), target);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
  if (has_l_diversity_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::l_diversity_config(this), target);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
  if (has_k_map_estimation_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::k_map_estimation_config(this), target);
  }

  // .google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
  if (has_delta_presence_estimation_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::delta_presence_estimation_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrivacyMetric)
  return target;
}

size_t PrivacyMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrivacyMetric)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
    case kNumericalStatsConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.numerical_stats_config_);
      break;
    }
    // .google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
    case kCategoricalStatsConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.categorical_stats_config_);
      break;
    }
    // .google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
    case kKAnonymityConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.k_anonymity_config_);
      break;
    }
    // .google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
    case kLDiversityConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.l_diversity_config_);
      break;
    }
    // .google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
    case kKMapEstimationConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.k_map_estimation_config_);
      break;
    }
    // .google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
    case kDeltaPresenceEstimationConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.delta_presence_estimation_config_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyMetric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrivacyMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivacyMetric* source =
      ::google::protobuf::DynamicCastToGenerated<PrivacyMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrivacyMetric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrivacyMetric)
    MergeFrom(*source);
  }
}

void PrivacyMetric::MergeFrom(const PrivacyMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrivacyMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kNumericalStatsConfig: {
      mutable_numerical_stats_config()->::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig::MergeFrom(from.numerical_stats_config());
      break;
    }
    case kCategoricalStatsConfig: {
      mutable_categorical_stats_config()->::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig::MergeFrom(from.categorical_stats_config());
      break;
    }
    case kKAnonymityConfig: {
      mutable_k_anonymity_config()->::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig::MergeFrom(from.k_anonymity_config());
      break;
    }
    case kLDiversityConfig: {
      mutable_l_diversity_config()->::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig::MergeFrom(from.l_diversity_config());
      break;
    }
    case kKMapEstimationConfig: {
      mutable_k_map_estimation_config()->::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig::MergeFrom(from.k_map_estimation_config());
      break;
    }
    case kDeltaPresenceEstimationConfig: {
      mutable_delta_presence_estimation_config()->::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig::MergeFrom(from.delta_presence_estimation_config());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void PrivacyMetric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrivacyMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivacyMetric::CopyFrom(const PrivacyMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrivacyMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyMetric::IsInitialized() const {
  return true;
}

void PrivacyMetric::Swap(PrivacyMetric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivacyMetric::InternalSwap(PrivacyMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata PrivacyMetric::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_._instance.get_mutable()->min_value_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_NumericalStatsResult_default_instance_._instance.get_mutable()->max_value_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
}
class AnalyzeDataSourceRiskDetails_NumericalStatsResult::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Value& min_value(const AnalyzeDataSourceRiskDetails_NumericalStatsResult* msg);
  static const ::google::privacy::dlp::v2::Value& max_value(const AnalyzeDataSourceRiskDetails_NumericalStatsResult* msg);
};

const ::google::privacy::dlp::v2::Value&
AnalyzeDataSourceRiskDetails_NumericalStatsResult::HasBitSetters::min_value(const AnalyzeDataSourceRiskDetails_NumericalStatsResult* msg) {
  return *msg->min_value_;
}
const ::google::privacy::dlp::v2::Value&
AnalyzeDataSourceRiskDetails_NumericalStatsResult::HasBitSetters::max_value(const AnalyzeDataSourceRiskDetails_NumericalStatsResult* msg) {
  return *msg->max_value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_NumericalStatsResult::kMinValueFieldNumber;
const int AnalyzeDataSourceRiskDetails_NumericalStatsResult::kMaxValueFieldNumber;
const int AnalyzeDataSourceRiskDetails_NumericalStatsResult::kQuantileValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_NumericalStatsResult::AnalyzeDataSourceRiskDetails_NumericalStatsResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
}
AnalyzeDataSourceRiskDetails_NumericalStatsResult::AnalyzeDataSourceRiskDetails_NumericalStatsResult(const AnalyzeDataSourceRiskDetails_NumericalStatsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quantile_values_(from.quantile_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_min_value()) {
    min_value_ = new ::google::privacy::dlp::v2::Value(*from.min_value_);
  } else {
    min_value_ = nullptr;
  }
  if (from.has_max_value()) {
    max_value_ = new ::google::privacy::dlp::v2::Value(*from.max_value_);
  } else {
    max_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&min_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_value_) -
      reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
}

AnalyzeDataSourceRiskDetails_NumericalStatsResult::~AnalyzeDataSourceRiskDetails_NumericalStatsResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::SharedDtor() {
  if (this != internal_default_instance()) delete min_value_;
  if (this != internal_default_instance()) delete max_value_;
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_NumericalStatsResult& AnalyzeDataSourceRiskDetails_NumericalStatsResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_NumericalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_NumericalStatsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quantile_values_.Clear();
  if (GetArenaNoVirtual() == nullptr && min_value_ != nullptr) {
    delete min_value_;
  }
  min_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_value_ != nullptr) {
    delete max_value_;
  }
  max_value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_NumericalStatsResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_NumericalStatsResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Value min_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_min_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Value max_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_max_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.Value quantile_values = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
          object = msg->add_quantile_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_NumericalStatsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Value min_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Value max_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Value quantile_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quantile_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value min_value = 1;
  if (this->has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::min_value(this), output);
  }

  // .google.privacy.dlp.v2.Value max_value = 2;
  if (this->has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::max_value(this), output);
  }

  // repeated .google.privacy.dlp.v2.Value quantile_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quantile_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->quantile_values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_NumericalStatsResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value min_value = 1;
  if (this->has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::min_value(this), target);
  }

  // .google.privacy.dlp.v2.Value max_value = 2;
  if (this->has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::max_value(this), target);
  }

  // repeated .google.privacy.dlp.v2.Value quantile_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quantile_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->quantile_values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_NumericalStatsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quantile_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->quantile_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quantile_values(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.Value min_value = 1;
  if (this->has_min_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_value_);
  }

  // .google.privacy.dlp.v2.Value max_value = 2;
  if (this->has_max_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_NumericalStatsResult* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_NumericalStatsResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::MergeFrom(const AnalyzeDataSourceRiskDetails_NumericalStatsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quantile_values_.MergeFrom(from.quantile_values_);
  if (from.has_min_value()) {
    mutable_min_value()->::google::privacy::dlp::v2::Value::MergeFrom(from.min_value());
  }
  if (from.has_max_value()) {
    mutable_max_value()->::google::privacy::dlp::v2::Value::MergeFrom(from.max_value());
  }
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::CopyFrom(const AnalyzeDataSourceRiskDetails_NumericalStatsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_NumericalStatsResult::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_NumericalStatsResult::Swap(AnalyzeDataSourceRiskDetails_NumericalStatsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_NumericalStatsResult::InternalSwap(AnalyzeDataSourceRiskDetails_NumericalStatsResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quantile_values_)->InternalSwap(CastToBase(&other->quantile_values_));
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_NumericalStatsResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::kValueFrequencyLowerBoundFieldNumber;
const int AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::kValueFrequencyUpperBoundFieldNumber;
const int AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::kBucketSizeFieldNumber;
const int AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::kBucketValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::kBucketValueCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
}
AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bucket_values_(from.bucket_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_frequency_lower_bound_, &from.value_frequency_lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_value_count_) -
    reinterpret_cast<char*>(&value_frequency_lower_bound_)) + sizeof(bucket_value_count_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&value_frequency_lower_bound_)) + sizeof(bucket_value_count_));
}

AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::~AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&value_frequency_lower_bound_)) + sizeof(bucket_value_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 value_frequency_lower_bound = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value_frequency_lower_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 value_frequency_upper_bound = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_value_frequency_upper_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 bucket_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bucket_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::ValueFrequency::_InternalParse;
          object = msg->add_bucket_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // int64 bucket_value_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bucket_value_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value_frequency_lower_bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_frequency_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value_frequency_upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_frequency_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_value_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_value_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value_frequency_lower_bound = 1;
  if (this->value_frequency_lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value_frequency_lower_bound(), output);
  }

  // int64 value_frequency_upper_bound = 2;
  if (this->value_frequency_upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value_frequency_upper_bound(), output);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->bucket_values(static_cast<int>(i)),
      output);
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bucket_value_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value_frequency_lower_bound = 1;
  if (this->value_frequency_lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value_frequency_lower_bound(), target);
  }

  // int64 value_frequency_upper_bound = 2;
  if (this->value_frequency_upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value_frequency_upper_bound(), target);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->bucket_values(static_cast<int>(i)), target);
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bucket_value_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // int64 value_frequency_lower_bound = 1;
  if (this->value_frequency_lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value_frequency_lower_bound());
  }

  // int64 value_frequency_upper_bound = 2;
  if (this->value_frequency_upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value_frequency_upper_bound());
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_value_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::MergeFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.value_frequency_lower_bound() != 0) {
    set_value_frequency_lower_bound(from.value_frequency_lower_bound());
  }
  if (from.value_frequency_upper_bound() != 0) {
    set_value_frequency_upper_bound(from.value_frequency_upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
  if (from.bucket_value_count() != 0) {
    set_bucket_value_count(from.bucket_value_count());
  }
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::CopyFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::Swap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::InternalSwap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bucket_values_)->InternalSwap(CastToBase(&other->bucket_values_));
  swap(value_frequency_lower_bound_, other->value_frequency_lower_bound_);
  swap(value_frequency_upper_bound_, other->value_frequency_upper_bound_);
  swap(bucket_size_, other->bucket_size_);
  swap(bucket_value_count_, other->bucket_value_count_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_CategoricalStatsResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_CategoricalStatsResult::kValueFrequencyHistogramBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_CategoricalStatsResult::AnalyzeDataSourceRiskDetails_CategoricalStatsResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
}
AnalyzeDataSourceRiskDetails_CategoricalStatsResult::AnalyzeDataSourceRiskDetails_CategoricalStatsResult(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      value_frequency_histogram_buckets_(from.value_frequency_histogram_buckets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

AnalyzeDataSourceRiskDetails_CategoricalStatsResult::~AnalyzeDataSourceRiskDetails_CategoricalStatsResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& AnalyzeDataSourceRiskDetails_CategoricalStatsResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_CategoricalStatsResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_frequency_histogram_buckets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_CategoricalStatsResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_CategoricalStatsResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket::_InternalParse;
          object = msg->add_value_frequency_histogram_buckets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_CategoricalStatsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_value_frequency_histogram_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_frequency_histogram_buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->value_frequency_histogram_buckets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_CategoricalStatsResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_frequency_histogram_buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->value_frequency_histogram_buckets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_CategoricalStatsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->value_frequency_histogram_buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value_frequency_histogram_buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_CategoricalStatsResult* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_CategoricalStatsResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::MergeFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_frequency_histogram_buckets_.MergeFrom(from.value_frequency_histogram_buckets_);
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::CopyFrom(const AnalyzeDataSourceRiskDetails_CategoricalStatsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_CategoricalStatsResult::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::Swap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_CategoricalStatsResult::InternalSwap(AnalyzeDataSourceRiskDetails_CategoricalStatsResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&value_frequency_histogram_buckets_)->InternalSwap(CastToBase(&other->value_frequency_histogram_buckets_));
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_CategoricalStatsResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::kQuasiIdsValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::kEquivalenceClassSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
}
AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_values_(from.quasi_ids_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  equivalence_class_size_ = from.equivalence_class_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  equivalence_class_size_ = PROTOBUF_LONGLONG(0);
}

AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::~AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_values_.Clear();
  equivalence_class_size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
          object = msg->add_quasi_ids_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int64 equivalence_class_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_equivalence_class_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 equivalence_class_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids_values(static_cast<int>(i)),
      output);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equivalence_class_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids_values(static_cast<int>(i)), target);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equivalence_class_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids_values(static_cast<int>(i)));
    }
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::MergeFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_values_.MergeFrom(from.quasi_ids_values_);
  if (from.equivalence_class_size() != 0) {
    set_equivalence_class_size(from.equivalence_class_size());
  }
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::CopyFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::Swap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::InternalSwap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_values_)->InternalSwap(CastToBase(&other->quasi_ids_values_));
  swap(equivalence_class_size_, other->equivalence_class_size_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::kEquivalenceClassSizeLowerBoundFieldNumber;
const int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::kEquivalenceClassSizeUpperBoundFieldNumber;
const int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::kBucketSizeFieldNumber;
const int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::kBucketValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::kBucketValueCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
}
AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bucket_values_(from.bucket_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&equivalence_class_size_lower_bound_, &from.equivalence_class_size_lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_value_count_) -
    reinterpret_cast<char*>(&equivalence_class_size_lower_bound_)) + sizeof(bucket_value_count_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&equivalence_class_size_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&equivalence_class_size_lower_bound_)) + sizeof(bucket_value_count_));
}

AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::~AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&equivalence_class_size_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&equivalence_class_size_lower_bound_)) + sizeof(bucket_value_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 equivalence_class_size_lower_bound = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_equivalence_class_size_lower_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 equivalence_class_size_upper_bound = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_equivalence_class_size_upper_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 bucket_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bucket_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass::_InternalParse;
          object = msg->add_bucket_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // int64 bucket_value_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bucket_value_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 equivalence_class_size_lower_bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 equivalence_class_size_upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_value_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_value_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 equivalence_class_size_lower_bound = 1;
  if (this->equivalence_class_size_lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equivalence_class_size_lower_bound(), output);
  }

  // int64 equivalence_class_size_upper_bound = 2;
  if (this->equivalence_class_size_upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equivalence_class_size_upper_bound(), output);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->bucket_values(static_cast<int>(i)),
      output);
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bucket_value_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 equivalence_class_size_lower_bound = 1;
  if (this->equivalence_class_size_lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equivalence_class_size_lower_bound(), target);
  }

  // int64 equivalence_class_size_upper_bound = 2;
  if (this->equivalence_class_size_upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equivalence_class_size_upper_bound(), target);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->bucket_values(static_cast<int>(i)), target);
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bucket_value_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // int64 equivalence_class_size_lower_bound = 1;
  if (this->equivalence_class_size_lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size_lower_bound());
  }

  // int64 equivalence_class_size_upper_bound = 2;
  if (this->equivalence_class_size_upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size_upper_bound());
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_value_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::MergeFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.equivalence_class_size_lower_bound() != 0) {
    set_equivalence_class_size_lower_bound(from.equivalence_class_size_lower_bound());
  }
  if (from.equivalence_class_size_upper_bound() != 0) {
    set_equivalence_class_size_upper_bound(from.equivalence_class_size_upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
  if (from.bucket_value_count() != 0) {
    set_bucket_value_count(from.bucket_value_count());
  }
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::CopyFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::Swap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::InternalSwap(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bucket_values_)->InternalSwap(CastToBase(&other->bucket_values_));
  swap(equivalence_class_size_lower_bound_, other->equivalence_class_size_lower_bound_);
  swap(equivalence_class_size_upper_bound_, other->equivalence_class_size_upper_bound_);
  swap(bucket_size_, other->bucket_size_);
  swap(bucket_value_count_, other->bucket_value_count_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_KAnonymityResult::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_KAnonymityResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_KAnonymityResult::kEquivalenceClassHistogramBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_KAnonymityResult::AnalyzeDataSourceRiskDetails_KAnonymityResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
}
AnalyzeDataSourceRiskDetails_KAnonymityResult::AnalyzeDataSourceRiskDetails_KAnonymityResult(const AnalyzeDataSourceRiskDetails_KAnonymityResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      equivalence_class_histogram_buckets_(from.equivalence_class_histogram_buckets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

AnalyzeDataSourceRiskDetails_KAnonymityResult::~AnalyzeDataSourceRiskDetails_KAnonymityResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_KAnonymityResult& AnalyzeDataSourceRiskDetails_KAnonymityResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_KAnonymityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_KAnonymityResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equivalence_class_histogram_buckets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_KAnonymityResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_KAnonymityResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket::_InternalParse;
          object = msg->add_equivalence_class_histogram_buckets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_KAnonymityResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equivalence_class_histogram_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_KAnonymityResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equivalence_class_histogram_buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->equivalence_class_histogram_buckets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_KAnonymityResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equivalence_class_histogram_buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->equivalence_class_histogram_buckets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_KAnonymityResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->equivalence_class_histogram_buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equivalence_class_histogram_buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_KAnonymityResult* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_KAnonymityResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::MergeFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equivalence_class_histogram_buckets_.MergeFrom(from.equivalence_class_histogram_buckets_);
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::CopyFrom(const AnalyzeDataSourceRiskDetails_KAnonymityResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_KAnonymityResult::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_KAnonymityResult::Swap(AnalyzeDataSourceRiskDetails_KAnonymityResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_KAnonymityResult::InternalSwap(AnalyzeDataSourceRiskDetails_KAnonymityResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&equivalence_class_histogram_buckets_)->InternalSwap(CastToBase(&other->equivalence_class_histogram_buckets_));
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_KAnonymityResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::kQuasiIdsValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::kEquivalenceClassSizeFieldNumber;
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::kNumDistinctSensitiveValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::kTopSensitiveValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
}
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_values_(from.quasi_ids_values_),
      top_sensitive_values_(from.top_sensitive_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&equivalence_class_size_, &from.equivalence_class_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_distinct_sensitive_values_) -
    reinterpret_cast<char*>(&equivalence_class_size_)) + sizeof(num_distinct_sensitive_values_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&equivalence_class_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_distinct_sensitive_values_) -
      reinterpret_cast<char*>(&equivalence_class_size_)) + sizeof(num_distinct_sensitive_values_));
}

AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::~AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_values_.Clear();
  top_sensitive_values_.Clear();
  ::memset(&equivalence_class_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_distinct_sensitive_values_) -
      reinterpret_cast<char*>(&equivalence_class_size_)) + sizeof(num_distinct_sensitive_values_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
          object = msg->add_quasi_ids_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int64 equivalence_class_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_equivalence_class_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 num_distinct_sensitive_values = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_distinct_sensitive_values(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::ValueFrequency::_InternalParse;
          object = msg->add_top_sensitive_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 equivalence_class_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equivalence_class_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_distinct_sensitive_values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_distinct_sensitive_values_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_top_sensitive_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids_values(static_cast<int>(i)),
      output);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equivalence_class_size(), output);
  }

  // int64 num_distinct_sensitive_values = 3;
  if (this->num_distinct_sensitive_values() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_distinct_sensitive_values(), output);
  }

  // repeated .google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_sensitive_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->top_sensitive_values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids_values(static_cast<int>(i)), target);
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equivalence_class_size(), target);
  }

  // int64 num_distinct_sensitive_values = 3;
  if (this->num_distinct_sensitive_values() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_distinct_sensitive_values(), target);
  }

  // repeated .google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->top_sensitive_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->top_sensitive_values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids_values(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->top_sensitive_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->top_sensitive_values(static_cast<int>(i)));
    }
  }

  // int64 equivalence_class_size = 2;
  if (this->equivalence_class_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->equivalence_class_size());
  }

  // int64 num_distinct_sensitive_values = 3;
  if (this->num_distinct_sensitive_values() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_distinct_sensitive_values());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::MergeFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_values_.MergeFrom(from.quasi_ids_values_);
  top_sensitive_values_.MergeFrom(from.top_sensitive_values_);
  if (from.equivalence_class_size() != 0) {
    set_equivalence_class_size(from.equivalence_class_size());
  }
  if (from.num_distinct_sensitive_values() != 0) {
    set_num_distinct_sensitive_values(from.num_distinct_sensitive_values());
  }
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::CopyFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::Swap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::InternalSwap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_values_)->InternalSwap(CastToBase(&other->quasi_ids_values_));
  CastToBase(&top_sensitive_values_)->InternalSwap(CastToBase(&other->top_sensitive_values_));
  swap(equivalence_class_size_, other->equivalence_class_size_);
  swap(num_distinct_sensitive_values_, other->num_distinct_sensitive_values_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::kSensitiveValueFrequencyLowerBoundFieldNumber;
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::kSensitiveValueFrequencyUpperBoundFieldNumber;
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::kBucketSizeFieldNumber;
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::kBucketValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::kBucketValueCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
}
AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bucket_values_(from.bucket_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensitive_value_frequency_lower_bound_, &from.sensitive_value_frequency_lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_value_count_) -
    reinterpret_cast<char*>(&sensitive_value_frequency_lower_bound_)) + sizeof(bucket_value_count_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&sensitive_value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&sensitive_value_frequency_lower_bound_)) + sizeof(bucket_value_count_));
}

AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::~AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&sensitive_value_frequency_lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&sensitive_value_frequency_lower_bound_)) + sizeof(bucket_value_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 sensitive_value_frequency_lower_bound = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sensitive_value_frequency_lower_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 sensitive_value_frequency_upper_bound = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sensitive_value_frequency_upper_bound(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 bucket_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bucket_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass::_InternalParse;
          object = msg->add_bucket_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // int64 bucket_value_count = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bucket_value_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sensitive_value_frequency_lower_bound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sensitive_value_frequency_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 sensitive_value_frequency_upper_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sensitive_value_frequency_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_value_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_value_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sensitive_value_frequency_lower_bound = 1;
  if (this->sensitive_value_frequency_lower_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sensitive_value_frequency_lower_bound(), output);
  }

  // int64 sensitive_value_frequency_upper_bound = 2;
  if (this->sensitive_value_frequency_upper_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sensitive_value_frequency_upper_bound(), output);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->bucket_values(static_cast<int>(i)),
      output);
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bucket_value_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sensitive_value_frequency_lower_bound = 1;
  if (this->sensitive_value_frequency_lower_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sensitive_value_frequency_lower_bound(), target);
  }

  // int64 sensitive_value_frequency_upper_bound = 2;
  if (this->sensitive_value_frequency_upper_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sensitive_value_frequency_upper_bound(), target);
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->bucket_values(static_cast<int>(i)), target);
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bucket_value_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // int64 sensitive_value_frequency_lower_bound = 1;
  if (this->sensitive_value_frequency_lower_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sensitive_value_frequency_lower_bound());
  }

  // int64 sensitive_value_frequency_upper_bound = 2;
  if (this->sensitive_value_frequency_upper_bound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sensitive_value_frequency_upper_bound());
  }

  // int64 bucket_size = 3;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  // int64 bucket_value_count = 5;
  if (this->bucket_value_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_value_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::MergeFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.sensitive_value_frequency_lower_bound() != 0) {
    set_sensitive_value_frequency_lower_bound(from.sensitive_value_frequency_lower_bound());
  }
  if (from.sensitive_value_frequency_upper_bound() != 0) {
    set_sensitive_value_frequency_upper_bound(from.sensitive_value_frequency_upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
  if (from.bucket_value_count() != 0) {
    set_bucket_value_count(from.bucket_value_count());
  }
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::CopyFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::Swap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::InternalSwap(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bucket_values_)->InternalSwap(CastToBase(&other->bucket_values_));
  swap(sensitive_value_frequency_lower_bound_, other->sensitive_value_frequency_lower_bound_);
  swap(sensitive_value_frequency_upper_bound_, other->sensitive_value_frequency_upper_bound_);
  swap(bucket_size_, other->bucket_size_);
  swap(bucket_value_count_, other->bucket_value_count_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_LDiversityResult::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_LDiversityResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_LDiversityResult::kSensitiveValueFrequencyHistogramBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_LDiversityResult::AnalyzeDataSourceRiskDetails_LDiversityResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
}
AnalyzeDataSourceRiskDetails_LDiversityResult::AnalyzeDataSourceRiskDetails_LDiversityResult(const AnalyzeDataSourceRiskDetails_LDiversityResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sensitive_value_frequency_histogram_buckets_(from.sensitive_value_frequency_histogram_buckets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

AnalyzeDataSourceRiskDetails_LDiversityResult::~AnalyzeDataSourceRiskDetails_LDiversityResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_LDiversityResult& AnalyzeDataSourceRiskDetails_LDiversityResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_LDiversityResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_LDiversityResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensitive_value_frequency_histogram_buckets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_LDiversityResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_LDiversityResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket::_InternalParse;
          object = msg->add_sensitive_value_frequency_histogram_buckets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_LDiversityResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensitive_value_frequency_histogram_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_LDiversityResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensitive_value_frequency_histogram_buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->sensitive_value_frequency_histogram_buckets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_LDiversityResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensitive_value_frequency_histogram_buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->sensitive_value_frequency_histogram_buckets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_LDiversityResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->sensitive_value_frequency_histogram_buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensitive_value_frequency_histogram_buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_LDiversityResult* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_LDiversityResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::MergeFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensitive_value_frequency_histogram_buckets_.MergeFrom(from.sensitive_value_frequency_histogram_buckets_);
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::CopyFrom(const AnalyzeDataSourceRiskDetails_LDiversityResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_LDiversityResult::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_LDiversityResult::Swap(AnalyzeDataSourceRiskDetails_LDiversityResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_LDiversityResult::InternalSwap(AnalyzeDataSourceRiskDetails_LDiversityResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensitive_value_frequency_histogram_buckets_)->InternalSwap(CastToBase(&other->sensitive_value_frequency_histogram_buckets_));
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_LDiversityResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::kQuasiIdsValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::kEstimatedAnonymityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
}
AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_values_(from.quasi_ids_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  estimated_anonymity_ = from.estimated_anonymity_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  estimated_anonymity_ = PROTOBUF_LONGLONG(0);
}

AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::~AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_values_.Clear();
  estimated_anonymity_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
          object = msg->add_quasi_ids_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // int64 estimated_anonymity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_estimated_anonymity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 estimated_anonymity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &estimated_anonymity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids_values(static_cast<int>(i)),
      output);
  }

  // int64 estimated_anonymity = 2;
  if (this->estimated_anonymity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->estimated_anonymity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids_values(static_cast<int>(i)), target);
  }

  // int64 estimated_anonymity = 2;
  if (this->estimated_anonymity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->estimated_anonymity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids_values(static_cast<int>(i)));
    }
  }

  // int64 estimated_anonymity = 2;
  if (this->estimated_anonymity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->estimated_anonymity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::MergeFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_values_.MergeFrom(from.quasi_ids_values_);
  if (from.estimated_anonymity() != 0) {
    set_estimated_anonymity(from.estimated_anonymity());
  }
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::CopyFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::Swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::InternalSwap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_values_)->InternalSwap(CastToBase(&other->quasi_ids_values_));
  swap(estimated_anonymity_, other->estimated_anonymity_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::kMinAnonymityFieldNumber;
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::kMaxAnonymityFieldNumber;
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::kBucketSizeFieldNumber;
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::kBucketValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::kBucketValueCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
}
AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bucket_values_(from.bucket_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_anonymity_, &from.min_anonymity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_value_count_) -
    reinterpret_cast<char*>(&min_anonymity_)) + sizeof(bucket_value_count_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&min_anonymity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&min_anonymity_)) + sizeof(bucket_value_count_));
}

AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::~AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&min_anonymity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&min_anonymity_)) + sizeof(bucket_value_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 min_anonymity = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_min_anonymity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_anonymity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_anonymity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 bucket_size = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bucket_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues::_InternalParse;
          object = msg->add_bucket_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // int64 bucket_value_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bucket_value_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 min_anonymity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_anonymity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_anonymity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_anonymity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_value_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_value_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min_anonymity = 1;
  if (this->min_anonymity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->min_anonymity(), output);
  }

  // int64 max_anonymity = 2;
  if (this->max_anonymity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_anonymity(), output);
  }

  // int64 bucket_size = 5;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->bucket_values(static_cast<int>(i)),
      output);
  }

  // int64 bucket_value_count = 7;
  if (this->bucket_value_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bucket_value_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min_anonymity = 1;
  if (this->min_anonymity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->min_anonymity(), target);
  }

  // int64 max_anonymity = 2;
  if (this->max_anonymity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_anonymity(), target);
  }

  // int64 bucket_size = 5;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->bucket_values(static_cast<int>(i)), target);
  }

  // int64 bucket_value_count = 7;
  if (this->bucket_value_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->bucket_value_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // int64 min_anonymity = 1;
  if (this->min_anonymity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->min_anonymity());
  }

  // int64 max_anonymity = 2;
  if (this->max_anonymity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_anonymity());
  }

  // int64 bucket_size = 5;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  // int64 bucket_value_count = 7;
  if (this->bucket_value_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_value_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::MergeFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.min_anonymity() != 0) {
    set_min_anonymity(from.min_anonymity());
  }
  if (from.max_anonymity() != 0) {
    set_max_anonymity(from.max_anonymity());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
  if (from.bucket_value_count() != 0) {
    set_bucket_value_count(from.bucket_value_count());
  }
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::CopyFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::Swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::InternalSwap(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bucket_values_)->InternalSwap(CastToBase(&other->bucket_values_));
  swap(min_anonymity_, other->min_anonymity_);
  swap(max_anonymity_, other->max_anonymity_);
  swap(bucket_size_, other->bucket_size_);
  swap(bucket_value_count_, other->bucket_value_count_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_KMapEstimationResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_KMapEstimationResult::kKMapEstimationHistogramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_KMapEstimationResult::AnalyzeDataSourceRiskDetails_KMapEstimationResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
}
AnalyzeDataSourceRiskDetails_KMapEstimationResult::AnalyzeDataSourceRiskDetails_KMapEstimationResult(const AnalyzeDataSourceRiskDetails_KMapEstimationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      k_map_estimation_histogram_(from.k_map_estimation_histogram_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

AnalyzeDataSourceRiskDetails_KMapEstimationResult::~AnalyzeDataSourceRiskDetails_KMapEstimationResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_KMapEstimationResult& AnalyzeDataSourceRiskDetails_KMapEstimationResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_KMapEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_KMapEstimationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  k_map_estimation_histogram_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_KMapEstimationResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_KMapEstimationResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket::_InternalParse;
          object = msg->add_k_map_estimation_histogram();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_KMapEstimationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_k_map_estimation_histogram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->k_map_estimation_histogram_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->k_map_estimation_histogram(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_KMapEstimationResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->k_map_estimation_histogram_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->k_map_estimation_histogram(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_KMapEstimationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->k_map_estimation_histogram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->k_map_estimation_histogram(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_KMapEstimationResult* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_KMapEstimationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::MergeFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  k_map_estimation_histogram_.MergeFrom(from.k_map_estimation_histogram_);
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::CopyFrom(const AnalyzeDataSourceRiskDetails_KMapEstimationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_KMapEstimationResult::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_KMapEstimationResult::Swap(AnalyzeDataSourceRiskDetails_KMapEstimationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_KMapEstimationResult::InternalSwap(AnalyzeDataSourceRiskDetails_KMapEstimationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&k_map_estimation_histogram_)->InternalSwap(CastToBase(&other->k_map_estimation_histogram_));
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_KMapEstimationResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::kQuasiIdsValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::kEstimatedProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
}
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      quasi_ids_values_(from.quasi_ids_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  estimated_probability_ = from.estimated_probability_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  estimated_probability_ = 0;
}

AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::~AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quasi_ids_values_.Clear();
  estimated_probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
          object = msg->add_quasi_ids_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // double estimated_probability = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_estimated_probability(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_quasi_ids_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double estimated_probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimated_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->quasi_ids_values(static_cast<int>(i)),
      output);
  }

  // double estimated_probability = 2;
  if (this->estimated_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->estimated_probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->quasi_ids_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->quasi_ids_values(static_cast<int>(i)), target);
  }

  // double estimated_probability = 2;
  if (this->estimated_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->estimated_probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Value quasi_ids_values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->quasi_ids_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->quasi_ids_values(static_cast<int>(i)));
    }
  }

  // double estimated_probability = 2;
  if (this->estimated_probability() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::MergeFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quasi_ids_values_.MergeFrom(from.quasi_ids_values_);
  if (from.estimated_probability() != 0) {
    set_estimated_probability(from.estimated_probability());
  }
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::CopyFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::Swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::InternalSwap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&quasi_ids_values_)->InternalSwap(CastToBase(&other->quasi_ids_values_));
  swap(estimated_probability_, other->estimated_probability_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::kMinProbabilityFieldNumber;
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::kMaxProbabilityFieldNumber;
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::kBucketSizeFieldNumber;
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::kBucketValuesFieldNumber;
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::kBucketValueCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
}
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      bucket_values_(from.bucket_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_probability_, &from.min_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_value_count_) -
    reinterpret_cast<char*>(&min_probability_)) + sizeof(bucket_value_count_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&min_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&min_probability_)) + sizeof(bucket_value_count_));
}

AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::~AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_values_.Clear();
  ::memset(&min_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_value_count_) -
      reinterpret_cast<char*>(&min_probability_)) + sizeof(bucket_value_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double min_probability = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_min_probability(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double max_probability = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_max_probability(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 bucket_size = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bucket_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues::_InternalParse;
          object = msg->add_bucket_values();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // int64 bucket_value_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_bucket_value_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double min_probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bucket_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bucket_value_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_value_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min_probability = 1;
  if (this->min_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_probability(), output);
  }

  // double max_probability = 2;
  if (this->max_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_probability(), output);
  }

  // int64 bucket_size = 5;
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bucket_size(), output);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->bucket_values(static_cast<int>(i)),
      output);
  }

  // int64 bucket_value_count = 7;
  if (this->bucket_value_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bucket_value_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min_probability = 1;
  if (this->min_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_probability(), target);
  }

  // double max_probability = 2;
  if (this->max_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_probability(), target);
  }

  // int64 bucket_size = 5;
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bucket_size(), target);
  }

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bucket_values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->bucket_values(static_cast<int>(i)), target);
  }

  // int64 bucket_value_count = 7;
  if (this->bucket_value_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->bucket_value_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->bucket_values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bucket_values(static_cast<int>(i)));
    }
  }

  // double min_probability = 1;
  if (this->min_probability() != 0) {
    total_size += 1 + 8;
  }

  // double max_probability = 2;
  if (this->max_probability() != 0) {
    total_size += 1 + 8;
  }

  // int64 bucket_size = 5;
  if (this->bucket_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_size());
  }

  // int64 bucket_value_count = 7;
  if (this->bucket_value_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bucket_value_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::MergeFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_values_.MergeFrom(from.bucket_values_);
  if (from.min_probability() != 0) {
    set_min_probability(from.min_probability());
  }
  if (from.max_probability() != 0) {
    set_max_probability(from.max_probability());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
  if (from.bucket_value_count() != 0) {
    set_bucket_value_count(from.bucket_value_count());
  }
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::CopyFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::Swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::InternalSwap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&bucket_values_)->InternalSwap(CastToBase(&other->bucket_values_));
  swap(min_probability_, other->min_probability_);
  swap(max_probability_, other->max_probability_);
  swap(bucket_size_, other->bucket_size_);
  swap(bucket_value_count_, other->bucket_value_count_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::InitAsDefaultInstance() {
}
class AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::kDeltaPresenceEstimationHistogramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
}
AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      delta_presence_estimation_histogram_(from.delta_presence_estimation_histogram_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::~AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::SharedDtor() {
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_presence_estimation_histogram_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket::_InternalParse;
          object = msg->add_delta_presence_estimation_histogram();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_delta_presence_estimation_histogram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->delta_presence_estimation_histogram_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->delta_presence_estimation_histogram(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->delta_presence_estimation_histogram_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->delta_presence_estimation_histogram(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->delta_presence_estimation_histogram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->delta_presence_estimation_histogram(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::MergeFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delta_presence_estimation_histogram_.MergeFrom(from.delta_presence_estimation_histogram_);
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::CopyFrom(const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::Swap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::InternalSwap(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&delta_presence_estimation_histogram_)->InternalSwap(CastToBase(&other->delta_presence_estimation_histogram_));
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_default_instance_._instance.get_mutable()->job_config_ = const_cast< ::google::privacy::dlp::v2::RiskAnalysisJobConfig*>(
      ::google::privacy::dlp::v2::RiskAnalysisJobConfig::internal_default_instance());
}
class AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::RiskAnalysisJobConfig& job_config(const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions* msg);
};

const ::google::privacy::dlp::v2::RiskAnalysisJobConfig&
AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::HasBitSetters::job_config(const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions* msg) {
  return *msg->job_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::kJobConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
}
AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions(const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job_config()) {
    job_config_ = new ::google::privacy::dlp::v2::RiskAnalysisJobConfig(*from.job_config_);
  } else {
    job_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  job_config_ = nullptr;
}

AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::~AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::SharedDtor() {
  if (this != internal_default_instance()) delete job_config_;
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions& AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && job_config_ != nullptr) {
    delete job_config_;
  }
  job_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.RiskAnalysisJobConfig job_config = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RiskAnalysisJobConfig::_InternalParse;
        object = msg->mutable_job_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.RiskAnalysisJobConfig job_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RiskAnalysisJobConfig job_config = 1;
  if (this->has_job_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::job_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RiskAnalysisJobConfig job_config = 1;
  if (this->has_job_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::job_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  return target;
}

size_t AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RiskAnalysisJobConfig job_config = 1;
  if (this->has_job_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::MergeFrom(const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job_config()) {
    mutable_job_config()->::google::privacy::dlp::v2::RiskAnalysisJobConfig::MergeFrom(from.job_config());
  }
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::CopyFrom(const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::Swap(AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::InternalSwap(AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(job_config_, other->job_config_);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AnalyzeDataSourceRiskDetails::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_._instance.get_mutable()->requested_privacy_metric_ = const_cast< ::google::privacy::dlp::v2::PrivacyMetric*>(
      ::google::privacy::dlp::v2::PrivacyMetric::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_._instance.get_mutable()->requested_source_table_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_.numerical_stats_result_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_.categorical_stats_result_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_.k_anonymity_result_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_.l_diversity_result_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_.k_map_estimation_result_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_.delta_presence_estimation_result_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::internal_default_instance());
  ::google::privacy::dlp::v2::_AnalyzeDataSourceRiskDetails_default_instance_._instance.get_mutable()->requested_options_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::internal_default_instance());
}
class AnalyzeDataSourceRiskDetails::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::PrivacyMetric& requested_privacy_metric(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::BigQueryTable& requested_source_table(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult& numerical_stats_result(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult& categorical_stats_result(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult& k_anonymity_result(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult& l_diversity_result(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult& k_map_estimation_result(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult& delta_presence_estimation_result(const AnalyzeDataSourceRiskDetails* msg);
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions& requested_options(const AnalyzeDataSourceRiskDetails* msg);
};

const ::google::privacy::dlp::v2::PrivacyMetric&
AnalyzeDataSourceRiskDetails::HasBitSetters::requested_privacy_metric(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->requested_privacy_metric_;
}
const ::google::privacy::dlp::v2::BigQueryTable&
AnalyzeDataSourceRiskDetails::HasBitSetters::requested_source_table(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->requested_source_table_;
}
const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult&
AnalyzeDataSourceRiskDetails::HasBitSetters::numerical_stats_result(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->result_.numerical_stats_result_;
}
const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult&
AnalyzeDataSourceRiskDetails::HasBitSetters::categorical_stats_result(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->result_.categorical_stats_result_;
}
const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult&
AnalyzeDataSourceRiskDetails::HasBitSetters::k_anonymity_result(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->result_.k_anonymity_result_;
}
const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult&
AnalyzeDataSourceRiskDetails::HasBitSetters::l_diversity_result(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->result_.l_diversity_result_;
}
const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult&
AnalyzeDataSourceRiskDetails::HasBitSetters::k_map_estimation_result(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->result_.k_map_estimation_result_;
}
const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult&
AnalyzeDataSourceRiskDetails::HasBitSetters::delta_presence_estimation_result(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->result_.delta_presence_estimation_result_;
}
const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions&
AnalyzeDataSourceRiskDetails::HasBitSetters::requested_options(const AnalyzeDataSourceRiskDetails* msg) {
  return *msg->requested_options_;
}
void AnalyzeDataSourceRiskDetails::clear_requested_source_table() {
  if (GetArenaNoVirtual() == nullptr && requested_source_table_ != nullptr) {
    delete requested_source_table_;
  }
  requested_source_table_ = nullptr;
}
void AnalyzeDataSourceRiskDetails::set_allocated_numerical_stats_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* numerical_stats_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (numerical_stats_result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      numerical_stats_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, numerical_stats_result, submessage_arena);
    }
    set_has_numerical_stats_result();
    result_.numerical_stats_result_ = numerical_stats_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.numerical_stats_result)
}
void AnalyzeDataSourceRiskDetails::set_allocated_categorical_stats_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* categorical_stats_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (categorical_stats_result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      categorical_stats_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, categorical_stats_result, submessage_arena);
    }
    set_has_categorical_stats_result();
    result_.categorical_stats_result_ = categorical_stats_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.categorical_stats_result)
}
void AnalyzeDataSourceRiskDetails::set_allocated_k_anonymity_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* k_anonymity_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (k_anonymity_result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      k_anonymity_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k_anonymity_result, submessage_arena);
    }
    set_has_k_anonymity_result();
    result_.k_anonymity_result_ = k_anonymity_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_anonymity_result)
}
void AnalyzeDataSourceRiskDetails::set_allocated_l_diversity_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* l_diversity_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (l_diversity_result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      l_diversity_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, l_diversity_result, submessage_arena);
    }
    set_has_l_diversity_result();
    result_.l_diversity_result_ = l_diversity_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.l_diversity_result)
}
void AnalyzeDataSourceRiskDetails::set_allocated_k_map_estimation_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* k_map_estimation_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (k_map_estimation_result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      k_map_estimation_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, k_map_estimation_result, submessage_arena);
    }
    set_has_k_map_estimation_result();
    result_.k_map_estimation_result_ = k_map_estimation_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.k_map_estimation_result)
}
void AnalyzeDataSourceRiskDetails::set_allocated_delta_presence_estimation_result(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* delta_presence_estimation_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (delta_presence_estimation_result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delta_presence_estimation_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delta_presence_estimation_result, submessage_arena);
    }
    set_has_delta_presence_estimation_result();
    result_.delta_presence_estimation_result_ = delta_presence_estimation_result;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.delta_presence_estimation_result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalyzeDataSourceRiskDetails::kRequestedPrivacyMetricFieldNumber;
const int AnalyzeDataSourceRiskDetails::kRequestedSourceTableFieldNumber;
const int AnalyzeDataSourceRiskDetails::kNumericalStatsResultFieldNumber;
const int AnalyzeDataSourceRiskDetails::kCategoricalStatsResultFieldNumber;
const int AnalyzeDataSourceRiskDetails::kKAnonymityResultFieldNumber;
const int AnalyzeDataSourceRiskDetails::kLDiversityResultFieldNumber;
const int AnalyzeDataSourceRiskDetails::kKMapEstimationResultFieldNumber;
const int AnalyzeDataSourceRiskDetails::kDeltaPresenceEstimationResultFieldNumber;
const int AnalyzeDataSourceRiskDetails::kRequestedOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalyzeDataSourceRiskDetails::AnalyzeDataSourceRiskDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
}
AnalyzeDataSourceRiskDetails::AnalyzeDataSourceRiskDetails(const AnalyzeDataSourceRiskDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_requested_privacy_metric()) {
    requested_privacy_metric_ = new ::google::privacy::dlp::v2::PrivacyMetric(*from.requested_privacy_metric_);
  } else {
    requested_privacy_metric_ = nullptr;
  }
  if (from.has_requested_source_table()) {
    requested_source_table_ = new ::google::privacy::dlp::v2::BigQueryTable(*from.requested_source_table_);
  } else {
    requested_source_table_ = nullptr;
  }
  if (from.has_requested_options()) {
    requested_options_ = new ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions(*from.requested_options_);
  } else {
    requested_options_ = nullptr;
  }
  clear_has_result();
  switch (from.result_case()) {
    case kNumericalStatsResult: {
      mutable_numerical_stats_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult::MergeFrom(from.numerical_stats_result());
      break;
    }
    case kCategoricalStatsResult: {
      mutable_categorical_stats_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult::MergeFrom(from.categorical_stats_result());
      break;
    }
    case kKAnonymityResult: {
      mutable_k_anonymity_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult::MergeFrom(from.k_anonymity_result());
      break;
    }
    case kLDiversityResult: {
      mutable_l_diversity_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult::MergeFrom(from.l_diversity_result());
      break;
    }
    case kKMapEstimationResult: {
      mutable_k_map_estimation_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult::MergeFrom(from.k_map_estimation_result());
      break;
    }
    case kDeltaPresenceEstimationResult: {
      mutable_delta_presence_estimation_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::MergeFrom(from.delta_presence_estimation_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
}

void AnalyzeDataSourceRiskDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&requested_privacy_metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requested_options_) -
      reinterpret_cast<char*>(&requested_privacy_metric_)) + sizeof(requested_options_));
  clear_has_result();
}

AnalyzeDataSourceRiskDetails::~AnalyzeDataSourceRiskDetails() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  SharedDtor();
}

void AnalyzeDataSourceRiskDetails::SharedDtor() {
  if (this != internal_default_instance()) delete requested_privacy_metric_;
  if (this != internal_default_instance()) delete requested_source_table_;
  if (this != internal_default_instance()) delete requested_options_;
  if (has_result()) {
    clear_result();
  }
}

void AnalyzeDataSourceRiskDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalyzeDataSourceRiskDetails& AnalyzeDataSourceRiskDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnalyzeDataSourceRiskDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void AnalyzeDataSourceRiskDetails::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  switch (result_case()) {
    case kNumericalStatsResult: {
      delete result_.numerical_stats_result_;
      break;
    }
    case kCategoricalStatsResult: {
      delete result_.categorical_stats_result_;
      break;
    }
    case kKAnonymityResult: {
      delete result_.k_anonymity_result_;
      break;
    }
    case kLDiversityResult: {
      delete result_.l_diversity_result_;
      break;
    }
    case kKMapEstimationResult: {
      delete result_.k_map_estimation_result_;
      break;
    }
    case kDeltaPresenceEstimationResult: {
      delete result_.delta_presence_estimation_result_;
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void AnalyzeDataSourceRiskDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && requested_privacy_metric_ != nullptr) {
    delete requested_privacy_metric_;
  }
  requested_privacy_metric_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requested_source_table_ != nullptr) {
    delete requested_source_table_;
  }
  requested_source_table_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requested_options_ != nullptr) {
    delete requested_options_;
  }
  requested_options_ = nullptr;
  clear_result();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalyzeDataSourceRiskDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnalyzeDataSourceRiskDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrivacyMetric::_InternalParse;
        object = msg->mutable_requested_privacy_metric();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_requested_source_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult::_InternalParse;
        object = msg->mutable_numerical_stats_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult::_InternalParse;
        object = msg->mutable_categorical_stats_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult::_InternalParse;
        object = msg->mutable_k_anonymity_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult::_InternalParse;
        object = msg->mutable_l_diversity_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult::_InternalParse;
        object = msg->mutable_k_map_estimation_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::_InternalParse;
        object = msg->mutable_delta_presence_estimation_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions requested_options = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::_InternalParse;
        object = msg->mutable_requested_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalyzeDataSourceRiskDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_privacy_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_source_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_numerical_stats_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_categorical_stats_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_k_anonymity_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_l_diversity_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_k_map_estimation_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delta_presence_estimation_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions requested_options = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalyzeDataSourceRiskDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
  if (this->has_requested_privacy_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::requested_privacy_metric(this), output);
  }

  // .google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
  if (this->has_requested_source_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::requested_source_table(this), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
  if (has_numerical_stats_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::numerical_stats_result(this), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
  if (has_categorical_stats_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::categorical_stats_result(this), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
  if (has_k_anonymity_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::k_anonymity_result(this), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
  if (has_l_diversity_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::l_diversity_result(this), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
  if (has_k_map_estimation_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::k_map_estimation_result(this), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
  if (has_delta_presence_estimation_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::delta_presence_estimation_result(this), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions requested_options = 10;
  if (this->has_requested_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::requested_options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
}

::google::protobuf::uint8* AnalyzeDataSourceRiskDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
  if (this->has_requested_privacy_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::requested_privacy_metric(this), target);
  }

  // .google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
  if (this->has_requested_source_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::requested_source_table(this), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
  if (has_numerical_stats_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::numerical_stats_result(this), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
  if (has_categorical_stats_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::categorical_stats_result(this), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
  if (has_k_anonymity_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::k_anonymity_result(this), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
  if (has_l_diversity_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::l_diversity_result(this), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
  if (has_k_map_estimation_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::k_map_estimation_result(this), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
  if (has_delta_presence_estimation_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::delta_presence_estimation_result(this), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions requested_options = 10;
  if (this->has_requested_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::requested_options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  return target;
}

size_t AnalyzeDataSourceRiskDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
  if (this->has_requested_privacy_metric()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requested_privacy_metric_);
  }

  // .google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
  if (this->has_requested_source_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requested_source_table_);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions requested_options = 10;
  if (this->has_requested_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requested_options_);
  }

  switch (result_case()) {
    // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
    case kNumericalStatsResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.numerical_stats_result_);
      break;
    }
    // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
    case kCategoricalStatsResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.categorical_stats_result_);
      break;
    }
    // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
    case kKAnonymityResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.k_anonymity_result_);
      break;
    }
    // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
    case kLDiversityResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.l_diversity_result_);
      break;
    }
    // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
    case kKMapEstimationResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.k_map_estimation_result_);
      break;
    }
    // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
    case kDeltaPresenceEstimationResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.delta_presence_estimation_result_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalyzeDataSourceRiskDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalyzeDataSourceRiskDetails* source =
      ::google::protobuf::DynamicCastToGenerated<AnalyzeDataSourceRiskDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
    MergeFrom(*source);
  }
}

void AnalyzeDataSourceRiskDetails::MergeFrom(const AnalyzeDataSourceRiskDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requested_privacy_metric()) {
    mutable_requested_privacy_metric()->::google::privacy::dlp::v2::PrivacyMetric::MergeFrom(from.requested_privacy_metric());
  }
  if (from.has_requested_source_table()) {
    mutable_requested_source_table()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.requested_source_table());
  }
  if (from.has_requested_options()) {
    mutable_requested_options()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions::MergeFrom(from.requested_options());
  }
  switch (from.result_case()) {
    case kNumericalStatsResult: {
      mutable_numerical_stats_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult::MergeFrom(from.numerical_stats_result());
      break;
    }
    case kCategoricalStatsResult: {
      mutable_categorical_stats_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult::MergeFrom(from.categorical_stats_result());
      break;
    }
    case kKAnonymityResult: {
      mutable_k_anonymity_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult::MergeFrom(from.k_anonymity_result());
      break;
    }
    case kLDiversityResult: {
      mutable_l_diversity_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult::MergeFrom(from.l_diversity_result());
      break;
    }
    case kKMapEstimationResult: {
      mutable_k_map_estimation_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult::MergeFrom(from.k_map_estimation_result());
      break;
    }
    case kDeltaPresenceEstimationResult: {
      mutable_delta_presence_estimation_result()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult::MergeFrom(from.delta_presence_estimation_result());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void AnalyzeDataSourceRiskDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalyzeDataSourceRiskDetails::CopyFrom(const AnalyzeDataSourceRiskDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzeDataSourceRiskDetails::IsInitialized() const {
  return true;
}

void AnalyzeDataSourceRiskDetails::Swap(AnalyzeDataSourceRiskDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalyzeDataSourceRiskDetails::InternalSwap(AnalyzeDataSourceRiskDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(requested_privacy_metric_, other->requested_privacy_metric_);
  swap(requested_source_table_, other->requested_source_table_);
  swap(requested_options_, other->requested_options_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AnalyzeDataSourceRiskDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ValueFrequency::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_ValueFrequency_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
}
class ValueFrequency::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Value& value(const ValueFrequency* msg);
};

const ::google::privacy::dlp::v2::Value&
ValueFrequency::HasBitSetters::value(const ValueFrequency* msg) {
  return *msg->value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValueFrequency::kValueFieldNumber;
const int ValueFrequency::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValueFrequency::ValueFrequency()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ValueFrequency)
}
ValueFrequency::ValueFrequency(const ValueFrequency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::google::privacy::dlp::v2::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ValueFrequency)
}

void ValueFrequency::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&value_)) + sizeof(count_));
}

ValueFrequency::~ValueFrequency() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ValueFrequency)
  SharedDtor();
}

void ValueFrequency::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
}

void ValueFrequency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueFrequency& ValueFrequency::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ValueFrequency_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ValueFrequency::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ValueFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValueFrequency::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ValueFrequency*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Value value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValueFrequency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ValueFrequency)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Value value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ValueFrequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ValueFrequency)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValueFrequency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ValueFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::value(this), output);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ValueFrequency)
}

::google::protobuf::uint8* ValueFrequency::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ValueFrequency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::value(this), target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ValueFrequency)
  return target;
}

size_t ValueFrequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ValueFrequency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueFrequency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ValueFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueFrequency* source =
      ::google::protobuf::DynamicCastToGenerated<ValueFrequency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ValueFrequency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ValueFrequency)
    MergeFrom(*source);
  }
}

void ValueFrequency::MergeFrom(const ValueFrequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ValueFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::google::privacy::dlp::v2::Value::MergeFrom(from.value());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ValueFrequency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ValueFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueFrequency::CopyFrom(const ValueFrequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ValueFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueFrequency::IsInitialized() const {
  return true;
}

void ValueFrequency::Swap(ValueFrequency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValueFrequency::InternalSwap(ValueFrequency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata ValueFrequency::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Value_default_instance_.integer_value_ = PROTOBUF_LONGLONG(0);
  ::google::privacy::dlp::v2::_Value_default_instance_.float_value_ = 0;
  ::google::privacy::dlp::v2::_Value_default_instance_.string_value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2::_Value_default_instance_.boolean_value_ = false;
  ::google::privacy::dlp::v2::_Value_default_instance_.timestamp_value_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_Value_default_instance_.time_value_ = const_cast< ::google::type::TimeOfDay*>(
      ::google::type::TimeOfDay::internal_default_instance());
  ::google::privacy::dlp::v2::_Value_default_instance_.date_value_ = const_cast< ::google::type::Date*>(
      ::google::type::Date::internal_default_instance());
  ::google::privacy::dlp::v2::_Value_default_instance_.day_of_week_value_ = 0;
}
class Value::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& timestamp_value(const Value* msg);
  static const ::google::type::TimeOfDay& time_value(const Value* msg);
  static const ::google::type::Date& date_value(const Value* msg);
};

const ::google::protobuf::Timestamp&
Value::HasBitSetters::timestamp_value(const Value* msg) {
  return *msg->type_.timestamp_value_;
}
const ::google::type::TimeOfDay&
Value::HasBitSetters::time_value(const Value* msg) {
  return *msg->type_.time_value_;
}
const ::google::type::Date&
Value::HasBitSetters::date_value(const Value* msg) {
  return *msg->type_.date_value_;
}
void Value::set_allocated_timestamp_value(::google::protobuf::Timestamp* timestamp_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (timestamp_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp_value)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp_value, submessage_arena);
    }
    set_has_timestamp_value();
    type_.timestamp_value_ = timestamp_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Value.timestamp_value)
}
void Value::clear_timestamp_value() {
  if (has_timestamp_value()) {
    delete type_.timestamp_value_;
    clear_has_type();
  }
}
void Value::set_allocated_time_value(::google::type::TimeOfDay* time_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (time_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time_value)->GetArena();
    if (message_arena != submessage_arena) {
      time_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_value, submessage_arena);
    }
    set_has_time_value();
    type_.time_value_ = time_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Value.time_value)
}
void Value::clear_time_value() {
  if (has_time_value()) {
    delete type_.time_value_;
    clear_has_type();
  }
}
void Value::set_allocated_date_value(::google::type::Date* date_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (date_value) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(date_value)->GetArena();
    if (message_arena != submessage_arena) {
      date_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date_value, submessage_arena);
    }
    set_has_date_value();
    type_.date_value_ = date_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Value.date_value)
}
void Value::clear_date_value() {
  if (has_date_value()) {
    delete type_.date_value_;
    clear_has_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kIntegerValueFieldNumber;
const int Value::kFloatValueFieldNumber;
const int Value::kStringValueFieldNumber;
const int Value::kBooleanValueFieldNumber;
const int Value::kTimestampValueFieldNumber;
const int Value::kTimeValueFieldNumber;
const int Value::kDateValueFieldNumber;
const int Value::kDayOfWeekValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::type::TimeOfDay::MergeFrom(from.time_value());
      break;
    }
    case kDateValue: {
      mutable_date_value()->::google::type::Date::MergeFrom(from.date_value());
      break;
    }
    case kDayOfWeekValue: {
      set_day_of_week_value(from.day_of_week_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Value)
}

void Value::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_type();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Value_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Value::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.Value)
  switch (type_case()) {
    case kIntegerValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      type_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kTimestampValue: {
      delete type_.timestamp_value_;
      break;
    }
    case kTimeValue: {
      delete type_.time_value_;
      break;
    }
    case kDateValue: {
      delete type_.date_value_;
      break;
    }
    case kDayOfWeekValue: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Value::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Value*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 integer_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_integer_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double float_value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_float_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string string_value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Value.string_value");
        object = msg->mutable_string_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool boolean_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_boolean_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.Timestamp timestamp_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_timestamp_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.type.TimeOfDay time_value = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::type::TimeOfDay::_InternalParse;
        object = msg->mutable_time_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.type.Date date_value = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::type::Date::_InternalParse;
        object = msg->mutable_date_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.type.DayOfWeek day_of_week_value = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_day_of_week_value(static_cast<::google::type::DayOfWeek>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Value)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 integer_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_.integer_value_)));
          set_has_integer_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double float_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Value.string_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolean_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp timestamp_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.TimeOfDay time_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.Date date_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.DayOfWeek day_of_week_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_day_of_week_value(static_cast< ::google::type::DayOfWeek >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Value)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 integer_value = 1;
  if (has_integer_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->integer_value(), output);
  }

  // double float_value = 2;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->float_value(), output);
  }

  // string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Value.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->string_value(), output);
  }

  // bool boolean_value = 4;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolean_value(), output);
  }

  // .google.protobuf.Timestamp timestamp_value = 5;
  if (has_timestamp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::timestamp_value(this), output);
  }

  // .google.type.TimeOfDay time_value = 6;
  if (has_time_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::time_value(this), output);
  }

  // .google.type.Date date_value = 7;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::date_value(this), output);
  }

  // .google.type.DayOfWeek day_of_week_value = 8;
  if (has_day_of_week_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->day_of_week_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 integer_value = 1;
  if (has_integer_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->integer_value(), target);
  }

  // double float_value = 2;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->float_value(), target);
  }

  // string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Value.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_value(), target);
  }

  // bool boolean_value = 4;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->boolean_value(), target);
  }

  // .google.protobuf.Timestamp timestamp_value = 5;
  if (has_timestamp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::timestamp_value(this), target);
  }

  // .google.type.TimeOfDay time_value = 6;
  if (has_time_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::time_value(this), target);
  }

  // .google.type.Date date_value = 7;
  if (has_date_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::date_value(this), target);
  }

  // .google.type.DayOfWeek day_of_week_value = 8;
  if (has_day_of_week_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->day_of_week_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // int64 integer_value = 1;
    case kIntegerValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integer_value());
      break;
    }
    // double float_value = 2;
    case kFloatValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 3;
    case kStringValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // bool boolean_value = 4;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // .google.protobuf.Timestamp timestamp_value = 5;
    case kTimestampValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.timestamp_value_);
      break;
    }
    // .google.type.TimeOfDay time_value = 6;
    case kTimeValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.time_value_);
      break;
    }
    // .google.type.Date date_value = 7;
    case kDateValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.date_value_);
      break;
    }
    // .google.type.DayOfWeek day_of_week_value = 8;
    case kDayOfWeekValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_of_week_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::DynamicCastToGenerated<Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kTimestampValue: {
      mutable_timestamp_value()->::google::protobuf::Timestamp::MergeFrom(from.timestamp_value());
      break;
    }
    case kTimeValue: {
      mutable_time_value()->::google::type::TimeOfDay::MergeFrom(from.time_value());
      break;
    }
    case kDateValue: {
      mutable_date_value()->::google::type::Date::MergeFrom(from.date_value());
      break;
    }
    case kDayOfWeekValue: {
      set_day_of_week_value(from.day_of_week_value());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void QuoteInfo::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_QuoteInfo_default_instance_.date_time_ = const_cast< ::google::privacy::dlp::v2::DateTime*>(
      ::google::privacy::dlp::v2::DateTime::internal_default_instance());
}
class QuoteInfo::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::DateTime& date_time(const QuoteInfo* msg);
};

const ::google::privacy::dlp::v2::DateTime&
QuoteInfo::HasBitSetters::date_time(const QuoteInfo* msg) {
  return *msg->parsed_quote_.date_time_;
}
void QuoteInfo::set_allocated_date_time(::google::privacy::dlp::v2::DateTime* date_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_parsed_quote();
  if (date_time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date_time, submessage_arena);
    }
    set_has_date_time();
    parsed_quote_.date_time_ = date_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.QuoteInfo.date_time)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuoteInfo::kDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuoteInfo::QuoteInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.QuoteInfo)
}
QuoteInfo::QuoteInfo(const QuoteInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_parsed_quote();
  switch (from.parsed_quote_case()) {
    case kDateTime: {
      mutable_date_time()->::google::privacy::dlp::v2::DateTime::MergeFrom(from.date_time());
      break;
    }
    case PARSED_QUOTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.QuoteInfo)
}

void QuoteInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_QuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_parsed_quote();
}

QuoteInfo::~QuoteInfo() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.QuoteInfo)
  SharedDtor();
}

void QuoteInfo::SharedDtor() {
  if (has_parsed_quote()) {
    clear_parsed_quote();
  }
}

void QuoteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuoteInfo& QuoteInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_QuoteInfo_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void QuoteInfo::clear_parsed_quote() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.QuoteInfo)
  switch (parsed_quote_case()) {
    case kDateTime: {
      delete parsed_quote_.date_time_;
      break;
    }
    case PARSED_QUOTE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARSED_QUOTE_NOT_SET;
}


void QuoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.QuoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_parsed_quote();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuoteInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<QuoteInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.DateTime date_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DateTime::_InternalParse;
        object = msg->mutable_date_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.QuoteInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.DateTime date_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.QuoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.QuoteInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.QuoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.DateTime date_time = 2;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::date_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.QuoteInfo)
}

::google::protobuf::uint8* QuoteInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.QuoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.DateTime date_time = 2;
  if (has_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::date_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.QuoteInfo)
  return target;
}

size_t QuoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.QuoteInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (parsed_quote_case()) {
    // .google.privacy.dlp.v2.DateTime date_time = 2;
    case kDateTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parsed_quote_.date_time_);
      break;
    }
    case PARSED_QUOTE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.QuoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QuoteInfo* source =
      ::google::protobuf::DynamicCastToGenerated<QuoteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.QuoteInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.QuoteInfo)
    MergeFrom(*source);
  }
}

void QuoteInfo::MergeFrom(const QuoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.QuoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.parsed_quote_case()) {
    case kDateTime: {
      mutable_date_time()->::google::privacy::dlp::v2::DateTime::MergeFrom(from.date_time());
      break;
    }
    case PARSED_QUOTE_NOT_SET: {
      break;
    }
  }
}

void QuoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.QuoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteInfo::CopyFrom(const QuoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.QuoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteInfo::IsInitialized() const {
  return true;
}

void QuoteInfo::Swap(QuoteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuoteInfo::InternalSwap(QuoteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(parsed_quote_, other->parsed_quote_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata QuoteInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTime_TimeZone::InitAsDefaultInstance() {
}
class DateTime_TimeZone::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTime_TimeZone::kOffsetMinutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTime_TimeZone::DateTime_TimeZone()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DateTime.TimeZone)
}
DateTime_TimeZone::DateTime_TimeZone(const DateTime_TimeZone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  offset_minutes_ = from.offset_minutes_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DateTime.TimeZone)
}

void DateTime_TimeZone::SharedCtor() {
  offset_minutes_ = 0;
}

DateTime_TimeZone::~DateTime_TimeZone() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DateTime.TimeZone)
  SharedDtor();
}

void DateTime_TimeZone::SharedDtor() {
}

void DateTime_TimeZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime_TimeZone& DateTime_TimeZone::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTime_TimeZone_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DateTime_TimeZone::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DateTime.TimeZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_minutes_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTime_TimeZone::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTime_TimeZone*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 offset_minutes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_offset_minutes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTime_TimeZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DateTime.TimeZone)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 offset_minutes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DateTime.TimeZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DateTime.TimeZone)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTime_TimeZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DateTime.TimeZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset_minutes = 1;
  if (this->offset_minutes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset_minutes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DateTime.TimeZone)
}

::google::protobuf::uint8* DateTime_TimeZone::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DateTime.TimeZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset_minutes = 1;
  if (this->offset_minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset_minutes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DateTime.TimeZone)
  return target;
}

size_t DateTime_TimeZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DateTime.TimeZone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset_minutes = 1;
  if (this->offset_minutes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset_minutes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime_TimeZone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DateTime.TimeZone)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime_TimeZone* source =
      ::google::protobuf::DynamicCastToGenerated<DateTime_TimeZone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DateTime.TimeZone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DateTime.TimeZone)
    MergeFrom(*source);
  }
}

void DateTime_TimeZone::MergeFrom(const DateTime_TimeZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DateTime.TimeZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset_minutes() != 0) {
    set_offset_minutes(from.offset_minutes());
  }
}

void DateTime_TimeZone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DateTime.TimeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime_TimeZone::CopyFrom(const DateTime_TimeZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DateTime.TimeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime_TimeZone::IsInitialized() const {
  return true;
}

void DateTime_TimeZone::Swap(DateTime_TimeZone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTime_TimeZone::InternalSwap(DateTime_TimeZone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(offset_minutes_, other->offset_minutes_);
}

::google::protobuf::Metadata DateTime_TimeZone::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTime::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DateTime_default_instance_._instance.get_mutable()->date_ = const_cast< ::google::type::Date*>(
      ::google::type::Date::internal_default_instance());
  ::google::privacy::dlp::v2::_DateTime_default_instance_._instance.get_mutable()->time_ = const_cast< ::google::type::TimeOfDay*>(
      ::google::type::TimeOfDay::internal_default_instance());
  ::google::privacy::dlp::v2::_DateTime_default_instance_._instance.get_mutable()->time_zone_ = const_cast< ::google::privacy::dlp::v2::DateTime_TimeZone*>(
      ::google::privacy::dlp::v2::DateTime_TimeZone::internal_default_instance());
}
class DateTime::HasBitSetters {
 public:
  static const ::google::type::Date& date(const DateTime* msg);
  static const ::google::type::TimeOfDay& time(const DateTime* msg);
  static const ::google::privacy::dlp::v2::DateTime_TimeZone& time_zone(const DateTime* msg);
};

const ::google::type::Date&
DateTime::HasBitSetters::date(const DateTime* msg) {
  return *msg->date_;
}
const ::google::type::TimeOfDay&
DateTime::HasBitSetters::time(const DateTime* msg) {
  return *msg->time_;
}
const ::google::privacy::dlp::v2::DateTime_TimeZone&
DateTime::HasBitSetters::time_zone(const DateTime* msg) {
  return *msg->time_zone_;
}
void DateTime::clear_date() {
  if (GetArenaNoVirtual() == nullptr && date_ != nullptr) {
    delete date_;
  }
  date_ = nullptr;
}
void DateTime::clear_time() {
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTime::kDateFieldNumber;
const int DateTime::kDayOfWeekFieldNumber;
const int DateTime::kTimeFieldNumber;
const int DateTime::kTimeZoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTime::DateTime()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_date()) {
    date_ = new ::google::type::Date(*from.date_);
  } else {
    date_ = nullptr;
  }
  if (from.has_time()) {
    time_ = new ::google::type::TimeOfDay(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from.has_time_zone()) {
    time_zone_ = new ::google::privacy::dlp::v2::DateTime_TimeZone(*from.time_zone_);
  } else {
    time_zone_ = nullptr;
  }
  day_of_week_ = from.day_of_week_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DateTime)
}

void DateTime::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_of_week_) -
      reinterpret_cast<char*>(&date_)) + sizeof(day_of_week_));
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
  if (this != internal_default_instance()) delete date_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete time_zone_;
}

void DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime& DateTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTime_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && date_ != nullptr) {
    delete date_;
  }
  date_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_zone_ != nullptr) {
    delete time_zone_;
  }
  time_zone_ = nullptr;
  day_of_week_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTime::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTime*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.type.Date date = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::type::Date::_InternalParse;
        object = msg->mutable_date();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.type.DayOfWeek day_of_week = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_day_of_week(static_cast<::google::type::DayOfWeek>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.type.TimeOfDay time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::type::TimeOfDay::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DateTime_TimeZone::_InternalParse;
        object = msg->mutable_time_zone();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DateTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.type.Date date = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.DayOfWeek day_of_week = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_day_of_week(static_cast< ::google::type::DayOfWeek >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.type.TimeOfDay time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DateTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.Date date = 1;
  if (this->has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::date(this), output);
  }

  // .google.type.DayOfWeek day_of_week = 2;
  if (this->day_of_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->day_of_week(), output);
  }

  // .google.type.TimeOfDay time = 3;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::time(this), output);
  }

  // .google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
  if (this->has_time_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::time_zone(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DateTime)
}

::google::protobuf::uint8* DateTime::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.Date date = 1;
  if (this->has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::date(this), target);
  }

  // .google.type.DayOfWeek day_of_week = 2;
  if (this->day_of_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->day_of_week(), target);
  }

  // .google.type.TimeOfDay time = 3;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::time(this), target);
  }

  // .google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
  if (this->has_time_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::time_zone(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DateTime)
  return target;
}

size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DateTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.type.Date date = 1;
  if (this->has_date()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *date_);
  }

  // .google.type.TimeOfDay time = 3;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
  if (this->has_time_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_zone_);
  }

  // .google.type.DayOfWeek day_of_week = 2;
  if (this->day_of_week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_of_week());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime* source =
      ::google::protobuf::DynamicCastToGenerated<DateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DateTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DateTime)
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_date()) {
    mutable_date()->::google::type::Date::MergeFrom(from.date());
  }
  if (from.has_time()) {
    mutable_time()->::google::type::TimeOfDay::MergeFrom(from.time());
  }
  if (from.has_time_zone()) {
    mutable_time_zone()->::google::privacy::dlp::v2::DateTime_TimeZone::MergeFrom(from.time_zone());
  }
  if (from.day_of_week() != 0) {
    set_day_of_week(from.day_of_week());
  }
}

void DateTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(date_, other->date_);
  swap(time_, other->time_);
  swap(time_zone_, other->time_zone_);
  swap(day_of_week_, other->day_of_week_);
}

::google::protobuf::Metadata DateTime::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeidentifyConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_.info_type_transformations_ = const_cast< ::google::privacy::dlp::v2::InfoTypeTransformations*>(
      ::google::privacy::dlp::v2::InfoTypeTransformations::internal_default_instance());
  ::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_.record_transformations_ = const_cast< ::google::privacy::dlp::v2::RecordTransformations*>(
      ::google::privacy::dlp::v2::RecordTransformations::internal_default_instance());
  ::google::privacy::dlp::v2::_DeidentifyConfig_default_instance_._instance.get_mutable()->transformation_error_handling_ = const_cast< ::google::privacy::dlp::v2::TransformationErrorHandling*>(
      ::google::privacy::dlp::v2::TransformationErrorHandling::internal_default_instance());
}
class DeidentifyConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InfoTypeTransformations& info_type_transformations(const DeidentifyConfig* msg);
  static const ::google::privacy::dlp::v2::RecordTransformations& record_transformations(const DeidentifyConfig* msg);
  static const ::google::privacy::dlp::v2::TransformationErrorHandling& transformation_error_handling(const DeidentifyConfig* msg);
};

const ::google::privacy::dlp::v2::InfoTypeTransformations&
DeidentifyConfig::HasBitSetters::info_type_transformations(const DeidentifyConfig* msg) {
  return *msg->transformation_.info_type_transformations_;
}
const ::google::privacy::dlp::v2::RecordTransformations&
DeidentifyConfig::HasBitSetters::record_transformations(const DeidentifyConfig* msg) {
  return *msg->transformation_.record_transformations_;
}
const ::google::privacy::dlp::v2::TransformationErrorHandling&
DeidentifyConfig::HasBitSetters::transformation_error_handling(const DeidentifyConfig* msg) {
  return *msg->transformation_error_handling_;
}
void DeidentifyConfig::set_allocated_info_type_transformations(::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (info_type_transformations) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info_type_transformations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type_transformations, submessage_arena);
    }
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = info_type_transformations;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyConfig.info_type_transformations)
}
void DeidentifyConfig::set_allocated_record_transformations(::google::privacy::dlp::v2::RecordTransformations* record_transformations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (record_transformations) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record_transformations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, record_transformations, submessage_arena);
    }
    set_has_record_transformations();
    transformation_.record_transformations_ = record_transformations;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DeidentifyConfig.record_transformations)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentifyConfig::kInfoTypeTransformationsFieldNumber;
const int DeidentifyConfig::kRecordTransformationsFieldNumber;
const int DeidentifyConfig::kTransformationErrorHandlingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentifyConfig::DeidentifyConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeidentifyConfig)
}
DeidentifyConfig::DeidentifyConfig(const DeidentifyConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transformation_error_handling()) {
    transformation_error_handling_ = new ::google::privacy::dlp::v2::TransformationErrorHandling(*from.transformation_error_handling_);
  } else {
    transformation_error_handling_ = nullptr;
  }
  clear_has_transformation();
  switch (from.transformation_case()) {
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case kRecordTransformations: {
      mutable_record_transformations()->::google::privacy::dlp::v2::RecordTransformations::MergeFrom(from.record_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeidentifyConfig)
}

void DeidentifyConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  transformation_error_handling_ = nullptr;
  clear_has_transformation();
}

DeidentifyConfig::~DeidentifyConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeidentifyConfig)
  SharedDtor();
}

void DeidentifyConfig::SharedDtor() {
  if (this != internal_default_instance()) delete transformation_error_handling_;
  if (has_transformation()) {
    clear_transformation();
  }
}

void DeidentifyConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeidentifyConfig& DeidentifyConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeidentifyConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeidentifyConfig::clear_transformation() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.DeidentifyConfig)
  switch (transformation_case()) {
    case kInfoTypeTransformations: {
      delete transformation_.info_type_transformations_;
      break;
    }
    case kRecordTransformations: {
      delete transformation_.record_transformations_;
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}


void DeidentifyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeidentifyConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && transformation_error_handling_ != nullptr) {
    delete transformation_error_handling_;
  }
  transformation_error_handling_ = nullptr;
  clear_transformation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeidentifyConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeidentifyConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoTypeTransformations::_InternalParse;
        object = msg->mutable_info_type_transformations();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordTransformations::_InternalParse;
        object = msg->mutable_record_transformations();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.TransformationErrorHandling transformation_error_handling = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TransformationErrorHandling::_InternalParse;
        object = msg->mutable_transformation_error_handling();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeidentifyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeidentifyConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TransformationErrorHandling transformation_error_handling = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transformation_error_handling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeidentifyConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeidentifyConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeidentifyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeidentifyConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
  if (has_info_type_transformations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info_type_transformations(this), output);
  }

  // .google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
  if (has_record_transformations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::record_transformations(this), output);
  }

  // .google.privacy.dlp.v2.TransformationErrorHandling transformation_error_handling = 3;
  if (this->has_transformation_error_handling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::transformation_error_handling(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeidentifyConfig)
}

::google::protobuf::uint8* DeidentifyConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeidentifyConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
  if (has_info_type_transformations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info_type_transformations(this), target);
  }

  // .google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
  if (has_record_transformations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::record_transformations(this), target);
  }

  // .google.privacy.dlp.v2.TransformationErrorHandling transformation_error_handling = 3;
  if (this->has_transformation_error_handling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::transformation_error_handling(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeidentifyConfig)
  return target;
}

size_t DeidentifyConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeidentifyConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TransformationErrorHandling transformation_error_handling = 3;
  if (this->has_transformation_error_handling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transformation_error_handling_);
  }

  switch (transformation_case()) {
    // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
    case kInfoTypeTransformations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.info_type_transformations_);
      break;
    }
    // .google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
    case kRecordTransformations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.record_transformations_);
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifyConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeidentifyConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentifyConfig* source =
      ::google::protobuf::DynamicCastToGenerated<DeidentifyConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeidentifyConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeidentifyConfig)
    MergeFrom(*source);
  }
}

void DeidentifyConfig::MergeFrom(const DeidentifyConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeidentifyConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transformation_error_handling()) {
    mutable_transformation_error_handling()->::google::privacy::dlp::v2::TransformationErrorHandling::MergeFrom(from.transformation_error_handling());
  }
  switch (from.transformation_case()) {
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case kRecordTransformations: {
      mutable_record_transformations()->::google::privacy::dlp::v2::RecordTransformations::MergeFrom(from.record_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
}

void DeidentifyConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeidentifyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentifyConfig::CopyFrom(const DeidentifyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeidentifyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifyConfig::IsInitialized() const {
  return true;
}

void DeidentifyConfig::Swap(DeidentifyConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentifyConfig::InternalSwap(DeidentifyConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(transformation_error_handling_, other->transformation_error_handling_);
  swap(transformation_, other->transformation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DeidentifyConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationErrorHandling_ThrowError::InitAsDefaultInstance() {
}
class TransformationErrorHandling_ThrowError::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationErrorHandling_ThrowError::TransformationErrorHandling_ThrowError()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
}
TransformationErrorHandling_ThrowError::TransformationErrorHandling_ThrowError(const TransformationErrorHandling_ThrowError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
}

void TransformationErrorHandling_ThrowError::SharedCtor() {
}

TransformationErrorHandling_ThrowError::~TransformationErrorHandling_ThrowError() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  SharedDtor();
}

void TransformationErrorHandling_ThrowError::SharedDtor() {
}

void TransformationErrorHandling_ThrowError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationErrorHandling_ThrowError& TransformationErrorHandling_ThrowError::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationErrorHandling_ThrowError_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TransformationErrorHandling_ThrowError::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationErrorHandling_ThrowError::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationErrorHandling_ThrowError*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationErrorHandling_ThrowError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationErrorHandling_ThrowError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
}

::google::protobuf::uint8* TransformationErrorHandling_ThrowError::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  return target;
}

size_t TransformationErrorHandling_ThrowError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationErrorHandling_ThrowError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationErrorHandling_ThrowError* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationErrorHandling_ThrowError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
    MergeFrom(*source);
  }
}

void TransformationErrorHandling_ThrowError::MergeFrom(const TransformationErrorHandling_ThrowError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransformationErrorHandling_ThrowError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationErrorHandling_ThrowError::CopyFrom(const TransformationErrorHandling_ThrowError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TransformationErrorHandling.ThrowError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationErrorHandling_ThrowError::IsInitialized() const {
  return true;
}

void TransformationErrorHandling_ThrowError::Swap(TransformationErrorHandling_ThrowError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationErrorHandling_ThrowError::InternalSwap(TransformationErrorHandling_ThrowError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransformationErrorHandling_ThrowError::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationErrorHandling_LeaveUntransformed::InitAsDefaultInstance() {
}
class TransformationErrorHandling_LeaveUntransformed::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationErrorHandling_LeaveUntransformed::TransformationErrorHandling_LeaveUntransformed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
}
TransformationErrorHandling_LeaveUntransformed::TransformationErrorHandling_LeaveUntransformed(const TransformationErrorHandling_LeaveUntransformed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
}

void TransformationErrorHandling_LeaveUntransformed::SharedCtor() {
}

TransformationErrorHandling_LeaveUntransformed::~TransformationErrorHandling_LeaveUntransformed() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  SharedDtor();
}

void TransformationErrorHandling_LeaveUntransformed::SharedDtor() {
}

void TransformationErrorHandling_LeaveUntransformed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationErrorHandling_LeaveUntransformed& TransformationErrorHandling_LeaveUntransformed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationErrorHandling_LeaveUntransformed_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TransformationErrorHandling_LeaveUntransformed::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationErrorHandling_LeaveUntransformed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationErrorHandling_LeaveUntransformed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationErrorHandling_LeaveUntransformed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationErrorHandling_LeaveUntransformed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
}

::google::protobuf::uint8* TransformationErrorHandling_LeaveUntransformed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  return target;
}

size_t TransformationErrorHandling_LeaveUntransformed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationErrorHandling_LeaveUntransformed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationErrorHandling_LeaveUntransformed* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationErrorHandling_LeaveUntransformed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
    MergeFrom(*source);
  }
}

void TransformationErrorHandling_LeaveUntransformed::MergeFrom(const TransformationErrorHandling_LeaveUntransformed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TransformationErrorHandling_LeaveUntransformed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationErrorHandling_LeaveUntransformed::CopyFrom(const TransformationErrorHandling_LeaveUntransformed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationErrorHandling_LeaveUntransformed::IsInitialized() const {
  return true;
}

void TransformationErrorHandling_LeaveUntransformed::Swap(TransformationErrorHandling_LeaveUntransformed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationErrorHandling_LeaveUntransformed::InternalSwap(TransformationErrorHandling_LeaveUntransformed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransformationErrorHandling_LeaveUntransformed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationErrorHandling::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_TransformationErrorHandling_default_instance_.throw_error_ = const_cast< ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError*>(
      ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError::internal_default_instance());
  ::google::privacy::dlp::v2::_TransformationErrorHandling_default_instance_.leave_untransformed_ = const_cast< ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed*>(
      ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed::internal_default_instance());
}
class TransformationErrorHandling::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError& throw_error(const TransformationErrorHandling* msg);
  static const ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed& leave_untransformed(const TransformationErrorHandling* msg);
};

const ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError&
TransformationErrorHandling::HasBitSetters::throw_error(const TransformationErrorHandling* msg) {
  return *msg->mode_.throw_error_;
}
const ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed&
TransformationErrorHandling::HasBitSetters::leave_untransformed(const TransformationErrorHandling* msg) {
  return *msg->mode_.leave_untransformed_;
}
void TransformationErrorHandling::set_allocated_throw_error(::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError* throw_error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_mode();
  if (throw_error) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      throw_error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, throw_error, submessage_arena);
    }
    set_has_throw_error();
    mode_.throw_error_ = throw_error;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransformationErrorHandling.throw_error)
}
void TransformationErrorHandling::set_allocated_leave_untransformed(::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed* leave_untransformed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_mode();
  if (leave_untransformed) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leave_untransformed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leave_untransformed, submessage_arena);
    }
    set_has_leave_untransformed();
    mode_.leave_untransformed_ = leave_untransformed;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.TransformationErrorHandling.leave_untransformed)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationErrorHandling::kThrowErrorFieldNumber;
const int TransformationErrorHandling::kLeaveUntransformedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationErrorHandling::TransformationErrorHandling()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TransformationErrorHandling)
}
TransformationErrorHandling::TransformationErrorHandling(const TransformationErrorHandling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_mode();
  switch (from.mode_case()) {
    case kThrowError: {
      mutable_throw_error()->::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError::MergeFrom(from.throw_error());
      break;
    }
    case kLeaveUntransformed: {
      mutable_leave_untransformed()->::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed::MergeFrom(from.leave_untransformed());
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TransformationErrorHandling)
}

void TransformationErrorHandling::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_mode();
}

TransformationErrorHandling::~TransformationErrorHandling() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TransformationErrorHandling)
  SharedDtor();
}

void TransformationErrorHandling::SharedDtor() {
  if (has_mode()) {
    clear_mode();
  }
}

void TransformationErrorHandling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationErrorHandling& TransformationErrorHandling::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationErrorHandling_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TransformationErrorHandling::clear_mode() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.TransformationErrorHandling)
  switch (mode_case()) {
    case kThrowError: {
      delete mode_.throw_error_;
      break;
    }
    case kLeaveUntransformed: {
      delete mode_.leave_untransformed_;
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODE_NOT_SET;
}


void TransformationErrorHandling::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TransformationErrorHandling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mode();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationErrorHandling::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationErrorHandling*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError::_InternalParse;
        object = msg->mutable_throw_error();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed::_InternalParse;
        object = msg->mutable_leave_untransformed();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationErrorHandling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TransformationErrorHandling)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_throw_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leave_untransformed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TransformationErrorHandling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TransformationErrorHandling)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationErrorHandling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TransformationErrorHandling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;
  if (has_throw_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::throw_error(this), output);
  }

  // .google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;
  if (has_leave_untransformed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::leave_untransformed(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TransformationErrorHandling)
}

::google::protobuf::uint8* TransformationErrorHandling::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TransformationErrorHandling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;
  if (has_throw_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::throw_error(this), target);
  }

  // .google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;
  if (has_leave_untransformed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::leave_untransformed(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TransformationErrorHandling)
  return target;
}

size_t TransformationErrorHandling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TransformationErrorHandling)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mode_case()) {
    // .google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;
    case kThrowError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mode_.throw_error_);
      break;
    }
    // .google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;
    case kLeaveUntransformed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mode_.leave_untransformed_);
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationErrorHandling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TransformationErrorHandling)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationErrorHandling* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationErrorHandling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TransformationErrorHandling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TransformationErrorHandling)
    MergeFrom(*source);
  }
}

void TransformationErrorHandling::MergeFrom(const TransformationErrorHandling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TransformationErrorHandling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mode_case()) {
    case kThrowError: {
      mutable_throw_error()->::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError::MergeFrom(from.throw_error());
      break;
    }
    case kLeaveUntransformed: {
      mutable_leave_untransformed()->::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed::MergeFrom(from.leave_untransformed());
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
}

void TransformationErrorHandling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TransformationErrorHandling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationErrorHandling::CopyFrom(const TransformationErrorHandling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TransformationErrorHandling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationErrorHandling::IsInitialized() const {
  return true;
}

void TransformationErrorHandling::Swap(TransformationErrorHandling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationErrorHandling::InternalSwap(TransformationErrorHandling* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mode_, other->mode_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TransformationErrorHandling::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PrimitiveTransformation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.replace_config_ = const_cast< ::google::privacy::dlp::v2::ReplaceValueConfig*>(
      ::google::privacy::dlp::v2::ReplaceValueConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.redact_config_ = const_cast< ::google::privacy::dlp::v2::RedactConfig*>(
      ::google::privacy::dlp::v2::RedactConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.character_mask_config_ = const_cast< ::google::privacy::dlp::v2::CharacterMaskConfig*>(
      ::google::privacy::dlp::v2::CharacterMaskConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.crypto_replace_ffx_fpe_config_ = const_cast< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig*>(
      ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.fixed_size_bucketing_config_ = const_cast< ::google::privacy::dlp::v2::FixedSizeBucketingConfig*>(
      ::google::privacy::dlp::v2::FixedSizeBucketingConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.bucketing_config_ = const_cast< ::google::privacy::dlp::v2::BucketingConfig*>(
      ::google::privacy::dlp::v2::BucketingConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.replace_with_info_type_config_ = const_cast< ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig*>(
      ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.time_part_config_ = const_cast< ::google::privacy::dlp::v2::TimePartConfig*>(
      ::google::privacy::dlp::v2::TimePartConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.crypto_hash_config_ = const_cast< ::google::privacy::dlp::v2::CryptoHashConfig*>(
      ::google::privacy::dlp::v2::CryptoHashConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.date_shift_config_ = const_cast< ::google::privacy::dlp::v2::DateShiftConfig*>(
      ::google::privacy::dlp::v2::DateShiftConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_PrimitiveTransformation_default_instance_.crypto_deterministic_config_ = const_cast< ::google::privacy::dlp::v2::CryptoDeterministicConfig*>(
      ::google::privacy::dlp::v2::CryptoDeterministicConfig::internal_default_instance());
}
class PrimitiveTransformation::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::ReplaceValueConfig& replace_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::RedactConfig& redact_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::CharacterMaskConfig& character_mask_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig& crypto_replace_ffx_fpe_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::FixedSizeBucketingConfig& fixed_size_bucketing_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::BucketingConfig& bucketing_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig& replace_with_info_type_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::TimePartConfig& time_part_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::CryptoHashConfig& crypto_hash_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::DateShiftConfig& date_shift_config(const PrimitiveTransformation* msg);
  static const ::google::privacy::dlp::v2::CryptoDeterministicConfig& crypto_deterministic_config(const PrimitiveTransformation* msg);
};

const ::google::privacy::dlp::v2::ReplaceValueConfig&
PrimitiveTransformation::HasBitSetters::replace_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.replace_config_;
}
const ::google::privacy::dlp::v2::RedactConfig&
PrimitiveTransformation::HasBitSetters::redact_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.redact_config_;
}
const ::google::privacy::dlp::v2::CharacterMaskConfig&
PrimitiveTransformation::HasBitSetters::character_mask_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.character_mask_config_;
}
const ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig&
PrimitiveTransformation::HasBitSetters::crypto_replace_ffx_fpe_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.crypto_replace_ffx_fpe_config_;
}
const ::google::privacy::dlp::v2::FixedSizeBucketingConfig&
PrimitiveTransformation::HasBitSetters::fixed_size_bucketing_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.fixed_size_bucketing_config_;
}
const ::google::privacy::dlp::v2::BucketingConfig&
PrimitiveTransformation::HasBitSetters::bucketing_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.bucketing_config_;
}
const ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig&
PrimitiveTransformation::HasBitSetters::replace_with_info_type_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.replace_with_info_type_config_;
}
const ::google::privacy::dlp::v2::TimePartConfig&
PrimitiveTransformation::HasBitSetters::time_part_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.time_part_config_;
}
const ::google::privacy::dlp::v2::CryptoHashConfig&
PrimitiveTransformation::HasBitSetters::crypto_hash_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.crypto_hash_config_;
}
const ::google::privacy::dlp::v2::DateShiftConfig&
PrimitiveTransformation::HasBitSetters::date_shift_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.date_shift_config_;
}
const ::google::privacy::dlp::v2::CryptoDeterministicConfig&
PrimitiveTransformation::HasBitSetters::crypto_deterministic_config(const PrimitiveTransformation* msg) {
  return *msg->transformation_.crypto_deterministic_config_;
}
void PrimitiveTransformation::set_allocated_replace_config(::google::privacy::dlp::v2::ReplaceValueConfig* replace_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (replace_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      replace_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replace_config, submessage_arena);
    }
    set_has_replace_config();
    transformation_.replace_config_ = replace_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.replace_config)
}
void PrimitiveTransformation::set_allocated_redact_config(::google::privacy::dlp::v2::RedactConfig* redact_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (redact_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      redact_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redact_config, submessage_arena);
    }
    set_has_redact_config();
    transformation_.redact_config_ = redact_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.redact_config)
}
void PrimitiveTransformation::set_allocated_character_mask_config(::google::privacy::dlp::v2::CharacterMaskConfig* character_mask_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (character_mask_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      character_mask_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, character_mask_config, submessage_arena);
    }
    set_has_character_mask_config();
    transformation_.character_mask_config_ = character_mask_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.character_mask_config)
}
void PrimitiveTransformation::set_allocated_crypto_replace_ffx_fpe_config(::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* crypto_replace_ffx_fpe_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (crypto_replace_ffx_fpe_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypto_replace_ffx_fpe_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_replace_ffx_fpe_config, submessage_arena);
    }
    set_has_crypto_replace_ffx_fpe_config();
    transformation_.crypto_replace_ffx_fpe_config_ = crypto_replace_ffx_fpe_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.crypto_replace_ffx_fpe_config)
}
void PrimitiveTransformation::set_allocated_fixed_size_bucketing_config(::google::privacy::dlp::v2::FixedSizeBucketingConfig* fixed_size_bucketing_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (fixed_size_bucketing_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_size_bucketing_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_size_bucketing_config, submessage_arena);
    }
    set_has_fixed_size_bucketing_config();
    transformation_.fixed_size_bucketing_config_ = fixed_size_bucketing_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.fixed_size_bucketing_config)
}
void PrimitiveTransformation::set_allocated_bucketing_config(::google::privacy::dlp::v2::BucketingConfig* bucketing_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (bucketing_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bucketing_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bucketing_config, submessage_arena);
    }
    set_has_bucketing_config();
    transformation_.bucketing_config_ = bucketing_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.bucketing_config)
}
void PrimitiveTransformation::set_allocated_replace_with_info_type_config(::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* replace_with_info_type_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (replace_with_info_type_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      replace_with_info_type_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replace_with_info_type_config, submessage_arena);
    }
    set_has_replace_with_info_type_config();
    transformation_.replace_with_info_type_config_ = replace_with_info_type_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.replace_with_info_type_config)
}
void PrimitiveTransformation::set_allocated_time_part_config(::google::privacy::dlp::v2::TimePartConfig* time_part_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (time_part_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_part_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_part_config, submessage_arena);
    }
    set_has_time_part_config();
    transformation_.time_part_config_ = time_part_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.time_part_config)
}
void PrimitiveTransformation::set_allocated_crypto_hash_config(::google::privacy::dlp::v2::CryptoHashConfig* crypto_hash_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (crypto_hash_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypto_hash_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_hash_config, submessage_arena);
    }
    set_has_crypto_hash_config();
    transformation_.crypto_hash_config_ = crypto_hash_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.crypto_hash_config)
}
void PrimitiveTransformation::set_allocated_date_shift_config(::google::privacy::dlp::v2::DateShiftConfig* date_shift_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (date_shift_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date_shift_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date_shift_config, submessage_arena);
    }
    set_has_date_shift_config();
    transformation_.date_shift_config_ = date_shift_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.date_shift_config)
}
void PrimitiveTransformation::set_allocated_crypto_deterministic_config(::google::privacy::dlp::v2::CryptoDeterministicConfig* crypto_deterministic_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (crypto_deterministic_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypto_deterministic_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_deterministic_config, submessage_arena);
    }
    set_has_crypto_deterministic_config();
    transformation_.crypto_deterministic_config_ = crypto_deterministic_config;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.PrimitiveTransformation.crypto_deterministic_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrimitiveTransformation::kReplaceConfigFieldNumber;
const int PrimitiveTransformation::kRedactConfigFieldNumber;
const int PrimitiveTransformation::kCharacterMaskConfigFieldNumber;
const int PrimitiveTransformation::kCryptoReplaceFfxFpeConfigFieldNumber;
const int PrimitiveTransformation::kFixedSizeBucketingConfigFieldNumber;
const int PrimitiveTransformation::kBucketingConfigFieldNumber;
const int PrimitiveTransformation::kReplaceWithInfoTypeConfigFieldNumber;
const int PrimitiveTransformation::kTimePartConfigFieldNumber;
const int PrimitiveTransformation::kCryptoHashConfigFieldNumber;
const int PrimitiveTransformation::kDateShiftConfigFieldNumber;
const int PrimitiveTransformation::kCryptoDeterministicConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrimitiveTransformation::PrimitiveTransformation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PrimitiveTransformation)
}
PrimitiveTransformation::PrimitiveTransformation(const PrimitiveTransformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_transformation();
  switch (from.transformation_case()) {
    case kReplaceConfig: {
      mutable_replace_config()->::google::privacy::dlp::v2::ReplaceValueConfig::MergeFrom(from.replace_config());
      break;
    }
    case kRedactConfig: {
      mutable_redact_config()->::google::privacy::dlp::v2::RedactConfig::MergeFrom(from.redact_config());
      break;
    }
    case kCharacterMaskConfig: {
      mutable_character_mask_config()->::google::privacy::dlp::v2::CharacterMaskConfig::MergeFrom(from.character_mask_config());
      break;
    }
    case kCryptoReplaceFfxFpeConfig: {
      mutable_crypto_replace_ffx_fpe_config()->::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig::MergeFrom(from.crypto_replace_ffx_fpe_config());
      break;
    }
    case kFixedSizeBucketingConfig: {
      mutable_fixed_size_bucketing_config()->::google::privacy::dlp::v2::FixedSizeBucketingConfig::MergeFrom(from.fixed_size_bucketing_config());
      break;
    }
    case kBucketingConfig: {
      mutable_bucketing_config()->::google::privacy::dlp::v2::BucketingConfig::MergeFrom(from.bucketing_config());
      break;
    }
    case kReplaceWithInfoTypeConfig: {
      mutable_replace_with_info_type_config()->::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig::MergeFrom(from.replace_with_info_type_config());
      break;
    }
    case kTimePartConfig: {
      mutable_time_part_config()->::google::privacy::dlp::v2::TimePartConfig::MergeFrom(from.time_part_config());
      break;
    }
    case kCryptoHashConfig: {
      mutable_crypto_hash_config()->::google::privacy::dlp::v2::CryptoHashConfig::MergeFrom(from.crypto_hash_config());
      break;
    }
    case kDateShiftConfig: {
      mutable_date_shift_config()->::google::privacy::dlp::v2::DateShiftConfig::MergeFrom(from.date_shift_config());
      break;
    }
    case kCryptoDeterministicConfig: {
      mutable_crypto_deterministic_config()->::google::privacy::dlp::v2::CryptoDeterministicConfig::MergeFrom(from.crypto_deterministic_config());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PrimitiveTransformation)
}

void PrimitiveTransformation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_transformation();
}

PrimitiveTransformation::~PrimitiveTransformation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PrimitiveTransformation)
  SharedDtor();
}

void PrimitiveTransformation::SharedDtor() {
  if (has_transformation()) {
    clear_transformation();
  }
}

void PrimitiveTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrimitiveTransformation& PrimitiveTransformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PrimitiveTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void PrimitiveTransformation::clear_transformation() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.PrimitiveTransformation)
  switch (transformation_case()) {
    case kReplaceConfig: {
      delete transformation_.replace_config_;
      break;
    }
    case kRedactConfig: {
      delete transformation_.redact_config_;
      break;
    }
    case kCharacterMaskConfig: {
      delete transformation_.character_mask_config_;
      break;
    }
    case kCryptoReplaceFfxFpeConfig: {
      delete transformation_.crypto_replace_ffx_fpe_config_;
      break;
    }
    case kFixedSizeBucketingConfig: {
      delete transformation_.fixed_size_bucketing_config_;
      break;
    }
    case kBucketingConfig: {
      delete transformation_.bucketing_config_;
      break;
    }
    case kReplaceWithInfoTypeConfig: {
      delete transformation_.replace_with_info_type_config_;
      break;
    }
    case kTimePartConfig: {
      delete transformation_.time_part_config_;
      break;
    }
    case kCryptoHashConfig: {
      delete transformation_.crypto_hash_config_;
      break;
    }
    case kDateShiftConfig: {
      delete transformation_.date_shift_config_;
      break;
    }
    case kCryptoDeterministicConfig: {
      delete transformation_.crypto_deterministic_config_;
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}


void PrimitiveTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PrimitiveTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_transformation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrimitiveTransformation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PrimitiveTransformation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ReplaceValueConfig::_InternalParse;
        object = msg->mutable_replace_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.RedactConfig redact_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RedactConfig::_InternalParse;
        object = msg->mutable_redact_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CharacterMaskConfig::_InternalParse;
        object = msg->mutable_character_mask_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig::_InternalParse;
        object = msg->mutable_crypto_replace_ffx_fpe_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FixedSizeBucketingConfig::_InternalParse;
        object = msg->mutable_fixed_size_bucketing_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BucketingConfig::_InternalParse;
        object = msg->mutable_bucketing_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig::_InternalParse;
        object = msg->mutable_replace_with_info_type_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TimePartConfig::_InternalParse;
        object = msg->mutable_time_part_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CryptoHashConfig::_InternalParse;
        object = msg->mutable_crypto_hash_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DateShiftConfig::_InternalParse;
        object = msg->mutable_date_shift_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CryptoDeterministicConfig crypto_deterministic_config = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CryptoDeterministicConfig::_InternalParse;
        object = msg->mutable_crypto_deterministic_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrimitiveTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PrimitiveTransformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RedactConfig redact_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_redact_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_character_mask_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_replace_ffx_fpe_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_size_bucketing_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bucketing_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replace_with_info_type_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_part_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_hash_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date_shift_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CryptoDeterministicConfig crypto_deterministic_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_deterministic_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PrimitiveTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PrimitiveTransformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrimitiveTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PrimitiveTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
  if (has_replace_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::replace_config(this), output);
  }

  // .google.privacy.dlp.v2.RedactConfig redact_config = 2;
  if (has_redact_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::redact_config(this), output);
  }

  // .google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
  if (has_character_mask_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::character_mask_config(this), output);
  }

  // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
  if (has_crypto_replace_ffx_fpe_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::crypto_replace_ffx_fpe_config(this), output);
  }

  // .google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
  if (has_fixed_size_bucketing_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::fixed_size_bucketing_config(this), output);
  }

  // .google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
  if (has_bucketing_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::bucketing_config(this), output);
  }

  // .google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
  if (has_replace_with_info_type_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::replace_with_info_type_config(this), output);
  }

  // .google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
  if (has_time_part_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::time_part_config(this), output);
  }

  // .google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
  if (has_crypto_hash_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::crypto_hash_config(this), output);
  }

  // .google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
  if (has_date_shift_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::date_shift_config(this), output);
  }

  // .google.privacy.dlp.v2.CryptoDeterministicConfig crypto_deterministic_config = 12;
  if (has_crypto_deterministic_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::crypto_deterministic_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PrimitiveTransformation)
}

::google::protobuf::uint8* PrimitiveTransformation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PrimitiveTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
  if (has_replace_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::replace_config(this), target);
  }

  // .google.privacy.dlp.v2.RedactConfig redact_config = 2;
  if (has_redact_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::redact_config(this), target);
  }

  // .google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
  if (has_character_mask_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::character_mask_config(this), target);
  }

  // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
  if (has_crypto_replace_ffx_fpe_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::crypto_replace_ffx_fpe_config(this), target);
  }

  // .google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
  if (has_fixed_size_bucketing_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::fixed_size_bucketing_config(this), target);
  }

  // .google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
  if (has_bucketing_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::bucketing_config(this), target);
  }

  // .google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
  if (has_replace_with_info_type_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::replace_with_info_type_config(this), target);
  }

  // .google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
  if (has_time_part_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::time_part_config(this), target);
  }

  // .google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
  if (has_crypto_hash_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::crypto_hash_config(this), target);
  }

  // .google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
  if (has_date_shift_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::date_shift_config(this), target);
  }

  // .google.privacy.dlp.v2.CryptoDeterministicConfig crypto_deterministic_config = 12;
  if (has_crypto_deterministic_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::crypto_deterministic_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PrimitiveTransformation)
  return target;
}

size_t PrimitiveTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PrimitiveTransformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (transformation_case()) {
    // .google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
    case kReplaceConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.replace_config_);
      break;
    }
    // .google.privacy.dlp.v2.RedactConfig redact_config = 2;
    case kRedactConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.redact_config_);
      break;
    }
    // .google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
    case kCharacterMaskConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.character_mask_config_);
      break;
    }
    // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
    case kCryptoReplaceFfxFpeConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.crypto_replace_ffx_fpe_config_);
      break;
    }
    // .google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
    case kFixedSizeBucketingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.fixed_size_bucketing_config_);
      break;
    }
    // .google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
    case kBucketingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.bucketing_config_);
      break;
    }
    // .google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
    case kReplaceWithInfoTypeConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.replace_with_info_type_config_);
      break;
    }
    // .google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
    case kTimePartConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.time_part_config_);
      break;
    }
    // .google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
    case kCryptoHashConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.crypto_hash_config_);
      break;
    }
    // .google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
    case kDateShiftConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.date_shift_config_);
      break;
    }
    // .google.privacy.dlp.v2.CryptoDeterministicConfig crypto_deterministic_config = 12;
    case kCryptoDeterministicConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.crypto_deterministic_config_);
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimitiveTransformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PrimitiveTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const PrimitiveTransformation* source =
      ::google::protobuf::DynamicCastToGenerated<PrimitiveTransformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PrimitiveTransformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PrimitiveTransformation)
    MergeFrom(*source);
  }
}

void PrimitiveTransformation::MergeFrom(const PrimitiveTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PrimitiveTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.transformation_case()) {
    case kReplaceConfig: {
      mutable_replace_config()->::google::privacy::dlp::v2::ReplaceValueConfig::MergeFrom(from.replace_config());
      break;
    }
    case kRedactConfig: {
      mutable_redact_config()->::google::privacy::dlp::v2::RedactConfig::MergeFrom(from.redact_config());
      break;
    }
    case kCharacterMaskConfig: {
      mutable_character_mask_config()->::google::privacy::dlp::v2::CharacterMaskConfig::MergeFrom(from.character_mask_config());
      break;
    }
    case kCryptoReplaceFfxFpeConfig: {
      mutable_crypto_replace_ffx_fpe_config()->::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig::MergeFrom(from.crypto_replace_ffx_fpe_config());
      break;
    }
    case kFixedSizeBucketingConfig: {
      mutable_fixed_size_bucketing_config()->::google::privacy::dlp::v2::FixedSizeBucketingConfig::MergeFrom(from.fixed_size_bucketing_config());
      break;
    }
    case kBucketingConfig: {
      mutable_bucketing_config()->::google::privacy::dlp::v2::BucketingConfig::MergeFrom(from.bucketing_config());
      break;
    }
    case kReplaceWithInfoTypeConfig: {
      mutable_replace_with_info_type_config()->::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig::MergeFrom(from.replace_with_info_type_config());
      break;
    }
    case kTimePartConfig: {
      mutable_time_part_config()->::google::privacy::dlp::v2::TimePartConfig::MergeFrom(from.time_part_config());
      break;
    }
    case kCryptoHashConfig: {
      mutable_crypto_hash_config()->::google::privacy::dlp::v2::CryptoHashConfig::MergeFrom(from.crypto_hash_config());
      break;
    }
    case kDateShiftConfig: {
      mutable_date_shift_config()->::google::privacy::dlp::v2::DateShiftConfig::MergeFrom(from.date_shift_config());
      break;
    }
    case kCryptoDeterministicConfig: {
      mutable_crypto_deterministic_config()->::google::privacy::dlp::v2::CryptoDeterministicConfig::MergeFrom(from.crypto_deterministic_config());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
}

void PrimitiveTransformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PrimitiveTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrimitiveTransformation::CopyFrom(const PrimitiveTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PrimitiveTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveTransformation::IsInitialized() const {
  return true;
}

void PrimitiveTransformation::Swap(PrimitiveTransformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrimitiveTransformation::InternalSwap(PrimitiveTransformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(transformation_, other->transformation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata PrimitiveTransformation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TimePartConfig::InitAsDefaultInstance() {
}
class TimePartConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimePartConfig::kPartToExtractFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimePartConfig::TimePartConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TimePartConfig)
}
TimePartConfig::TimePartConfig(const TimePartConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  part_to_extract_ = from.part_to_extract_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TimePartConfig)
}

void TimePartConfig::SharedCtor() {
  part_to_extract_ = 0;
}

TimePartConfig::~TimePartConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TimePartConfig)
  SharedDtor();
}

void TimePartConfig::SharedDtor() {
}

void TimePartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimePartConfig& TimePartConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimePartConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TimePartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TimePartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  part_to_extract_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimePartConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimePartConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_part_to_extract(static_cast<::google::privacy::dlp::v2::TimePartConfig_TimePart>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimePartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TimePartConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_part_to_extract(static_cast< ::google::privacy::dlp::v2::TimePartConfig_TimePart >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TimePartConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TimePartConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimePartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TimePartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
  if (this->part_to_extract() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->part_to_extract(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TimePartConfig)
}

::google::protobuf::uint8* TimePartConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TimePartConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
  if (this->part_to_extract() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->part_to_extract(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TimePartConfig)
  return target;
}

size_t TimePartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TimePartConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
  if (this->part_to_extract() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->part_to_extract());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimePartConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TimePartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimePartConfig* source =
      ::google::protobuf::DynamicCastToGenerated<TimePartConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TimePartConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TimePartConfig)
    MergeFrom(*source);
  }
}

void TimePartConfig::MergeFrom(const TimePartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TimePartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.part_to_extract() != 0) {
    set_part_to_extract(from.part_to_extract());
  }
}

void TimePartConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TimePartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimePartConfig::CopyFrom(const TimePartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TimePartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimePartConfig::IsInitialized() const {
  return true;
}

void TimePartConfig::Swap(TimePartConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimePartConfig::InternalSwap(TimePartConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(part_to_extract_, other->part_to_extract_);
}

::google::protobuf::Metadata TimePartConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CryptoHashConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CryptoHashConfig_default_instance_._instance.get_mutable()->crypto_key_ = const_cast< ::google::privacy::dlp::v2::CryptoKey*>(
      ::google::privacy::dlp::v2::CryptoKey::internal_default_instance());
}
class CryptoHashConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CryptoKey& crypto_key(const CryptoHashConfig* msg);
};

const ::google::privacy::dlp::v2::CryptoKey&
CryptoHashConfig::HasBitSetters::crypto_key(const CryptoHashConfig* msg) {
  return *msg->crypto_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoHashConfig::kCryptoKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoHashConfig::CryptoHashConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CryptoHashConfig)
}
CryptoHashConfig::CryptoHashConfig(const CryptoHashConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypto_key()) {
    crypto_key_ = new ::google::privacy::dlp::v2::CryptoKey(*from.crypto_key_);
  } else {
    crypto_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CryptoHashConfig)
}

void CryptoHashConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  crypto_key_ = nullptr;
}

CryptoHashConfig::~CryptoHashConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CryptoHashConfig)
  SharedDtor();
}

void CryptoHashConfig::SharedDtor() {
  if (this != internal_default_instance()) delete crypto_key_;
}

void CryptoHashConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CryptoHashConfig& CryptoHashConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CryptoHashConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CryptoHashConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CryptoHashConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && crypto_key_ != nullptr) {
    delete crypto_key_;
  }
  crypto_key_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CryptoHashConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CryptoHashConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CryptoKey::_InternalParse;
        object = msg->mutable_crypto_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CryptoHashConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CryptoHashConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CryptoHashConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CryptoHashConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CryptoHashConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CryptoHashConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::crypto_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CryptoHashConfig)
}

::google::protobuf::uint8* CryptoHashConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CryptoHashConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::crypto_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CryptoHashConfig)
  return target;
}

size_t CryptoHashConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CryptoHashConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *crypto_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoHashConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CryptoHashConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoHashConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CryptoHashConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CryptoHashConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CryptoHashConfig)
    MergeFrom(*source);
  }
}

void CryptoHashConfig::MergeFrom(const CryptoHashConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CryptoHashConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_crypto_key()) {
    mutable_crypto_key()->::google::privacy::dlp::v2::CryptoKey::MergeFrom(from.crypto_key());
  }
}

void CryptoHashConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CryptoHashConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoHashConfig::CopyFrom(const CryptoHashConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CryptoHashConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoHashConfig::IsInitialized() const {
  return true;
}

void CryptoHashConfig::Swap(CryptoHashConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoHashConfig::InternalSwap(CryptoHashConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(crypto_key_, other->crypto_key_);
}

::google::protobuf::Metadata CryptoHashConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CryptoDeterministicConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CryptoDeterministicConfig_default_instance_._instance.get_mutable()->crypto_key_ = const_cast< ::google::privacy::dlp::v2::CryptoKey*>(
      ::google::privacy::dlp::v2::CryptoKey::internal_default_instance());
  ::google::privacy::dlp::v2::_CryptoDeterministicConfig_default_instance_._instance.get_mutable()->surrogate_info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2::_CryptoDeterministicConfig_default_instance_._instance.get_mutable()->context_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class CryptoDeterministicConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CryptoKey& crypto_key(const CryptoDeterministicConfig* msg);
  static const ::google::privacy::dlp::v2::InfoType& surrogate_info_type(const CryptoDeterministicConfig* msg);
  static const ::google::privacy::dlp::v2::FieldId& context(const CryptoDeterministicConfig* msg);
};

const ::google::privacy::dlp::v2::CryptoKey&
CryptoDeterministicConfig::HasBitSetters::crypto_key(const CryptoDeterministicConfig* msg) {
  return *msg->crypto_key_;
}
const ::google::privacy::dlp::v2::InfoType&
CryptoDeterministicConfig::HasBitSetters::surrogate_info_type(const CryptoDeterministicConfig* msg) {
  return *msg->surrogate_info_type_;
}
const ::google::privacy::dlp::v2::FieldId&
CryptoDeterministicConfig::HasBitSetters::context(const CryptoDeterministicConfig* msg) {
  return *msg->context_;
}
void CryptoDeterministicConfig::clear_surrogate_info_type() {
  if (GetArenaNoVirtual() == nullptr && surrogate_info_type_ != nullptr) {
    delete surrogate_info_type_;
  }
  surrogate_info_type_ = nullptr;
}
void CryptoDeterministicConfig::clear_context() {
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoDeterministicConfig::kCryptoKeyFieldNumber;
const int CryptoDeterministicConfig::kSurrogateInfoTypeFieldNumber;
const int CryptoDeterministicConfig::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoDeterministicConfig::CryptoDeterministicConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CryptoDeterministicConfig)
}
CryptoDeterministicConfig::CryptoDeterministicConfig(const CryptoDeterministicConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypto_key()) {
    crypto_key_ = new ::google::privacy::dlp::v2::CryptoKey(*from.crypto_key_);
  } else {
    crypto_key_ = nullptr;
  }
  if (from.has_surrogate_info_type()) {
    surrogate_info_type_ = new ::google::privacy::dlp::v2::InfoType(*from.surrogate_info_type_);
  } else {
    surrogate_info_type_ = nullptr;
  }
  if (from.has_context()) {
    context_ = new ::google::privacy::dlp::v2::FieldId(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CryptoDeterministicConfig)
}

void CryptoDeterministicConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&crypto_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_) -
      reinterpret_cast<char*>(&crypto_key_)) + sizeof(context_));
}

CryptoDeterministicConfig::~CryptoDeterministicConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CryptoDeterministicConfig)
  SharedDtor();
}

void CryptoDeterministicConfig::SharedDtor() {
  if (this != internal_default_instance()) delete crypto_key_;
  if (this != internal_default_instance()) delete surrogate_info_type_;
  if (this != internal_default_instance()) delete context_;
}

void CryptoDeterministicConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CryptoDeterministicConfig& CryptoDeterministicConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CryptoDeterministicConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CryptoDeterministicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && crypto_key_ != nullptr) {
    delete crypto_key_;
  }
  crypto_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && surrogate_info_type_ != nullptr) {
    delete surrogate_info_type_;
  }
  surrogate_info_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CryptoDeterministicConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CryptoDeterministicConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CryptoKey::_InternalParse;
        object = msg->mutable_crypto_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InfoType surrogate_info_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_surrogate_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.FieldId context = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_context();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CryptoDeterministicConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InfoType surrogate_info_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surrogate_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CryptoDeterministicConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CryptoDeterministicConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CryptoDeterministicConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::crypto_key(this), output);
  }

  // .google.privacy.dlp.v2.InfoType surrogate_info_type = 2;
  if (this->has_surrogate_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::surrogate_info_type(this), output);
  }

  // .google.privacy.dlp.v2.FieldId context = 3;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::context(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CryptoDeterministicConfig)
}

::google::protobuf::uint8* CryptoDeterministicConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::crypto_key(this), target);
  }

  // .google.privacy.dlp.v2.InfoType surrogate_info_type = 2;
  if (this->has_surrogate_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::surrogate_info_type(this), target);
  }

  // .google.privacy.dlp.v2.FieldId context = 3;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::context(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CryptoDeterministicConfig)
  return target;
}

size_t CryptoDeterministicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1;
  if (this->has_crypto_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *crypto_key_);
  }

  // .google.privacy.dlp.v2.InfoType surrogate_info_type = 2;
  if (this->has_surrogate_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *surrogate_info_type_);
  }

  // .google.privacy.dlp.v2.FieldId context = 3;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *context_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoDeterministicConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoDeterministicConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CryptoDeterministicConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CryptoDeterministicConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CryptoDeterministicConfig)
    MergeFrom(*source);
  }
}

void CryptoDeterministicConfig::MergeFrom(const CryptoDeterministicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_crypto_key()) {
    mutable_crypto_key()->::google::privacy::dlp::v2::CryptoKey::MergeFrom(from.crypto_key());
  }
  if (from.has_surrogate_info_type()) {
    mutable_surrogate_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.surrogate_info_type());
  }
  if (from.has_context()) {
    mutable_context()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.context());
  }
}

void CryptoDeterministicConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoDeterministicConfig::CopyFrom(const CryptoDeterministicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CryptoDeterministicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoDeterministicConfig::IsInitialized() const {
  return true;
}

void CryptoDeterministicConfig::Swap(CryptoDeterministicConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoDeterministicConfig::InternalSwap(CryptoDeterministicConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(crypto_key_, other->crypto_key_);
  swap(surrogate_info_type_, other->surrogate_info_type_);
  swap(context_, other->context_);
}

::google::protobuf::Metadata CryptoDeterministicConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReplaceValueConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_ReplaceValueConfig_default_instance_._instance.get_mutable()->new_value_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
}
class ReplaceValueConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Value& new_value(const ReplaceValueConfig* msg);
};

const ::google::privacy::dlp::v2::Value&
ReplaceValueConfig::HasBitSetters::new_value(const ReplaceValueConfig* msg) {
  return *msg->new_value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplaceValueConfig::kNewValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceValueConfig::ReplaceValueConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ReplaceValueConfig)
}
ReplaceValueConfig::ReplaceValueConfig(const ReplaceValueConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_new_value()) {
    new_value_ = new ::google::privacy::dlp::v2::Value(*from.new_value_);
  } else {
    new_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ReplaceValueConfig)
}

void ReplaceValueConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  new_value_ = nullptr;
}

ReplaceValueConfig::~ReplaceValueConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ReplaceValueConfig)
  SharedDtor();
}

void ReplaceValueConfig::SharedDtor() {
  if (this != internal_default_instance()) delete new_value_;
}

void ReplaceValueConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplaceValueConfig& ReplaceValueConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReplaceValueConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ReplaceValueConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ReplaceValueConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && new_value_ != nullptr) {
    delete new_value_;
  }
  new_value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplaceValueConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReplaceValueConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Value new_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_new_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplaceValueConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ReplaceValueConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Value new_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ReplaceValueConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ReplaceValueConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplaceValueConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ReplaceValueConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value new_value = 1;
  if (this->has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::new_value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ReplaceValueConfig)
}

::google::protobuf::uint8* ReplaceValueConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ReplaceValueConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value new_value = 1;
  if (this->has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::new_value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ReplaceValueConfig)
  return target;
}

size_t ReplaceValueConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ReplaceValueConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value new_value = 1;
  if (this->has_new_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *new_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplaceValueConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ReplaceValueConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceValueConfig* source =
      ::google::protobuf::DynamicCastToGenerated<ReplaceValueConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ReplaceValueConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ReplaceValueConfig)
    MergeFrom(*source);
  }
}

void ReplaceValueConfig::MergeFrom(const ReplaceValueConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ReplaceValueConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_value()) {
    mutable_new_value()->::google::privacy::dlp::v2::Value::MergeFrom(from.new_value());
  }
}

void ReplaceValueConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ReplaceValueConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceValueConfig::CopyFrom(const ReplaceValueConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ReplaceValueConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceValueConfig::IsInitialized() const {
  return true;
}

void ReplaceValueConfig::Swap(ReplaceValueConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceValueConfig::InternalSwap(ReplaceValueConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(new_value_, other->new_value_);
}

::google::protobuf::Metadata ReplaceValueConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReplaceWithInfoTypeConfig::InitAsDefaultInstance() {
}
class ReplaceWithInfoTypeConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplaceWithInfoTypeConfig::ReplaceWithInfoTypeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
}
ReplaceWithInfoTypeConfig::ReplaceWithInfoTypeConfig(const ReplaceWithInfoTypeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
}

void ReplaceWithInfoTypeConfig::SharedCtor() {
}

ReplaceWithInfoTypeConfig::~ReplaceWithInfoTypeConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  SharedDtor();
}

void ReplaceWithInfoTypeConfig::SharedDtor() {
}

void ReplaceWithInfoTypeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplaceWithInfoTypeConfig& ReplaceWithInfoTypeConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReplaceWithInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ReplaceWithInfoTypeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReplaceWithInfoTypeConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReplaceWithInfoTypeConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReplaceWithInfoTypeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReplaceWithInfoTypeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
}

::google::protobuf::uint8* ReplaceWithInfoTypeConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  return target;
}

size_t ReplaceWithInfoTypeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplaceWithInfoTypeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaceWithInfoTypeConfig* source =
      ::google::protobuf::DynamicCastToGenerated<ReplaceWithInfoTypeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
    MergeFrom(*source);
  }
}

void ReplaceWithInfoTypeConfig::MergeFrom(const ReplaceWithInfoTypeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReplaceWithInfoTypeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceWithInfoTypeConfig::CopyFrom(const ReplaceWithInfoTypeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ReplaceWithInfoTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceWithInfoTypeConfig::IsInitialized() const {
  return true;
}

void ReplaceWithInfoTypeConfig::Swap(ReplaceWithInfoTypeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplaceWithInfoTypeConfig::InternalSwap(ReplaceWithInfoTypeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReplaceWithInfoTypeConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RedactConfig::InitAsDefaultInstance() {
}
class RedactConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedactConfig::RedactConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RedactConfig)
}
RedactConfig::RedactConfig(const RedactConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RedactConfig)
}

void RedactConfig::SharedCtor() {
}

RedactConfig::~RedactConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RedactConfig)
  SharedDtor();
}

void RedactConfig::SharedDtor() {
}

void RedactConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RedactConfig& RedactConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RedactConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RedactConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RedactConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RedactConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RedactConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RedactConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RedactConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RedactConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RedactConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RedactConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RedactConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RedactConfig)
}

::google::protobuf::uint8* RedactConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RedactConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RedactConfig)
  return target;
}

size_t RedactConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RedactConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedactConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RedactConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RedactConfig* source =
      ::google::protobuf::DynamicCastToGenerated<RedactConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RedactConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RedactConfig)
    MergeFrom(*source);
  }
}

void RedactConfig::MergeFrom(const RedactConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RedactConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RedactConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RedactConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedactConfig::CopyFrom(const RedactConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RedactConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedactConfig::IsInitialized() const {
  return true;
}

void RedactConfig::Swap(RedactConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedactConfig::InternalSwap(RedactConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RedactConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CharsToIgnore::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CharsToIgnore_default_instance_.characters_to_skip_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2::_CharsToIgnore_default_instance_.common_characters_to_ignore_ = 0;
}
class CharsToIgnore::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharsToIgnore::kCharactersToSkipFieldNumber;
const int CharsToIgnore::kCommonCharactersToIgnoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharsToIgnore::CharsToIgnore()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CharsToIgnore)
}
CharsToIgnore::CharsToIgnore(const CharsToIgnore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_characters();
  switch (from.characters_case()) {
    case kCharactersToSkip: {
      set_characters_to_skip(from.characters_to_skip());
      break;
    }
    case kCommonCharactersToIgnore: {
      set_common_characters_to_ignore(from.common_characters_to_ignore());
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CharsToIgnore)
}

void CharsToIgnore::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_characters();
}

CharsToIgnore::~CharsToIgnore() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CharsToIgnore)
  SharedDtor();
}

void CharsToIgnore::SharedDtor() {
  if (has_characters()) {
    clear_characters();
  }
}

void CharsToIgnore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharsToIgnore& CharsToIgnore::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CharsToIgnore_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CharsToIgnore::clear_characters() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CharsToIgnore)
  switch (characters_case()) {
    case kCharactersToSkip: {
      characters_.characters_to_skip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCommonCharactersToIgnore: {
      // No need to clear
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHARACTERS_NOT_SET;
}


void CharsToIgnore::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CharsToIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_characters();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CharsToIgnore::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CharsToIgnore*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string characters_to_skip = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CharsToIgnore.characters_to_skip");
        object = msg->mutable_characters_to_skip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_common_characters_to_ignore(static_cast<::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CharsToIgnore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CharsToIgnore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string characters_to_skip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_characters_to_skip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->characters_to_skip().data(), static_cast<int>(this->characters_to_skip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CharsToIgnore.characters_to_skip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_common_characters_to_ignore(static_cast< ::google::privacy::dlp::v2::CharsToIgnore_CommonCharsToIgnore >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CharsToIgnore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CharsToIgnore)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CharsToIgnore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CharsToIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string characters_to_skip = 1;
  if (has_characters_to_skip()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->characters_to_skip().data(), static_cast<int>(this->characters_to_skip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CharsToIgnore.characters_to_skip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->characters_to_skip(), output);
  }

  // .google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
  if (has_common_characters_to_ignore()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->common_characters_to_ignore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CharsToIgnore)
}

::google::protobuf::uint8* CharsToIgnore::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CharsToIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string characters_to_skip = 1;
  if (has_characters_to_skip()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->characters_to_skip().data(), static_cast<int>(this->characters_to_skip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CharsToIgnore.characters_to_skip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->characters_to_skip(), target);
  }

  // .google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
  if (has_common_characters_to_ignore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->common_characters_to_ignore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CharsToIgnore)
  return target;
}

size_t CharsToIgnore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CharsToIgnore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (characters_case()) {
    // string characters_to_skip = 1;
    case kCharactersToSkip: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->characters_to_skip());
      break;
    }
    // .google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
    case kCommonCharactersToIgnore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->common_characters_to_ignore());
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharsToIgnore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CharsToIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  const CharsToIgnore* source =
      ::google::protobuf::DynamicCastToGenerated<CharsToIgnore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CharsToIgnore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CharsToIgnore)
    MergeFrom(*source);
  }
}

void CharsToIgnore::MergeFrom(const CharsToIgnore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CharsToIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.characters_case()) {
    case kCharactersToSkip: {
      set_characters_to_skip(from.characters_to_skip());
      break;
    }
    case kCommonCharactersToIgnore: {
      set_common_characters_to_ignore(from.common_characters_to_ignore());
      break;
    }
    case CHARACTERS_NOT_SET: {
      break;
    }
  }
}

void CharsToIgnore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CharsToIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharsToIgnore::CopyFrom(const CharsToIgnore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CharsToIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharsToIgnore::IsInitialized() const {
  return true;
}

void CharsToIgnore::Swap(CharsToIgnore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharsToIgnore::InternalSwap(CharsToIgnore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(characters_, other->characters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CharsToIgnore::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CharacterMaskConfig::InitAsDefaultInstance() {
}
class CharacterMaskConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CharacterMaskConfig::kMaskingCharacterFieldNumber;
const int CharacterMaskConfig::kNumberToMaskFieldNumber;
const int CharacterMaskConfig::kReverseOrderFieldNumber;
const int CharacterMaskConfig::kCharactersToIgnoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CharacterMaskConfig::CharacterMaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CharacterMaskConfig)
}
CharacterMaskConfig::CharacterMaskConfig(const CharacterMaskConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      characters_to_ignore_(from.characters_to_ignore_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  masking_character_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.masking_character().size() > 0) {
    masking_character_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.masking_character_);
  }
  ::memcpy(&number_to_mask_, &from.number_to_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_order_) -
    reinterpret_cast<char*>(&number_to_mask_)) + sizeof(reverse_order_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CharacterMaskConfig)
}

void CharacterMaskConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  masking_character_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_to_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_order_) -
      reinterpret_cast<char*>(&number_to_mask_)) + sizeof(reverse_order_));
}

CharacterMaskConfig::~CharacterMaskConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CharacterMaskConfig)
  SharedDtor();
}

void CharacterMaskConfig::SharedDtor() {
  masking_character_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CharacterMaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterMaskConfig& CharacterMaskConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CharacterMaskConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CharacterMaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CharacterMaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_to_ignore_.Clear();
  masking_character_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&number_to_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_order_) -
      reinterpret_cast<char*>(&number_to_mask_)) + sizeof(reverse_order_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CharacterMaskConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CharacterMaskConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string masking_character = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CharacterMaskConfig.masking_character");
        object = msg->mutable_masking_character();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 number_to_mask = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_number_to_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool reverse_order = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_reverse_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::CharsToIgnore::_InternalParse;
          object = msg->add_characters_to_ignore();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CharacterMaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CharacterMaskConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string masking_character = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_masking_character()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->masking_character().data(), static_cast<int>(this->masking_character().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CharacterMaskConfig.masking_character"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_to_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_to_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse_order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_characters_to_ignore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CharacterMaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CharacterMaskConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CharacterMaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CharacterMaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string masking_character = 1;
  if (this->masking_character().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->masking_character().data(), static_cast<int>(this->masking_character().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CharacterMaskConfig.masking_character");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->masking_character(), output);
  }

  // int32 number_to_mask = 2;
  if (this->number_to_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number_to_mask(), output);
  }

  // bool reverse_order = 3;
  if (this->reverse_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reverse_order(), output);
  }

  // repeated .google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->characters_to_ignore_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->characters_to_ignore(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CharacterMaskConfig)
}

::google::protobuf::uint8* CharacterMaskConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CharacterMaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string masking_character = 1;
  if (this->masking_character().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->masking_character().data(), static_cast<int>(this->masking_character().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CharacterMaskConfig.masking_character");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->masking_character(), target);
  }

  // int32 number_to_mask = 2;
  if (this->number_to_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number_to_mask(), target);
  }

  // bool reverse_order = 3;
  if (this->reverse_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reverse_order(), target);
  }

  // repeated .google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->characters_to_ignore_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->characters_to_ignore(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CharacterMaskConfig)
  return target;
}

size_t CharacterMaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CharacterMaskConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->characters_to_ignore_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->characters_to_ignore(static_cast<int>(i)));
    }
  }

  // string masking_character = 1;
  if (this->masking_character().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->masking_character());
  }

  // int32 number_to_mask = 2;
  if (this->number_to_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_to_mask());
  }

  // bool reverse_order = 3;
  if (this->reverse_order() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterMaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CharacterMaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterMaskConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CharacterMaskConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CharacterMaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CharacterMaskConfig)
    MergeFrom(*source);
  }
}

void CharacterMaskConfig::MergeFrom(const CharacterMaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CharacterMaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_to_ignore_.MergeFrom(from.characters_to_ignore_);
  if (from.masking_character().size() > 0) {

    masking_character_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.masking_character_);
  }
  if (from.number_to_mask() != 0) {
    set_number_to_mask(from.number_to_mask());
  }
  if (from.reverse_order() != 0) {
    set_reverse_order(from.reverse_order());
  }
}

void CharacterMaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CharacterMaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMaskConfig::CopyFrom(const CharacterMaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CharacterMaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMaskConfig::IsInitialized() const {
  return true;
}

void CharacterMaskConfig::Swap(CharacterMaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CharacterMaskConfig::InternalSwap(CharacterMaskConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&characters_to_ignore_)->InternalSwap(CastToBase(&other->characters_to_ignore_));
  masking_character_.Swap(&other->masking_character_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_to_mask_, other->number_to_mask_);
  swap(reverse_order_, other->reverse_order_);
}

::google::protobuf::Metadata CharacterMaskConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FixedSizeBucketingConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_FixedSizeBucketingConfig_default_instance_._instance.get_mutable()->lower_bound_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
  ::google::privacy::dlp::v2::_FixedSizeBucketingConfig_default_instance_._instance.get_mutable()->upper_bound_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
}
class FixedSizeBucketingConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Value& lower_bound(const FixedSizeBucketingConfig* msg);
  static const ::google::privacy::dlp::v2::Value& upper_bound(const FixedSizeBucketingConfig* msg);
};

const ::google::privacy::dlp::v2::Value&
FixedSizeBucketingConfig::HasBitSetters::lower_bound(const FixedSizeBucketingConfig* msg) {
  return *msg->lower_bound_;
}
const ::google::privacy::dlp::v2::Value&
FixedSizeBucketingConfig::HasBitSetters::upper_bound(const FixedSizeBucketingConfig* msg) {
  return *msg->upper_bound_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedSizeBucketingConfig::kLowerBoundFieldNumber;
const int FixedSizeBucketingConfig::kUpperBoundFieldNumber;
const int FixedSizeBucketingConfig::kBucketSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedSizeBucketingConfig::FixedSizeBucketingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.FixedSizeBucketingConfig)
}
FixedSizeBucketingConfig::FixedSizeBucketingConfig(const FixedSizeBucketingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lower_bound()) {
    lower_bound_ = new ::google::privacy::dlp::v2::Value(*from.lower_bound_);
  } else {
    lower_bound_ = nullptr;
  }
  if (from.has_upper_bound()) {
    upper_bound_ = new ::google::privacy::dlp::v2::Value(*from.upper_bound_);
  } else {
    upper_bound_ = nullptr;
  }
  bucket_size_ = from.bucket_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.FixedSizeBucketingConfig)
}

void FixedSizeBucketingConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_size_) -
      reinterpret_cast<char*>(&lower_bound_)) + sizeof(bucket_size_));
}

FixedSizeBucketingConfig::~FixedSizeBucketingConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  SharedDtor();
}

void FixedSizeBucketingConfig::SharedDtor() {
  if (this != internal_default_instance()) delete lower_bound_;
  if (this != internal_default_instance()) delete upper_bound_;
}

void FixedSizeBucketingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedSizeBucketingConfig& FixedSizeBucketingConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FixedSizeBucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void FixedSizeBucketingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && lower_bound_ != nullptr) {
    delete lower_bound_;
  }
  lower_bound_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && upper_bound_ != nullptr) {
    delete upper_bound_;
  }
  upper_bound_ = nullptr;
  bucket_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FixedSizeBucketingConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FixedSizeBucketingConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Value lower_bound = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_lower_bound();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Value upper_bound = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_upper_bound();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double bucket_size = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_bucket_size(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FixedSizeBucketingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Value lower_bound = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Value upper_bound = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bucket_size = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FixedSizeBucketingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value lower_bound = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::lower_bound(this), output);
  }

  // .google.privacy.dlp.v2.Value upper_bound = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::upper_bound(this), output);
  }

  // double bucket_size = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->bucket_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bucket_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.FixedSizeBucketingConfig)
}

::google::protobuf::uint8* FixedSizeBucketingConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value lower_bound = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::lower_bound(this), target);
  }

  // .google.privacy.dlp.v2.Value upper_bound = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::upper_bound(this), target);
  }

  // double bucket_size = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->bucket_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bucket_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  return target;
}

size_t FixedSizeBucketingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value lower_bound = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_lower_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lower_bound_);
  }

  // .google.privacy.dlp.v2.Value upper_bound = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_upper_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upper_bound_);
  }

  // double bucket_size = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->bucket_size() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedSizeBucketingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedSizeBucketingConfig* source =
      ::google::protobuf::DynamicCastToGenerated<FixedSizeBucketingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.FixedSizeBucketingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.FixedSizeBucketingConfig)
    MergeFrom(*source);
  }
}

void FixedSizeBucketingConfig::MergeFrom(const FixedSizeBucketingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lower_bound()) {
    mutable_lower_bound()->::google::privacy::dlp::v2::Value::MergeFrom(from.lower_bound());
  }
  if (from.has_upper_bound()) {
    mutable_upper_bound()->::google::privacy::dlp::v2::Value::MergeFrom(from.upper_bound());
  }
  if (from.bucket_size() != 0) {
    set_bucket_size(from.bucket_size());
  }
}

void FixedSizeBucketingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedSizeBucketingConfig::CopyFrom(const FixedSizeBucketingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.FixedSizeBucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedSizeBucketingConfig::IsInitialized() const {
  return true;
}

void FixedSizeBucketingConfig::Swap(FixedSizeBucketingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedSizeBucketingConfig::InternalSwap(FixedSizeBucketingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lower_bound_, other->lower_bound_);
  swap(upper_bound_, other->upper_bound_);
  swap(bucket_size_, other->bucket_size_);
}

::google::protobuf::Metadata FixedSizeBucketingConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BucketingConfig_Bucket::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_BucketingConfig_Bucket_default_instance_._instance.get_mutable()->min_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
  ::google::privacy::dlp::v2::_BucketingConfig_Bucket_default_instance_._instance.get_mutable()->max_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
  ::google::privacy::dlp::v2::_BucketingConfig_Bucket_default_instance_._instance.get_mutable()->replacement_value_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
}
class BucketingConfig_Bucket::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Value& min(const BucketingConfig_Bucket* msg);
  static const ::google::privacy::dlp::v2::Value& max(const BucketingConfig_Bucket* msg);
  static const ::google::privacy::dlp::v2::Value& replacement_value(const BucketingConfig_Bucket* msg);
};

const ::google::privacy::dlp::v2::Value&
BucketingConfig_Bucket::HasBitSetters::min(const BucketingConfig_Bucket* msg) {
  return *msg->min_;
}
const ::google::privacy::dlp::v2::Value&
BucketingConfig_Bucket::HasBitSetters::max(const BucketingConfig_Bucket* msg) {
  return *msg->max_;
}
const ::google::privacy::dlp::v2::Value&
BucketingConfig_Bucket::HasBitSetters::replacement_value(const BucketingConfig_Bucket* msg) {
  return *msg->replacement_value_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BucketingConfig_Bucket::kMinFieldNumber;
const int BucketingConfig_Bucket::kMaxFieldNumber;
const int BucketingConfig_Bucket::kReplacementValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BucketingConfig_Bucket::BucketingConfig_Bucket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.BucketingConfig.Bucket)
}
BucketingConfig_Bucket::BucketingConfig_Bucket(const BucketingConfig_Bucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_min()) {
    min_ = new ::google::privacy::dlp::v2::Value(*from.min_);
  } else {
    min_ = nullptr;
  }
  if (from.has_max()) {
    max_ = new ::google::privacy::dlp::v2::Value(*from.max_);
  } else {
    max_ = nullptr;
  }
  if (from.has_replacement_value()) {
    replacement_value_ = new ::google::privacy::dlp::v2::Value(*from.replacement_value_);
  } else {
    replacement_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.BucketingConfig.Bucket)
}

void BucketingConfig_Bucket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replacement_value_) -
      reinterpret_cast<char*>(&min_)) + sizeof(replacement_value_));
}

BucketingConfig_Bucket::~BucketingConfig_Bucket() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.BucketingConfig.Bucket)
  SharedDtor();
}

void BucketingConfig_Bucket::SharedDtor() {
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
  if (this != internal_default_instance()) delete replacement_value_;
}

void BucketingConfig_Bucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BucketingConfig_Bucket& BucketingConfig_Bucket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BucketingConfig_Bucket_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void BucketingConfig_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && replacement_value_ != nullptr) {
    delete replacement_value_;
  }
  replacement_value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BucketingConfig_Bucket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BucketingConfig_Bucket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Value min = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_min();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Value max = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_max();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Value replacement_value = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_replacement_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BucketingConfig_Bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Value min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Value max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Value replacement_value = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replacement_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.BucketingConfig.Bucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.BucketingConfig.Bucket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BucketingConfig_Bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value min = 1;
  if (this->has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::min(this), output);
  }

  // .google.privacy.dlp.v2.Value max = 2;
  if (this->has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::max(this), output);
  }

  // .google.privacy.dlp.v2.Value replacement_value = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_replacement_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::replacement_value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.BucketingConfig.Bucket)
}

::google::protobuf::uint8* BucketingConfig_Bucket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value min = 1;
  if (this->has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::min(this), target);
  }

  // .google.privacy.dlp.v2.Value max = 2;
  if (this->has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::max(this), target);
  }

  // .google.privacy.dlp.v2.Value replacement_value = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_replacement_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::replacement_value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.BucketingConfig.Bucket)
  return target;
}

size_t BucketingConfig_Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Value min = 1;
  if (this->has_min()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *min_);
  }

  // .google.privacy.dlp.v2.Value max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_);
  }

  // .google.privacy.dlp.v2.Value replacement_value = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_replacement_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *replacement_value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BucketingConfig_Bucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  const BucketingConfig_Bucket* source =
      ::google::protobuf::DynamicCastToGenerated<BucketingConfig_Bucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.BucketingConfig.Bucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.BucketingConfig.Bucket)
    MergeFrom(*source);
  }
}

void BucketingConfig_Bucket::MergeFrom(const BucketingConfig_Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min()) {
    mutable_min()->::google::privacy::dlp::v2::Value::MergeFrom(from.min());
  }
  if (from.has_max()) {
    mutable_max()->::google::privacy::dlp::v2::Value::MergeFrom(from.max());
  }
  if (from.has_replacement_value()) {
    mutable_replacement_value()->::google::privacy::dlp::v2::Value::MergeFrom(from.replacement_value());
  }
}

void BucketingConfig_Bucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketingConfig_Bucket::CopyFrom(const BucketingConfig_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.BucketingConfig.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketingConfig_Bucket::IsInitialized() const {
  return true;
}

void BucketingConfig_Bucket::Swap(BucketingConfig_Bucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BucketingConfig_Bucket::InternalSwap(BucketingConfig_Bucket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(replacement_value_, other->replacement_value_);
}

::google::protobuf::Metadata BucketingConfig_Bucket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BucketingConfig::InitAsDefaultInstance() {
}
class BucketingConfig::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BucketingConfig::kBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BucketingConfig::BucketingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.BucketingConfig)
}
BucketingConfig::BucketingConfig(const BucketingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.BucketingConfig)
}

void BucketingConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

BucketingConfig::~BucketingConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.BucketingConfig)
  SharedDtor();
}

void BucketingConfig::SharedDtor() {
}

void BucketingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BucketingConfig& BucketingConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BucketingConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void BucketingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.BucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BucketingConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BucketingConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::BucketingConfig_Bucket::_InternalParse;
          object = msg->add_buckets();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BucketingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.BucketingConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.BucketingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.BucketingConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BucketingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.BucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buckets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->buckets(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.BucketingConfig)
}

::google::protobuf::uint8* BucketingConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.BucketingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buckets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->buckets(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.BucketingConfig)
  return target;
}

size_t BucketingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.BucketingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buckets(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BucketingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.BucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BucketingConfig* source =
      ::google::protobuf::DynamicCastToGenerated<BucketingConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.BucketingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.BucketingConfig)
    MergeFrom(*source);
  }
}

void BucketingConfig::MergeFrom(const BucketingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.BucketingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
}

void BucketingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.BucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BucketingConfig::CopyFrom(const BucketingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.BucketingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketingConfig::IsInitialized() const {
  return true;
}

void BucketingConfig::Swap(BucketingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BucketingConfig::InternalSwap(BucketingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&buckets_)->InternalSwap(CastToBase(&other->buckets_));
}

::google::protobuf::Metadata BucketingConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CryptoReplaceFfxFpeConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_._instance.get_mutable()->crypto_key_ = const_cast< ::google::privacy::dlp::v2::CryptoKey*>(
      ::google::privacy::dlp::v2::CryptoKey::internal_default_instance());
  ::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_._instance.get_mutable()->context_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_.common_alphabet_ = 0;
  ::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_.custom_alphabet_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_.radix_ = 0;
  ::google::privacy::dlp::v2::_CryptoReplaceFfxFpeConfig_default_instance_._instance.get_mutable()->surrogate_info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
}
class CryptoReplaceFfxFpeConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CryptoKey& crypto_key(const CryptoReplaceFfxFpeConfig* msg);
  static const ::google::privacy::dlp::v2::FieldId& context(const CryptoReplaceFfxFpeConfig* msg);
  static const ::google::privacy::dlp::v2::InfoType& surrogate_info_type(const CryptoReplaceFfxFpeConfig* msg);
};

const ::google::privacy::dlp::v2::CryptoKey&
CryptoReplaceFfxFpeConfig::HasBitSetters::crypto_key(const CryptoReplaceFfxFpeConfig* msg) {
  return *msg->crypto_key_;
}
const ::google::privacy::dlp::v2::FieldId&
CryptoReplaceFfxFpeConfig::HasBitSetters::context(const CryptoReplaceFfxFpeConfig* msg) {
  return *msg->context_;
}
const ::google::privacy::dlp::v2::InfoType&
CryptoReplaceFfxFpeConfig::HasBitSetters::surrogate_info_type(const CryptoReplaceFfxFpeConfig* msg) {
  return *msg->surrogate_info_type_;
}
void CryptoReplaceFfxFpeConfig::clear_context() {
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
void CryptoReplaceFfxFpeConfig::clear_surrogate_info_type() {
  if (GetArenaNoVirtual() == nullptr && surrogate_info_type_ != nullptr) {
    delete surrogate_info_type_;
  }
  surrogate_info_type_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoReplaceFfxFpeConfig::kCryptoKeyFieldNumber;
const int CryptoReplaceFfxFpeConfig::kContextFieldNumber;
const int CryptoReplaceFfxFpeConfig::kCommonAlphabetFieldNumber;
const int CryptoReplaceFfxFpeConfig::kCustomAlphabetFieldNumber;
const int CryptoReplaceFfxFpeConfig::kRadixFieldNumber;
const int CryptoReplaceFfxFpeConfig::kSurrogateInfoTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoReplaceFfxFpeConfig::CryptoReplaceFfxFpeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
}
CryptoReplaceFfxFpeConfig::CryptoReplaceFfxFpeConfig(const CryptoReplaceFfxFpeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_crypto_key()) {
    crypto_key_ = new ::google::privacy::dlp::v2::CryptoKey(*from.crypto_key_);
  } else {
    crypto_key_ = nullptr;
  }
  if (from.has_context()) {
    context_ = new ::google::privacy::dlp::v2::FieldId(*from.context_);
  } else {
    context_ = nullptr;
  }
  if (from.has_surrogate_info_type()) {
    surrogate_info_type_ = new ::google::privacy::dlp::v2::InfoType(*from.surrogate_info_type_);
  } else {
    surrogate_info_type_ = nullptr;
  }
  clear_has_alphabet();
  switch (from.alphabet_case()) {
    case kCommonAlphabet: {
      set_common_alphabet(from.common_alphabet());
      break;
    }
    case kCustomAlphabet: {
      set_custom_alphabet(from.custom_alphabet());
      break;
    }
    case kRadix: {
      set_radix(from.radix());
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
}

void CryptoReplaceFfxFpeConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&crypto_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&surrogate_info_type_) -
      reinterpret_cast<char*>(&crypto_key_)) + sizeof(surrogate_info_type_));
  clear_has_alphabet();
}

CryptoReplaceFfxFpeConfig::~CryptoReplaceFfxFpeConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  SharedDtor();
}

void CryptoReplaceFfxFpeConfig::SharedDtor() {
  if (this != internal_default_instance()) delete crypto_key_;
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete surrogate_info_type_;
  if (has_alphabet()) {
    clear_alphabet();
  }
}

void CryptoReplaceFfxFpeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CryptoReplaceFfxFpeConfig& CryptoReplaceFfxFpeConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CryptoReplaceFfxFpeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CryptoReplaceFfxFpeConfig::clear_alphabet() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  switch (alphabet_case()) {
    case kCommonAlphabet: {
      // No need to clear
      break;
    }
    case kCustomAlphabet: {
      alphabet_.custom_alphabet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRadix: {
      // No need to clear
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ALPHABET_NOT_SET;
}


void CryptoReplaceFfxFpeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && crypto_key_ != nullptr) {
    delete crypto_key_;
  }
  crypto_key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && surrogate_info_type_ != nullptr) {
    delete surrogate_info_type_;
  }
  surrogate_info_type_ = nullptr;
  clear_alphabet();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CryptoReplaceFfxFpeConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CryptoReplaceFfxFpeConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CryptoKey crypto_key = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CryptoKey::_InternalParse;
        object = msg->mutable_crypto_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.FieldId context = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_context();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_common_alphabet(static_cast<::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string custom_alphabet = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet");
        object = msg->mutable_custom_alphabet();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 radix = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_radix(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_surrogate_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CryptoReplaceFfxFpeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CryptoKey crypto_key = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId context = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_common_alphabet(static_cast< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_alphabet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_alphabet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->custom_alphabet().data(), static_cast<int>(this->custom_alphabet().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 radix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          clear_alphabet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alphabet_.radix_)));
          set_has_radix();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surrogate_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CryptoReplaceFfxFpeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_crypto_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::crypto_key(this), output);
  }

  // .google.privacy.dlp.v2.FieldId context = 2;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::context(this), output);
  }

  // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
  if (has_common_alphabet()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->common_alphabet(), output);
  }

  // string custom_alphabet = 5;
  if (has_custom_alphabet()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_alphabet().data(), static_cast<int>(this->custom_alphabet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->custom_alphabet(), output);
  }

  // int32 radix = 6;
  if (has_radix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->radix(), output);
  }

  // .google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
  if (this->has_surrogate_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::surrogate_info_type(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
}

::google::protobuf::uint8* CryptoReplaceFfxFpeConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_crypto_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::crypto_key(this), target);
  }

  // .google.privacy.dlp.v2.FieldId context = 2;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::context(this), target);
  }

  // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
  if (has_common_alphabet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->common_alphabet(), target);
  }

  // string custom_alphabet = 5;
  if (has_custom_alphabet()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->custom_alphabet().data(), static_cast<int>(this->custom_alphabet().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.custom_alphabet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->custom_alphabet(), target);
  }

  // int32 radix = 6;
  if (has_radix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->radix(), target);
  }

  // .google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
  if (this->has_surrogate_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::surrogate_info_type(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  return target;
}

size_t CryptoReplaceFfxFpeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_crypto_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *crypto_key_);
  }

  // .google.privacy.dlp.v2.FieldId context = 2;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // .google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
  if (this->has_surrogate_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *surrogate_info_type_);
  }

  switch (alphabet_case()) {
    // .google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
    case kCommonAlphabet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->common_alphabet());
      break;
    }
    // string custom_alphabet = 5;
    case kCustomAlphabet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_alphabet());
      break;
    }
    // int32 radix = 6;
    case kRadix: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radix());
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoReplaceFfxFpeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoReplaceFfxFpeConfig* source =
      ::google::protobuf::DynamicCastToGenerated<CryptoReplaceFfxFpeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
    MergeFrom(*source);
  }
}

void CryptoReplaceFfxFpeConfig::MergeFrom(const CryptoReplaceFfxFpeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_crypto_key()) {
    mutable_crypto_key()->::google::privacy::dlp::v2::CryptoKey::MergeFrom(from.crypto_key());
  }
  if (from.has_context()) {
    mutable_context()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.context());
  }
  if (from.has_surrogate_info_type()) {
    mutable_surrogate_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.surrogate_info_type());
  }
  switch (from.alphabet_case()) {
    case kCommonAlphabet: {
      set_common_alphabet(from.common_alphabet());
      break;
    }
    case kCustomAlphabet: {
      set_custom_alphabet(from.custom_alphabet());
      break;
    }
    case kRadix: {
      set_radix(from.radix());
      break;
    }
    case ALPHABET_NOT_SET: {
      break;
    }
  }
}

void CryptoReplaceFfxFpeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoReplaceFfxFpeConfig::CopyFrom(const CryptoReplaceFfxFpeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoReplaceFfxFpeConfig::IsInitialized() const {
  return true;
}

void CryptoReplaceFfxFpeConfig::Swap(CryptoReplaceFfxFpeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoReplaceFfxFpeConfig::InternalSwap(CryptoReplaceFfxFpeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(crypto_key_, other->crypto_key_);
  swap(context_, other->context_);
  swap(surrogate_info_type_, other->surrogate_info_type_);
  swap(alphabet_, other->alphabet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CryptoReplaceFfxFpeConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CryptoKey::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CryptoKey_default_instance_.transient_ = const_cast< ::google::privacy::dlp::v2::TransientCryptoKey*>(
      ::google::privacy::dlp::v2::TransientCryptoKey::internal_default_instance());
  ::google::privacy::dlp::v2::_CryptoKey_default_instance_.unwrapped_ = const_cast< ::google::privacy::dlp::v2::UnwrappedCryptoKey*>(
      ::google::privacy::dlp::v2::UnwrappedCryptoKey::internal_default_instance());
  ::google::privacy::dlp::v2::_CryptoKey_default_instance_.kms_wrapped_ = const_cast< ::google::privacy::dlp::v2::KmsWrappedCryptoKey*>(
      ::google::privacy::dlp::v2::KmsWrappedCryptoKey::internal_default_instance());
}
class CryptoKey::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::TransientCryptoKey& transient(const CryptoKey* msg);
  static const ::google::privacy::dlp::v2::UnwrappedCryptoKey& unwrapped(const CryptoKey* msg);
  static const ::google::privacy::dlp::v2::KmsWrappedCryptoKey& kms_wrapped(const CryptoKey* msg);
};

const ::google::privacy::dlp::v2::TransientCryptoKey&
CryptoKey::HasBitSetters::transient(const CryptoKey* msg) {
  return *msg->source_.transient_;
}
const ::google::privacy::dlp::v2::UnwrappedCryptoKey&
CryptoKey::HasBitSetters::unwrapped(const CryptoKey* msg) {
  return *msg->source_.unwrapped_;
}
const ::google::privacy::dlp::v2::KmsWrappedCryptoKey&
CryptoKey::HasBitSetters::kms_wrapped(const CryptoKey* msg) {
  return *msg->source_.kms_wrapped_;
}
void CryptoKey::set_allocated_transient(::google::privacy::dlp::v2::TransientCryptoKey* transient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (transient) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transient, submessage_arena);
    }
    set_has_transient();
    source_.transient_ = transient;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoKey.transient)
}
void CryptoKey::set_allocated_unwrapped(::google::privacy::dlp::v2::UnwrappedCryptoKey* unwrapped) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (unwrapped) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unwrapped = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unwrapped, submessage_arena);
    }
    set_has_unwrapped();
    source_.unwrapped_ = unwrapped;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoKey.unwrapped)
}
void CryptoKey::set_allocated_kms_wrapped(::google::privacy::dlp::v2::KmsWrappedCryptoKey* kms_wrapped) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (kms_wrapped) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kms_wrapped = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kms_wrapped, submessage_arena);
    }
    set_has_kms_wrapped();
    source_.kms_wrapped_ = kms_wrapped;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CryptoKey.kms_wrapped)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptoKey::kTransientFieldNumber;
const int CryptoKey::kUnwrappedFieldNumber;
const int CryptoKey::kKmsWrappedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptoKey::CryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CryptoKey)
}
CryptoKey::CryptoKey(const CryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_source();
  switch (from.source_case()) {
    case kTransient: {
      mutable_transient()->::google::privacy::dlp::v2::TransientCryptoKey::MergeFrom(from.transient());
      break;
    }
    case kUnwrapped: {
      mutable_unwrapped()->::google::privacy::dlp::v2::UnwrappedCryptoKey::MergeFrom(from.unwrapped());
      break;
    }
    case kKmsWrapped: {
      mutable_kms_wrapped()->::google::privacy::dlp::v2::KmsWrappedCryptoKey::MergeFrom(from.kms_wrapped());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CryptoKey)
}

void CryptoKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_source();
}

CryptoKey::~CryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CryptoKey)
  SharedDtor();
}

void CryptoKey::SharedDtor() {
  if (has_source()) {
    clear_source();
  }
}

void CryptoKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CryptoKey& CryptoKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CryptoKey::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CryptoKey)
  switch (source_case()) {
    case kTransient: {
      delete source_.transient_;
      break;
    }
    case kUnwrapped: {
      delete source_.unwrapped_;
      break;
    }
    case kKmsWrapped: {
      delete source_.kms_wrapped_;
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void CryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_source();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CryptoKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CryptoKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.TransientCryptoKey transient = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TransientCryptoKey::_InternalParse;
        object = msg->mutable_transient();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::UnwrappedCryptoKey::_InternalParse;
        object = msg->mutable_unwrapped();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::KmsWrappedCryptoKey::_InternalParse;
        object = msg->mutable_kms_wrapped();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CryptoKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.TransientCryptoKey transient = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unwrapped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kms_wrapped()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CryptoKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TransientCryptoKey transient = 1;
  if (has_transient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::transient(this), output);
  }

  // .google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
  if (has_unwrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::unwrapped(this), output);
  }

  // .google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
  if (has_kms_wrapped()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::kms_wrapped(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CryptoKey)
}

::google::protobuf::uint8* CryptoKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.TransientCryptoKey transient = 1;
  if (has_transient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::transient(this), target);
  }

  // .google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
  if (has_unwrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::unwrapped(this), target);
  }

  // .google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
  if (has_kms_wrapped()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::kms_wrapped(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CryptoKey)
  return target;
}

size_t CryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CryptoKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (source_case()) {
    // .google.privacy.dlp.v2.TransientCryptoKey transient = 1;
    case kTransient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.transient_);
      break;
    }
    // .google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
    case kUnwrapped: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.unwrapped_);
      break;
    }
    // .google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
    case kKmsWrapped: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.kms_wrapped_);
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptoKey* source =
      ::google::protobuf::DynamicCastToGenerated<CryptoKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CryptoKey)
    MergeFrom(*source);
  }
}

void CryptoKey::MergeFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.source_case()) {
    case kTransient: {
      mutable_transient()->::google::privacy::dlp::v2::TransientCryptoKey::MergeFrom(from.transient());
      break;
    }
    case kUnwrapped: {
      mutable_unwrapped()->::google::privacy::dlp::v2::UnwrappedCryptoKey::MergeFrom(from.unwrapped());
      break;
    }
    case kKmsWrapped: {
      mutable_kms_wrapped()->::google::privacy::dlp::v2::KmsWrappedCryptoKey::MergeFrom(from.kms_wrapped());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void CryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptoKey::CopyFrom(const CryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptoKey::IsInitialized() const {
  return true;
}

void CryptoKey::Swap(CryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptoKey::InternalSwap(CryptoKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(source_, other->source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CryptoKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransientCryptoKey::InitAsDefaultInstance() {
}
class TransientCryptoKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransientCryptoKey::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransientCryptoKey::TransientCryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TransientCryptoKey)
}
TransientCryptoKey::TransientCryptoKey(const TransientCryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TransientCryptoKey)
}

void TransientCryptoKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TransientCryptoKey::~TransientCryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TransientCryptoKey)
  SharedDtor();
}

void TransientCryptoKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransientCryptoKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransientCryptoKey& TransientCryptoKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransientCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TransientCryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TransientCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransientCryptoKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransientCryptoKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.TransientCryptoKey.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransientCryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TransientCryptoKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.TransientCryptoKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TransientCryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TransientCryptoKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransientCryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TransientCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.TransientCryptoKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TransientCryptoKey)
}

::google::protobuf::uint8* TransientCryptoKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TransientCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.TransientCryptoKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TransientCryptoKey)
  return target;
}

size_t TransientCryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TransientCryptoKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransientCryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TransientCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const TransientCryptoKey* source =
      ::google::protobuf::DynamicCastToGenerated<TransientCryptoKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TransientCryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TransientCryptoKey)
    MergeFrom(*source);
  }
}

void TransientCryptoKey::MergeFrom(const TransientCryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TransientCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void TransientCryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TransientCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransientCryptoKey::CopyFrom(const TransientCryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TransientCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransientCryptoKey::IsInitialized() const {
  return true;
}

void TransientCryptoKey::Swap(TransientCryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransientCryptoKey::InternalSwap(TransientCryptoKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TransientCryptoKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UnwrappedCryptoKey::InitAsDefaultInstance() {
}
class UnwrappedCryptoKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnwrappedCryptoKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnwrappedCryptoKey::UnwrappedCryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.UnwrappedCryptoKey)
}
UnwrappedCryptoKey::UnwrappedCryptoKey(const UnwrappedCryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.UnwrappedCryptoKey)
}

void UnwrappedCryptoKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnwrappedCryptoKey::~UnwrappedCryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.UnwrappedCryptoKey)
  SharedDtor();
}

void UnwrappedCryptoKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnwrappedCryptoKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnwrappedCryptoKey& UnwrappedCryptoKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UnwrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void UnwrappedCryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnwrappedCryptoKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UnwrappedCryptoKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes key = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnwrappedCryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.UnwrappedCryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.UnwrappedCryptoKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnwrappedCryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.UnwrappedCryptoKey)
}

::google::protobuf::uint8* UnwrappedCryptoKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.UnwrappedCryptoKey)
  return target;
}

size_t UnwrappedCryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnwrappedCryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const UnwrappedCryptoKey* source =
      ::google::protobuf::DynamicCastToGenerated<UnwrappedCryptoKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.UnwrappedCryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.UnwrappedCryptoKey)
    MergeFrom(*source);
  }
}

void UnwrappedCryptoKey::MergeFrom(const UnwrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void UnwrappedCryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnwrappedCryptoKey::CopyFrom(const UnwrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.UnwrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnwrappedCryptoKey::IsInitialized() const {
  return true;
}

void UnwrappedCryptoKey::Swap(UnwrappedCryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnwrappedCryptoKey::InternalSwap(UnwrappedCryptoKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UnwrappedCryptoKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void KmsWrappedCryptoKey::InitAsDefaultInstance() {
}
class KmsWrappedCryptoKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KmsWrappedCryptoKey::kWrappedKeyFieldNumber;
const int KmsWrappedCryptoKey::kCryptoKeyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KmsWrappedCryptoKey::KmsWrappedCryptoKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.KmsWrappedCryptoKey)
}
KmsWrappedCryptoKey::KmsWrappedCryptoKey(const KmsWrappedCryptoKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wrapped_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.wrapped_key().size() > 0) {
    wrapped_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wrapped_key_);
  }
  crypto_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.crypto_key_name().size() > 0) {
    crypto_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crypto_key_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.KmsWrappedCryptoKey)
}

void KmsWrappedCryptoKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  wrapped_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypto_key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KmsWrappedCryptoKey::~KmsWrappedCryptoKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  SharedDtor();
}

void KmsWrappedCryptoKey::SharedDtor() {
  wrapped_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypto_key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KmsWrappedCryptoKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KmsWrappedCryptoKey& KmsWrappedCryptoKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KmsWrappedCryptoKey_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void KmsWrappedCryptoKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wrapped_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crypto_key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KmsWrappedCryptoKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KmsWrappedCryptoKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes wrapped_key = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_wrapped_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string crypto_key_name = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name");
        object = msg->mutable_crypto_key_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KmsWrappedCryptoKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes wrapped_key = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_wrapped_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string crypto_key_name = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crypto_key_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->crypto_key_name().data(), static_cast<int>(this->crypto_key_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KmsWrappedCryptoKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes wrapped_key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->wrapped_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->wrapped_key(), output);
  }

  // string crypto_key_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->crypto_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crypto_key_name().data(), static_cast<int>(this->crypto_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->crypto_key_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.KmsWrappedCryptoKey)
}

::google::protobuf::uint8* KmsWrappedCryptoKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes wrapped_key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->wrapped_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->wrapped_key(), target);
  }

  // string crypto_key_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->crypto_key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->crypto_key_name().data(), static_cast<int>(this->crypto_key_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.KmsWrappedCryptoKey.crypto_key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->crypto_key_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  return target;
}

size_t KmsWrappedCryptoKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes wrapped_key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->wrapped_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->wrapped_key());
  }

  // string crypto_key_name = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->crypto_key_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->crypto_key_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KmsWrappedCryptoKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  const KmsWrappedCryptoKey* source =
      ::google::protobuf::DynamicCastToGenerated<KmsWrappedCryptoKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.KmsWrappedCryptoKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.KmsWrappedCryptoKey)
    MergeFrom(*source);
  }
}

void KmsWrappedCryptoKey::MergeFrom(const KmsWrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wrapped_key().size() > 0) {

    wrapped_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wrapped_key_);
  }
  if (from.crypto_key_name().size() > 0) {

    crypto_key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crypto_key_name_);
  }
}

void KmsWrappedCryptoKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KmsWrappedCryptoKey::CopyFrom(const KmsWrappedCryptoKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.KmsWrappedCryptoKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KmsWrappedCryptoKey::IsInitialized() const {
  return true;
}

void KmsWrappedCryptoKey::Swap(KmsWrappedCryptoKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KmsWrappedCryptoKey::InternalSwap(KmsWrappedCryptoKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  wrapped_key_.Swap(&other->wrapped_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  crypto_key_name_.Swap(&other->crypto_key_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata KmsWrappedCryptoKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateShiftConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DateShiftConfig_default_instance_._instance.get_mutable()->context_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2::_DateShiftConfig_default_instance_.crypto_key_ = const_cast< ::google::privacy::dlp::v2::CryptoKey*>(
      ::google::privacy::dlp::v2::CryptoKey::internal_default_instance());
}
class DateShiftConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& context(const DateShiftConfig* msg);
  static const ::google::privacy::dlp::v2::CryptoKey& crypto_key(const DateShiftConfig* msg);
};

const ::google::privacy::dlp::v2::FieldId&
DateShiftConfig::HasBitSetters::context(const DateShiftConfig* msg) {
  return *msg->context_;
}
const ::google::privacy::dlp::v2::CryptoKey&
DateShiftConfig::HasBitSetters::crypto_key(const DateShiftConfig* msg) {
  return *msg->method_.crypto_key_;
}
void DateShiftConfig::clear_context() {
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
}
void DateShiftConfig::set_allocated_crypto_key(::google::privacy::dlp::v2::CryptoKey* crypto_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_method();
  if (crypto_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypto_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crypto_key, submessage_arena);
    }
    set_has_crypto_key();
    method_.crypto_key_ = crypto_key;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DateShiftConfig.crypto_key)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateShiftConfig::kUpperBoundDaysFieldNumber;
const int DateShiftConfig::kLowerBoundDaysFieldNumber;
const int DateShiftConfig::kContextFieldNumber;
const int DateShiftConfig::kCryptoKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateShiftConfig::DateShiftConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DateShiftConfig)
}
DateShiftConfig::DateShiftConfig(const DateShiftConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_context()) {
    context_ = new ::google::privacy::dlp::v2::FieldId(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&upper_bound_days_, &from.upper_bound_days_,
    static_cast<size_t>(reinterpret_cast<char*>(&lower_bound_days_) -
    reinterpret_cast<char*>(&upper_bound_days_)) + sizeof(lower_bound_days_));
  clear_has_method();
  switch (from.method_case()) {
    case kCryptoKey: {
      mutable_crypto_key()->::google::privacy::dlp::v2::CryptoKey::MergeFrom(from.crypto_key());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DateShiftConfig)
}

void DateShiftConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_bound_days_) -
      reinterpret_cast<char*>(&context_)) + sizeof(lower_bound_days_));
  clear_has_method();
}

DateShiftConfig::~DateShiftConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DateShiftConfig)
  SharedDtor();
}

void DateShiftConfig::SharedDtor() {
  if (this != internal_default_instance()) delete context_;
  if (has_method()) {
    clear_method();
  }
}

void DateShiftConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateShiftConfig& DateShiftConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateShiftConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DateShiftConfig::clear_method() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.DateShiftConfig)
  switch (method_case()) {
    case kCryptoKey: {
      delete method_.crypto_key_;
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METHOD_NOT_SET;
}


void DateShiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DateShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&upper_bound_days_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lower_bound_days_) -
      reinterpret_cast<char*>(&upper_bound_days_)) + sizeof(lower_bound_days_));
  clear_method();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateShiftConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateShiftConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 upper_bound_days = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_upper_bound_days(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 lower_bound_days = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_lower_bound_days(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.FieldId context = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_context();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CryptoKey crypto_key = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CryptoKey::_InternalParse;
        object = msg->mutable_crypto_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateShiftConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DateShiftConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 upper_bound_days = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upper_bound_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lower_bound_days = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lower_bound_days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId context = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CryptoKey crypto_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DateShiftConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DateShiftConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateShiftConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DateShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 upper_bound_days = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->upper_bound_days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upper_bound_days(), output);
  }

  // int32 lower_bound_days = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->lower_bound_days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lower_bound_days(), output);
  }

  // .google.privacy.dlp.v2.FieldId context = 3;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::context(this), output);
  }

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 4;
  if (has_crypto_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::crypto_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DateShiftConfig)
}

::google::protobuf::uint8* DateShiftConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DateShiftConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 upper_bound_days = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->upper_bound_days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upper_bound_days(), target);
  }

  // int32 lower_bound_days = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->lower_bound_days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lower_bound_days(), target);
  }

  // .google.privacy.dlp.v2.FieldId context = 3;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::context(this), target);
  }

  // .google.privacy.dlp.v2.CryptoKey crypto_key = 4;
  if (has_crypto_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::crypto_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DateShiftConfig)
  return target;
}

size_t DateShiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DateShiftConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId context = 3;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // int32 upper_bound_days = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->upper_bound_days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upper_bound_days());
  }

  // int32 lower_bound_days = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->lower_bound_days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lower_bound_days());
  }

  switch (method_case()) {
    // .google.privacy.dlp.v2.CryptoKey crypto_key = 4;
    case kCryptoKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *method_.crypto_key_);
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateShiftConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DateShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DateShiftConfig* source =
      ::google::protobuf::DynamicCastToGenerated<DateShiftConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DateShiftConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DateShiftConfig)
    MergeFrom(*source);
  }
}

void DateShiftConfig::MergeFrom(const DateShiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DateShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_context()) {
    mutable_context()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.context());
  }
  if (from.upper_bound_days() != 0) {
    set_upper_bound_days(from.upper_bound_days());
  }
  if (from.lower_bound_days() != 0) {
    set_lower_bound_days(from.lower_bound_days());
  }
  switch (from.method_case()) {
    case kCryptoKey: {
      mutable_crypto_key()->::google::privacy::dlp::v2::CryptoKey::MergeFrom(from.crypto_key());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
}

void DateShiftConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DateShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateShiftConfig::CopyFrom(const DateShiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DateShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateShiftConfig::IsInitialized() const {
  return true;
}

void DateShiftConfig::Swap(DateShiftConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateShiftConfig::InternalSwap(DateShiftConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(context_, other->context_);
  swap(upper_bound_days_, other->upper_bound_days_);
  swap(lower_bound_days_, other->lower_bound_days_);
  swap(method_, other->method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DateShiftConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeTransformations_InfoTypeTransformation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InfoTypeTransformations_InfoTypeTransformation_default_instance_._instance.get_mutable()->primitive_transformation_ = const_cast< ::google::privacy::dlp::v2::PrimitiveTransformation*>(
      ::google::privacy::dlp::v2::PrimitiveTransformation::internal_default_instance());
}
class InfoTypeTransformations_InfoTypeTransformation::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::PrimitiveTransformation& primitive_transformation(const InfoTypeTransformations_InfoTypeTransformation* msg);
};

const ::google::privacy::dlp::v2::PrimitiveTransformation&
InfoTypeTransformations_InfoTypeTransformation::HasBitSetters::primitive_transformation(const InfoTypeTransformations_InfoTypeTransformation* msg) {
  return *msg->primitive_transformation_;
}
void InfoTypeTransformations_InfoTypeTransformation::clear_info_types() {
  info_types_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeTransformations_InfoTypeTransformation::kInfoTypesFieldNumber;
const int InfoTypeTransformations_InfoTypeTransformation::kPrimitiveTransformationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeTransformations_InfoTypeTransformation::InfoTypeTransformations_InfoTypeTransformation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
}
InfoTypeTransformations_InfoTypeTransformation::InfoTypeTransformations_InfoTypeTransformation(const InfoTypeTransformations_InfoTypeTransformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      info_types_(from.info_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_primitive_transformation()) {
    primitive_transformation_ = new ::google::privacy::dlp::v2::PrimitiveTransformation(*from.primitive_transformation_);
  } else {
    primitive_transformation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
}

void InfoTypeTransformations_InfoTypeTransformation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  primitive_transformation_ = nullptr;
}

InfoTypeTransformations_InfoTypeTransformation::~InfoTypeTransformations_InfoTypeTransformation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  SharedDtor();
}

void InfoTypeTransformations_InfoTypeTransformation::SharedDtor() {
  if (this != internal_default_instance()) delete primitive_transformation_;
}

void InfoTypeTransformations_InfoTypeTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoTypeTransformations_InfoTypeTransformation& InfoTypeTransformations_InfoTypeTransformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InfoTypeTransformations_InfoTypeTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InfoTypeTransformations_InfoTypeTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_types_.Clear();
  if (GetArenaNoVirtual() == nullptr && primitive_transformation_ != nullptr) {
    delete primitive_transformation_;
  }
  primitive_transformation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InfoTypeTransformations_InfoTypeTransformation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InfoTypeTransformations_InfoTypeTransformation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
          object = msg->add_info_types();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrimitiveTransformation::_InternalParse;
        object = msg->mutable_primitive_transformation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InfoTypeTransformations_InfoTypeTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primitive_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InfoTypeTransformations_InfoTypeTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->info_types(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_primitive_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::primitive_transformation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
}

::google::protobuf::uint8* InfoTypeTransformations_InfoTypeTransformation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_types(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_primitive_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::primitive_transformation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  return target;
}

size_t InfoTypeTransformations_InfoTypeTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoType info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_types(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_primitive_transformation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *primitive_transformation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoTypeTransformations_InfoTypeTransformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeTransformations_InfoTypeTransformation* source =
      ::google::protobuf::DynamicCastToGenerated<InfoTypeTransformations_InfoTypeTransformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
    MergeFrom(*source);
  }
}

void InfoTypeTransformations_InfoTypeTransformation::MergeFrom(const InfoTypeTransformations_InfoTypeTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_types_.MergeFrom(from.info_types_);
  if (from.has_primitive_transformation()) {
    mutable_primitive_transformation()->::google::privacy::dlp::v2::PrimitiveTransformation::MergeFrom(from.primitive_transformation());
  }
}

void InfoTypeTransformations_InfoTypeTransformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeTransformations_InfoTypeTransformation::CopyFrom(const InfoTypeTransformations_InfoTypeTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeTransformations_InfoTypeTransformation::IsInitialized() const {
  return true;
}

void InfoTypeTransformations_InfoTypeTransformation::Swap(InfoTypeTransformations_InfoTypeTransformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeTransformations_InfoTypeTransformation::InternalSwap(InfoTypeTransformations_InfoTypeTransformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&info_types_)->InternalSwap(CastToBase(&other->info_types_));
  swap(primitive_transformation_, other->primitive_transformation_);
}

::google::protobuf::Metadata InfoTypeTransformations_InfoTypeTransformation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InfoTypeTransformations::InitAsDefaultInstance() {
}
class InfoTypeTransformations::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoTypeTransformations::kTransformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoTypeTransformations::InfoTypeTransformations()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InfoTypeTransformations)
}
InfoTypeTransformations::InfoTypeTransformations(const InfoTypeTransformations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      transformations_(from.transformations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InfoTypeTransformations)
}

void InfoTypeTransformations::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

InfoTypeTransformations::~InfoTypeTransformations() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InfoTypeTransformations)
  SharedDtor();
}

void InfoTypeTransformations::SharedDtor() {
}

void InfoTypeTransformations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoTypeTransformations& InfoTypeTransformations::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InfoTypeTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InfoTypeTransformations::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InfoTypeTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformations_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InfoTypeTransformations::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InfoTypeTransformations*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation::_InternalParse;
          object = msg->add_transformations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InfoTypeTransformations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InfoTypeTransformations)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InfoTypeTransformations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InfoTypeTransformations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InfoTypeTransformations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InfoTypeTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->transformations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InfoTypeTransformations)
}

::google::protobuf::uint8* InfoTypeTransformations::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InfoTypeTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transformations(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InfoTypeTransformations)
  return target;
}

size_t InfoTypeTransformations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InfoTypeTransformations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1 [(.google.api.field_behavior) = REQUIRED];
  {
    unsigned int count = static_cast<unsigned int>(this->transformations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transformations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoTypeTransformations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InfoTypeTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoTypeTransformations* source =
      ::google::protobuf::DynamicCastToGenerated<InfoTypeTransformations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InfoTypeTransformations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InfoTypeTransformations)
    MergeFrom(*source);
  }
}

void InfoTypeTransformations::MergeFrom(const InfoTypeTransformations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InfoTypeTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transformations_.MergeFrom(from.transformations_);
}

void InfoTypeTransformations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InfoTypeTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoTypeTransformations::CopyFrom(const InfoTypeTransformations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InfoTypeTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoTypeTransformations::IsInitialized() const {
  return true;
}

void InfoTypeTransformations::Swap(InfoTypeTransformations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoTypeTransformations::InternalSwap(InfoTypeTransformations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transformations_)->InternalSwap(CastToBase(&other->transformations_));
}

::google::protobuf::Metadata InfoTypeTransformations::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FieldTransformation::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_FieldTransformation_default_instance_._instance.get_mutable()->condition_ = const_cast< ::google::privacy::dlp::v2::RecordCondition*>(
      ::google::privacy::dlp::v2::RecordCondition::internal_default_instance());
  ::google::privacy::dlp::v2::_FieldTransformation_default_instance_.primitive_transformation_ = const_cast< ::google::privacy::dlp::v2::PrimitiveTransformation*>(
      ::google::privacy::dlp::v2::PrimitiveTransformation::internal_default_instance());
  ::google::privacy::dlp::v2::_FieldTransformation_default_instance_.info_type_transformations_ = const_cast< ::google::privacy::dlp::v2::InfoTypeTransformations*>(
      ::google::privacy::dlp::v2::InfoTypeTransformations::internal_default_instance());
}
class FieldTransformation::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::RecordCondition& condition(const FieldTransformation* msg);
  static const ::google::privacy::dlp::v2::PrimitiveTransformation& primitive_transformation(const FieldTransformation* msg);
  static const ::google::privacy::dlp::v2::InfoTypeTransformations& info_type_transformations(const FieldTransformation* msg);
};

const ::google::privacy::dlp::v2::RecordCondition&
FieldTransformation::HasBitSetters::condition(const FieldTransformation* msg) {
  return *msg->condition_;
}
const ::google::privacy::dlp::v2::PrimitiveTransformation&
FieldTransformation::HasBitSetters::primitive_transformation(const FieldTransformation* msg) {
  return *msg->transformation_.primitive_transformation_;
}
const ::google::privacy::dlp::v2::InfoTypeTransformations&
FieldTransformation::HasBitSetters::info_type_transformations(const FieldTransformation* msg) {
  return *msg->transformation_.info_type_transformations_;
}
void FieldTransformation::clear_fields() {
  fields_.Clear();
}
void FieldTransformation::set_allocated_primitive_transformation(::google::privacy::dlp::v2::PrimitiveTransformation* primitive_transformation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (primitive_transformation) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      primitive_transformation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, primitive_transformation, submessage_arena);
    }
    set_has_primitive_transformation();
    transformation_.primitive_transformation_ = primitive_transformation;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.FieldTransformation.primitive_transformation)
}
void FieldTransformation::set_allocated_info_type_transformations(::google::privacy::dlp::v2::InfoTypeTransformations* info_type_transformations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transformation();
  if (info_type_transformations) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info_type_transformations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info_type_transformations, submessage_arena);
    }
    set_has_info_type_transformations();
    transformation_.info_type_transformations_ = info_type_transformations;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.FieldTransformation.info_type_transformations)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldTransformation::kFieldsFieldNumber;
const int FieldTransformation::kConditionFieldNumber;
const int FieldTransformation::kPrimitiveTransformationFieldNumber;
const int FieldTransformation::kInfoTypeTransformationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldTransformation::FieldTransformation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.FieldTransformation)
}
FieldTransformation::FieldTransformation(const FieldTransformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::google::privacy::dlp::v2::RecordCondition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  clear_has_transformation();
  switch (from.transformation_case()) {
    case kPrimitiveTransformation: {
      mutable_primitive_transformation()->::google::privacy::dlp::v2::PrimitiveTransformation::MergeFrom(from.primitive_transformation());
      break;
    }
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.FieldTransformation)
}

void FieldTransformation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  condition_ = nullptr;
  clear_has_transformation();
}

FieldTransformation::~FieldTransformation() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.FieldTransformation)
  SharedDtor();
}

void FieldTransformation::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
  if (has_transformation()) {
    clear_transformation();
  }
}

void FieldTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldTransformation& FieldTransformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FieldTransformation_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void FieldTransformation::clear_transformation() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.FieldTransformation)
  switch (transformation_case()) {
    case kPrimitiveTransformation: {
      delete transformation_.primitive_transformation_;
      break;
    }
    case kInfoTypeTransformations: {
      delete transformation_.info_type_transformations_;
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSFORMATION_NOT_SET;
}


void FieldTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.FieldTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  clear_transformation();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldTransformation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FieldTransformation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.FieldId fields = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
          object = msg->add_fields();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.RecordCondition condition = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordCondition::_InternalParse;
        object = msg->mutable_condition();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrimitiveTransformation::_InternalParse;
        object = msg->mutable_primitive_transformation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoTypeTransformations::_InternalParse;
        object = msg->mutable_info_type_transformations();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldTransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.FieldTransformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.FieldId fields = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RecordCondition condition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_primitive_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.FieldTransformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.FieldTransformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldTransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.FieldTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId fields = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fields(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.RecordCondition condition = 3;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::condition(this), output);
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
  if (has_primitive_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::primitive_transformation(this), output);
  }

  // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
  if (has_info_type_transformations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::info_type_transformations(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.FieldTransformation)
}

::google::protobuf::uint8* FieldTransformation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.FieldTransformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId fields = 1 [(.google.api.field_behavior) = REQUIRED];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fields(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.RecordCondition condition = 3;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::condition(this), target);
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
  if (has_primitive_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::primitive_transformation(this), target);
  }

  // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
  if (has_info_type_transformations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::info_type_transformations(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.FieldTransformation)
  return target;
}

size_t FieldTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.FieldTransformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId fields = 1 [(.google.api.field_behavior) = REQUIRED];
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.RecordCondition condition = 3;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  switch (transformation_case()) {
    // .google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
    case kPrimitiveTransformation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.primitive_transformation_);
      break;
    }
    // .google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
    case kInfoTypeTransformations: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transformation_.info_type_transformations_);
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldTransformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.FieldTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldTransformation* source =
      ::google::protobuf::DynamicCastToGenerated<FieldTransformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.FieldTransformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.FieldTransformation)
    MergeFrom(*source);
  }
}

void FieldTransformation::MergeFrom(const FieldTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.FieldTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_condition()) {
    mutable_condition()->::google::privacy::dlp::v2::RecordCondition::MergeFrom(from.condition());
  }
  switch (from.transformation_case()) {
    case kPrimitiveTransformation: {
      mutable_primitive_transformation()->::google::privacy::dlp::v2::PrimitiveTransformation::MergeFrom(from.primitive_transformation());
      break;
    }
    case kInfoTypeTransformations: {
      mutable_info_type_transformations()->::google::privacy::dlp::v2::InfoTypeTransformations::MergeFrom(from.info_type_transformations());
      break;
    }
    case TRANSFORMATION_NOT_SET: {
      break;
    }
  }
}

void FieldTransformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.FieldTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldTransformation::CopyFrom(const FieldTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.FieldTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldTransformation::IsInitialized() const {
  return true;
}

void FieldTransformation::Swap(FieldTransformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldTransformation::InternalSwap(FieldTransformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fields_)->InternalSwap(CastToBase(&other->fields_));
  swap(condition_, other->condition_);
  swap(transformation_, other->transformation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FieldTransformation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordTransformations::InitAsDefaultInstance() {
}
class RecordTransformations::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordTransformations::kFieldTransformationsFieldNumber;
const int RecordTransformations::kRecordSuppressionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordTransformations::RecordTransformations()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordTransformations)
}
RecordTransformations::RecordTransformations(const RecordTransformations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      field_transformations_(from.field_transformations_),
      record_suppressions_(from.record_suppressions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordTransformations)
}

void RecordTransformations::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

RecordTransformations::~RecordTransformations() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordTransformations)
  SharedDtor();
}

void RecordTransformations::SharedDtor() {
}

void RecordTransformations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordTransformations& RecordTransformations::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordTransformations_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RecordTransformations::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_transformations_.Clear();
  record_suppressions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordTransformations::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordTransformations*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldTransformation::_InternalParse;
          object = msg->add_field_transformations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::RecordSuppression::_InternalParse;
          object = msg->add_record_suppressions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordTransformations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordTransformations)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_record_suppressions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordTransformations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordTransformations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordTransformations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->field_transformations(static_cast<int>(i)),
      output);
  }

  // repeated .google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_suppressions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->record_suppressions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordTransformations)
}

::google::protobuf::uint8* RecordTransformations::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordTransformations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->field_transformations(static_cast<int>(i)), target);
  }

  // repeated .google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_suppressions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->record_suppressions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordTransformations)
  return target;
}

size_t RecordTransformations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordTransformations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->field_transformations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_transformations(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->record_suppressions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->record_suppressions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordTransformations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordTransformations* source =
      ::google::protobuf::DynamicCastToGenerated<RecordTransformations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordTransformations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordTransformations)
    MergeFrom(*source);
  }
}

void RecordTransformations::MergeFrom(const RecordTransformations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_transformations_.MergeFrom(from.field_transformations_);
  record_suppressions_.MergeFrom(from.record_suppressions_);
}

void RecordTransformations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordTransformations::CopyFrom(const RecordTransformations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordTransformations::IsInitialized() const {
  return true;
}

void RecordTransformations::Swap(RecordTransformations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordTransformations::InternalSwap(RecordTransformations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&field_transformations_)->InternalSwap(CastToBase(&other->field_transformations_));
  CastToBase(&record_suppressions_)->InternalSwap(CastToBase(&other->record_suppressions_));
}

::google::protobuf::Metadata RecordTransformations::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordSuppression::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RecordSuppression_default_instance_._instance.get_mutable()->condition_ = const_cast< ::google::privacy::dlp::v2::RecordCondition*>(
      ::google::privacy::dlp::v2::RecordCondition::internal_default_instance());
}
class RecordSuppression::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::RecordCondition& condition(const RecordSuppression* msg);
};

const ::google::privacy::dlp::v2::RecordCondition&
RecordSuppression::HasBitSetters::condition(const RecordSuppression* msg) {
  return *msg->condition_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordSuppression::kConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordSuppression::RecordSuppression()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordSuppression)
}
RecordSuppression::RecordSuppression(const RecordSuppression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_condition()) {
    condition_ = new ::google::privacy::dlp::v2::RecordCondition(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordSuppression)
}

void RecordSuppression::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  condition_ = nullptr;
}

RecordSuppression::~RecordSuppression() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordSuppression)
  SharedDtor();
}

void RecordSuppression::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
}

void RecordSuppression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordSuppression& RecordSuppression::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordSuppression_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RecordSuppression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordSuppression::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordSuppression*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.RecordCondition condition = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordCondition::_InternalParse;
        object = msg->mutable_condition();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordSuppression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordSuppression)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.RecordCondition condition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordSuppression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordSuppression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordSuppression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition condition = 1;
  if (this->has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::condition(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordSuppression)
}

::google::protobuf::uint8* RecordSuppression::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordSuppression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition condition = 1;
  if (this->has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::condition(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordSuppression)
  return target;
}

size_t RecordSuppression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordSuppression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordSuppression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordSuppression* source =
      ::google::protobuf::DynamicCastToGenerated<RecordSuppression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordSuppression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordSuppression)
    MergeFrom(*source);
  }
}

void RecordSuppression::MergeFrom(const RecordSuppression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordSuppression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    mutable_condition()->::google::privacy::dlp::v2::RecordCondition::MergeFrom(from.condition());
  }
}

void RecordSuppression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordSuppression::CopyFrom(const RecordSuppression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordSuppression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSuppression::IsInitialized() const {
  return true;
}

void RecordSuppression::Swap(RecordSuppression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordSuppression::InternalSwap(RecordSuppression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(condition_, other->condition_);
}

::google::protobuf::Metadata RecordSuppression::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition_Condition::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RecordCondition_Condition_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2::_RecordCondition_Condition_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::privacy::dlp::v2::Value*>(
      ::google::privacy::dlp::v2::Value::internal_default_instance());
}
class RecordCondition_Condition::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const RecordCondition_Condition* msg);
  static const ::google::privacy::dlp::v2::Value& value(const RecordCondition_Condition* msg);
};

const ::google::privacy::dlp::v2::FieldId&
RecordCondition_Condition::HasBitSetters::field(const RecordCondition_Condition* msg) {
  return *msg->field_;
}
const ::google::privacy::dlp::v2::Value&
RecordCondition_Condition::HasBitSetters::value(const RecordCondition_Condition* msg) {
  return *msg->value_;
}
void RecordCondition_Condition::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition_Condition::kFieldFieldNumber;
const int RecordCondition_Condition::kOperatorFieldNumber;
const int RecordCondition_Condition::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition_Condition::RecordCondition_Condition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordCondition.Condition)
}
RecordCondition_Condition::RecordCondition_Condition(const RecordCondition_Condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::google::privacy::dlp::v2::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordCondition.Condition)
}

void RecordCondition_Condition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator__) -
      reinterpret_cast<char*>(&field_)) + sizeof(operator__));
}

RecordCondition_Condition::~RecordCondition_Condition() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordCondition.Condition)
  SharedDtor();
}

void RecordCondition_Condition::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
  if (this != internal_default_instance()) delete value_;
}

void RecordCondition_Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordCondition_Condition& RecordCondition_Condition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordCondition_Condition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RecordCondition_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordCondition.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  operator__ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordCondition_Condition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordCondition_Condition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.RelationalOperator operator = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_operator_(static_cast<::google::privacy::dlp::v2::RelationalOperator>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.Value value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Value::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordCondition_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordCondition.Condition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RelationalOperator operator = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::google::privacy::dlp::v2::RelationalOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Value value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordCondition.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordCondition.Condition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordCondition_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordCondition.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  // .google.privacy.dlp.v2.RelationalOperator operator = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operator_(), output);
  }

  // .google.privacy.dlp.v2.Value value = 4;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordCondition.Condition)
}

::google::protobuf::uint8* RecordCondition_Condition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordCondition.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  // .google.privacy.dlp.v2.RelationalOperator operator = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operator_(), target);
  }

  // .google.privacy.dlp.v2.Value value = 4;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordCondition.Condition)
  return target;
}

size_t RecordCondition_Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordCondition.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  // .google.privacy.dlp.v2.Value value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .google.privacy.dlp.v2.RelationalOperator operator = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordCondition_Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordCondition.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition_Condition* source =
      ::google::protobuf::DynamicCastToGenerated<RecordCondition_Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordCondition.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordCondition.Condition)
    MergeFrom(*source);
  }
}

void RecordCondition_Condition::MergeFrom(const RecordCondition_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordCondition.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
  if (from.has_value()) {
    mutable_value()->::google::privacy::dlp::v2::Value::MergeFrom(from.value());
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void RecordCondition_Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordCondition.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition_Condition::CopyFrom(const RecordCondition_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordCondition.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition_Condition::IsInitialized() const {
  return true;
}

void RecordCondition_Condition::Swap(RecordCondition_Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition_Condition::InternalSwap(RecordCondition_Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_, other->field_);
  swap(value_, other->value_);
  swap(operator__, other->operator__);
}

::google::protobuf::Metadata RecordCondition_Condition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition_Conditions::InitAsDefaultInstance() {
}
class RecordCondition_Conditions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition_Conditions::kConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition_Conditions::RecordCondition_Conditions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordCondition.Conditions)
}
RecordCondition_Conditions::RecordCondition_Conditions(const RecordCondition_Conditions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordCondition.Conditions)
}

void RecordCondition_Conditions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
}

RecordCondition_Conditions::~RecordCondition_Conditions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordCondition.Conditions)
  SharedDtor();
}

void RecordCondition_Conditions::SharedDtor() {
}

void RecordCondition_Conditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordCondition_Conditions& RecordCondition_Conditions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordCondition_Conditions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RecordCondition_Conditions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordCondition_Conditions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordCondition_Conditions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::RecordCondition_Condition::_InternalParse;
          object = msg->add_conditions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordCondition_Conditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordCondition.Conditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordCondition.Conditions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordCondition_Conditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->conditions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordCondition.Conditions)
}

::google::protobuf::uint8* RecordCondition_Conditions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->conditions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordCondition.Conditions)
  return target;
}

size_t RecordCondition_Conditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->conditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->conditions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordCondition_Conditions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition_Conditions* source =
      ::google::protobuf::DynamicCastToGenerated<RecordCondition_Conditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordCondition.Conditions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordCondition.Conditions)
    MergeFrom(*source);
  }
}

void RecordCondition_Conditions::MergeFrom(const RecordCondition_Conditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
}

void RecordCondition_Conditions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition_Conditions::CopyFrom(const RecordCondition_Conditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordCondition.Conditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition_Conditions::IsInitialized() const {
  return true;
}

void RecordCondition_Conditions::Swap(RecordCondition_Conditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition_Conditions::InternalSwap(RecordCondition_Conditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&conditions_)->InternalSwap(CastToBase(&other->conditions_));
}

::google::protobuf::Metadata RecordCondition_Conditions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition_Expressions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RecordCondition_Expressions_default_instance_.conditions_ = const_cast< ::google::privacy::dlp::v2::RecordCondition_Conditions*>(
      ::google::privacy::dlp::v2::RecordCondition_Conditions::internal_default_instance());
}
class RecordCondition_Expressions::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::RecordCondition_Conditions& conditions(const RecordCondition_Expressions* msg);
};

const ::google::privacy::dlp::v2::RecordCondition_Conditions&
RecordCondition_Expressions::HasBitSetters::conditions(const RecordCondition_Expressions* msg) {
  return *msg->type_.conditions_;
}
void RecordCondition_Expressions::set_allocated_conditions(::google::privacy::dlp::v2::RecordCondition_Conditions* conditions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (conditions) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conditions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conditions, submessage_arena);
    }
    set_has_conditions();
    type_.conditions_ = conditions;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordCondition.Expressions.conditions)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition_Expressions::kLogicalOperatorFieldNumber;
const int RecordCondition_Expressions::kConditionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition_Expressions::RecordCondition_Expressions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordCondition.Expressions)
}
RecordCondition_Expressions::RecordCondition_Expressions(const RecordCondition_Expressions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logical_operator_ = from.logical_operator_;
  clear_has_type();
  switch (from.type_case()) {
    case kConditions: {
      mutable_conditions()->::google::privacy::dlp::v2::RecordCondition_Conditions::MergeFrom(from.conditions());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordCondition.Expressions)
}

void RecordCondition_Expressions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  logical_operator_ = 0;
  clear_has_type();
}

RecordCondition_Expressions::~RecordCondition_Expressions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordCondition.Expressions)
  SharedDtor();
}

void RecordCondition_Expressions::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void RecordCondition_Expressions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordCondition_Expressions& RecordCondition_Expressions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordCondition_Expressions_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RecordCondition_Expressions::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  switch (type_case()) {
    case kConditions: {
      delete type_.conditions_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RecordCondition_Expressions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_operator_ = 0;
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordCondition_Expressions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordCondition_Expressions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_logical_operator(static_cast<::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordCondition_Conditions::_InternalParse;
        object = msg->mutable_conditions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordCondition_Expressions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_logical_operator(static_cast< ::google::privacy::dlp::v2::RecordCondition_Expressions_LogicalOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordCondition.Expressions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordCondition.Expressions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordCondition_Expressions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  if (this->logical_operator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->logical_operator(), output);
  }

  // .google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
  if (has_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::conditions(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordCondition.Expressions)
}

::google::protobuf::uint8* RecordCondition_Expressions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  if (this->logical_operator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->logical_operator(), target);
  }

  // .google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
  if (has_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::conditions(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordCondition.Expressions)
  return target;
}

size_t RecordCondition_Expressions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
  if (this->logical_operator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logical_operator());
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
    case kConditions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.conditions_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordCondition_Expressions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition_Expressions* source =
      ::google::protobuf::DynamicCastToGenerated<RecordCondition_Expressions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordCondition.Expressions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordCondition.Expressions)
    MergeFrom(*source);
  }
}

void RecordCondition_Expressions::MergeFrom(const RecordCondition_Expressions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logical_operator() != 0) {
    set_logical_operator(from.logical_operator());
  }
  switch (from.type_case()) {
    case kConditions: {
      mutable_conditions()->::google::privacy::dlp::v2::RecordCondition_Conditions::MergeFrom(from.conditions());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RecordCondition_Expressions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition_Expressions::CopyFrom(const RecordCondition_Expressions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordCondition.Expressions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition_Expressions::IsInitialized() const {
  return true;
}

void RecordCondition_Expressions::Swap(RecordCondition_Expressions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition_Expressions::InternalSwap(RecordCondition_Expressions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logical_operator_, other->logical_operator_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata RecordCondition_Expressions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordCondition::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RecordCondition_default_instance_._instance.get_mutable()->expressions_ = const_cast< ::google::privacy::dlp::v2::RecordCondition_Expressions*>(
      ::google::privacy::dlp::v2::RecordCondition_Expressions::internal_default_instance());
}
class RecordCondition::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::RecordCondition_Expressions& expressions(const RecordCondition* msg);
};

const ::google::privacy::dlp::v2::RecordCondition_Expressions&
RecordCondition::HasBitSetters::expressions(const RecordCondition* msg) {
  return *msg->expressions_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCondition::kExpressionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCondition::RecordCondition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordCondition)
}
RecordCondition::RecordCondition(const RecordCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expressions()) {
    expressions_ = new ::google::privacy::dlp::v2::RecordCondition_Expressions(*from.expressions_);
  } else {
    expressions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordCondition)
}

void RecordCondition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  expressions_ = nullptr;
}

RecordCondition::~RecordCondition() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordCondition)
  SharedDtor();
}

void RecordCondition::SharedDtor() {
  if (this != internal_default_instance()) delete expressions_;
}

void RecordCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordCondition& RecordCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordCondition_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void RecordCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expressions_ != nullptr) {
    delete expressions_;
  }
  expressions_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordCondition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordCondition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordCondition_Expressions::_InternalParse;
        object = msg->mutable_expressions();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expressions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
  if (this->has_expressions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::expressions(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordCondition)
}

::google::protobuf::uint8* RecordCondition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
  if (this->has_expressions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::expressions(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordCondition)
  return target;
}

size_t RecordCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
  if (this->has_expressions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expressions_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCondition* source =
      ::google::protobuf::DynamicCastToGenerated<RecordCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordCondition)
    MergeFrom(*source);
  }
}

void RecordCondition::MergeFrom(const RecordCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expressions()) {
    mutable_expressions()->::google::privacy::dlp::v2::RecordCondition_Expressions::MergeFrom(from.expressions());
  }
}

void RecordCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCondition::CopyFrom(const RecordCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCondition::IsInitialized() const {
  return true;
}

void RecordCondition::Swap(RecordCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCondition::InternalSwap(RecordCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expressions_, other->expressions_);
}

::google::protobuf::Metadata RecordCondition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationOverview::InitAsDefaultInstance() {
}
class TransformationOverview::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationOverview::kTransformedBytesFieldNumber;
const int TransformationOverview::kTransformationSummariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationOverview::TransformationOverview()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TransformationOverview)
}
TransformationOverview::TransformationOverview(const TransformationOverview& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      transformation_summaries_(from.transformation_summaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transformed_bytes_ = from.transformed_bytes_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TransformationOverview)
}

void TransformationOverview::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  transformed_bytes_ = PROTOBUF_LONGLONG(0);
}

TransformationOverview::~TransformationOverview() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TransformationOverview)
  SharedDtor();
}

void TransformationOverview::SharedDtor() {
}

void TransformationOverview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationOverview& TransformationOverview::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationOverview_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TransformationOverview::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TransformationOverview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformation_summaries_.Clear();
  transformed_bytes_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationOverview::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationOverview*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 transformed_bytes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_transformed_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::TransformationSummary::_InternalParse;
          object = msg->add_transformation_summaries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationOverview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TransformationOverview)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 transformed_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transformed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transformation_summaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TransformationOverview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TransformationOverview)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationOverview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TransformationOverview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 transformed_bytes = 2;
  if (this->transformed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transformed_bytes(), output);
  }

  // repeated .google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformation_summaries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->transformation_summaries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TransformationOverview)
}

::google::protobuf::uint8* TransformationOverview::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TransformationOverview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 transformed_bytes = 2;
  if (this->transformed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transformed_bytes(), target);
  }

  // repeated .google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transformation_summaries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->transformation_summaries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TransformationOverview)
  return target;
}

size_t TransformationOverview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TransformationOverview)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->transformation_summaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transformation_summaries(static_cast<int>(i)));
    }
  }

  // int64 transformed_bytes = 2;
  if (this->transformed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transformed_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationOverview::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TransformationOverview)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationOverview* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationOverview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TransformationOverview)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TransformationOverview)
    MergeFrom(*source);
  }
}

void TransformationOverview::MergeFrom(const TransformationOverview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TransformationOverview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transformation_summaries_.MergeFrom(from.transformation_summaries_);
  if (from.transformed_bytes() != 0) {
    set_transformed_bytes(from.transformed_bytes());
  }
}

void TransformationOverview::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TransformationOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationOverview::CopyFrom(const TransformationOverview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TransformationOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationOverview::IsInitialized() const {
  return true;
}

void TransformationOverview::Swap(TransformationOverview* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationOverview::InternalSwap(TransformationOverview* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transformation_summaries_)->InternalSwap(CastToBase(&other->transformation_summaries_));
  swap(transformed_bytes_, other->transformed_bytes_);
}

::google::protobuf::Metadata TransformationOverview::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationSummary_SummaryResult::InitAsDefaultInstance() {
}
class TransformationSummary_SummaryResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationSummary_SummaryResult::kCountFieldNumber;
const int TransformationSummary_SummaryResult::kCodeFieldNumber;
const int TransformationSummary_SummaryResult::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationSummary_SummaryResult::TransformationSummary_SummaryResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
}
TransformationSummary_SummaryResult::TransformationSummary_SummaryResult(const TransformationSummary_SummaryResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.details().size() > 0) {
    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&count_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
}

void TransformationSummary_SummaryResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(code_));
}

TransformationSummary_SummaryResult::~TransformationSummary_SummaryResult() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  SharedDtor();
}

void TransformationSummary_SummaryResult::SharedDtor() {
  details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransformationSummary_SummaryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationSummary_SummaryResult& TransformationSummary_SummaryResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationSummary_SummaryResult_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TransformationSummary_SummaryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&count_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationSummary_SummaryResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationSummary_SummaryResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_code(static_cast<::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string details = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.TransformationSummary.SummaryResult.details");
        object = msg->mutable_details();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationSummary_SummaryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::google::privacy::dlp::v2::TransformationSummary_TransformationResultCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->details().data(), static_cast<int>(this->details().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.TransformationSummary.SummaryResult.details"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationSummary_SummaryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // .google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), static_cast<int>(this->details().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.TransformationSummary.SummaryResult.details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
}

::google::protobuf::uint8* TransformationSummary_SummaryResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // .google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // string details = 3;
  if (this->details().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->details().data(), static_cast<int>(this->details().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.TransformationSummary.SummaryResult.details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  return target;
}

size_t TransformationSummary_SummaryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string details = 3;
  if (this->details().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->details());
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // .google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationSummary_SummaryResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationSummary_SummaryResult* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationSummary_SummaryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
    MergeFrom(*source);
  }
}

void TransformationSummary_SummaryResult::MergeFrom(const TransformationSummary_SummaryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.details().size() > 0) {

    details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.details_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TransformationSummary_SummaryResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationSummary_SummaryResult::CopyFrom(const TransformationSummary_SummaryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TransformationSummary.SummaryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationSummary_SummaryResult::IsInitialized() const {
  return true;
}

void TransformationSummary_SummaryResult::Swap(TransformationSummary_SummaryResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationSummary_SummaryResult::InternalSwap(TransformationSummary_SummaryResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  details_.Swap(&other->details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(code_, other->code_);
}

::google::protobuf::Metadata TransformationSummary_SummaryResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TransformationSummary::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_TransformationSummary_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2::_TransformationSummary_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
  ::google::privacy::dlp::v2::_TransformationSummary_default_instance_._instance.get_mutable()->transformation_ = const_cast< ::google::privacy::dlp::v2::PrimitiveTransformation*>(
      ::google::privacy::dlp::v2::PrimitiveTransformation::internal_default_instance());
  ::google::privacy::dlp::v2::_TransformationSummary_default_instance_._instance.get_mutable()->record_suppress_ = const_cast< ::google::privacy::dlp::v2::RecordSuppression*>(
      ::google::privacy::dlp::v2::RecordSuppression::internal_default_instance());
}
class TransformationSummary::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InfoType& info_type(const TransformationSummary* msg);
  static const ::google::privacy::dlp::v2::FieldId& field(const TransformationSummary* msg);
  static const ::google::privacy::dlp::v2::PrimitiveTransformation& transformation(const TransformationSummary* msg);
  static const ::google::privacy::dlp::v2::RecordSuppression& record_suppress(const TransformationSummary* msg);
};

const ::google::privacy::dlp::v2::InfoType&
TransformationSummary::HasBitSetters::info_type(const TransformationSummary* msg) {
  return *msg->info_type_;
}
const ::google::privacy::dlp::v2::FieldId&
TransformationSummary::HasBitSetters::field(const TransformationSummary* msg) {
  return *msg->field_;
}
const ::google::privacy::dlp::v2::PrimitiveTransformation&
TransformationSummary::HasBitSetters::transformation(const TransformationSummary* msg) {
  return *msg->transformation_;
}
const ::google::privacy::dlp::v2::RecordSuppression&
TransformationSummary::HasBitSetters::record_suppress(const TransformationSummary* msg) {
  return *msg->record_suppress_;
}
void TransformationSummary::clear_info_type() {
  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
}
void TransformationSummary::clear_field() {
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransformationSummary::kInfoTypeFieldNumber;
const int TransformationSummary::kFieldFieldNumber;
const int TransformationSummary::kTransformationFieldNumber;
const int TransformationSummary::kFieldTransformationsFieldNumber;
const int TransformationSummary::kRecordSuppressFieldNumber;
const int TransformationSummary::kResultsFieldNumber;
const int TransformationSummary::kTransformedBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransformationSummary::TransformationSummary()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TransformationSummary)
}
TransformationSummary::TransformationSummary(const TransformationSummary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_),
      field_transformations_(from.field_transformations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2::InfoType(*from.info_type_);
  } else {
    info_type_ = nullptr;
  }
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  if (from.has_transformation()) {
    transformation_ = new ::google::privacy::dlp::v2::PrimitiveTransformation(*from.transformation_);
  } else {
    transformation_ = nullptr;
  }
  if (from.has_record_suppress()) {
    record_suppress_ = new ::google::privacy::dlp::v2::RecordSuppression(*from.record_suppress_);
  } else {
    record_suppress_ = nullptr;
  }
  transformed_bytes_ = from.transformed_bytes_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TransformationSummary)
}

void TransformationSummary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transformed_bytes_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(transformed_bytes_));
}

TransformationSummary::~TransformationSummary() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TransformationSummary)
  SharedDtor();
}

void TransformationSummary::SharedDtor() {
  if (this != internal_default_instance()) delete info_type_;
  if (this != internal_default_instance()) delete field_;
  if (this != internal_default_instance()) delete transformation_;
  if (this != internal_default_instance()) delete record_suppress_;
}

void TransformationSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransformationSummary& TransformationSummary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TransformationSummary_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void TransformationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TransformationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  field_transformations_.Clear();
  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transformation_ != nullptr) {
    delete transformation_;
  }
  transformation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && record_suppress_ != nullptr) {
    delete record_suppress_;
  }
  record_suppress_ = nullptr;
  transformed_bytes_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransformationSummary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TransformationSummary*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.FieldId field = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PrimitiveTransformation::_InternalParse;
        object = msg->mutable_transformation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::TransformationSummary_SummaryResult::_InternalParse;
          object = msg->add_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldTransformation::_InternalParse;
          object = msg->add_field_transformations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RecordSuppression::_InternalParse;
        object = msg->mutable_record_suppress();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 transformed_bytes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_transformed_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransformationSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TransformationSummary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transformation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_field_transformations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_record_suppress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 transformed_bytes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transformed_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TransformationSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TransformationSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransformationSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TransformationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info_type(this), output);
  }

  // .google.privacy.dlp.v2.FieldId field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::field(this), output);
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
  if (this->has_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::transformation(this), output);
  }

  // repeated .google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->results(static_cast<int>(i)),
      output);
  }

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->field_transformations(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
  if (this->has_record_suppress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::record_suppress(this), output);
  }

  // int64 transformed_bytes = 7;
  if (this->transformed_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->transformed_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TransformationSummary)
}

::google::protobuf::uint8* TransformationSummary::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TransformationSummary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info_type(this), target);
  }

  // .google.privacy.dlp.v2.FieldId field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::field(this), target);
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
  if (this->has_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::transformation(this), target);
  }

  // repeated .google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->results(static_cast<int>(i)), target);
  }

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_transformations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->field_transformations(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
  if (this->has_record_suppress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::record_suppress(this), target);
  }

  // int64 transformed_bytes = 7;
  if (this->transformed_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->transformed_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TransformationSummary)
  return target;
}

size_t TransformationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TransformationSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->field_transformations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->field_transformations(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_type_);
  }

  // .google.privacy.dlp.v2.FieldId field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  // .google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
  if (this->has_transformation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *transformation_);
  }

  // .google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
  if (this->has_record_suppress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *record_suppress_);
  }

  // int64 transformed_bytes = 7;
  if (this->transformed_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transformed_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransformationSummary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TransformationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const TransformationSummary* source =
      ::google::protobuf::DynamicCastToGenerated<TransformationSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TransformationSummary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TransformationSummary)
    MergeFrom(*source);
  }
}

void TransformationSummary::MergeFrom(const TransformationSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TransformationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  field_transformations_.MergeFrom(from.field_transformations_);
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
  }
  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
  if (from.has_transformation()) {
    mutable_transformation()->::google::privacy::dlp::v2::PrimitiveTransformation::MergeFrom(from.transformation());
  }
  if (from.has_record_suppress()) {
    mutable_record_suppress()->::google::privacy::dlp::v2::RecordSuppression::MergeFrom(from.record_suppress());
  }
  if (from.transformed_bytes() != 0) {
    set_transformed_bytes(from.transformed_bytes());
  }
}

void TransformationSummary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TransformationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformationSummary::CopyFrom(const TransformationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TransformationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationSummary::IsInitialized() const {
  return true;
}

void TransformationSummary::Swap(TransformationSummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransformationSummary::InternalSwap(TransformationSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  CastToBase(&field_transformations_)->InternalSwap(CastToBase(&other->field_transformations_));
  swap(info_type_, other->info_type_);
  swap(field_, other->field_);
  swap(transformation_, other->transformation_);
  swap(record_suppress_, other->record_suppress_);
  swap(transformed_bytes_, other->transformed_bytes_);
}

::google::protobuf::Metadata TransformationSummary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Schedule::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Schedule_default_instance_.recurrence_period_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class Schedule::HasBitSetters {
 public:
  static const ::google::protobuf::Duration& recurrence_period_duration(const Schedule* msg);
};

const ::google::protobuf::Duration&
Schedule::HasBitSetters::recurrence_period_duration(const Schedule* msg) {
  return *msg->option_.recurrence_period_duration_;
}
void Schedule::set_allocated_recurrence_period_duration(::google::protobuf::Duration* recurrence_period_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_option();
  if (recurrence_period_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(recurrence_period_duration)->GetArena();
    if (message_arena != submessage_arena) {
      recurrence_period_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recurrence_period_duration, submessage_arena);
    }
    set_has_recurrence_period_duration();
    option_.recurrence_period_duration_ = recurrence_period_duration;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Schedule.recurrence_period_duration)
}
void Schedule::clear_recurrence_period_duration() {
  if (has_recurrence_period_duration()) {
    delete option_.recurrence_period_duration_;
    clear_has_option();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule::kRecurrencePeriodDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule::Schedule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_option();
  switch (from.option_case()) {
    case kRecurrencePeriodDuration: {
      mutable_recurrence_period_duration()->::google::protobuf::Duration::MergeFrom(from.recurrence_period_duration());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Schedule)
}

void Schedule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Schedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_option();
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  if (has_option()) {
    clear_option();
  }
}

void Schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Schedule& Schedule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Schedule_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Schedule::clear_option() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.Schedule)
  switch (option_case()) {
    case kRecurrencePeriodDuration: {
      delete option_.recurrence_period_duration_;
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_option();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Schedule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Schedule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration recurrence_period_duration = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_recurrence_period_duration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Schedule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration recurrence_period_duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recurrence_period_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Schedule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration recurrence_period_duration = 1;
  if (has_recurrence_period_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::recurrence_period_duration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Schedule)
}

::google::protobuf::uint8* Schedule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration recurrence_period_duration = 1;
  if (has_recurrence_period_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::recurrence_period_duration(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Schedule)
  return target;
}

size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Schedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (option_case()) {
    // .google.protobuf.Duration recurrence_period_duration = 1;
    case kRecurrencePeriodDuration: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *option_.recurrence_period_duration_);
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::google::protobuf::DynamicCastToGenerated<Schedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Schedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.option_case()) {
    case kRecurrencePeriodDuration: {
      mutable_recurrence_period_duration()->::google::protobuf::Duration::MergeFrom(from.recurrence_period_duration());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(option_, other->option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Manual::InitAsDefaultInstance() {
}
class Manual::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Manual::Manual()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Manual)
}
Manual::Manual(const Manual& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Manual)
}

void Manual::SharedCtor() {
}

Manual::~Manual() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Manual)
  SharedDtor();
}

void Manual::SharedDtor() {
}

void Manual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Manual& Manual::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Manual_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Manual::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Manual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Manual::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Manual*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Manual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Manual)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Manual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Manual)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Manual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Manual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Manual)
}

::google::protobuf::uint8* Manual::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Manual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Manual)
  return target;
}

size_t Manual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Manual)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Manual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Manual)
  GOOGLE_DCHECK_NE(&from, this);
  const Manual* source =
      ::google::protobuf::DynamicCastToGenerated<Manual>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Manual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Manual)
    MergeFrom(*source);
  }
}

void Manual::MergeFrom(const Manual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Manual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Manual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Manual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Manual::CopyFrom(const Manual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Manual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Manual::IsInitialized() const {
  return true;
}

void Manual::Swap(Manual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Manual::InternalSwap(Manual* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Manual::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectTemplate::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectTemplate_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_InspectTemplate_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_InspectTemplate_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2::InspectConfig*>(
      ::google::privacy::dlp::v2::InspectConfig::internal_default_instance());
}
class InspectTemplate::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& create_time(const InspectTemplate* msg);
  static const ::google::protobuf::Timestamp& update_time(const InspectTemplate* msg);
  static const ::google::privacy::dlp::v2::InspectConfig& inspect_config(const InspectTemplate* msg);
};

const ::google::protobuf::Timestamp&
InspectTemplate::HasBitSetters::create_time(const InspectTemplate* msg) {
  return *msg->create_time_;
}
const ::google::protobuf::Timestamp&
InspectTemplate::HasBitSetters::update_time(const InspectTemplate* msg) {
  return *msg->update_time_;
}
const ::google::privacy::dlp::v2::InspectConfig&
InspectTemplate::HasBitSetters::inspect_config(const InspectTemplate* msg) {
  return *msg->inspect_config_;
}
void InspectTemplate::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void InspectTemplate::clear_update_time() {
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectTemplate::kNameFieldNumber;
const int InspectTemplate::kDisplayNameFieldNumber;
const int InspectTemplate::kDescriptionFieldNumber;
const int InspectTemplate::kCreateTimeFieldNumber;
const int InspectTemplate::kUpdateTimeFieldNumber;
const int InspectTemplate::kInspectConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectTemplate::InspectTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectTemplate)
}
InspectTemplate::InspectTemplate(const InspectTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectTemplate)
}

void InspectTemplate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inspect_config_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(inspect_config_));
}

InspectTemplate::~InspectTemplate() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectTemplate)
  SharedDtor();
}

void InspectTemplate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete inspect_config_;
}

void InspectTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectTemplate& InspectTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inspect_config_ != nullptr) {
    delete inspect_config_;
  }
  inspect_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InspectTemplate.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string display_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InspectTemplate.display_name");
        object = msg->mutable_display_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InspectTemplate.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_update_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InspectConfig inspect_config = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectConfig::_InternalParse;
        object = msg->mutable_inspect_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InspectTemplate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InspectTemplate.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InspectTemplate.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectConfig inspect_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectTemplate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectTemplate.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectTemplate.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::create_time(this), output);
  }

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::update_time(this), output);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 6;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::inspect_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectTemplate)
}

::google::protobuf::uint8* InspectTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectTemplate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectTemplate.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectTemplate.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::create_time(this), target);
  }

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::update_time(this), target);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 6;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::inspect_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectTemplate)
  return target;
}

size_t InspectTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 6;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<InspectTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectTemplate)
    MergeFrom(*source);
  }
}

void InspectTemplate::MergeFrom(const InspectTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void InspectTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectTemplate::CopyFrom(const InspectTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectTemplate::IsInitialized() const {
  return true;
}

void InspectTemplate::Swap(InspectTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectTemplate::InternalSwap(InspectTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(inspect_config_, other->inspect_config_);
}

::google::protobuf::Metadata InspectTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeidentifyTemplate::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DeidentifyTemplate_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_DeidentifyTemplate_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_DeidentifyTemplate_default_instance_._instance.get_mutable()->deidentify_config_ = const_cast< ::google::privacy::dlp::v2::DeidentifyConfig*>(
      ::google::privacy::dlp::v2::DeidentifyConfig::internal_default_instance());
}
class DeidentifyTemplate::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& create_time(const DeidentifyTemplate* msg);
  static const ::google::protobuf::Timestamp& update_time(const DeidentifyTemplate* msg);
  static const ::google::privacy::dlp::v2::DeidentifyConfig& deidentify_config(const DeidentifyTemplate* msg);
};

const ::google::protobuf::Timestamp&
DeidentifyTemplate::HasBitSetters::create_time(const DeidentifyTemplate* msg) {
  return *msg->create_time_;
}
const ::google::protobuf::Timestamp&
DeidentifyTemplate::HasBitSetters::update_time(const DeidentifyTemplate* msg) {
  return *msg->update_time_;
}
const ::google::privacy::dlp::v2::DeidentifyConfig&
DeidentifyTemplate::HasBitSetters::deidentify_config(const DeidentifyTemplate* msg) {
  return *msg->deidentify_config_;
}
void DeidentifyTemplate::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void DeidentifyTemplate::clear_update_time() {
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeidentifyTemplate::kNameFieldNumber;
const int DeidentifyTemplate::kDisplayNameFieldNumber;
const int DeidentifyTemplate::kDescriptionFieldNumber;
const int DeidentifyTemplate::kCreateTimeFieldNumber;
const int DeidentifyTemplate::kUpdateTimeFieldNumber;
const int DeidentifyTemplate::kDeidentifyConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeidentifyTemplate::DeidentifyTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeidentifyTemplate)
}
DeidentifyTemplate::DeidentifyTemplate(const DeidentifyTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from.has_deidentify_config()) {
    deidentify_config_ = new ::google::privacy::dlp::v2::DeidentifyConfig(*from.deidentify_config_);
  } else {
    deidentify_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeidentifyTemplate)
}

void DeidentifyTemplate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deidentify_config_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(deidentify_config_));
}

DeidentifyTemplate::~DeidentifyTemplate() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeidentifyTemplate)
  SharedDtor();
}

void DeidentifyTemplate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete deidentify_config_;
}

void DeidentifyTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeidentifyTemplate& DeidentifyTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeidentifyTemplate_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeidentifyTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeidentifyTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && deidentify_config_ != nullptr) {
    delete deidentify_config_;
  }
  deidentify_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeidentifyTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeidentifyTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeidentifyTemplate.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string display_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeidentifyTemplate.display_name");
        object = msg->mutable_display_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeidentifyTemplate.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_update_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DeidentifyConfig::_InternalParse;
        object = msg->mutable_deidentify_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeidentifyTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeidentifyTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeidentifyTemplate.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeidentifyTemplate.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeidentifyTemplate.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deidentify_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeidentifyTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeidentifyTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeidentifyTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeidentifyTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyTemplate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyTemplate.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyTemplate.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::create_time(this), output);
  }

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::update_time(this), output);
  }

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
  if (this->has_deidentify_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::deidentify_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeidentifyTemplate)
}

::google::protobuf::uint8* DeidentifyTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeidentifyTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyTemplate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyTemplate.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeidentifyTemplate.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::create_time(this), target);
  }

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::update_time(this), target);
  }

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
  if (this->has_deidentify_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::deidentify_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeidentifyTemplate)
  return target;
}

size_t DeidentifyTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeidentifyTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .google.protobuf.Timestamp create_time = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
  if (this->has_deidentify_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deidentify_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeidentifyTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeidentifyTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const DeidentifyTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<DeidentifyTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeidentifyTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeidentifyTemplate)
    MergeFrom(*source);
  }
}

void DeidentifyTemplate::MergeFrom(const DeidentifyTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeidentifyTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_deidentify_config()) {
    mutable_deidentify_config()->::google::privacy::dlp::v2::DeidentifyConfig::MergeFrom(from.deidentify_config());
  }
}

void DeidentifyTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeidentifyTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeidentifyTemplate::CopyFrom(const DeidentifyTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeidentifyTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeidentifyTemplate::IsInitialized() const {
  return true;
}

void DeidentifyTemplate::Swap(DeidentifyTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeidentifyTemplate::InternalSwap(DeidentifyTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(deidentify_config_, other->deidentify_config_);
}

::google::protobuf::Metadata DeidentifyTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Error::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Error_default_instance_._instance.get_mutable()->details_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class Error::HasBitSetters {
 public:
  static const ::google::rpc::Status& details(const Error* msg);
};

const ::google::rpc::Status&
Error::HasBitSetters::details(const Error* msg) {
  return *msg->details_;
}
void Error::clear_details() {
  if (GetArenaNoVirtual() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
void Error::clear_timestamps() {
  timestamps_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kDetailsFieldNumber;
const int Error::kTimestampsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      timestamps_(from.timestamps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::google::rpc::Status(*from.details_);
  } else {
    details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  details_ = nullptr;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (this != internal_default_instance()) delete details_;
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Error_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamps_.Clear();
  if (GetArenaNoVirtual() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Error::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Error*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status details = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::rpc::Status::_InternalParse;
        object = msg->mutable_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.protobuf.Timestamp timestamps = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
          object = msg->add_timestamps();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Timestamp timestamps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_timestamps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status details = 1;
  if (this->has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::details(this), output);
  }

  // repeated .google.protobuf.Timestamp timestamps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timestamps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->timestamps(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status details = 1;
  if (this->has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::details(this), target);
  }

  // repeated .google.protobuf.Timestamp timestamps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->timestamps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->timestamps(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Timestamp timestamps = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->timestamps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->timestamps(static_cast<int>(i)));
    }
  }

  // .google.rpc.Status details = 1;
  if (this->has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timestamps_.MergeFrom(from.timestamps_);
  if (from.has_details()) {
    mutable_details()->::google::rpc::Status::MergeFrom(from.details());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&timestamps_)->InternalSwap(CastToBase(&other->timestamps_));
  swap(details_, other->details_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JobTrigger_Trigger::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_JobTrigger_Trigger_default_instance_.schedule_ = const_cast< ::google::privacy::dlp::v2::Schedule*>(
      ::google::privacy::dlp::v2::Schedule::internal_default_instance());
  ::google::privacy::dlp::v2::_JobTrigger_Trigger_default_instance_.manual_ = const_cast< ::google::privacy::dlp::v2::Manual*>(
      ::google::privacy::dlp::v2::Manual::internal_default_instance());
}
class JobTrigger_Trigger::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Schedule& schedule(const JobTrigger_Trigger* msg);
  static const ::google::privacy::dlp::v2::Manual& manual(const JobTrigger_Trigger* msg);
};

const ::google::privacy::dlp::v2::Schedule&
JobTrigger_Trigger::HasBitSetters::schedule(const JobTrigger_Trigger* msg) {
  return *msg->trigger_.schedule_;
}
const ::google::privacy::dlp::v2::Manual&
JobTrigger_Trigger::HasBitSetters::manual(const JobTrigger_Trigger* msg) {
  return *msg->trigger_.manual_;
}
void JobTrigger_Trigger::set_allocated_schedule(::google::privacy::dlp::v2::Schedule* schedule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_trigger();
  if (schedule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schedule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schedule, submessage_arena);
    }
    set_has_schedule();
    trigger_.schedule_ = schedule;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.Trigger.schedule)
}
void JobTrigger_Trigger::set_allocated_manual(::google::privacy::dlp::v2::Manual* manual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_trigger();
  if (manual) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, manual, submessage_arena);
    }
    set_has_manual();
    trigger_.manual_ = manual;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.Trigger.manual)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobTrigger_Trigger::kScheduleFieldNumber;
const int JobTrigger_Trigger::kManualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobTrigger_Trigger::JobTrigger_Trigger()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.JobTrigger.Trigger)
}
JobTrigger_Trigger::JobTrigger_Trigger(const JobTrigger_Trigger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_trigger();
  switch (from.trigger_case()) {
    case kSchedule: {
      mutable_schedule()->::google::privacy::dlp::v2::Schedule::MergeFrom(from.schedule());
      break;
    }
    case kManual: {
      mutable_manual()->::google::privacy::dlp::v2::Manual::MergeFrom(from.manual());
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.JobTrigger.Trigger)
}

void JobTrigger_Trigger::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_trigger();
}

JobTrigger_Trigger::~JobTrigger_Trigger() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.JobTrigger.Trigger)
  SharedDtor();
}

void JobTrigger_Trigger::SharedDtor() {
  if (has_trigger()) {
    clear_trigger();
  }
}

void JobTrigger_Trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobTrigger_Trigger& JobTrigger_Trigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JobTrigger_Trigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void JobTrigger_Trigger::clear_trigger() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  switch (trigger_case()) {
    case kSchedule: {
      delete trigger_.schedule_;
      break;
    }
    case kManual: {
      delete trigger_.manual_;
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRIGGER_NOT_SET;
}


void JobTrigger_Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_trigger();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobTrigger_Trigger::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JobTrigger_Trigger*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Schedule schedule = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Schedule::_InternalParse;
        object = msg->mutable_schedule();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Manual manual = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Manual::_InternalParse;
        object = msg->mutable_manual();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobTrigger_Trigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Schedule schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Manual manual = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.JobTrigger.Trigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.JobTrigger.Trigger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobTrigger_Trigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Schedule schedule = 1;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::schedule(this), output);
  }

  // .google.privacy.dlp.v2.Manual manual = 2;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::manual(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.JobTrigger.Trigger)
}

::google::protobuf::uint8* JobTrigger_Trigger::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Schedule schedule = 1;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::schedule(this), target);
  }

  // .google.privacy.dlp.v2.Manual manual = 2;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::manual(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.JobTrigger.Trigger)
  return target;
}

size_t JobTrigger_Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (trigger_case()) {
    // .google.privacy.dlp.v2.Schedule schedule = 1;
    case kSchedule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trigger_.schedule_);
      break;
    }
    // .google.privacy.dlp.v2.Manual manual = 2;
    case kManual: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trigger_.manual_);
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobTrigger_Trigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const JobTrigger_Trigger* source =
      ::google::protobuf::DynamicCastToGenerated<JobTrigger_Trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.JobTrigger.Trigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.JobTrigger.Trigger)
    MergeFrom(*source);
  }
}

void JobTrigger_Trigger::MergeFrom(const JobTrigger_Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.trigger_case()) {
    case kSchedule: {
      mutable_schedule()->::google::privacy::dlp::v2::Schedule::MergeFrom(from.schedule());
      break;
    }
    case kManual: {
      mutable_manual()->::google::privacy::dlp::v2::Manual::MergeFrom(from.manual());
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
}

void JobTrigger_Trigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobTrigger_Trigger::CopyFrom(const JobTrigger_Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.JobTrigger.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobTrigger_Trigger::IsInitialized() const {
  return true;
}

void JobTrigger_Trigger::Swap(JobTrigger_Trigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobTrigger_Trigger::InternalSwap(JobTrigger_Trigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trigger_, other->trigger_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata JobTrigger_Trigger::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JobTrigger::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_JobTrigger_default_instance_.inspect_job_ = const_cast< ::google::privacy::dlp::v2::InspectJobConfig*>(
      ::google::privacy::dlp::v2::InspectJobConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_JobTrigger_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_JobTrigger_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_JobTrigger_default_instance_._instance.get_mutable()->last_run_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class JobTrigger::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectJobConfig& inspect_job(const JobTrigger* msg);
  static const ::google::protobuf::Timestamp& create_time(const JobTrigger* msg);
  static const ::google::protobuf::Timestamp& update_time(const JobTrigger* msg);
  static const ::google::protobuf::Timestamp& last_run_time(const JobTrigger* msg);
};

const ::google::privacy::dlp::v2::InspectJobConfig&
JobTrigger::HasBitSetters::inspect_job(const JobTrigger* msg) {
  return *msg->job_.inspect_job_;
}
const ::google::protobuf::Timestamp&
JobTrigger::HasBitSetters::create_time(const JobTrigger* msg) {
  return *msg->create_time_;
}
const ::google::protobuf::Timestamp&
JobTrigger::HasBitSetters::update_time(const JobTrigger* msg) {
  return *msg->update_time_;
}
const ::google::protobuf::Timestamp&
JobTrigger::HasBitSetters::last_run_time(const JobTrigger* msg) {
  return *msg->last_run_time_;
}
void JobTrigger::set_allocated_inspect_job(::google::privacy::dlp::v2::InspectJobConfig* inspect_job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_job();
  if (inspect_job) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inspect_job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_job, submessage_arena);
    }
    set_has_inspect_job();
    job_.inspect_job_ = inspect_job;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.JobTrigger.inspect_job)
}
void JobTrigger::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void JobTrigger::clear_update_time() {
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void JobTrigger::clear_last_run_time() {
  if (GetArenaNoVirtual() == nullptr && last_run_time_ != nullptr) {
    delete last_run_time_;
  }
  last_run_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobTrigger::kNameFieldNumber;
const int JobTrigger::kDisplayNameFieldNumber;
const int JobTrigger::kDescriptionFieldNumber;
const int JobTrigger::kInspectJobFieldNumber;
const int JobTrigger::kTriggersFieldNumber;
const int JobTrigger::kErrorsFieldNumber;
const int JobTrigger::kCreateTimeFieldNumber;
const int JobTrigger::kUpdateTimeFieldNumber;
const int JobTrigger::kLastRunTimeFieldNumber;
const int JobTrigger::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobTrigger::JobTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.JobTrigger)
}
JobTrigger::JobTrigger(const JobTrigger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      triggers_(from.triggers_),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from.has_last_run_time()) {
    last_run_time_ = new ::google::protobuf::Timestamp(*from.last_run_time_);
  } else {
    last_run_time_ = nullptr;
  }
  status_ = from.status_;
  clear_has_job();
  switch (from.job_case()) {
    case kInspectJob: {
      mutable_inspect_job()->::google::privacy::dlp::v2::InspectJobConfig::MergeFrom(from.inspect_job());
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.JobTrigger)
}

void JobTrigger::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(status_));
  clear_has_job();
}

JobTrigger::~JobTrigger() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.JobTrigger)
  SharedDtor();
}

void JobTrigger::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete last_run_time_;
  if (has_job()) {
    clear_job();
  }
}

void JobTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobTrigger& JobTrigger::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JobTrigger_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void JobTrigger::clear_job() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.JobTrigger)
  switch (job_case()) {
    case kInspectJob: {
      delete job_.inspect_job_;
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = JOB_NOT_SET;
}


void JobTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.JobTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triggers_.Clear();
  errors_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_run_time_ != nullptr) {
    delete last_run_time_;
  }
  last_run_time_ = nullptr;
  status_ = 0;
  clear_job();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JobTrigger::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JobTrigger*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.JobTrigger.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string display_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.JobTrigger.display_name");
        object = msg->mutable_display_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.JobTrigger.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectJobConfig::_InternalParse;
        object = msg->mutable_inspect_job();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::JobTrigger_Trigger::_InternalParse;
          object = msg->add_triggers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .google.privacy.dlp.v2.Error errors = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Error::_InternalParse;
          object = msg->add_errors();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_update_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp last_run_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_last_run_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.JobTrigger.Status status = 10 [(.google.api.field_behavior) = REQUIRED];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::google::privacy::dlp::v2::JobTrigger_Status>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JobTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.JobTrigger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.JobTrigger.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.JobTrigger.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.JobTrigger.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Error errors = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_run_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_run_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.JobTrigger.Status status = 10 [(.google.api.field_behavior) = REQUIRED];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::google::privacy::dlp::v2::JobTrigger_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.JobTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.JobTrigger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JobTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.JobTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.JobTrigger.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.JobTrigger.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.JobTrigger.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
  if (has_inspect_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::inspect_job(this), output);
  }

  // repeated .google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->triggers(static_cast<int>(i)),
      output);
  }

  // repeated .google.privacy.dlp.v2.Error errors = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->errors(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::create_time(this), output);
  }

  // .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::update_time(this), output);
  }

  // .google.protobuf.Timestamp last_run_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_last_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::last_run_time(this), output);
  }

  // .google.privacy.dlp.v2.JobTrigger.Status status = 10 [(.google.api.field_behavior) = REQUIRED];
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.JobTrigger)
}

::google::protobuf::uint8* JobTrigger::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.JobTrigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.JobTrigger.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.JobTrigger.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.JobTrigger.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
  if (has_inspect_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::inspect_job(this), target);
  }

  // repeated .google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->triggers(static_cast<int>(i)), target);
  }

  // repeated .google.privacy.dlp.v2.Error errors = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->errors(static_cast<int>(i)), target);
  }

  // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::create_time(this), target);
  }

  // .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::update_time(this), target);
  }

  // .google.protobuf.Timestamp last_run_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_last_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::last_run_time(this), target);
  }

  // .google.privacy.dlp.v2.JobTrigger.Status status = 10 [(.google.api.field_behavior) = REQUIRED];
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.JobTrigger)
  return target;
}

size_t JobTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.JobTrigger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->triggers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->triggers(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.Error errors = 6 [(.google.api.field_behavior) = OUTPUT_ONLY];
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .google.protobuf.Timestamp create_time = 7 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 8 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.Timestamp last_run_time = 9 [(.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->has_last_run_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_run_time_);
  }

  // .google.privacy.dlp.v2.JobTrigger.Status status = 10 [(.google.api.field_behavior) = REQUIRED];
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  switch (job_case()) {
    // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
    case kInspectJob: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *job_.inspect_job_);
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobTrigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.JobTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  const JobTrigger* source =
      ::google::protobuf::DynamicCastToGenerated<JobTrigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.JobTrigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.JobTrigger)
    MergeFrom(*source);
  }
}

void JobTrigger::MergeFrom(const JobTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.JobTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triggers_.MergeFrom(from.triggers_);
  errors_.MergeFrom(from.errors_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  if (from.has_last_run_time()) {
    mutable_last_run_time()->::google::protobuf::Timestamp::MergeFrom(from.last_run_time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  switch (from.job_case()) {
    case kInspectJob: {
      mutable_inspect_job()->::google::privacy::dlp::v2::InspectJobConfig::MergeFrom(from.inspect_job());
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
}

void JobTrigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.JobTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobTrigger::CopyFrom(const JobTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.JobTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobTrigger::IsInitialized() const {
  return true;
}

void JobTrigger::Swap(JobTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobTrigger::InternalSwap(JobTrigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&triggers_)->InternalSwap(CastToBase(&other->triggers_));
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(last_run_time_, other->last_run_time_);
  swap(status_, other->status_);
  swap(job_, other->job_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata JobTrigger::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Action_SaveFindings::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Action_SaveFindings_default_instance_._instance.get_mutable()->output_config_ = const_cast< ::google::privacy::dlp::v2::OutputStorageConfig*>(
      ::google::privacy::dlp::v2::OutputStorageConfig::internal_default_instance());
}
class Action_SaveFindings::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::OutputStorageConfig& output_config(const Action_SaveFindings* msg);
};

const ::google::privacy::dlp::v2::OutputStorageConfig&
Action_SaveFindings::HasBitSetters::output_config(const Action_SaveFindings* msg) {
  return *msg->output_config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action_SaveFindings::kOutputConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action_SaveFindings::Action_SaveFindings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Action.SaveFindings)
}
Action_SaveFindings::Action_SaveFindings(const Action_SaveFindings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output_config()) {
    output_config_ = new ::google::privacy::dlp::v2::OutputStorageConfig(*from.output_config_);
  } else {
    output_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Action.SaveFindings)
}

void Action_SaveFindings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Action_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  output_config_ = nullptr;
}

Action_SaveFindings::~Action_SaveFindings() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Action.SaveFindings)
  SharedDtor();
}

void Action_SaveFindings::SharedDtor() {
  if (this != internal_default_instance()) delete output_config_;
}

void Action_SaveFindings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action_SaveFindings& Action_SaveFindings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_SaveFindings_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Action_SaveFindings::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Action.SaveFindings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && output_config_ != nullptr) {
    delete output_config_;
  }
  output_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action_SaveFindings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action_SaveFindings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::OutputStorageConfig::_InternalParse;
        object = msg->mutable_output_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action_SaveFindings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Action.SaveFindings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Action.SaveFindings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Action.SaveFindings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action_SaveFindings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Action.SaveFindings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
  if (this->has_output_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::output_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Action.SaveFindings)
}

::google::protobuf::uint8* Action_SaveFindings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Action.SaveFindings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
  if (this->has_output_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::output_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Action.SaveFindings)
  return target;
}

size_t Action_SaveFindings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Action.SaveFindings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
  if (this->has_output_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action_SaveFindings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Action.SaveFindings)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_SaveFindings* source =
      ::google::protobuf::DynamicCastToGenerated<Action_SaveFindings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Action.SaveFindings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Action.SaveFindings)
    MergeFrom(*source);
  }
}

void Action_SaveFindings::MergeFrom(const Action_SaveFindings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Action.SaveFindings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_output_config()) {
    mutable_output_config()->::google::privacy::dlp::v2::OutputStorageConfig::MergeFrom(from.output_config());
  }
}

void Action_SaveFindings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Action.SaveFindings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_SaveFindings::CopyFrom(const Action_SaveFindings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Action.SaveFindings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_SaveFindings::IsInitialized() const {
  return true;
}

void Action_SaveFindings::Swap(Action_SaveFindings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action_SaveFindings::InternalSwap(Action_SaveFindings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(output_config_, other->output_config_);
}

::google::protobuf::Metadata Action_SaveFindings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Action_PublishToPubSub::InitAsDefaultInstance() {
}
class Action_PublishToPubSub::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action_PublishToPubSub::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action_PublishToPubSub::Action_PublishToPubSub()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Action.PublishToPubSub)
}
Action_PublishToPubSub::Action_PublishToPubSub(const Action_PublishToPubSub& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Action.PublishToPubSub)
}

void Action_PublishToPubSub::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Action_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Action_PublishToPubSub::~Action_PublishToPubSub() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Action.PublishToPubSub)
  SharedDtor();
}

void Action_PublishToPubSub::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Action_PublishToPubSub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action_PublishToPubSub& Action_PublishToPubSub::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_PublishToPubSub_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Action_PublishToPubSub::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action_PublishToPubSub::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action_PublishToPubSub*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Action.PublishToPubSub.topic");
        object = msg->mutable_topic();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action_PublishToPubSub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Action.PublishToPubSub.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Action.PublishToPubSub)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Action.PublishToPubSub)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action_PublishToPubSub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Action.PublishToPubSub.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Action.PublishToPubSub)
}

::google::protobuf::uint8* Action_PublishToPubSub::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Action.PublishToPubSub.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Action.PublishToPubSub)
  return target;
}

size_t Action_PublishToPubSub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action_PublishToPubSub::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_PublishToPubSub* source =
      ::google::protobuf::DynamicCastToGenerated<Action_PublishToPubSub>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Action.PublishToPubSub)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Action.PublishToPubSub)
    MergeFrom(*source);
  }
}

void Action_PublishToPubSub::MergeFrom(const Action_PublishToPubSub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
}

void Action_PublishToPubSub::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_PublishToPubSub::CopyFrom(const Action_PublishToPubSub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Action.PublishToPubSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_PublishToPubSub::IsInitialized() const {
  return true;
}

void Action_PublishToPubSub::Swap(Action_PublishToPubSub* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action_PublishToPubSub::InternalSwap(Action_PublishToPubSub* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Action_PublishToPubSub::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Action_PublishSummaryToCscc::InitAsDefaultInstance() {
}
class Action_PublishSummaryToCscc::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action_PublishSummaryToCscc::Action_PublishSummaryToCscc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
}
Action_PublishSummaryToCscc::Action_PublishSummaryToCscc(const Action_PublishSummaryToCscc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
}

void Action_PublishSummaryToCscc::SharedCtor() {
}

Action_PublishSummaryToCscc::~Action_PublishSummaryToCscc() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  SharedDtor();
}

void Action_PublishSummaryToCscc::SharedDtor() {
}

void Action_PublishSummaryToCscc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action_PublishSummaryToCscc& Action_PublishSummaryToCscc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_PublishSummaryToCscc_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Action_PublishSummaryToCscc::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action_PublishSummaryToCscc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action_PublishSummaryToCscc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action_PublishSummaryToCscc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action_PublishSummaryToCscc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
}

::google::protobuf::uint8* Action_PublishSummaryToCscc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  return target;
}

size_t Action_PublishSummaryToCscc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action_PublishSummaryToCscc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_PublishSummaryToCscc* source =
      ::google::protobuf::DynamicCastToGenerated<Action_PublishSummaryToCscc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
    MergeFrom(*source);
  }
}

void Action_PublishSummaryToCscc::MergeFrom(const Action_PublishSummaryToCscc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Action_PublishSummaryToCscc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_PublishSummaryToCscc::CopyFrom(const Action_PublishSummaryToCscc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Action.PublishSummaryToCscc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_PublishSummaryToCscc::IsInitialized() const {
  return true;
}

void Action_PublishSummaryToCscc::Swap(Action_PublishSummaryToCscc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action_PublishSummaryToCscc::InternalSwap(Action_PublishSummaryToCscc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action_PublishSummaryToCscc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Action_PublishFindingsToCloudDataCatalog::InitAsDefaultInstance() {
}
class Action_PublishFindingsToCloudDataCatalog::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action_PublishFindingsToCloudDataCatalog::Action_PublishFindingsToCloudDataCatalog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
}
Action_PublishFindingsToCloudDataCatalog::Action_PublishFindingsToCloudDataCatalog(const Action_PublishFindingsToCloudDataCatalog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
}

void Action_PublishFindingsToCloudDataCatalog::SharedCtor() {
}

Action_PublishFindingsToCloudDataCatalog::~Action_PublishFindingsToCloudDataCatalog() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  SharedDtor();
}

void Action_PublishFindingsToCloudDataCatalog::SharedDtor() {
}

void Action_PublishFindingsToCloudDataCatalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action_PublishFindingsToCloudDataCatalog& Action_PublishFindingsToCloudDataCatalog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_PublishFindingsToCloudDataCatalog_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Action_PublishFindingsToCloudDataCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action_PublishFindingsToCloudDataCatalog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action_PublishFindingsToCloudDataCatalog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action_PublishFindingsToCloudDataCatalog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action_PublishFindingsToCloudDataCatalog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
}

::google::protobuf::uint8* Action_PublishFindingsToCloudDataCatalog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  return target;
}

size_t Action_PublishFindingsToCloudDataCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action_PublishFindingsToCloudDataCatalog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_PublishFindingsToCloudDataCatalog* source =
      ::google::protobuf::DynamicCastToGenerated<Action_PublishFindingsToCloudDataCatalog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
    MergeFrom(*source);
  }
}

void Action_PublishFindingsToCloudDataCatalog::MergeFrom(const Action_PublishFindingsToCloudDataCatalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Action_PublishFindingsToCloudDataCatalog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_PublishFindingsToCloudDataCatalog::CopyFrom(const Action_PublishFindingsToCloudDataCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_PublishFindingsToCloudDataCatalog::IsInitialized() const {
  return true;
}

void Action_PublishFindingsToCloudDataCatalog::Swap(Action_PublishFindingsToCloudDataCatalog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action_PublishFindingsToCloudDataCatalog::InternalSwap(Action_PublishFindingsToCloudDataCatalog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action_PublishFindingsToCloudDataCatalog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Action_JobNotificationEmails::InitAsDefaultInstance() {
}
class Action_JobNotificationEmails::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action_JobNotificationEmails::Action_JobNotificationEmails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Action.JobNotificationEmails)
}
Action_JobNotificationEmails::Action_JobNotificationEmails(const Action_JobNotificationEmails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Action.JobNotificationEmails)
}

void Action_JobNotificationEmails::SharedCtor() {
}

Action_JobNotificationEmails::~Action_JobNotificationEmails() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Action.JobNotificationEmails)
  SharedDtor();
}

void Action_JobNotificationEmails::SharedDtor() {
}

void Action_JobNotificationEmails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action_JobNotificationEmails& Action_JobNotificationEmails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_JobNotificationEmails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Action_JobNotificationEmails::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action_JobNotificationEmails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action_JobNotificationEmails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action_JobNotificationEmails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Action.JobNotificationEmails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Action.JobNotificationEmails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action_JobNotificationEmails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Action.JobNotificationEmails)
}

::google::protobuf::uint8* Action_JobNotificationEmails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Action.JobNotificationEmails)
  return target;
}

size_t Action_JobNotificationEmails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action_JobNotificationEmails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_JobNotificationEmails* source =
      ::google::protobuf::DynamicCastToGenerated<Action_JobNotificationEmails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Action.JobNotificationEmails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Action.JobNotificationEmails)
    MergeFrom(*source);
  }
}

void Action_JobNotificationEmails::MergeFrom(const Action_JobNotificationEmails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Action_JobNotificationEmails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_JobNotificationEmails::CopyFrom(const Action_JobNotificationEmails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Action.JobNotificationEmails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_JobNotificationEmails::IsInitialized() const {
  return true;
}

void Action_JobNotificationEmails::Swap(Action_JobNotificationEmails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action_JobNotificationEmails::InternalSwap(Action_JobNotificationEmails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action_JobNotificationEmails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Action_PublishToStackdriver::InitAsDefaultInstance() {
}
class Action_PublishToStackdriver::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action_PublishToStackdriver::Action_PublishToStackdriver()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Action.PublishToStackdriver)
}
Action_PublishToStackdriver::Action_PublishToStackdriver(const Action_PublishToStackdriver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Action.PublishToStackdriver)
}

void Action_PublishToStackdriver::SharedCtor() {
}

Action_PublishToStackdriver::~Action_PublishToStackdriver() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Action.PublishToStackdriver)
  SharedDtor();
}

void Action_PublishToStackdriver::SharedDtor() {
}

void Action_PublishToStackdriver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action_PublishToStackdriver& Action_PublishToStackdriver::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_PublishToStackdriver_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Action_PublishToStackdriver::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action_PublishToStackdriver::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action_PublishToStackdriver*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action_PublishToStackdriver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Action.PublishToStackdriver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Action.PublishToStackdriver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action_PublishToStackdriver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Action.PublishToStackdriver)
}

::google::protobuf::uint8* Action_PublishToStackdriver::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Action.PublishToStackdriver)
  return target;
}

size_t Action_PublishToStackdriver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action_PublishToStackdriver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  GOOGLE_DCHECK_NE(&from, this);
  const Action_PublishToStackdriver* source =
      ::google::protobuf::DynamicCastToGenerated<Action_PublishToStackdriver>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Action.PublishToStackdriver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Action.PublishToStackdriver)
    MergeFrom(*source);
  }
}

void Action_PublishToStackdriver::MergeFrom(const Action_PublishToStackdriver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Action_PublishToStackdriver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_PublishToStackdriver::CopyFrom(const Action_PublishToStackdriver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Action.PublishToStackdriver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_PublishToStackdriver::IsInitialized() const {
  return true;
}

void Action_PublishToStackdriver::Swap(Action_PublishToStackdriver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action_PublishToStackdriver::InternalSwap(Action_PublishToStackdriver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action_PublishToStackdriver::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Action::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Action_default_instance_.save_findings_ = const_cast< ::google::privacy::dlp::v2::Action_SaveFindings*>(
      ::google::privacy::dlp::v2::Action_SaveFindings::internal_default_instance());
  ::google::privacy::dlp::v2::_Action_default_instance_.pub_sub_ = const_cast< ::google::privacy::dlp::v2::Action_PublishToPubSub*>(
      ::google::privacy::dlp::v2::Action_PublishToPubSub::internal_default_instance());
  ::google::privacy::dlp::v2::_Action_default_instance_.publish_summary_to_cscc_ = const_cast< ::google::privacy::dlp::v2::Action_PublishSummaryToCscc*>(
      ::google::privacy::dlp::v2::Action_PublishSummaryToCscc::internal_default_instance());
  ::google::privacy::dlp::v2::_Action_default_instance_.publish_findings_to_cloud_data_catalog_ = const_cast< ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog*>(
      ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog::internal_default_instance());
  ::google::privacy::dlp::v2::_Action_default_instance_.job_notification_emails_ = const_cast< ::google::privacy::dlp::v2::Action_JobNotificationEmails*>(
      ::google::privacy::dlp::v2::Action_JobNotificationEmails::internal_default_instance());
  ::google::privacy::dlp::v2::_Action_default_instance_.publish_to_stackdriver_ = const_cast< ::google::privacy::dlp::v2::Action_PublishToStackdriver*>(
      ::google::privacy::dlp::v2::Action_PublishToStackdriver::internal_default_instance());
}
class Action::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Action_SaveFindings& save_findings(const Action* msg);
  static const ::google::privacy::dlp::v2::Action_PublishToPubSub& pub_sub(const Action* msg);
  static const ::google::privacy::dlp::v2::Action_PublishSummaryToCscc& publish_summary_to_cscc(const Action* msg);
  static const ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog& publish_findings_to_cloud_data_catalog(const Action* msg);
  static const ::google::privacy::dlp::v2::Action_JobNotificationEmails& job_notification_emails(const Action* msg);
  static const ::google::privacy::dlp::v2::Action_PublishToStackdriver& publish_to_stackdriver(const Action* msg);
};

const ::google::privacy::dlp::v2::Action_SaveFindings&
Action::HasBitSetters::save_findings(const Action* msg) {
  return *msg->action_.save_findings_;
}
const ::google::privacy::dlp::v2::Action_PublishToPubSub&
Action::HasBitSetters::pub_sub(const Action* msg) {
  return *msg->action_.pub_sub_;
}
const ::google::privacy::dlp::v2::Action_PublishSummaryToCscc&
Action::HasBitSetters::publish_summary_to_cscc(const Action* msg) {
  return *msg->action_.publish_summary_to_cscc_;
}
const ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog&
Action::HasBitSetters::publish_findings_to_cloud_data_catalog(const Action* msg) {
  return *msg->action_.publish_findings_to_cloud_data_catalog_;
}
const ::google::privacy::dlp::v2::Action_JobNotificationEmails&
Action::HasBitSetters::job_notification_emails(const Action* msg) {
  return *msg->action_.job_notification_emails_;
}
const ::google::privacy::dlp::v2::Action_PublishToStackdriver&
Action::HasBitSetters::publish_to_stackdriver(const Action* msg) {
  return *msg->action_.publish_to_stackdriver_;
}
void Action::set_allocated_save_findings(::google::privacy::dlp::v2::Action_SaveFindings* save_findings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (save_findings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      save_findings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save_findings, submessage_arena);
    }
    set_has_save_findings();
    action_.save_findings_ = save_findings;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.save_findings)
}
void Action::set_allocated_pub_sub(::google::privacy::dlp::v2::Action_PublishToPubSub* pub_sub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (pub_sub) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pub_sub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pub_sub, submessage_arena);
    }
    set_has_pub_sub();
    action_.pub_sub_ = pub_sub;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.pub_sub)
}
void Action::set_allocated_publish_summary_to_cscc(::google::privacy::dlp::v2::Action_PublishSummaryToCscc* publish_summary_to_cscc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (publish_summary_to_cscc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publish_summary_to_cscc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_summary_to_cscc, submessage_arena);
    }
    set_has_publish_summary_to_cscc();
    action_.publish_summary_to_cscc_ = publish_summary_to_cscc;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.publish_summary_to_cscc)
}
void Action::set_allocated_publish_findings_to_cloud_data_catalog(::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog* publish_findings_to_cloud_data_catalog) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (publish_findings_to_cloud_data_catalog) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publish_findings_to_cloud_data_catalog = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_findings_to_cloud_data_catalog, submessage_arena);
    }
    set_has_publish_findings_to_cloud_data_catalog();
    action_.publish_findings_to_cloud_data_catalog_ = publish_findings_to_cloud_data_catalog;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.publish_findings_to_cloud_data_catalog)
}
void Action::set_allocated_job_notification_emails(::google::privacy::dlp::v2::Action_JobNotificationEmails* job_notification_emails) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (job_notification_emails) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      job_notification_emails = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job_notification_emails, submessage_arena);
    }
    set_has_job_notification_emails();
    action_.job_notification_emails_ = job_notification_emails;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.job_notification_emails)
}
void Action::set_allocated_publish_to_stackdriver(::google::privacy::dlp::v2::Action_PublishToStackdriver* publish_to_stackdriver) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (publish_to_stackdriver) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publish_to_stackdriver = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_to_stackdriver, submessage_arena);
    }
    set_has_publish_to_stackdriver();
    action_.publish_to_stackdriver_ = publish_to_stackdriver;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.Action.publish_to_stackdriver)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kSaveFindingsFieldNumber;
const int Action::kPubSubFieldNumber;
const int Action::kPublishSummaryToCsccFieldNumber;
const int Action::kPublishFindingsToCloudDataCatalogFieldNumber;
const int Action::kJobNotificationEmailsFieldNumber;
const int Action::kPublishToStackdriverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kSaveFindings: {
      mutable_save_findings()->::google::privacy::dlp::v2::Action_SaveFindings::MergeFrom(from.save_findings());
      break;
    }
    case kPubSub: {
      mutable_pub_sub()->::google::privacy::dlp::v2::Action_PublishToPubSub::MergeFrom(from.pub_sub());
      break;
    }
    case kPublishSummaryToCscc: {
      mutable_publish_summary_to_cscc()->::google::privacy::dlp::v2::Action_PublishSummaryToCscc::MergeFrom(from.publish_summary_to_cscc());
      break;
    }
    case kPublishFindingsToCloudDataCatalog: {
      mutable_publish_findings_to_cloud_data_catalog()->::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog::MergeFrom(from.publish_findings_to_cloud_data_catalog());
      break;
    }
    case kJobNotificationEmails: {
      mutable_job_notification_emails()->::google::privacy::dlp::v2::Action_JobNotificationEmails::MergeFrom(from.job_notification_emails());
      break;
    }
    case kPublishToStackdriver: {
      mutable_publish_to_stackdriver()->::google::privacy::dlp::v2::Action_PublishToStackdriver::MergeFrom(from.publish_to_stackdriver());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Action)
}

void Action::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Action_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_action();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Action_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void Action::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.Action)
  switch (action_case()) {
    case kSaveFindings: {
      delete action_.save_findings_;
      break;
    }
    case kPubSub: {
      delete action_.pub_sub_;
      break;
    }
    case kPublishSummaryToCscc: {
      delete action_.publish_summary_to_cscc_;
      break;
    }
    case kPublishFindingsToCloudDataCatalog: {
      delete action_.publish_findings_to_cloud_data_catalog_;
      break;
    }
    case kJobNotificationEmails: {
      delete action_.job_notification_emails_;
      break;
    }
    case kPublishToStackdriver: {
      delete action_.publish_to_stackdriver_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Action*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Action_SaveFindings::_InternalParse;
        object = msg->mutable_save_findings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Action_PublishToPubSub::_InternalParse;
        object = msg->mutable_pub_sub();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Action_PublishSummaryToCscc::_InternalParse;
        object = msg->mutable_publish_summary_to_cscc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog publish_findings_to_cloud_data_catalog = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog::_InternalParse;
        object = msg->mutable_publish_findings_to_cloud_data_catalog();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Action.JobNotificationEmails job_notification_emails = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Action_JobNotificationEmails::_InternalParse;
        object = msg->mutable_job_notification_emails();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Action.PublishToStackdriver publish_to_stackdriver = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Action_PublishToStackdriver::_InternalParse;
        object = msg->mutable_publish_to_stackdriver();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Action)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save_findings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pub_sub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publish_summary_to_cscc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog publish_findings_to_cloud_data_catalog = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publish_findings_to_cloud_data_catalog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Action.JobNotificationEmails job_notification_emails = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job_notification_emails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Action.PublishToStackdriver publish_to_stackdriver = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publish_to_stackdriver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Action)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
  if (has_save_findings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::save_findings(this), output);
  }

  // .google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
  if (has_pub_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pub_sub(this), output);
  }

  // .google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
  if (has_publish_summary_to_cscc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::publish_summary_to_cscc(this), output);
  }

  // .google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog publish_findings_to_cloud_data_catalog = 5;
  if (has_publish_findings_to_cloud_data_catalog()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::publish_findings_to_cloud_data_catalog(this), output);
  }

  // .google.privacy.dlp.v2.Action.JobNotificationEmails job_notification_emails = 8;
  if (has_job_notification_emails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::job_notification_emails(this), output);
  }

  // .google.privacy.dlp.v2.Action.PublishToStackdriver publish_to_stackdriver = 9;
  if (has_publish_to_stackdriver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::publish_to_stackdriver(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
  if (has_save_findings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::save_findings(this), target);
  }

  // .google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
  if (has_pub_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pub_sub(this), target);
  }

  // .google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
  if (has_publish_summary_to_cscc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::publish_summary_to_cscc(this), target);
  }

  // .google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog publish_findings_to_cloud_data_catalog = 5;
  if (has_publish_findings_to_cloud_data_catalog()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::publish_findings_to_cloud_data_catalog(this), target);
  }

  // .google.privacy.dlp.v2.Action.JobNotificationEmails job_notification_emails = 8;
  if (has_job_notification_emails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::job_notification_emails(this), target);
  }

  // .google.privacy.dlp.v2.Action.PublishToStackdriver publish_to_stackdriver = 9;
  if (has_publish_to_stackdriver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::publish_to_stackdriver(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
    case kSaveFindings: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.save_findings_);
      break;
    }
    // .google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
    case kPubSub: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.pub_sub_);
      break;
    }
    // .google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
    case kPublishSummaryToCscc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.publish_summary_to_cscc_);
      break;
    }
    // .google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog publish_findings_to_cloud_data_catalog = 5;
    case kPublishFindingsToCloudDataCatalog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.publish_findings_to_cloud_data_catalog_);
      break;
    }
    // .google.privacy.dlp.v2.Action.JobNotificationEmails job_notification_emails = 8;
    case kJobNotificationEmails: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.job_notification_emails_);
      break;
    }
    // .google.privacy.dlp.v2.Action.PublishToStackdriver publish_to_stackdriver = 9;
    case kPublishToStackdriver: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.publish_to_stackdriver_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kSaveFindings: {
      mutable_save_findings()->::google::privacy::dlp::v2::Action_SaveFindings::MergeFrom(from.save_findings());
      break;
    }
    case kPubSub: {
      mutable_pub_sub()->::google::privacy::dlp::v2::Action_PublishToPubSub::MergeFrom(from.pub_sub());
      break;
    }
    case kPublishSummaryToCscc: {
      mutable_publish_summary_to_cscc()->::google::privacy::dlp::v2::Action_PublishSummaryToCscc::MergeFrom(from.publish_summary_to_cscc());
      break;
    }
    case kPublishFindingsToCloudDataCatalog: {
      mutable_publish_findings_to_cloud_data_catalog()->::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog::MergeFrom(from.publish_findings_to_cloud_data_catalog());
      break;
    }
    case kJobNotificationEmails: {
      mutable_job_notification_emails()->::google::privacy::dlp::v2::Action_JobNotificationEmails::MergeFrom(from.job_notification_emails());
      break;
    }
    case kPublishToStackdriver: {
      mutable_publish_to_stackdriver()->::google::privacy::dlp::v2::Action_PublishToStackdriver::MergeFrom(from.publish_to_stackdriver());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateInspectTemplateRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CreateInspectTemplateRequest_default_instance_._instance.get_mutable()->inspect_template_ = const_cast< ::google::privacy::dlp::v2::InspectTemplate*>(
      ::google::privacy::dlp::v2::InspectTemplate::internal_default_instance());
}
class CreateInspectTemplateRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectTemplate& inspect_template(const CreateInspectTemplateRequest* msg);
};

const ::google::privacy::dlp::v2::InspectTemplate&
CreateInspectTemplateRequest::HasBitSetters::inspect_template(const CreateInspectTemplateRequest* msg) {
  return *msg->inspect_template_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateInspectTemplateRequest::kParentFieldNumber;
const int CreateInspectTemplateRequest::kInspectTemplateFieldNumber;
const int CreateInspectTemplateRequest::kTemplateIdFieldNumber;
const int CreateInspectTemplateRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateInspectTemplateRequest::CreateInspectTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CreateInspectTemplateRequest)
}
CreateInspectTemplateRequest::CreateInspectTemplateRequest(const CreateInspectTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.template_id().size() > 0) {
    template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template_id_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_inspect_template()) {
    inspect_template_ = new ::google::privacy::dlp::v2::InspectTemplate(*from.inspect_template_);
  } else {
    inspect_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CreateInspectTemplateRequest)
}

void CreateInspectTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inspect_template_ = nullptr;
}

CreateInspectTemplateRequest::~CreateInspectTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  SharedDtor();
}

void CreateInspectTemplateRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inspect_template_;
}

void CreateInspectTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateInspectTemplateRequest& CreateInspectTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CreateInspectTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && inspect_template_ != nullptr) {
    delete inspect_template_;
  }
  inspect_template_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateInspectTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateInspectTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateInspectTemplateRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectTemplate::_InternalParse;
        object = msg->mutable_inspect_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string template_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id");
        object = msg->mutable_template_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateInspectTemplateRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateInspectTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateInspectTemplateRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string template_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->template_id().data(), static_cast<int>(this->template_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateInspectTemplateRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateInspectTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateInspectTemplateRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_inspect_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inspect_template(this), output);
  }

  // string template_id = 3;
  if (this->template_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_id().data(), static_cast<int>(this->template_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_id(), output);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateInspectTemplateRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CreateInspectTemplateRequest)
}

::google::protobuf::uint8* CreateInspectTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateInspectTemplateRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_inspect_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inspect_template(this), target);
  }

  // string template_id = 3;
  if (this->template_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_id().data(), static_cast<int>(this->template_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateInspectTemplateRequest.template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_id(), target);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateInspectTemplateRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  return target;
}

size_t CreateInspectTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string template_id = 3;
  if (this->template_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->template_id());
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_inspect_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_template_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateInspectTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateInspectTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateInspectTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CreateInspectTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CreateInspectTemplateRequest)
    MergeFrom(*source);
  }
}

void CreateInspectTemplateRequest::MergeFrom(const CreateInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.template_id().size() > 0) {

    template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template_id_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_inspect_template()) {
    mutable_inspect_template()->::google::privacy::dlp::v2::InspectTemplate::MergeFrom(from.inspect_template());
  }
}

void CreateInspectTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateInspectTemplateRequest::CopyFrom(const CreateInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CreateInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateInspectTemplateRequest::IsInitialized() const {
  return true;
}

void CreateInspectTemplateRequest::Swap(CreateInspectTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateInspectTemplateRequest::InternalSwap(CreateInspectTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  template_id_.Swap(&other->template_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inspect_template_, other->inspect_template_);
}

::google::protobuf::Metadata CreateInspectTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateInspectTemplateRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_UpdateInspectTemplateRequest_default_instance_._instance.get_mutable()->inspect_template_ = const_cast< ::google::privacy::dlp::v2::InspectTemplate*>(
      ::google::privacy::dlp::v2::InspectTemplate::internal_default_instance());
  ::google::privacy::dlp::v2::_UpdateInspectTemplateRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
class UpdateInspectTemplateRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectTemplate& inspect_template(const UpdateInspectTemplateRequest* msg);
  static const ::google::protobuf::FieldMask& update_mask(const UpdateInspectTemplateRequest* msg);
};

const ::google::privacy::dlp::v2::InspectTemplate&
UpdateInspectTemplateRequest::HasBitSetters::inspect_template(const UpdateInspectTemplateRequest* msg) {
  return *msg->inspect_template_;
}
const ::google::protobuf::FieldMask&
UpdateInspectTemplateRequest::HasBitSetters::update_mask(const UpdateInspectTemplateRequest* msg) {
  return *msg->update_mask_;
}
void UpdateInspectTemplateRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateInspectTemplateRequest::kNameFieldNumber;
const int UpdateInspectTemplateRequest::kInspectTemplateFieldNumber;
const int UpdateInspectTemplateRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateInspectTemplateRequest::UpdateInspectTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
}
UpdateInspectTemplateRequest::UpdateInspectTemplateRequest(const UpdateInspectTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_inspect_template()) {
    inspect_template_ = new ::google::privacy::dlp::v2::InspectTemplate(*from.inspect_template_);
  } else {
    inspect_template_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
}

void UpdateInspectTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inspect_template_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&inspect_template_)) + sizeof(update_mask_));
}

UpdateInspectTemplateRequest::~UpdateInspectTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  SharedDtor();
}

void UpdateInspectTemplateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inspect_template_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateInspectTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateInspectTemplateRequest& UpdateInspectTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void UpdateInspectTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && inspect_template_ != nullptr) {
    delete inspect_template_;
  }
  inspect_template_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateInspectTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateInspectTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.UpdateInspectTemplateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectTemplate::_InternalParse;
        object = msg->mutable_inspect_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FieldMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateInspectTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.UpdateInspectTemplateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateInspectTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateInspectTemplateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
  if (this->has_inspect_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inspect_template(this), output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::update_mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
}

::google::protobuf::uint8* UpdateInspectTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateInspectTemplateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
  if (this->has_inspect_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inspect_template(this), target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::update_mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  return target;
}

size_t UpdateInspectTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
  if (this->has_inspect_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_template_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateInspectTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateInspectTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateInspectTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
    MergeFrom(*source);
  }
}

void UpdateInspectTemplateRequest::MergeFrom(const UpdateInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_inspect_template()) {
    mutable_inspect_template()->::google::privacy::dlp::v2::InspectTemplate::MergeFrom(from.inspect_template());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateInspectTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateInspectTemplateRequest::CopyFrom(const UpdateInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.UpdateInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInspectTemplateRequest::IsInitialized() const {
  return true;
}

void UpdateInspectTemplateRequest::Swap(UpdateInspectTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateInspectTemplateRequest::InternalSwap(UpdateInspectTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inspect_template_, other->inspect_template_);
  swap(update_mask_, other->update_mask_);
}

::google::protobuf::Metadata UpdateInspectTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetInspectTemplateRequest::InitAsDefaultInstance() {
}
class GetInspectTemplateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInspectTemplateRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInspectTemplateRequest::GetInspectTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.GetInspectTemplateRequest)
}
GetInspectTemplateRequest::GetInspectTemplateRequest(const GetInspectTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.GetInspectTemplateRequest)
}

void GetInspectTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetInspectTemplateRequest::~GetInspectTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.GetInspectTemplateRequest)
  SharedDtor();
}

void GetInspectTemplateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInspectTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInspectTemplateRequest& GetInspectTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void GetInspectTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInspectTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetInspectTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.GetInspectTemplateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInspectTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.GetInspectTemplateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.GetInspectTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.GetInspectTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInspectTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetInspectTemplateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.GetInspectTemplateRequest)
}

::google::protobuf::uint8* GetInspectTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetInspectTemplateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.GetInspectTemplateRequest)
  return target;
}

size_t GetInspectTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInspectTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInspectTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetInspectTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.GetInspectTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.GetInspectTemplateRequest)
    MergeFrom(*source);
  }
}

void GetInspectTemplateRequest::MergeFrom(const GetInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetInspectTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInspectTemplateRequest::CopyFrom(const GetInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.GetInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInspectTemplateRequest::IsInitialized() const {
  return true;
}

void GetInspectTemplateRequest::Swap(GetInspectTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInspectTemplateRequest::InternalSwap(GetInspectTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetInspectTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListInspectTemplatesRequest::InitAsDefaultInstance() {
}
class ListInspectTemplatesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectTemplatesRequest::kParentFieldNumber;
const int ListInspectTemplatesRequest::kPageTokenFieldNumber;
const int ListInspectTemplatesRequest::kPageSizeFieldNumber;
const int ListInspectTemplatesRequest::kOrderByFieldNumber;
const int ListInspectTemplatesRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectTemplatesRequest::ListInspectTemplatesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListInspectTemplatesRequest)
}
ListInspectTemplatesRequest::ListInspectTemplatesRequest(const ListInspectTemplatesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_by().size() > 0) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListInspectTemplatesRequest)
}

void ListInspectTemplatesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListInspectTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListInspectTemplatesRequest::~ListInspectTemplatesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  SharedDtor();
}

void ListInspectTemplatesRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInspectTemplatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInspectTemplatesRequest& ListInspectTemplatesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListInspectTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListInspectTemplatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListInspectTemplatesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListInspectTemplatesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInspectTemplatesRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string order_by = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInspectTemplatesRequest.order_by");
        object = msg->mutable_order_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInspectTemplatesRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListInspectTemplatesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInspectTemplatesRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_by = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), static_cast<int>(this->order_by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInspectTemplatesRequest.order_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInspectTemplatesRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListInspectTemplatesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_by(), output);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListInspectTemplatesRequest)
}

::google::protobuf::uint8* ListInspectTemplatesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_by(), target);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  return target;
}

size_t ListInspectTemplatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInspectTemplatesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectTemplatesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListInspectTemplatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListInspectTemplatesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListInspectTemplatesRequest)
    MergeFrom(*source);
  }
}

void ListInspectTemplatesRequest::MergeFrom(const ListInspectTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListInspectTemplatesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectTemplatesRequest::CopyFrom(const ListInspectTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListInspectTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectTemplatesRequest::IsInitialized() const {
  return true;
}

void ListInspectTemplatesRequest::Swap(ListInspectTemplatesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectTemplatesRequest::InternalSwap(ListInspectTemplatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_by_.Swap(&other->order_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListInspectTemplatesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListInspectTemplatesResponse::InitAsDefaultInstance() {
}
class ListInspectTemplatesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListInspectTemplatesResponse::kInspectTemplatesFieldNumber;
const int ListInspectTemplatesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListInspectTemplatesResponse::ListInspectTemplatesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListInspectTemplatesResponse)
}
ListInspectTemplatesResponse::ListInspectTemplatesResponse(const ListInspectTemplatesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      inspect_templates_(from.inspect_templates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListInspectTemplatesResponse)
}

void ListInspectTemplatesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListInspectTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListInspectTemplatesResponse::~ListInspectTemplatesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  SharedDtor();
}

void ListInspectTemplatesResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListInspectTemplatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInspectTemplatesResponse& ListInspectTemplatesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListInspectTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListInspectTemplatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inspect_templates_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListInspectTemplatesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListInspectTemplatesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::InspectTemplate::_InternalParse;
          object = msg->add_inspect_templates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListInspectTemplatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inspect_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListInspectTemplatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inspect_templates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->inspect_templates(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListInspectTemplatesResponse)
}

::google::protobuf::uint8* ListInspectTemplatesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inspect_templates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->inspect_templates(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListInspectTemplatesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  return target;
}

size_t ListInspectTemplatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inspect_templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inspect_templates(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInspectTemplatesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInspectTemplatesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListInspectTemplatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListInspectTemplatesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListInspectTemplatesResponse)
    MergeFrom(*source);
  }
}

void ListInspectTemplatesResponse::MergeFrom(const ListInspectTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inspect_templates_.MergeFrom(from.inspect_templates_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListInspectTemplatesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInspectTemplatesResponse::CopyFrom(const ListInspectTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListInspectTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInspectTemplatesResponse::IsInitialized() const {
  return true;
}

void ListInspectTemplatesResponse::Swap(ListInspectTemplatesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListInspectTemplatesResponse::InternalSwap(ListInspectTemplatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&inspect_templates_)->InternalSwap(CastToBase(&other->inspect_templates_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListInspectTemplatesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteInspectTemplateRequest::InitAsDefaultInstance() {
}
class DeleteInspectTemplateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteInspectTemplateRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteInspectTemplateRequest::DeleteInspectTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
}
DeleteInspectTemplateRequest::DeleteInspectTemplateRequest(const DeleteInspectTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
}

void DeleteInspectTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteInspectTemplateRequest::~DeleteInspectTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  SharedDtor();
}

void DeleteInspectTemplateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteInspectTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteInspectTemplateRequest& DeleteInspectTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteInspectTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeleteInspectTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteInspectTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteInspectTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeleteInspectTemplateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteInspectTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeleteInspectTemplateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteInspectTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteInspectTemplateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
}

::google::protobuf::uint8* DeleteInspectTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteInspectTemplateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  return target;
}

size_t DeleteInspectTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteInspectTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteInspectTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteInspectTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
    MergeFrom(*source);
  }
}

void DeleteInspectTemplateRequest::MergeFrom(const DeleteInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteInspectTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteInspectTemplateRequest::CopyFrom(const DeleteInspectTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeleteInspectTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteInspectTemplateRequest::IsInitialized() const {
  return true;
}

void DeleteInspectTemplateRequest::Swap(DeleteInspectTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteInspectTemplateRequest::InternalSwap(DeleteInspectTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteInspectTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateJobTriggerRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CreateJobTriggerRequest_default_instance_._instance.get_mutable()->job_trigger_ = const_cast< ::google::privacy::dlp::v2::JobTrigger*>(
      ::google::privacy::dlp::v2::JobTrigger::internal_default_instance());
}
class CreateJobTriggerRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::JobTrigger& job_trigger(const CreateJobTriggerRequest* msg);
};

const ::google::privacy::dlp::v2::JobTrigger&
CreateJobTriggerRequest::HasBitSetters::job_trigger(const CreateJobTriggerRequest* msg) {
  return *msg->job_trigger_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateJobTriggerRequest::kParentFieldNumber;
const int CreateJobTriggerRequest::kJobTriggerFieldNumber;
const int CreateJobTriggerRequest::kTriggerIdFieldNumber;
const int CreateJobTriggerRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateJobTriggerRequest::CreateJobTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CreateJobTriggerRequest)
}
CreateJobTriggerRequest::CreateJobTriggerRequest(const CreateJobTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  trigger_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trigger_id().size() > 0) {
    trigger_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_id_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_job_trigger()) {
    job_trigger_ = new ::google::privacy::dlp::v2::JobTrigger(*from.job_trigger_);
  } else {
    job_trigger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CreateJobTriggerRequest)
}

void CreateJobTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_trigger_ = nullptr;
}

CreateJobTriggerRequest::~CreateJobTriggerRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CreateJobTriggerRequest)
  SharedDtor();
}

void CreateJobTriggerRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_trigger_;
}

void CreateJobTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateJobTriggerRequest& CreateJobTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CreateJobTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trigger_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && job_trigger_ != nullptr) {
    delete job_trigger_;
  }
  job_trigger_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateJobTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateJobTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateJobTriggerRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.JobTrigger job_trigger = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::JobTrigger::_InternalParse;
        object = msg->mutable_job_trigger();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string trigger_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id");
        object = msg->mutable_trigger_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateJobTriggerRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateJobTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateJobTriggerRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.JobTrigger job_trigger = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trigger_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trigger_id().data(), static_cast<int>(this->trigger_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateJobTriggerRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CreateJobTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CreateJobTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateJobTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateJobTriggerRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_job_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::job_trigger(this), output);
  }

  // string trigger_id = 3;
  if (this->trigger_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_id().data(), static_cast<int>(this->trigger_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trigger_id(), output);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateJobTriggerRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CreateJobTriggerRequest)
}

::google::protobuf::uint8* CreateJobTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateJobTriggerRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_job_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::job_trigger(this), target);
  }

  // string trigger_id = 3;
  if (this->trigger_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trigger_id().data(), static_cast<int>(this->trigger_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateJobTriggerRequest.trigger_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trigger_id(), target);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateJobTriggerRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CreateJobTriggerRequest)
  return target;
}

size_t CreateJobTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string trigger_id = 3;
  if (this->trigger_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trigger_id());
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_job_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_trigger_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateJobTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateJobTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateJobTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CreateJobTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CreateJobTriggerRequest)
    MergeFrom(*source);
  }
}

void CreateJobTriggerRequest::MergeFrom(const CreateJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.trigger_id().size() > 0) {

    trigger_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trigger_id_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_job_trigger()) {
    mutable_job_trigger()->::google::privacy::dlp::v2::JobTrigger::MergeFrom(from.job_trigger());
  }
}

void CreateJobTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateJobTriggerRequest::CopyFrom(const CreateJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CreateJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateJobTriggerRequest::IsInitialized() const {
  return true;
}

void CreateJobTriggerRequest::Swap(CreateJobTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateJobTriggerRequest::InternalSwap(CreateJobTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_id_.Swap(&other->trigger_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_trigger_, other->job_trigger_);
}

::google::protobuf::Metadata CreateJobTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActivateJobTriggerRequest::InitAsDefaultInstance() {
}
class ActivateJobTriggerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivateJobTriggerRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivateJobTriggerRequest::ActivateJobTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ActivateJobTriggerRequest)
}
ActivateJobTriggerRequest::ActivateJobTriggerRequest(const ActivateJobTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ActivateJobTriggerRequest)
}

void ActivateJobTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ActivateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActivateJobTriggerRequest::~ActivateJobTriggerRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  SharedDtor();
}

void ActivateJobTriggerRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActivateJobTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivateJobTriggerRequest& ActivateJobTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActivateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ActivateJobTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivateJobTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActivateJobTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ActivateJobTriggerRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivateJobTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ActivateJobTriggerRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivateJobTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ActivateJobTriggerRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ActivateJobTriggerRequest)
}

::google::protobuf::uint8* ActivateJobTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ActivateJobTriggerRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  return target;
}

size_t ActivateJobTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivateJobTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateJobTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ActivateJobTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ActivateJobTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ActivateJobTriggerRequest)
    MergeFrom(*source);
  }
}

void ActivateJobTriggerRequest::MergeFrom(const ActivateJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ActivateJobTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateJobTriggerRequest::CopyFrom(const ActivateJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ActivateJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateJobTriggerRequest::IsInitialized() const {
  return true;
}

void ActivateJobTriggerRequest::Swap(ActivateJobTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivateJobTriggerRequest::InternalSwap(ActivateJobTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ActivateJobTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateJobTriggerRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_UpdateJobTriggerRequest_default_instance_._instance.get_mutable()->job_trigger_ = const_cast< ::google::privacy::dlp::v2::JobTrigger*>(
      ::google::privacy::dlp::v2::JobTrigger::internal_default_instance());
  ::google::privacy::dlp::v2::_UpdateJobTriggerRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
class UpdateJobTriggerRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::JobTrigger& job_trigger(const UpdateJobTriggerRequest* msg);
  static const ::google::protobuf::FieldMask& update_mask(const UpdateJobTriggerRequest* msg);
};

const ::google::privacy::dlp::v2::JobTrigger&
UpdateJobTriggerRequest::HasBitSetters::job_trigger(const UpdateJobTriggerRequest* msg) {
  return *msg->job_trigger_;
}
const ::google::protobuf::FieldMask&
UpdateJobTriggerRequest::HasBitSetters::update_mask(const UpdateJobTriggerRequest* msg) {
  return *msg->update_mask_;
}
void UpdateJobTriggerRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateJobTriggerRequest::kNameFieldNumber;
const int UpdateJobTriggerRequest::kJobTriggerFieldNumber;
const int UpdateJobTriggerRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateJobTriggerRequest::UpdateJobTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.UpdateJobTriggerRequest)
}
UpdateJobTriggerRequest::UpdateJobTriggerRequest(const UpdateJobTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_job_trigger()) {
    job_trigger_ = new ::google::privacy::dlp::v2::JobTrigger(*from.job_trigger_);
  } else {
    job_trigger_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.UpdateJobTriggerRequest)
}

void UpdateJobTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&job_trigger_)) + sizeof(update_mask_));
}

UpdateJobTriggerRequest::~UpdateJobTriggerRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  SharedDtor();
}

void UpdateJobTriggerRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_trigger_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateJobTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateJobTriggerRequest& UpdateJobTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void UpdateJobTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && job_trigger_ != nullptr) {
    delete job_trigger_;
  }
  job_trigger_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateJobTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateJobTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.UpdateJobTriggerRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::JobTrigger::_InternalParse;
        object = msg->mutable_job_trigger();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FieldMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateJobTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.UpdateJobTriggerRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateJobTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateJobTriggerRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
  if (this->has_job_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::job_trigger(this), output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::update_mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.UpdateJobTriggerRequest)
}

::google::protobuf::uint8* UpdateJobTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateJobTriggerRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
  if (this->has_job_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::job_trigger(this), target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::update_mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  return target;
}

size_t UpdateJobTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.JobTrigger job_trigger = 2;
  if (this->has_job_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_trigger_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateJobTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateJobTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateJobTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.UpdateJobTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.UpdateJobTriggerRequest)
    MergeFrom(*source);
  }
}

void UpdateJobTriggerRequest::MergeFrom(const UpdateJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_job_trigger()) {
    mutable_job_trigger()->::google::privacy::dlp::v2::JobTrigger::MergeFrom(from.job_trigger());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateJobTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateJobTriggerRequest::CopyFrom(const UpdateJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.UpdateJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateJobTriggerRequest::IsInitialized() const {
  return true;
}

void UpdateJobTriggerRequest::Swap(UpdateJobTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateJobTriggerRequest::InternalSwap(UpdateJobTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_trigger_, other->job_trigger_);
  swap(update_mask_, other->update_mask_);
}

::google::protobuf::Metadata UpdateJobTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetJobTriggerRequest::InitAsDefaultInstance() {
}
class GetJobTriggerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetJobTriggerRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJobTriggerRequest::GetJobTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.GetJobTriggerRequest)
}
GetJobTriggerRequest::GetJobTriggerRequest(const GetJobTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.GetJobTriggerRequest)
}

void GetJobTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetJobTriggerRequest::~GetJobTriggerRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.GetJobTriggerRequest)
  SharedDtor();
}

void GetJobTriggerRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetJobTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetJobTriggerRequest& GetJobTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void GetJobTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetJobTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetJobTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.GetJobTriggerRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetJobTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.GetJobTriggerRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.GetJobTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.GetJobTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetJobTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetJobTriggerRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.GetJobTriggerRequest)
}

::google::protobuf::uint8* GetJobTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetJobTriggerRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.GetJobTriggerRequest)
  return target;
}

size_t GetJobTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetJobTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetJobTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetJobTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.GetJobTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.GetJobTriggerRequest)
    MergeFrom(*source);
  }
}

void GetJobTriggerRequest::MergeFrom(const GetJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetJobTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJobTriggerRequest::CopyFrom(const GetJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.GetJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJobTriggerRequest::IsInitialized() const {
  return true;
}

void GetJobTriggerRequest::Swap(GetJobTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJobTriggerRequest::InternalSwap(GetJobTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetJobTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateDlpJobRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CreateDlpJobRequest_default_instance_.inspect_job_ = const_cast< ::google::privacy::dlp::v2::InspectJobConfig*>(
      ::google::privacy::dlp::v2::InspectJobConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_CreateDlpJobRequest_default_instance_.risk_job_ = const_cast< ::google::privacy::dlp::v2::RiskAnalysisJobConfig*>(
      ::google::privacy::dlp::v2::RiskAnalysisJobConfig::internal_default_instance());
}
class CreateDlpJobRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InspectJobConfig& inspect_job(const CreateDlpJobRequest* msg);
  static const ::google::privacy::dlp::v2::RiskAnalysisJobConfig& risk_job(const CreateDlpJobRequest* msg);
};

const ::google::privacy::dlp::v2::InspectJobConfig&
CreateDlpJobRequest::HasBitSetters::inspect_job(const CreateDlpJobRequest* msg) {
  return *msg->job_.inspect_job_;
}
const ::google::privacy::dlp::v2::RiskAnalysisJobConfig&
CreateDlpJobRequest::HasBitSetters::risk_job(const CreateDlpJobRequest* msg) {
  return *msg->job_.risk_job_;
}
void CreateDlpJobRequest::set_allocated_inspect_job(::google::privacy::dlp::v2::InspectJobConfig* inspect_job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_job();
  if (inspect_job) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inspect_job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_job, submessage_arena);
    }
    set_has_inspect_job();
    job_.inspect_job_ = inspect_job;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateDlpJobRequest.inspect_job)
}
void CreateDlpJobRequest::set_allocated_risk_job(::google::privacy::dlp::v2::RiskAnalysisJobConfig* risk_job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_job();
  if (risk_job) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      risk_job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, risk_job, submessage_arena);
    }
    set_has_risk_job();
    job_.risk_job_ = risk_job;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CreateDlpJobRequest.risk_job)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDlpJobRequest::kParentFieldNumber;
const int CreateDlpJobRequest::kInspectJobFieldNumber;
const int CreateDlpJobRequest::kRiskJobFieldNumber;
const int CreateDlpJobRequest::kJobIdFieldNumber;
const int CreateDlpJobRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDlpJobRequest::CreateDlpJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CreateDlpJobRequest)
}
CreateDlpJobRequest::CreateDlpJobRequest(const CreateDlpJobRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  job_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.job_id().size() > 0) {
    job_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  clear_has_job();
  switch (from.job_case()) {
    case kInspectJob: {
      mutable_inspect_job()->::google::privacy::dlp::v2::InspectJobConfig::MergeFrom(from.inspect_job());
      break;
    }
    case kRiskJob: {
      mutable_risk_job()->::google::privacy::dlp::v2::RiskAnalysisJobConfig::MergeFrom(from.risk_job());
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CreateDlpJobRequest)
}

void CreateDlpJobRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_job();
}

CreateDlpJobRequest::~CreateDlpJobRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CreateDlpJobRequest)
  SharedDtor();
}

void CreateDlpJobRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_job()) {
    clear_job();
  }
}

void CreateDlpJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDlpJobRequest& CreateDlpJobRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CreateDlpJobRequest::clear_job() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  switch (job_case()) {
    case kInspectJob: {
      delete job_.inspect_job_;
      break;
    }
    case kRiskJob: {
      delete job_.risk_job_;
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = JOB_NOT_SET;
}


void CreateDlpJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_job();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateDlpJobRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateDlpJobRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateDlpJobRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectJobConfig::_InternalParse;
        object = msg->mutable_inspect_job();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::RiskAnalysisJobConfig::_InternalParse;
        object = msg->mutable_risk_job();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string job_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateDlpJobRequest.job_id");
        object = msg->mutable_job_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateDlpJobRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateDlpJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateDlpJobRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_risk_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_id().data(), static_cast<int>(this->job_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateDlpJobRequest.job_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateDlpJobRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CreateDlpJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CreateDlpJobRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateDlpJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDlpJobRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
  if (has_inspect_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inspect_job(this), output);
  }

  // .google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
  if (has_risk_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::risk_job(this), output);
  }

  // string job_id = 4;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), static_cast<int>(this->job_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDlpJobRequest.job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->job_id(), output);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDlpJobRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CreateDlpJobRequest)
}

::google::protobuf::uint8* CreateDlpJobRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDlpJobRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
  if (has_inspect_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inspect_job(this), target);
  }

  // .google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
  if (has_risk_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::risk_job(this), target);
  }

  // string job_id = 4;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), static_cast<int>(this->job_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDlpJobRequest.job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->job_id(), target);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDlpJobRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CreateDlpJobRequest)
  return target;
}

size_t CreateDlpJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string job_id = 4;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_id());
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  switch (job_case()) {
    // .google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
    case kInspectJob: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *job_.inspect_job_);
      break;
    }
    // .google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
    case kRiskJob: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *job_.risk_job_);
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDlpJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDlpJobRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateDlpJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CreateDlpJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CreateDlpJobRequest)
    MergeFrom(*source);
  }
}

void CreateDlpJobRequest::MergeFrom(const CreateDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.job_id().size() > 0) {

    job_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  switch (from.job_case()) {
    case kInspectJob: {
      mutable_inspect_job()->::google::privacy::dlp::v2::InspectJobConfig::MergeFrom(from.inspect_job());
      break;
    }
    case kRiskJob: {
      mutable_risk_job()->::google::privacy::dlp::v2::RiskAnalysisJobConfig::MergeFrom(from.risk_job());
      break;
    }
    case JOB_NOT_SET: {
      break;
    }
  }
}

void CreateDlpJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDlpJobRequest::CopyFrom(const CreateDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CreateDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDlpJobRequest::IsInitialized() const {
  return true;
}

void CreateDlpJobRequest::Swap(CreateDlpJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDlpJobRequest::InternalSwap(CreateDlpJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  job_id_.Swap(&other->job_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_, other->job_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CreateDlpJobRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListJobTriggersRequest::InitAsDefaultInstance() {
}
class ListJobTriggersRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListJobTriggersRequest::kParentFieldNumber;
const int ListJobTriggersRequest::kPageTokenFieldNumber;
const int ListJobTriggersRequest::kPageSizeFieldNumber;
const int ListJobTriggersRequest::kOrderByFieldNumber;
const int ListJobTriggersRequest::kFilterFieldNumber;
const int ListJobTriggersRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListJobTriggersRequest::ListJobTriggersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListJobTriggersRequest)
}
ListJobTriggersRequest::ListJobTriggersRequest(const ListJobTriggersRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_by().size() > 0) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListJobTriggersRequest)
}

void ListJobTriggersRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListJobTriggersRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListJobTriggersRequest::~ListJobTriggersRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListJobTriggersRequest)
  SharedDtor();
}

void ListJobTriggersRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListJobTriggersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListJobTriggersRequest& ListJobTriggersRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListJobTriggersRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListJobTriggersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListJobTriggersRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListJobTriggersRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListJobTriggersRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListJobTriggersRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string order_by = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListJobTriggersRequest.order_by");
        object = msg->mutable_order_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filter = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListJobTriggersRequest.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListJobTriggersRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListJobTriggersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListJobTriggersRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListJobTriggersRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_by = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), static_cast<int>(this->order_by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListJobTriggersRequest.order_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListJobTriggersRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListJobTriggersRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListJobTriggersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListJobTriggersRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListJobTriggersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_by(), output);
  }

  // string filter = 5;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filter(), output);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListJobTriggersRequest)
}

::google::protobuf::uint8* ListJobTriggersRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_by(), target);
  }

  // string filter = 5;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filter(), target);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListJobTriggersRequest)
  return target;
}

size_t ListJobTriggersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // string filter = 5;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListJobTriggersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListJobTriggersRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListJobTriggersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListJobTriggersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListJobTriggersRequest)
    MergeFrom(*source);
  }
}

void ListJobTriggersRequest::MergeFrom(const ListJobTriggersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListJobTriggersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListJobTriggersRequest::CopyFrom(const ListJobTriggersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListJobTriggersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListJobTriggersRequest::IsInitialized() const {
  return true;
}

void ListJobTriggersRequest::Swap(ListJobTriggersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListJobTriggersRequest::InternalSwap(ListJobTriggersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_by_.Swap(&other->order_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListJobTriggersRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListJobTriggersResponse::InitAsDefaultInstance() {
}
class ListJobTriggersResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListJobTriggersResponse::kJobTriggersFieldNumber;
const int ListJobTriggersResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListJobTriggersResponse::ListJobTriggersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListJobTriggersResponse)
}
ListJobTriggersResponse::ListJobTriggersResponse(const ListJobTriggersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      job_triggers_(from.job_triggers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListJobTriggersResponse)
}

void ListJobTriggersResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListJobTriggersResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListJobTriggersResponse::~ListJobTriggersResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListJobTriggersResponse)
  SharedDtor();
}

void ListJobTriggersResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListJobTriggersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListJobTriggersResponse& ListJobTriggersResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListJobTriggersResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListJobTriggersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_triggers_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListJobTriggersResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListJobTriggersResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.JobTrigger job_triggers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::JobTrigger::_InternalParse;
          object = msg->add_job_triggers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListJobTriggersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.JobTrigger job_triggers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_job_triggers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListJobTriggersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListJobTriggersResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListJobTriggersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.JobTrigger job_triggers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->job_triggers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->job_triggers(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListJobTriggersResponse)
}

::google::protobuf::uint8* ListJobTriggersResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.JobTrigger job_triggers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->job_triggers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->job_triggers(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListJobTriggersResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListJobTriggersResponse)
  return target;
}

size_t ListJobTriggersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.JobTrigger job_triggers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->job_triggers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->job_triggers(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListJobTriggersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListJobTriggersResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListJobTriggersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListJobTriggersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListJobTriggersResponse)
    MergeFrom(*source);
  }
}

void ListJobTriggersResponse::MergeFrom(const ListJobTriggersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  job_triggers_.MergeFrom(from.job_triggers_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListJobTriggersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListJobTriggersResponse::CopyFrom(const ListJobTriggersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListJobTriggersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListJobTriggersResponse::IsInitialized() const {
  return true;
}

void ListJobTriggersResponse::Swap(ListJobTriggersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListJobTriggersResponse::InternalSwap(ListJobTriggersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&job_triggers_)->InternalSwap(CastToBase(&other->job_triggers_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListJobTriggersResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteJobTriggerRequest::InitAsDefaultInstance() {
}
class DeleteJobTriggerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteJobTriggerRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteJobTriggerRequest::DeleteJobTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeleteJobTriggerRequest)
}
DeleteJobTriggerRequest::DeleteJobTriggerRequest(const DeleteJobTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeleteJobTriggerRequest)
}

void DeleteJobTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteJobTriggerRequest::~DeleteJobTriggerRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  SharedDtor();
}

void DeleteJobTriggerRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteJobTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteJobTriggerRequest& DeleteJobTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeleteJobTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteJobTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteJobTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeleteJobTriggerRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteJobTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeleteJobTriggerRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteJobTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteJobTriggerRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeleteJobTriggerRequest)
}

::google::protobuf::uint8* DeleteJobTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteJobTriggerRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  return target;
}

size_t DeleteJobTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteJobTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteJobTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteJobTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeleteJobTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeleteJobTriggerRequest)
    MergeFrom(*source);
  }
}

void DeleteJobTriggerRequest::MergeFrom(const DeleteJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteJobTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteJobTriggerRequest::CopyFrom(const DeleteJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeleteJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteJobTriggerRequest::IsInitialized() const {
  return true;
}

void DeleteJobTriggerRequest::Swap(DeleteJobTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteJobTriggerRequest::InternalSwap(DeleteJobTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteJobTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InspectJobConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_InspectJobConfig_default_instance_._instance.get_mutable()->storage_config_ = const_cast< ::google::privacy::dlp::v2::StorageConfig*>(
      ::google::privacy::dlp::v2::StorageConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_InspectJobConfig_default_instance_._instance.get_mutable()->inspect_config_ = const_cast< ::google::privacy::dlp::v2::InspectConfig*>(
      ::google::privacy::dlp::v2::InspectConfig::internal_default_instance());
}
class InspectJobConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::StorageConfig& storage_config(const InspectJobConfig* msg);
  static const ::google::privacy::dlp::v2::InspectConfig& inspect_config(const InspectJobConfig* msg);
};

const ::google::privacy::dlp::v2::StorageConfig&
InspectJobConfig::HasBitSetters::storage_config(const InspectJobConfig* msg) {
  return *msg->storage_config_;
}
const ::google::privacy::dlp::v2::InspectConfig&
InspectJobConfig::HasBitSetters::inspect_config(const InspectJobConfig* msg) {
  return *msg->inspect_config_;
}
void InspectJobConfig::clear_storage_config() {
  if (GetArenaNoVirtual() == nullptr && storage_config_ != nullptr) {
    delete storage_config_;
  }
  storage_config_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InspectJobConfig::kStorageConfigFieldNumber;
const int InspectJobConfig::kInspectConfigFieldNumber;
const int InspectJobConfig::kInspectTemplateNameFieldNumber;
const int InspectJobConfig::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InspectJobConfig::InspectJobConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InspectJobConfig)
}
InspectJobConfig::InspectJobConfig(const InspectJobConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inspect_template_name().size() > 0) {
    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  if (from.has_storage_config()) {
    storage_config_ = new ::google::privacy::dlp::v2::StorageConfig(*from.storage_config_);
  } else {
    storage_config_ = nullptr;
  }
  if (from.has_inspect_config()) {
    inspect_config_ = new ::google::privacy::dlp::v2::InspectConfig(*from.inspect_config_);
  } else {
    inspect_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InspectJobConfig)
}

void InspectJobConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  inspect_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&storage_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inspect_config_) -
      reinterpret_cast<char*>(&storage_config_)) + sizeof(inspect_config_));
}

InspectJobConfig::~InspectJobConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InspectJobConfig)
  SharedDtor();
}

void InspectJobConfig::SharedDtor() {
  inspect_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete storage_config_;
  if (this != internal_default_instance()) delete inspect_config_;
}

void InspectJobConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InspectJobConfig& InspectJobConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InspectJobConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void InspectJobConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InspectJobConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  inspect_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && storage_config_ != nullptr) {
    delete storage_config_;
  }
  storage_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inspect_config_ != nullptr) {
    delete inspect_config_;
  }
  inspect_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InspectJobConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InspectJobConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.StorageConfig storage_config = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StorageConfig::_InternalParse;
        object = msg->mutable_storage_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectConfig::_InternalParse;
        object = msg->mutable_inspect_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string inspect_template_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InspectJobConfig.inspect_template_name");
        object = msg->mutable_inspect_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.privacy.dlp.v2.Action actions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Action::_InternalParse;
          object = msg->add_actions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InspectJobConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InspectJobConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.StorageConfig storage_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inspect_template_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inspect_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InspectJobConfig.inspect_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Action actions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InspectJobConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InspectJobConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InspectJobConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InspectJobConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.StorageConfig storage_config = 1;
  if (this->has_storage_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::storage_config(this), output);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::inspect_config(this), output);
  }

  // string inspect_template_name = 3;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectJobConfig.inspect_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->inspect_template_name(), output);
  }

  // repeated .google.privacy.dlp.v2.Action actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InspectJobConfig)
}

::google::protobuf::uint8* InspectJobConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InspectJobConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.StorageConfig storage_config = 1;
  if (this->has_storage_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::storage_config(this), target);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::inspect_config(this), target);
  }

  // string inspect_template_name = 3;
  if (this->inspect_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inspect_template_name().data(), static_cast<int>(this->inspect_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InspectJobConfig.inspect_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inspect_template_name(), target);
  }

  // repeated .google.privacy.dlp.v2.Action actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->actions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InspectJobConfig)
  return target;
}

size_t InspectJobConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InspectJobConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Action actions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  // string inspect_template_name = 3;
  if (this->inspect_template_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inspect_template_name());
  }

  // .google.privacy.dlp.v2.StorageConfig storage_config = 1;
  if (this->has_storage_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *storage_config_);
  }

  // .google.privacy.dlp.v2.InspectConfig inspect_config = 2;
  if (this->has_inspect_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inspect_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InspectJobConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InspectJobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InspectJobConfig* source =
      ::google::protobuf::DynamicCastToGenerated<InspectJobConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InspectJobConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InspectJobConfig)
    MergeFrom(*source);
  }
}

void InspectJobConfig::MergeFrom(const InspectJobConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InspectJobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.inspect_template_name().size() > 0) {

    inspect_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inspect_template_name_);
  }
  if (from.has_storage_config()) {
    mutable_storage_config()->::google::privacy::dlp::v2::StorageConfig::MergeFrom(from.storage_config());
  }
  if (from.has_inspect_config()) {
    mutable_inspect_config()->::google::privacy::dlp::v2::InspectConfig::MergeFrom(from.inspect_config());
  }
}

void InspectJobConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InspectJobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InspectJobConfig::CopyFrom(const InspectJobConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InspectJobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InspectJobConfig::IsInitialized() const {
  return true;
}

void InspectJobConfig::Swap(InspectJobConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InspectJobConfig::InternalSwap(InspectJobConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  inspect_template_name_.Swap(&other->inspect_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(storage_config_, other->storage_config_);
  swap(inspect_config_, other->inspect_config_);
}

::google::protobuf::Metadata InspectJobConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DlpJob::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DlpJob_default_instance_.risk_details_ = const_cast< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails*>(
      ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails::internal_default_instance());
  ::google::privacy::dlp::v2::_DlpJob_default_instance_.inspect_details_ = const_cast< ::google::privacy::dlp::v2::InspectDataSourceDetails*>(
      ::google::privacy::dlp::v2::InspectDataSourceDetails::internal_default_instance());
  ::google::privacy::dlp::v2::_DlpJob_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_DlpJob_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_DlpJob_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class DlpJob::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails& risk_details(const DlpJob* msg);
  static const ::google::privacy::dlp::v2::InspectDataSourceDetails& inspect_details(const DlpJob* msg);
  static const ::google::protobuf::Timestamp& create_time(const DlpJob* msg);
  static const ::google::protobuf::Timestamp& start_time(const DlpJob* msg);
  static const ::google::protobuf::Timestamp& end_time(const DlpJob* msg);
};

const ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails&
DlpJob::HasBitSetters::risk_details(const DlpJob* msg) {
  return *msg->details_.risk_details_;
}
const ::google::privacy::dlp::v2::InspectDataSourceDetails&
DlpJob::HasBitSetters::inspect_details(const DlpJob* msg) {
  return *msg->details_.inspect_details_;
}
const ::google::protobuf::Timestamp&
DlpJob::HasBitSetters::create_time(const DlpJob* msg) {
  return *msg->create_time_;
}
const ::google::protobuf::Timestamp&
DlpJob::HasBitSetters::start_time(const DlpJob* msg) {
  return *msg->start_time_;
}
const ::google::protobuf::Timestamp&
DlpJob::HasBitSetters::end_time(const DlpJob* msg) {
  return *msg->end_time_;
}
void DlpJob::set_allocated_risk_details(::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* risk_details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_details();
  if (risk_details) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      risk_details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, risk_details, submessage_arena);
    }
    set_has_risk_details();
    details_.risk_details_ = risk_details;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DlpJob.risk_details)
}
void DlpJob::set_allocated_inspect_details(::google::privacy::dlp::v2::InspectDataSourceDetails* inspect_details) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_details();
  if (inspect_details) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inspect_details = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inspect_details, submessage_arena);
    }
    set_has_inspect_details();
    details_.inspect_details_ = inspect_details;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.DlpJob.inspect_details)
}
void DlpJob::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void DlpJob::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void DlpJob::clear_end_time() {
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DlpJob::kNameFieldNumber;
const int DlpJob::kTypeFieldNumber;
const int DlpJob::kStateFieldNumber;
const int DlpJob::kRiskDetailsFieldNumber;
const int DlpJob::kInspectDetailsFieldNumber;
const int DlpJob::kCreateTimeFieldNumber;
const int DlpJob::kStartTimeFieldNumber;
const int DlpJob::kEndTimeFieldNumber;
const int DlpJob::kJobTriggerNameFieldNumber;
const int DlpJob::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DlpJob::DlpJob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DlpJob)
}
DlpJob::DlpJob(const DlpJob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  job_trigger_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.job_trigger_name().size() > 0) {
    job_trigger_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_trigger_name_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  clear_has_details();
  switch (from.details_case()) {
    case kRiskDetails: {
      mutable_risk_details()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails::MergeFrom(from.risk_details());
      break;
    }
    case kInspectDetails: {
      mutable_inspect_details()->::google::privacy::dlp::v2::InspectDataSourceDetails::MergeFrom(from.inspect_details());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DlpJob)
}

void DlpJob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_trigger_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(state_));
  clear_has_details();
}

DlpJob::~DlpJob() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DlpJob)
  SharedDtor();
}

void DlpJob::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_trigger_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (has_details()) {
    clear_details();
  }
}

void DlpJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DlpJob& DlpJob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DlpJob_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DlpJob::clear_details() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.DlpJob)
  switch (details_case()) {
    case kRiskDetails: {
      delete details_.risk_details_;
      break;
    }
    case kInspectDetails: {
      delete details_.inspect_details_;
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAILS_NOT_SET;
}


void DlpJob::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DlpJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_trigger_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
  clear_details();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DlpJob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DlpJob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DlpJob.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.DlpJobType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::google::privacy::dlp::v2::DlpJobType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.DlpJob.JobState state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::google::privacy::dlp::v2::DlpJob_JobState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails::_InternalParse;
        object = msg->mutable_risk_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InspectDataSourceDetails::_InternalParse;
        object = msg->mutable_inspect_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp start_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_start_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp end_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_end_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string job_trigger_name = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DlpJob.job_trigger_name");
        object = msg->mutable_job_trigger_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .google.privacy.dlp.v2.Error errors = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Error::_InternalParse;
          object = msg->add_errors();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 90 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DlpJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DlpJob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DlpJob.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DlpJobType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::privacy::dlp::v2::DlpJobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DlpJob.JobState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::privacy::dlp::v2::DlpJob_JobState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_risk_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inspect_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string job_trigger_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_trigger_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_trigger_name().data(), static_cast<int>(this->job_trigger_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DlpJob.job_trigger_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Error errors = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DlpJob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DlpJob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DlpJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DlpJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DlpJob.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.DlpJobType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .google.privacy.dlp.v2.DlpJob.JobState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
  if (has_risk_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::risk_details(this), output);
  }

  // .google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
  if (has_inspect_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::inspect_details(this), output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::create_time(this), output);
  }

  // .google.protobuf.Timestamp start_time = 7;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::start_time(this), output);
  }

  // .google.protobuf.Timestamp end_time = 8;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::end_time(this), output);
  }

  // string job_trigger_name = 10;
  if (this->job_trigger_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_trigger_name().data(), static_cast<int>(this->job_trigger_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DlpJob.job_trigger_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->job_trigger_name(), output);
  }

  // repeated .google.privacy.dlp.v2.Error errors = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->errors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DlpJob)
}

::google::protobuf::uint8* DlpJob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DlpJob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DlpJob.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.DlpJobType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .google.privacy.dlp.v2.DlpJob.JobState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
  if (has_risk_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::risk_details(this), target);
  }

  // .google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
  if (has_inspect_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::inspect_details(this), target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::create_time(this), target);
  }

  // .google.protobuf.Timestamp start_time = 7;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::start_time(this), target);
  }

  // .google.protobuf.Timestamp end_time = 8;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::end_time(this), target);
  }

  // string job_trigger_name = 10;
  if (this->job_trigger_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_trigger_name().data(), static_cast<int>(this->job_trigger_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DlpJob.job_trigger_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->job_trigger_name(), target);
  }

  // repeated .google.privacy.dlp.v2.Error errors = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->errors(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DlpJob)
  return target;
}

size_t DlpJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DlpJob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Error errors = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string job_trigger_name = 10;
  if (this->job_trigger_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_trigger_name());
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp start_time = 7;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 8;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.privacy.dlp.v2.DlpJobType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .google.privacy.dlp.v2.DlpJob.JobState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  switch (details_case()) {
    // .google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
    case kRiskDetails: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *details_.risk_details_);
      break;
    }
    // .google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
    case kInspectDetails: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *details_.inspect_details_);
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DlpJob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DlpJob)
  GOOGLE_DCHECK_NE(&from, this);
  const DlpJob* source =
      ::google::protobuf::DynamicCastToGenerated<DlpJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DlpJob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DlpJob)
    MergeFrom(*source);
  }
}

void DlpJob::MergeFrom(const DlpJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DlpJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.job_trigger_name().size() > 0) {

    job_trigger_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_trigger_name_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  switch (from.details_case()) {
    case kRiskDetails: {
      mutable_risk_details()->::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails::MergeFrom(from.risk_details());
      break;
    }
    case kInspectDetails: {
      mutable_inspect_details()->::google::privacy::dlp::v2::InspectDataSourceDetails::MergeFrom(from.inspect_details());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
}

void DlpJob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DlpJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DlpJob::CopyFrom(const DlpJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DlpJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DlpJob::IsInitialized() const {
  return true;
}

void DlpJob::Swap(DlpJob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DlpJob::InternalSwap(DlpJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  job_trigger_name_.Swap(&other->job_trigger_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(type_, other->type_);
  swap(state_, other->state_);
  swap(details_, other->details_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata DlpJob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetDlpJobRequest::InitAsDefaultInstance() {
}
class GetDlpJobRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDlpJobRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDlpJobRequest::GetDlpJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.GetDlpJobRequest)
}
GetDlpJobRequest::GetDlpJobRequest(const GetDlpJobRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.GetDlpJobRequest)
}

void GetDlpJobRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetDlpJobRequest::~GetDlpJobRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.GetDlpJobRequest)
  SharedDtor();
}

void GetDlpJobRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDlpJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDlpJobRequest& GetDlpJobRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void GetDlpJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.GetDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDlpJobRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetDlpJobRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.GetDlpJobRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDlpJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.GetDlpJobRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.GetDlpJobRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.GetDlpJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.GetDlpJobRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDlpJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.GetDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetDlpJobRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.GetDlpJobRequest)
}

::google::protobuf::uint8* GetDlpJobRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.GetDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetDlpJobRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.GetDlpJobRequest)
  return target;
}

size_t GetDlpJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.GetDlpJobRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDlpJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.GetDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDlpJobRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetDlpJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.GetDlpJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.GetDlpJobRequest)
    MergeFrom(*source);
  }
}

void GetDlpJobRequest::MergeFrom(const GetDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.GetDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetDlpJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.GetDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDlpJobRequest::CopyFrom(const GetDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.GetDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDlpJobRequest::IsInitialized() const {
  return true;
}

void GetDlpJobRequest::Swap(GetDlpJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDlpJobRequest::InternalSwap(GetDlpJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetDlpJobRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDlpJobsRequest::InitAsDefaultInstance() {
}
class ListDlpJobsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDlpJobsRequest::kParentFieldNumber;
const int ListDlpJobsRequest::kFilterFieldNumber;
const int ListDlpJobsRequest::kPageSizeFieldNumber;
const int ListDlpJobsRequest::kPageTokenFieldNumber;
const int ListDlpJobsRequest::kTypeFieldNumber;
const int ListDlpJobsRequest::kOrderByFieldNumber;
const int ListDlpJobsRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDlpJobsRequest::ListDlpJobsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListDlpJobsRequest)
}
ListDlpJobsRequest::ListDlpJobsRequest(const ListDlpJobsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filter().size() > 0) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_by().size() > 0) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListDlpJobsRequest)
}

void ListDlpJobsRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDlpJobsRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(type_));
}

ListDlpJobsRequest::~ListDlpJobsRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListDlpJobsRequest)
  SharedDtor();
}

void ListDlpJobsRequest::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDlpJobsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDlpJobsRequest& ListDlpJobsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDlpJobsRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListDlpJobsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDlpJobsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDlpJobsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string filter = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDlpJobsRequest.filter");
        object = msg->mutable_filter();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string page_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDlpJobsRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDlpJobsRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.DlpJobType type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::google::privacy::dlp::v2::DlpJobType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string order_by = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDlpJobsRequest.order_by");
        object = msg->mutable_order_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDlpJobsRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDlpJobsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDlpJobsRequest.filter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDlpJobsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDlpJobsRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DlpJobType type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::google::privacy::dlp::v2::DlpJobType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_by = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), static_cast<int>(this->order_by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDlpJobsRequest.order_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDlpJobsRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListDlpJobsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListDlpJobsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDlpJobsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filter(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parent(), output);
  }

  // .google.privacy.dlp.v2.DlpJobType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // string order_by = 6;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_by(), output);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListDlpJobsRequest)
}

::google::protobuf::uint8* ListDlpJobsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filter(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent(), target);
  }

  // .google.privacy.dlp.v2.DlpJobType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // string order_by = 6;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->order_by(), target);
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListDlpJobsRequest)
  return target;
}

size_t ListDlpJobsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 1;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string parent = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string order_by = 6;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // string location_id = 7;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // .google.privacy.dlp.v2.DlpJobType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDlpJobsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDlpJobsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListDlpJobsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListDlpJobsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListDlpJobsRequest)
    MergeFrom(*source);
  }
}

void ListDlpJobsRequest::MergeFrom(const ListDlpJobsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ListDlpJobsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDlpJobsRequest::CopyFrom(const ListDlpJobsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListDlpJobsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDlpJobsRequest::IsInitialized() const {
  return true;
}

void ListDlpJobsRequest::Swap(ListDlpJobsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDlpJobsRequest::InternalSwap(ListDlpJobsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_by_.Swap(&other->order_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata ListDlpJobsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDlpJobsResponse::InitAsDefaultInstance() {
}
class ListDlpJobsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDlpJobsResponse::kJobsFieldNumber;
const int ListDlpJobsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDlpJobsResponse::ListDlpJobsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListDlpJobsResponse)
}
ListDlpJobsResponse::ListDlpJobsResponse(const ListDlpJobsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      jobs_(from.jobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListDlpJobsResponse)
}

void ListDlpJobsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDlpJobsResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListDlpJobsResponse::~ListDlpJobsResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListDlpJobsResponse)
  SharedDtor();
}

void ListDlpJobsResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDlpJobsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDlpJobsResponse& ListDlpJobsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDlpJobsResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListDlpJobsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobs_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDlpJobsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDlpJobsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.DlpJob jobs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::DlpJob::_InternalParse;
          object = msg->add_jobs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDlpJobsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.DlpJob jobs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListDlpJobsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListDlpJobsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDlpJobsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.DlpJob jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->jobs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->jobs(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListDlpJobsResponse)
}

::google::protobuf::uint8* ListDlpJobsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.DlpJob jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->jobs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->jobs(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDlpJobsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListDlpJobsResponse)
  return target;
}

size_t ListDlpJobsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.DlpJob jobs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->jobs(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDlpJobsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDlpJobsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListDlpJobsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListDlpJobsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListDlpJobsResponse)
    MergeFrom(*source);
  }
}

void ListDlpJobsResponse::MergeFrom(const ListDlpJobsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jobs_.MergeFrom(from.jobs_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListDlpJobsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDlpJobsResponse::CopyFrom(const ListDlpJobsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListDlpJobsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDlpJobsResponse::IsInitialized() const {
  return true;
}

void ListDlpJobsResponse::Swap(ListDlpJobsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDlpJobsResponse::InternalSwap(ListDlpJobsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&jobs_)->InternalSwap(CastToBase(&other->jobs_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListDlpJobsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CancelDlpJobRequest::InitAsDefaultInstance() {
}
class CancelDlpJobRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelDlpJobRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelDlpJobRequest::CancelDlpJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CancelDlpJobRequest)
}
CancelDlpJobRequest::CancelDlpJobRequest(const CancelDlpJobRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CancelDlpJobRequest)
}

void CancelDlpJobRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CancelDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CancelDlpJobRequest::~CancelDlpJobRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CancelDlpJobRequest)
  SharedDtor();
}

void CancelDlpJobRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CancelDlpJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelDlpJobRequest& CancelDlpJobRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CancelDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CancelDlpJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CancelDlpJobRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CancelDlpJobRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CancelDlpJobRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CancelDlpJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CancelDlpJobRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CancelDlpJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CancelDlpJobRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CancelDlpJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CancelDlpJobRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CancelDlpJobRequest)
}

::google::protobuf::uint8* CancelDlpJobRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CancelDlpJobRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CancelDlpJobRequest)
  return target;
}

size_t CancelDlpJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelDlpJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelDlpJobRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CancelDlpJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CancelDlpJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CancelDlpJobRequest)
    MergeFrom(*source);
  }
}

void CancelDlpJobRequest::MergeFrom(const CancelDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CancelDlpJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelDlpJobRequest::CopyFrom(const CancelDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CancelDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelDlpJobRequest::IsInitialized() const {
  return true;
}

void CancelDlpJobRequest::Swap(CancelDlpJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelDlpJobRequest::InternalSwap(CancelDlpJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CancelDlpJobRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FinishDlpJobRequest::InitAsDefaultInstance() {
}
class FinishDlpJobRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishDlpJobRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishDlpJobRequest::FinishDlpJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.FinishDlpJobRequest)
}
FinishDlpJobRequest::FinishDlpJobRequest(const FinishDlpJobRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.FinishDlpJobRequest)
}

void FinishDlpJobRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FinishDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FinishDlpJobRequest::~FinishDlpJobRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.FinishDlpJobRequest)
  SharedDtor();
}

void FinishDlpJobRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FinishDlpJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinishDlpJobRequest& FinishDlpJobRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FinishDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void FinishDlpJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FinishDlpJobRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FinishDlpJobRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.FinishDlpJobRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FinishDlpJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.FinishDlpJobRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.FinishDlpJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.FinishDlpJobRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FinishDlpJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.FinishDlpJobRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.FinishDlpJobRequest)
}

::google::protobuf::uint8* FinishDlpJobRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.FinishDlpJobRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.FinishDlpJobRequest)
  return target;
}

size_t FinishDlpJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishDlpJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishDlpJobRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FinishDlpJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.FinishDlpJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.FinishDlpJobRequest)
    MergeFrom(*source);
  }
}

void FinishDlpJobRequest::MergeFrom(const FinishDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FinishDlpJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishDlpJobRequest::CopyFrom(const FinishDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.FinishDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishDlpJobRequest::IsInitialized() const {
  return true;
}

void FinishDlpJobRequest::Swap(FinishDlpJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishDlpJobRequest::InternalSwap(FinishDlpJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FinishDlpJobRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteDlpJobRequest::InitAsDefaultInstance() {
}
class DeleteDlpJobRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDlpJobRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDlpJobRequest::DeleteDlpJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeleteDlpJobRequest)
}
DeleteDlpJobRequest::DeleteDlpJobRequest(const DeleteDlpJobRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeleteDlpJobRequest)
}

void DeleteDlpJobRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteDlpJobRequest::~DeleteDlpJobRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeleteDlpJobRequest)
  SharedDtor();
}

void DeleteDlpJobRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteDlpJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDlpJobRequest& DeleteDlpJobRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeleteDlpJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteDlpJobRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteDlpJobRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeleteDlpJobRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteDlpJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeleteDlpJobRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeleteDlpJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeleteDlpJobRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteDlpJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteDlpJobRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeleteDlpJobRequest)
}

::google::protobuf::uint8* DeleteDlpJobRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteDlpJobRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeleteDlpJobRequest)
  return target;
}

size_t DeleteDlpJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDlpJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDlpJobRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteDlpJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeleteDlpJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeleteDlpJobRequest)
    MergeFrom(*source);
  }
}

void DeleteDlpJobRequest::MergeFrom(const DeleteDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteDlpJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDlpJobRequest::CopyFrom(const DeleteDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeleteDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDlpJobRequest::IsInitialized() const {
  return true;
}

void DeleteDlpJobRequest::Swap(DeleteDlpJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDlpJobRequest::InternalSwap(DeleteDlpJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteDlpJobRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateDeidentifyTemplateRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CreateDeidentifyTemplateRequest_default_instance_._instance.get_mutable()->deidentify_template_ = const_cast< ::google::privacy::dlp::v2::DeidentifyTemplate*>(
      ::google::privacy::dlp::v2::DeidentifyTemplate::internal_default_instance());
}
class CreateDeidentifyTemplateRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::DeidentifyTemplate& deidentify_template(const CreateDeidentifyTemplateRequest* msg);
};

const ::google::privacy::dlp::v2::DeidentifyTemplate&
CreateDeidentifyTemplateRequest::HasBitSetters::deidentify_template(const CreateDeidentifyTemplateRequest* msg) {
  return *msg->deidentify_template_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDeidentifyTemplateRequest::kParentFieldNumber;
const int CreateDeidentifyTemplateRequest::kDeidentifyTemplateFieldNumber;
const int CreateDeidentifyTemplateRequest::kTemplateIdFieldNumber;
const int CreateDeidentifyTemplateRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDeidentifyTemplateRequest::CreateDeidentifyTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
}
CreateDeidentifyTemplateRequest::CreateDeidentifyTemplateRequest(const CreateDeidentifyTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.template_id().size() > 0) {
    template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template_id_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_deidentify_template()) {
    deidentify_template_ = new ::google::privacy::dlp::v2::DeidentifyTemplate(*from.deidentify_template_);
  } else {
    deidentify_template_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
}

void CreateDeidentifyTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deidentify_template_ = nullptr;
}

CreateDeidentifyTemplateRequest::~CreateDeidentifyTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  SharedDtor();
}

void CreateDeidentifyTemplateRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deidentify_template_;
}

void CreateDeidentifyTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDeidentifyTemplateRequest& CreateDeidentifyTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CreateDeidentifyTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && deidentify_template_ != nullptr) {
    delete deidentify_template_;
  }
  deidentify_template_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateDeidentifyTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateDeidentifyTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DeidentifyTemplate::_InternalParse;
        object = msg->mutable_deidentify_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string template_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id");
        object = msg->mutable_template_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateDeidentifyTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deidentify_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string template_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->template_id().data(), static_cast<int>(this->template_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateDeidentifyTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_deidentify_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::deidentify_template(this), output);
  }

  // string template_id = 3;
  if (this->template_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_id().data(), static_cast<int>(this->template_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_id(), output);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
}

::google::protobuf::uint8* CreateDeidentifyTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_deidentify_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::deidentify_template(this), target);
  }

  // string template_id = 3;
  if (this->template_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->template_id().data(), static_cast<int>(this->template_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_id(), target);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  return target;
}

size_t CreateDeidentifyTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string template_id = 3;
  if (this->template_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->template_id());
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_deidentify_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deidentify_template_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDeidentifyTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDeidentifyTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateDeidentifyTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
    MergeFrom(*source);
  }
}

void CreateDeidentifyTemplateRequest::MergeFrom(const CreateDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.template_id().size() > 0) {

    template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template_id_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_deidentify_template()) {
    mutable_deidentify_template()->::google::privacy::dlp::v2::DeidentifyTemplate::MergeFrom(from.deidentify_template());
  }
}

void CreateDeidentifyTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDeidentifyTemplateRequest::CopyFrom(const CreateDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CreateDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDeidentifyTemplateRequest::IsInitialized() const {
  return true;
}

void CreateDeidentifyTemplateRequest::Swap(CreateDeidentifyTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDeidentifyTemplateRequest::InternalSwap(CreateDeidentifyTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  template_id_.Swap(&other->template_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(deidentify_template_, other->deidentify_template_);
}

::google::protobuf::Metadata CreateDeidentifyTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateDeidentifyTemplateRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_UpdateDeidentifyTemplateRequest_default_instance_._instance.get_mutable()->deidentify_template_ = const_cast< ::google::privacy::dlp::v2::DeidentifyTemplate*>(
      ::google::privacy::dlp::v2::DeidentifyTemplate::internal_default_instance());
  ::google::privacy::dlp::v2::_UpdateDeidentifyTemplateRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
class UpdateDeidentifyTemplateRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::DeidentifyTemplate& deidentify_template(const UpdateDeidentifyTemplateRequest* msg);
  static const ::google::protobuf::FieldMask& update_mask(const UpdateDeidentifyTemplateRequest* msg);
};

const ::google::privacy::dlp::v2::DeidentifyTemplate&
UpdateDeidentifyTemplateRequest::HasBitSetters::deidentify_template(const UpdateDeidentifyTemplateRequest* msg) {
  return *msg->deidentify_template_;
}
const ::google::protobuf::FieldMask&
UpdateDeidentifyTemplateRequest::HasBitSetters::update_mask(const UpdateDeidentifyTemplateRequest* msg) {
  return *msg->update_mask_;
}
void UpdateDeidentifyTemplateRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateDeidentifyTemplateRequest::kNameFieldNumber;
const int UpdateDeidentifyTemplateRequest::kDeidentifyTemplateFieldNumber;
const int UpdateDeidentifyTemplateRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateDeidentifyTemplateRequest::UpdateDeidentifyTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
}
UpdateDeidentifyTemplateRequest::UpdateDeidentifyTemplateRequest(const UpdateDeidentifyTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_deidentify_template()) {
    deidentify_template_ = new ::google::privacy::dlp::v2::DeidentifyTemplate(*from.deidentify_template_);
  } else {
    deidentify_template_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
}

void UpdateDeidentifyTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deidentify_template_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&deidentify_template_)) + sizeof(update_mask_));
}

UpdateDeidentifyTemplateRequest::~UpdateDeidentifyTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  SharedDtor();
}

void UpdateDeidentifyTemplateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deidentify_template_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateDeidentifyTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDeidentifyTemplateRequest& UpdateDeidentifyTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void UpdateDeidentifyTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && deidentify_template_ != nullptr) {
    delete deidentify_template_;
  }
  deidentify_template_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateDeidentifyTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateDeidentifyTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DeidentifyTemplate::_InternalParse;
        object = msg->mutable_deidentify_template();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FieldMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateDeidentifyTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deidentify_template()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateDeidentifyTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
  if (this->has_deidentify_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::deidentify_template(this), output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::update_mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
}

::google::protobuf::uint8* UpdateDeidentifyTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
  if (this->has_deidentify_template()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::deidentify_template(this), target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::update_mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  return target;
}

size_t UpdateDeidentifyTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
  if (this->has_deidentify_template()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deidentify_template_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeidentifyTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDeidentifyTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateDeidentifyTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
    MergeFrom(*source);
  }
}

void UpdateDeidentifyTemplateRequest::MergeFrom(const UpdateDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_deidentify_template()) {
    mutable_deidentify_template()->::google::privacy::dlp::v2::DeidentifyTemplate::MergeFrom(from.deidentify_template());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateDeidentifyTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeidentifyTemplateRequest::CopyFrom(const UpdateDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeidentifyTemplateRequest::IsInitialized() const {
  return true;
}

void UpdateDeidentifyTemplateRequest::Swap(UpdateDeidentifyTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateDeidentifyTemplateRequest::InternalSwap(UpdateDeidentifyTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(deidentify_template_, other->deidentify_template_);
  swap(update_mask_, other->update_mask_);
}

::google::protobuf::Metadata UpdateDeidentifyTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetDeidentifyTemplateRequest::InitAsDefaultInstance() {
}
class GetDeidentifyTemplateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDeidentifyTemplateRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDeidentifyTemplateRequest::GetDeidentifyTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
}
GetDeidentifyTemplateRequest::GetDeidentifyTemplateRequest(const GetDeidentifyTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
}

void GetDeidentifyTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetDeidentifyTemplateRequest::~GetDeidentifyTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  SharedDtor();
}

void GetDeidentifyTemplateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetDeidentifyTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeidentifyTemplateRequest& GetDeidentifyTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void GetDeidentifyTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDeidentifyTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetDeidentifyTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDeidentifyTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDeidentifyTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
}

::google::protobuf::uint8* GetDeidentifyTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetDeidentifyTemplateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  return target;
}

size_t GetDeidentifyTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeidentifyTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeidentifyTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetDeidentifyTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
    MergeFrom(*source);
  }
}

void GetDeidentifyTemplateRequest::MergeFrom(const GetDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetDeidentifyTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeidentifyTemplateRequest::CopyFrom(const GetDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.GetDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeidentifyTemplateRequest::IsInitialized() const {
  return true;
}

void GetDeidentifyTemplateRequest::Swap(GetDeidentifyTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDeidentifyTemplateRequest::InternalSwap(GetDeidentifyTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetDeidentifyTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDeidentifyTemplatesRequest::InitAsDefaultInstance() {
}
class ListDeidentifyTemplatesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDeidentifyTemplatesRequest::kParentFieldNumber;
const int ListDeidentifyTemplatesRequest::kPageTokenFieldNumber;
const int ListDeidentifyTemplatesRequest::kPageSizeFieldNumber;
const int ListDeidentifyTemplatesRequest::kOrderByFieldNumber;
const int ListDeidentifyTemplatesRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDeidentifyTemplatesRequest::ListDeidentifyTemplatesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
}
ListDeidentifyTemplatesRequest::ListDeidentifyTemplatesRequest(const ListDeidentifyTemplatesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_by().size() > 0) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
}

void ListDeidentifyTemplatesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDeidentifyTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListDeidentifyTemplatesRequest::~ListDeidentifyTemplatesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  SharedDtor();
}

void ListDeidentifyTemplatesRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDeidentifyTemplatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDeidentifyTemplatesRequest& ListDeidentifyTemplatesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDeidentifyTemplatesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListDeidentifyTemplatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDeidentifyTemplatesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDeidentifyTemplatesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string order_by = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.order_by");
        object = msg->mutable_order_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDeidentifyTemplatesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_by = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), static_cast<int>(this->order_by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.order_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDeidentifyTemplatesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_by(), output);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
}

::google::protobuf::uint8* ListDeidentifyTemplatesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_by(), target);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  return target;
}

size_t ListDeidentifyTemplatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDeidentifyTemplatesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDeidentifyTemplatesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListDeidentifyTemplatesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
    MergeFrom(*source);
  }
}

void ListDeidentifyTemplatesRequest::MergeFrom(const ListDeidentifyTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListDeidentifyTemplatesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDeidentifyTemplatesRequest::CopyFrom(const ListDeidentifyTemplatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeidentifyTemplatesRequest::IsInitialized() const {
  return true;
}

void ListDeidentifyTemplatesRequest::Swap(ListDeidentifyTemplatesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDeidentifyTemplatesRequest::InternalSwap(ListDeidentifyTemplatesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_by_.Swap(&other->order_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListDeidentifyTemplatesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListDeidentifyTemplatesResponse::InitAsDefaultInstance() {
}
class ListDeidentifyTemplatesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListDeidentifyTemplatesResponse::kDeidentifyTemplatesFieldNumber;
const int ListDeidentifyTemplatesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListDeidentifyTemplatesResponse::ListDeidentifyTemplatesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
}
ListDeidentifyTemplatesResponse::ListDeidentifyTemplatesResponse(const ListDeidentifyTemplatesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      deidentify_templates_(from.deidentify_templates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
}

void ListDeidentifyTemplatesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListDeidentifyTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListDeidentifyTemplatesResponse::~ListDeidentifyTemplatesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  SharedDtor();
}

void ListDeidentifyTemplatesResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListDeidentifyTemplatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDeidentifyTemplatesResponse& ListDeidentifyTemplatesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListDeidentifyTemplatesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListDeidentifyTemplatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deidentify_templates_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListDeidentifyTemplatesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListDeidentifyTemplatesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::DeidentifyTemplate::_InternalParse;
          object = msg->add_deidentify_templates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListDeidentifyTemplatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deidentify_templates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListDeidentifyTemplatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deidentify_templates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->deidentify_templates(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
}

::google::protobuf::uint8* ListDeidentifyTemplatesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deidentify_templates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->deidentify_templates(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  return target;
}

size_t ListDeidentifyTemplatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->deidentify_templates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deidentify_templates(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDeidentifyTemplatesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDeidentifyTemplatesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListDeidentifyTemplatesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
    MergeFrom(*source);
  }
}

void ListDeidentifyTemplatesResponse::MergeFrom(const ListDeidentifyTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deidentify_templates_.MergeFrom(from.deidentify_templates_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListDeidentifyTemplatesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDeidentifyTemplatesResponse::CopyFrom(const ListDeidentifyTemplatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListDeidentifyTemplatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDeidentifyTemplatesResponse::IsInitialized() const {
  return true;
}

void ListDeidentifyTemplatesResponse::Swap(ListDeidentifyTemplatesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListDeidentifyTemplatesResponse::InternalSwap(ListDeidentifyTemplatesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&deidentify_templates_)->InternalSwap(CastToBase(&other->deidentify_templates_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListDeidentifyTemplatesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteDeidentifyTemplateRequest::InitAsDefaultInstance() {
}
class DeleteDeidentifyTemplateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteDeidentifyTemplateRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteDeidentifyTemplateRequest::DeleteDeidentifyTemplateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
}
DeleteDeidentifyTemplateRequest::DeleteDeidentifyTemplateRequest(const DeleteDeidentifyTemplateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
}

void DeleteDeidentifyTemplateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteDeidentifyTemplateRequest::~DeleteDeidentifyTemplateRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  SharedDtor();
}

void DeleteDeidentifyTemplateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteDeidentifyTemplateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDeidentifyTemplateRequest& DeleteDeidentifyTemplateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteDeidentifyTemplateRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeleteDeidentifyTemplateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteDeidentifyTemplateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteDeidentifyTemplateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteDeidentifyTemplateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteDeidentifyTemplateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
}

::google::protobuf::uint8* DeleteDeidentifyTemplateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  return target;
}

size_t DeleteDeidentifyTemplateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDeidentifyTemplateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDeidentifyTemplateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteDeidentifyTemplateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
    MergeFrom(*source);
  }
}

void DeleteDeidentifyTemplateRequest::MergeFrom(const DeleteDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteDeidentifyTemplateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDeidentifyTemplateRequest::CopyFrom(const DeleteDeidentifyTemplateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeidentifyTemplateRequest::IsInitialized() const {
  return true;
}

void DeleteDeidentifyTemplateRequest::Swap(DeleteDeidentifyTemplateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteDeidentifyTemplateRequest::InternalSwap(DeleteDeidentifyTemplateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteDeidentifyTemplateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LargeCustomDictionaryConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_LargeCustomDictionaryConfig_default_instance_._instance.get_mutable()->output_path_ = const_cast< ::google::privacy::dlp::v2::CloudStoragePath*>(
      ::google::privacy::dlp::v2::CloudStoragePath::internal_default_instance());
  ::google::privacy::dlp::v2::_LargeCustomDictionaryConfig_default_instance_.cloud_storage_file_set_ = const_cast< ::google::privacy::dlp::v2::CloudStorageFileSet*>(
      ::google::privacy::dlp::v2::CloudStorageFileSet::internal_default_instance());
  ::google::privacy::dlp::v2::_LargeCustomDictionaryConfig_default_instance_.big_query_field_ = const_cast< ::google::privacy::dlp::v2::BigQueryField*>(
      ::google::privacy::dlp::v2::BigQueryField::internal_default_instance());
}
class LargeCustomDictionaryConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CloudStoragePath& output_path(const LargeCustomDictionaryConfig* msg);
  static const ::google::privacy::dlp::v2::CloudStorageFileSet& cloud_storage_file_set(const LargeCustomDictionaryConfig* msg);
  static const ::google::privacy::dlp::v2::BigQueryField& big_query_field(const LargeCustomDictionaryConfig* msg);
};

const ::google::privacy::dlp::v2::CloudStoragePath&
LargeCustomDictionaryConfig::HasBitSetters::output_path(const LargeCustomDictionaryConfig* msg) {
  return *msg->output_path_;
}
const ::google::privacy::dlp::v2::CloudStorageFileSet&
LargeCustomDictionaryConfig::HasBitSetters::cloud_storage_file_set(const LargeCustomDictionaryConfig* msg) {
  return *msg->source_.cloud_storage_file_set_;
}
const ::google::privacy::dlp::v2::BigQueryField&
LargeCustomDictionaryConfig::HasBitSetters::big_query_field(const LargeCustomDictionaryConfig* msg) {
  return *msg->source_.big_query_field_;
}
void LargeCustomDictionaryConfig::clear_output_path() {
  if (GetArenaNoVirtual() == nullptr && output_path_ != nullptr) {
    delete output_path_;
  }
  output_path_ = nullptr;
}
void LargeCustomDictionaryConfig::set_allocated_cloud_storage_file_set(::google::privacy::dlp::v2::CloudStorageFileSet* cloud_storage_file_set) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (cloud_storage_file_set) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cloud_storage_file_set = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud_storage_file_set, submessage_arena);
    }
    set_has_cloud_storage_file_set();
    source_.cloud_storage_file_set_ = cloud_storage_file_set;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.LargeCustomDictionaryConfig.cloud_storage_file_set)
}
void LargeCustomDictionaryConfig::clear_cloud_storage_file_set() {
  if (has_cloud_storage_file_set()) {
    delete source_.cloud_storage_file_set_;
    clear_has_source();
  }
}
void LargeCustomDictionaryConfig::set_allocated_big_query_field(::google::privacy::dlp::v2::BigQueryField* big_query_field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (big_query_field) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      big_query_field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, big_query_field, submessage_arena);
    }
    set_has_big_query_field();
    source_.big_query_field_ = big_query_field;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.LargeCustomDictionaryConfig.big_query_field)
}
void LargeCustomDictionaryConfig::clear_big_query_field() {
  if (has_big_query_field()) {
    delete source_.big_query_field_;
    clear_has_source();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LargeCustomDictionaryConfig::kOutputPathFieldNumber;
const int LargeCustomDictionaryConfig::kCloudStorageFileSetFieldNumber;
const int LargeCustomDictionaryConfig::kBigQueryFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LargeCustomDictionaryConfig::LargeCustomDictionaryConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
}
LargeCustomDictionaryConfig::LargeCustomDictionaryConfig(const LargeCustomDictionaryConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_output_path()) {
    output_path_ = new ::google::privacy::dlp::v2::CloudStoragePath(*from.output_path_);
  } else {
    output_path_ = nullptr;
  }
  clear_has_source();
  switch (from.source_case()) {
    case kCloudStorageFileSet: {
      mutable_cloud_storage_file_set()->::google::privacy::dlp::v2::CloudStorageFileSet::MergeFrom(from.cloud_storage_file_set());
      break;
    }
    case kBigQueryField: {
      mutable_big_query_field()->::google::privacy::dlp::v2::BigQueryField::MergeFrom(from.big_query_field());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
}

void LargeCustomDictionaryConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  output_path_ = nullptr;
  clear_has_source();
}

LargeCustomDictionaryConfig::~LargeCustomDictionaryConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  SharedDtor();
}

void LargeCustomDictionaryConfig::SharedDtor() {
  if (this != internal_default_instance()) delete output_path_;
  if (has_source()) {
    clear_source();
  }
}

void LargeCustomDictionaryConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LargeCustomDictionaryConfig& LargeCustomDictionaryConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LargeCustomDictionaryConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void LargeCustomDictionaryConfig::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  switch (source_case()) {
    case kCloudStorageFileSet: {
      delete source_.cloud_storage_file_set_;
      break;
    }
    case kBigQueryField: {
      delete source_.big_query_field_;
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void LargeCustomDictionaryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && output_path_ != nullptr) {
    delete output_path_;
  }
  output_path_ = nullptr;
  clear_source();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LargeCustomDictionaryConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LargeCustomDictionaryConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CloudStoragePath output_path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CloudStoragePath::_InternalParse;
        object = msg->mutable_output_path();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CloudStorageFileSet::_InternalParse;
        object = msg->mutable_cloud_storage_file_set();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BigQueryField big_query_field = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryField::_InternalParse;
        object = msg->mutable_big_query_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LargeCustomDictionaryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CloudStoragePath output_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud_storage_file_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryField big_query_field = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_big_query_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LargeCustomDictionaryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CloudStoragePath output_path = 1;
  if (this->has_output_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::output_path(this), output);
  }

  // .google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
  if (has_cloud_storage_file_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cloud_storage_file_set(this), output);
  }

  // .google.privacy.dlp.v2.BigQueryField big_query_field = 3;
  if (has_big_query_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::big_query_field(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
}

::google::protobuf::uint8* LargeCustomDictionaryConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CloudStoragePath output_path = 1;
  if (this->has_output_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::output_path(this), target);
  }

  // .google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
  if (has_cloud_storage_file_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cloud_storage_file_set(this), target);
  }

  // .google.privacy.dlp.v2.BigQueryField big_query_field = 3;
  if (has_big_query_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::big_query_field(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  return target;
}

size_t LargeCustomDictionaryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CloudStoragePath output_path = 1;
  if (this->has_output_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *output_path_);
  }

  switch (source_case()) {
    // .google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
    case kCloudStorageFileSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.cloud_storage_file_set_);
      break;
    }
    // .google.privacy.dlp.v2.BigQueryField big_query_field = 3;
    case kBigQueryField: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.big_query_field_);
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeCustomDictionaryConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeCustomDictionaryConfig* source =
      ::google::protobuf::DynamicCastToGenerated<LargeCustomDictionaryConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
    MergeFrom(*source);
  }
}

void LargeCustomDictionaryConfig::MergeFrom(const LargeCustomDictionaryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_output_path()) {
    mutable_output_path()->::google::privacy::dlp::v2::CloudStoragePath::MergeFrom(from.output_path());
  }
  switch (from.source_case()) {
    case kCloudStorageFileSet: {
      mutable_cloud_storage_file_set()->::google::privacy::dlp::v2::CloudStorageFileSet::MergeFrom(from.cloud_storage_file_set());
      break;
    }
    case kBigQueryField: {
      mutable_big_query_field()->::google::privacy::dlp::v2::BigQueryField::MergeFrom(from.big_query_field());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void LargeCustomDictionaryConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeCustomDictionaryConfig::CopyFrom(const LargeCustomDictionaryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.LargeCustomDictionaryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeCustomDictionaryConfig::IsInitialized() const {
  return true;
}

void LargeCustomDictionaryConfig::Swap(LargeCustomDictionaryConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LargeCustomDictionaryConfig::InternalSwap(LargeCustomDictionaryConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(output_path_, other->output_path_);
  swap(source_, other->source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata LargeCustomDictionaryConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LargeCustomDictionaryStats::InitAsDefaultInstance() {
}
class LargeCustomDictionaryStats::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LargeCustomDictionaryStats::kApproxNumPhrasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LargeCustomDictionaryStats::LargeCustomDictionaryStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.LargeCustomDictionaryStats)
}
LargeCustomDictionaryStats::LargeCustomDictionaryStats(const LargeCustomDictionaryStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  approx_num_phrases_ = from.approx_num_phrases_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.LargeCustomDictionaryStats)
}

void LargeCustomDictionaryStats::SharedCtor() {
  approx_num_phrases_ = PROTOBUF_LONGLONG(0);
}

LargeCustomDictionaryStats::~LargeCustomDictionaryStats() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  SharedDtor();
}

void LargeCustomDictionaryStats::SharedDtor() {
}

void LargeCustomDictionaryStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LargeCustomDictionaryStats& LargeCustomDictionaryStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LargeCustomDictionaryStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void LargeCustomDictionaryStats::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approx_num_phrases_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LargeCustomDictionaryStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LargeCustomDictionaryStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 approx_num_phrases = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_approx_num_phrases(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LargeCustomDictionaryStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 approx_num_phrases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &approx_num_phrases_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LargeCustomDictionaryStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 approx_num_phrases = 1;
  if (this->approx_num_phrases() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->approx_num_phrases(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.LargeCustomDictionaryStats)
}

::google::protobuf::uint8* LargeCustomDictionaryStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 approx_num_phrases = 1;
  if (this->approx_num_phrases() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->approx_num_phrases(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  return target;
}

size_t LargeCustomDictionaryStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 approx_num_phrases = 1;
  if (this->approx_num_phrases() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->approx_num_phrases());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LargeCustomDictionaryStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LargeCustomDictionaryStats* source =
      ::google::protobuf::DynamicCastToGenerated<LargeCustomDictionaryStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.LargeCustomDictionaryStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.LargeCustomDictionaryStats)
    MergeFrom(*source);
  }
}

void LargeCustomDictionaryStats::MergeFrom(const LargeCustomDictionaryStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.approx_num_phrases() != 0) {
    set_approx_num_phrases(from.approx_num_phrases());
  }
}

void LargeCustomDictionaryStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeCustomDictionaryStats::CopyFrom(const LargeCustomDictionaryStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.LargeCustomDictionaryStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeCustomDictionaryStats::IsInitialized() const {
  return true;
}

void LargeCustomDictionaryStats::Swap(LargeCustomDictionaryStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LargeCustomDictionaryStats::InternalSwap(LargeCustomDictionaryStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(approx_num_phrases_, other->approx_num_phrases_);
}

::google::protobuf::Metadata LargeCustomDictionaryStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoredInfoTypeConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_.large_custom_dictionary_ = const_cast< ::google::privacy::dlp::v2::LargeCustomDictionaryConfig*>(
      ::google::privacy::dlp::v2::LargeCustomDictionaryConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_.dictionary_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Dictionary*>(
      ::google::privacy::dlp::v2::CustomInfoType_Dictionary::internal_default_instance());
  ::google::privacy::dlp::v2::_StoredInfoTypeConfig_default_instance_.regex_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Regex*>(
      ::google::privacy::dlp::v2::CustomInfoType_Regex::internal_default_instance());
}
class StoredInfoTypeConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::LargeCustomDictionaryConfig& large_custom_dictionary(const StoredInfoTypeConfig* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_Dictionary& dictionary(const StoredInfoTypeConfig* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_Regex& regex(const StoredInfoTypeConfig* msg);
};

const ::google::privacy::dlp::v2::LargeCustomDictionaryConfig&
StoredInfoTypeConfig::HasBitSetters::large_custom_dictionary(const StoredInfoTypeConfig* msg) {
  return *msg->type_.large_custom_dictionary_;
}
const ::google::privacy::dlp::v2::CustomInfoType_Dictionary&
StoredInfoTypeConfig::HasBitSetters::dictionary(const StoredInfoTypeConfig* msg) {
  return *msg->type_.dictionary_;
}
const ::google::privacy::dlp::v2::CustomInfoType_Regex&
StoredInfoTypeConfig::HasBitSetters::regex(const StoredInfoTypeConfig* msg) {
  return *msg->type_.regex_;
}
void StoredInfoTypeConfig::set_allocated_large_custom_dictionary(::google::privacy::dlp::v2::LargeCustomDictionaryConfig* large_custom_dictionary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (large_custom_dictionary) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      large_custom_dictionary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, large_custom_dictionary, submessage_arena);
    }
    set_has_large_custom_dictionary();
    type_.large_custom_dictionary_ = large_custom_dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeConfig.large_custom_dictionary)
}
void StoredInfoTypeConfig::set_allocated_dictionary(::google::privacy::dlp::v2::CustomInfoType_Dictionary* dictionary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (dictionary) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dictionary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dictionary, submessage_arena);
    }
    set_has_dictionary();
    type_.dictionary_ = dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeConfig.dictionary)
}
void StoredInfoTypeConfig::clear_dictionary() {
  if (has_dictionary()) {
    delete type_.dictionary_;
    clear_has_type();
  }
}
void StoredInfoTypeConfig::set_allocated_regex(::google::privacy::dlp::v2::CustomInfoType_Regex* regex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (regex) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, regex, submessage_arena);
    }
    set_has_regex();
    type_.regex_ = regex;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeConfig.regex)
}
void StoredInfoTypeConfig::clear_regex() {
  if (has_regex()) {
    delete type_.regex_;
    clear_has_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredInfoTypeConfig::kDisplayNameFieldNumber;
const int StoredInfoTypeConfig::kDescriptionFieldNumber;
const int StoredInfoTypeConfig::kLargeCustomDictionaryFieldNumber;
const int StoredInfoTypeConfig::kDictionaryFieldNumber;
const int StoredInfoTypeConfig::kRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredInfoTypeConfig::StoredInfoTypeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StoredInfoTypeConfig)
}
StoredInfoTypeConfig::StoredInfoTypeConfig(const StoredInfoTypeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  clear_has_type();
  switch (from.type_case()) {
    case kLargeCustomDictionary: {
      mutable_large_custom_dictionary()->::google::privacy::dlp::v2::LargeCustomDictionaryConfig::MergeFrom(from.large_custom_dictionary());
      break;
    }
    case kDictionary: {
      mutable_dictionary()->::google::privacy::dlp::v2::CustomInfoType_Dictionary::MergeFrom(from.dictionary());
      break;
    }
    case kRegex: {
      mutable_regex()->::google::privacy::dlp::v2::CustomInfoType_Regex::MergeFrom(from.regex());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StoredInfoTypeConfig)
}

void StoredInfoTypeConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}

StoredInfoTypeConfig::~StoredInfoTypeConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StoredInfoTypeConfig)
  SharedDtor();
}

void StoredInfoTypeConfig::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
}

void StoredInfoTypeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredInfoTypeConfig& StoredInfoTypeConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredInfoTypeConfig_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void StoredInfoTypeConfig::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  switch (type_case()) {
    case kLargeCustomDictionary: {
      delete type_.large_custom_dictionary_;
      break;
    }
    case kDictionary: {
      delete type_.dictionary_;
      break;
    }
    case kRegex: {
      delete type_.regex_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void StoredInfoTypeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredInfoTypeConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredInfoTypeConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.StoredInfoTypeConfig.display_name");
        object = msg->mutable_display_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.StoredInfoTypeConfig.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::LargeCustomDictionaryConfig::_InternalParse;
        object = msg->mutable_large_custom_dictionary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Dictionary::_InternalParse;
        object = msg->mutable_dictionary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Regex::_InternalParse;
        object = msg->mutable_regex();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredInfoTypeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string display_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.StoredInfoTypeConfig.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.StoredInfoTypeConfig.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_large_custom_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StoredInfoTypeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StoredInfoTypeConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredInfoTypeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredInfoTypeConfig.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->display_name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredInfoTypeConfig.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // .google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
  if (has_large_custom_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::large_custom_dictionary(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 4;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::dictionary(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 5;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::regex(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StoredInfoTypeConfig)
}

::google::protobuf::uint8* StoredInfoTypeConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredInfoTypeConfig.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->display_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredInfoTypeConfig.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // .google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
  if (has_large_custom_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::large_custom_dictionary(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 4;
  if (has_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::dictionary(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 5;
  if (has_regex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::regex(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StoredInfoTypeConfig)
  return target;
}

size_t StoredInfoTypeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_name = 1;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
    case kLargeCustomDictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.large_custom_dictionary_);
      break;
    }
    // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 4;
    case kDictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.dictionary_);
      break;
    }
    // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 5;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.regex_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredInfoTypeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredInfoTypeConfig* source =
      ::google::protobuf::DynamicCastToGenerated<StoredInfoTypeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StoredInfoTypeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StoredInfoTypeConfig)
    MergeFrom(*source);
  }
}

void StoredInfoTypeConfig::MergeFrom(const StoredInfoTypeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  switch (from.type_case()) {
    case kLargeCustomDictionary: {
      mutable_large_custom_dictionary()->::google::privacy::dlp::v2::LargeCustomDictionaryConfig::MergeFrom(from.large_custom_dictionary());
      break;
    }
    case kDictionary: {
      mutable_dictionary()->::google::privacy::dlp::v2::CustomInfoType_Dictionary::MergeFrom(from.dictionary());
      break;
    }
    case kRegex: {
      mutable_regex()->::google::privacy::dlp::v2::CustomInfoType_Regex::MergeFrom(from.regex());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void StoredInfoTypeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredInfoTypeConfig::CopyFrom(const StoredInfoTypeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StoredInfoTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredInfoTypeConfig::IsInitialized() const {
  return true;
}

void StoredInfoTypeConfig::Swap(StoredInfoTypeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredInfoTypeConfig::InternalSwap(StoredInfoTypeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  display_name_.Swap(&other->display_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata StoredInfoTypeConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoredInfoTypeStats::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StoredInfoTypeStats_default_instance_.large_custom_dictionary_ = const_cast< ::google::privacy::dlp::v2::LargeCustomDictionaryStats*>(
      ::google::privacy::dlp::v2::LargeCustomDictionaryStats::internal_default_instance());
}
class StoredInfoTypeStats::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::LargeCustomDictionaryStats& large_custom_dictionary(const StoredInfoTypeStats* msg);
};

const ::google::privacy::dlp::v2::LargeCustomDictionaryStats&
StoredInfoTypeStats::HasBitSetters::large_custom_dictionary(const StoredInfoTypeStats* msg) {
  return *msg->type_.large_custom_dictionary_;
}
void StoredInfoTypeStats::set_allocated_large_custom_dictionary(::google::privacy::dlp::v2::LargeCustomDictionaryStats* large_custom_dictionary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (large_custom_dictionary) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      large_custom_dictionary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, large_custom_dictionary, submessage_arena);
    }
    set_has_large_custom_dictionary();
    type_.large_custom_dictionary_ = large_custom_dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StoredInfoTypeStats.large_custom_dictionary)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredInfoTypeStats::kLargeCustomDictionaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredInfoTypeStats::StoredInfoTypeStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StoredInfoTypeStats)
}
StoredInfoTypeStats::StoredInfoTypeStats(const StoredInfoTypeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kLargeCustomDictionary: {
      mutable_large_custom_dictionary()->::google::privacy::dlp::v2::LargeCustomDictionaryStats::MergeFrom(from.large_custom_dictionary());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StoredInfoTypeStats)
}

void StoredInfoTypeStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  clear_has_type();
}

StoredInfoTypeStats::~StoredInfoTypeStats() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StoredInfoTypeStats)
  SharedDtor();
}

void StoredInfoTypeStats::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void StoredInfoTypeStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredInfoTypeStats& StoredInfoTypeStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredInfoTypeStats_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void StoredInfoTypeStats::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  switch (type_case()) {
    case kLargeCustomDictionary: {
      delete type_.large_custom_dictionary_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void StoredInfoTypeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredInfoTypeStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredInfoTypeStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.LargeCustomDictionaryStats large_custom_dictionary = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::LargeCustomDictionaryStats::_InternalParse;
        object = msg->mutable_large_custom_dictionary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredInfoTypeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.LargeCustomDictionaryStats large_custom_dictionary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_large_custom_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StoredInfoTypeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StoredInfoTypeStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredInfoTypeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.LargeCustomDictionaryStats large_custom_dictionary = 1;
  if (has_large_custom_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::large_custom_dictionary(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StoredInfoTypeStats)
}

::google::protobuf::uint8* StoredInfoTypeStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.LargeCustomDictionaryStats large_custom_dictionary = 1;
  if (has_large_custom_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::large_custom_dictionary(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StoredInfoTypeStats)
  return target;
}

size_t StoredInfoTypeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .google.privacy.dlp.v2.LargeCustomDictionaryStats large_custom_dictionary = 1;
    case kLargeCustomDictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.large_custom_dictionary_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredInfoTypeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredInfoTypeStats* source =
      ::google::protobuf::DynamicCastToGenerated<StoredInfoTypeStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StoredInfoTypeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StoredInfoTypeStats)
    MergeFrom(*source);
  }
}

void StoredInfoTypeStats::MergeFrom(const StoredInfoTypeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kLargeCustomDictionary: {
      mutable_large_custom_dictionary()->::google::privacy::dlp::v2::LargeCustomDictionaryStats::MergeFrom(from.large_custom_dictionary());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void StoredInfoTypeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredInfoTypeStats::CopyFrom(const StoredInfoTypeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StoredInfoTypeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredInfoTypeStats::IsInitialized() const {
  return true;
}

void StoredInfoTypeStats::Swap(StoredInfoTypeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredInfoTypeStats::InternalSwap(StoredInfoTypeStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata StoredInfoTypeStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoredInfoTypeVersion::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StoredInfoTypeVersion_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::privacy::dlp::v2::StoredInfoTypeConfig*>(
      ::google::privacy::dlp::v2::StoredInfoTypeConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_StoredInfoTypeVersion_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_StoredInfoTypeVersion_default_instance_._instance.get_mutable()->stats_ = const_cast< ::google::privacy::dlp::v2::StoredInfoTypeStats*>(
      ::google::privacy::dlp::v2::StoredInfoTypeStats::internal_default_instance());
}
class StoredInfoTypeVersion::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::StoredInfoTypeConfig& config(const StoredInfoTypeVersion* msg);
  static const ::google::protobuf::Timestamp& create_time(const StoredInfoTypeVersion* msg);
  static const ::google::privacy::dlp::v2::StoredInfoTypeStats& stats(const StoredInfoTypeVersion* msg);
};

const ::google::privacy::dlp::v2::StoredInfoTypeConfig&
StoredInfoTypeVersion::HasBitSetters::config(const StoredInfoTypeVersion* msg) {
  return *msg->config_;
}
const ::google::protobuf::Timestamp&
StoredInfoTypeVersion::HasBitSetters::create_time(const StoredInfoTypeVersion* msg) {
  return *msg->create_time_;
}
const ::google::privacy::dlp::v2::StoredInfoTypeStats&
StoredInfoTypeVersion::HasBitSetters::stats(const StoredInfoTypeVersion* msg) {
  return *msg->stats_;
}
void StoredInfoTypeVersion::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredInfoTypeVersion::kConfigFieldNumber;
const int StoredInfoTypeVersion::kCreateTimeFieldNumber;
const int StoredInfoTypeVersion::kStateFieldNumber;
const int StoredInfoTypeVersion::kErrorsFieldNumber;
const int StoredInfoTypeVersion::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredInfoTypeVersion::StoredInfoTypeVersion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StoredInfoTypeVersion)
}
StoredInfoTypeVersion::StoredInfoTypeVersion(const StoredInfoTypeVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::google::privacy::dlp::v2::StoredInfoTypeConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from.has_stats()) {
    stats_ = new ::google::privacy::dlp::v2::StoredInfoTypeStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StoredInfoTypeVersion)
}

void StoredInfoTypeVersion::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&config_)) + sizeof(state_));
}

StoredInfoTypeVersion::~StoredInfoTypeVersion() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StoredInfoTypeVersion)
  SharedDtor();
}

void StoredInfoTypeVersion::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete stats_;
}

void StoredInfoTypeVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredInfoTypeVersion& StoredInfoTypeVersion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredInfoTypeVersion_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void StoredInfoTypeVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredInfoTypeVersion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredInfoTypeVersion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StoredInfoTypeConfig::_InternalParse;
        object = msg->mutable_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.StoredInfoTypeState state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::google::privacy::dlp::v2::StoredInfoTypeState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.Error errors = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Error::_InternalParse;
          object = msg->add_errors();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.StoredInfoTypeStats stats = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StoredInfoTypeStats::_InternalParse;
        object = msg->mutable_stats();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredInfoTypeVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StoredInfoTypeState state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::google::privacy::dlp::v2::StoredInfoTypeState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Error errors = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StoredInfoTypeStats stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StoredInfoTypeVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StoredInfoTypeVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredInfoTypeVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::config(this), output);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::create_time(this), output);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // repeated .google.privacy.dlp.v2.Error errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->errors(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeStats stats = 5;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StoredInfoTypeVersion)
}

::google::protobuf::uint8* StoredInfoTypeVersion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::config(this), target);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::create_time(this), target);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // repeated .google.privacy.dlp.v2.Error errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->errors(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeStats stats = 5;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StoredInfoTypeVersion)
  return target;
}

size_t StoredInfoTypeVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Error errors = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeStats stats = 5;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredInfoTypeVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredInfoTypeVersion* source =
      ::google::protobuf::DynamicCastToGenerated<StoredInfoTypeVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StoredInfoTypeVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StoredInfoTypeVersion)
    MergeFrom(*source);
  }
}

void StoredInfoTypeVersion::MergeFrom(const StoredInfoTypeVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.has_config()) {
    mutable_config()->::google::privacy::dlp::v2::StoredInfoTypeConfig::MergeFrom(from.config());
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_stats()) {
    mutable_stats()->::google::privacy::dlp::v2::StoredInfoTypeStats::MergeFrom(from.stats());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void StoredInfoTypeVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredInfoTypeVersion::CopyFrom(const StoredInfoTypeVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StoredInfoTypeVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredInfoTypeVersion::IsInitialized() const {
  return true;
}

void StoredInfoTypeVersion::Swap(StoredInfoTypeVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredInfoTypeVersion::InternalSwap(StoredInfoTypeVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  swap(config_, other->config_);
  swap(create_time_, other->create_time_);
  swap(stats_, other->stats_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata StoredInfoTypeVersion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoredInfoType::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StoredInfoType_default_instance_._instance.get_mutable()->current_version_ = const_cast< ::google::privacy::dlp::v2::StoredInfoTypeVersion*>(
      ::google::privacy::dlp::v2::StoredInfoTypeVersion::internal_default_instance());
}
class StoredInfoType::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::StoredInfoTypeVersion& current_version(const StoredInfoType* msg);
};

const ::google::privacy::dlp::v2::StoredInfoTypeVersion&
StoredInfoType::HasBitSetters::current_version(const StoredInfoType* msg) {
  return *msg->current_version_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredInfoType::kNameFieldNumber;
const int StoredInfoType::kCurrentVersionFieldNumber;
const int StoredInfoType::kPendingVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredInfoType::StoredInfoType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StoredInfoType)
}
StoredInfoType::StoredInfoType(const StoredInfoType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      pending_versions_(from.pending_versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_current_version()) {
    current_version_ = new ::google::privacy::dlp::v2::StoredInfoTypeVersion(*from.current_version_);
  } else {
    current_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StoredInfoType)
}

void StoredInfoType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_version_ = nullptr;
}

StoredInfoType::~StoredInfoType() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StoredInfoType)
  SharedDtor();
}

void StoredInfoType::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_version_;
}

void StoredInfoType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredInfoType& StoredInfoType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredInfoType_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void StoredInfoType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StoredInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_versions_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && current_version_ != nullptr) {
    delete current_version_;
  }
  current_version_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredInfoType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredInfoType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.StoredInfoType.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StoredInfoTypeVersion::_InternalParse;
        object = msg->mutable_current_version();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::StoredInfoTypeVersion::_InternalParse;
          object = msg->add_pending_versions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredInfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StoredInfoType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.StoredInfoType.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pending_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StoredInfoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StoredInfoType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredInfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StoredInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredInfoType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
  if (this->has_current_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::current_version(this), output);
  }

  // repeated .google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_versions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->pending_versions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StoredInfoType)
}

::google::protobuf::uint8* StoredInfoType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StoredInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredInfoType.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
  if (this->has_current_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::current_version(this), target);
  }

  // repeated .google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pending_versions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->pending_versions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StoredInfoType)
  return target;
}

size_t StoredInfoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StoredInfoType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pending_versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pending_versions(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
  if (this->has_current_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *current_version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredInfoType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StoredInfoType)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredInfoType* source =
      ::google::protobuf::DynamicCastToGenerated<StoredInfoType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StoredInfoType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StoredInfoType)
    MergeFrom(*source);
  }
}

void StoredInfoType::MergeFrom(const StoredInfoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StoredInfoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_versions_.MergeFrom(from.pending_versions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_current_version()) {
    mutable_current_version()->::google::privacy::dlp::v2::StoredInfoTypeVersion::MergeFrom(from.current_version());
  }
}

void StoredInfoType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StoredInfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredInfoType::CopyFrom(const StoredInfoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StoredInfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredInfoType::IsInitialized() const {
  return true;
}

void StoredInfoType::Swap(StoredInfoType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredInfoType::InternalSwap(StoredInfoType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pending_versions_)->InternalSwap(CastToBase(&other->pending_versions_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(current_version_, other->current_version_);
}

::google::protobuf::Metadata StoredInfoType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateStoredInfoTypeRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CreateStoredInfoTypeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::privacy::dlp::v2::StoredInfoTypeConfig*>(
      ::google::privacy::dlp::v2::StoredInfoTypeConfig::internal_default_instance());
}
class CreateStoredInfoTypeRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::StoredInfoTypeConfig& config(const CreateStoredInfoTypeRequest* msg);
};

const ::google::privacy::dlp::v2::StoredInfoTypeConfig&
CreateStoredInfoTypeRequest::HasBitSetters::config(const CreateStoredInfoTypeRequest* msg) {
  return *msg->config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateStoredInfoTypeRequest::kParentFieldNumber;
const int CreateStoredInfoTypeRequest::kConfigFieldNumber;
const int CreateStoredInfoTypeRequest::kStoredInfoTypeIdFieldNumber;
const int CreateStoredInfoTypeRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateStoredInfoTypeRequest::CreateStoredInfoTypeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
}
CreateStoredInfoTypeRequest::CreateStoredInfoTypeRequest(const CreateStoredInfoTypeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  stored_info_type_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stored_info_type_id().size() > 0) {
    stored_info_type_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stored_info_type_id_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_config()) {
    config_ = new ::google::privacy::dlp::v2::StoredInfoTypeConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
}

void CreateStoredInfoTypeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stored_info_type_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = nullptr;
}

CreateStoredInfoTypeRequest::~CreateStoredInfoTypeRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  SharedDtor();
}

void CreateStoredInfoTypeRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stored_info_type_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void CreateStoredInfoTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStoredInfoTypeRequest& CreateStoredInfoTypeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void CreateStoredInfoTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stored_info_type_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateStoredInfoTypeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateStoredInfoTypeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StoredInfoTypeConfig::_InternalParse;
        object = msg->mutable_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string stored_info_type_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id");
        object = msg->mutable_stored_info_type_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CreateStoredInfoTypeRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateStoredInfoTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stored_info_type_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stored_info_type_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stored_info_type_id().data(), static_cast<int>(this->stored_info_type_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateStoredInfoTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::config(this), output);
  }

  // string stored_info_type_id = 3;
  if (this->stored_info_type_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stored_info_type_id().data(), static_cast<int>(this->stored_info_type_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stored_info_type_id(), output);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
}

::google::protobuf::uint8* CreateStoredInfoTypeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::config(this), target);
  }

  // string stored_info_type_id = 3;
  if (this->stored_info_type_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stored_info_type_id().data(), static_cast<int>(this->stored_info_type_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.stored_info_type_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stored_info_type_id(), target);
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CreateStoredInfoTypeRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  return target;
}

size_t CreateStoredInfoTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string stored_info_type_id = 3;
  if (this->stored_info_type_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stored_info_type_id());
  }

  // string location_id = 4;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStoredInfoTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStoredInfoTypeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateStoredInfoTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
    MergeFrom(*source);
  }
}

void CreateStoredInfoTypeRequest::MergeFrom(const CreateStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.stored_info_type_id().size() > 0) {

    stored_info_type_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stored_info_type_id_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.has_config()) {
    mutable_config()->::google::privacy::dlp::v2::StoredInfoTypeConfig::MergeFrom(from.config());
  }
}

void CreateStoredInfoTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStoredInfoTypeRequest::CopyFrom(const CreateStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CreateStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStoredInfoTypeRequest::IsInitialized() const {
  return true;
}

void CreateStoredInfoTypeRequest::Swap(CreateStoredInfoTypeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateStoredInfoTypeRequest::InternalSwap(CreateStoredInfoTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stored_info_type_id_.Swap(&other->stored_info_type_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
}

::google::protobuf::Metadata CreateStoredInfoTypeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateStoredInfoTypeRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_UpdateStoredInfoTypeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::google::privacy::dlp::v2::StoredInfoTypeConfig*>(
      ::google::privacy::dlp::v2::StoredInfoTypeConfig::internal_default_instance());
  ::google::privacy::dlp::v2::_UpdateStoredInfoTypeRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
class UpdateStoredInfoTypeRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::StoredInfoTypeConfig& config(const UpdateStoredInfoTypeRequest* msg);
  static const ::google::protobuf::FieldMask& update_mask(const UpdateStoredInfoTypeRequest* msg);
};

const ::google::privacy::dlp::v2::StoredInfoTypeConfig&
UpdateStoredInfoTypeRequest::HasBitSetters::config(const UpdateStoredInfoTypeRequest* msg) {
  return *msg->config_;
}
const ::google::protobuf::FieldMask&
UpdateStoredInfoTypeRequest::HasBitSetters::update_mask(const UpdateStoredInfoTypeRequest* msg) {
  return *msg->update_mask_;
}
void UpdateStoredInfoTypeRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateStoredInfoTypeRequest::kNameFieldNumber;
const int UpdateStoredInfoTypeRequest::kConfigFieldNumber;
const int UpdateStoredInfoTypeRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateStoredInfoTypeRequest::UpdateStoredInfoTypeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
}
UpdateStoredInfoTypeRequest::UpdateStoredInfoTypeRequest(const UpdateStoredInfoTypeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    config_ = new ::google::privacy::dlp::v2::StoredInfoTypeConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
}

void UpdateStoredInfoTypeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&config_)) + sizeof(update_mask_));
}

UpdateStoredInfoTypeRequest::~UpdateStoredInfoTypeRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  SharedDtor();
}

void UpdateStoredInfoTypeRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateStoredInfoTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateStoredInfoTypeRequest& UpdateStoredInfoTypeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void UpdateStoredInfoTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateStoredInfoTypeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateStoredInfoTypeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StoredInfoTypeConfig::_InternalParse;
        object = msg->mutable_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::FieldMask::_InternalParse;
        object = msg->mutable_update_mask();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateStoredInfoTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateStoredInfoTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::config(this), output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::update_mask(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
}

::google::protobuf::uint8* UpdateStoredInfoTypeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::config(this), target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::update_mask(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  return target;
}

size_t UpdateStoredInfoTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateStoredInfoTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateStoredInfoTypeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateStoredInfoTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
    MergeFrom(*source);
  }
}

void UpdateStoredInfoTypeRequest::MergeFrom(const UpdateStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_config()) {
    mutable_config()->::google::privacy::dlp::v2::StoredInfoTypeConfig::MergeFrom(from.config());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateStoredInfoTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStoredInfoTypeRequest::CopyFrom(const UpdateStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.UpdateStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStoredInfoTypeRequest::IsInitialized() const {
  return true;
}

void UpdateStoredInfoTypeRequest::Swap(UpdateStoredInfoTypeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateStoredInfoTypeRequest::InternalSwap(UpdateStoredInfoTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
  swap(update_mask_, other->update_mask_);
}

::google::protobuf::Metadata UpdateStoredInfoTypeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetStoredInfoTypeRequest::InitAsDefaultInstance() {
}
class GetStoredInfoTypeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStoredInfoTypeRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStoredInfoTypeRequest::GetStoredInfoTypeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
}
GetStoredInfoTypeRequest::GetStoredInfoTypeRequest(const GetStoredInfoTypeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
}

void GetStoredInfoTypeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetStoredInfoTypeRequest::~GetStoredInfoTypeRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  SharedDtor();
}

void GetStoredInfoTypeRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetStoredInfoTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoredInfoTypeRequest& GetStoredInfoTypeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void GetStoredInfoTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStoredInfoTypeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetStoredInfoTypeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.GetStoredInfoTypeRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStoredInfoTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.GetStoredInfoTypeRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStoredInfoTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetStoredInfoTypeRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
}

::google::protobuf::uint8* GetStoredInfoTypeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.GetStoredInfoTypeRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  return target;
}

size_t GetStoredInfoTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoredInfoTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoredInfoTypeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetStoredInfoTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
    MergeFrom(*source);
  }
}

void GetStoredInfoTypeRequest::MergeFrom(const GetStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetStoredInfoTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoredInfoTypeRequest::CopyFrom(const GetStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.GetStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoredInfoTypeRequest::IsInitialized() const {
  return true;
}

void GetStoredInfoTypeRequest::Swap(GetStoredInfoTypeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStoredInfoTypeRequest::InternalSwap(GetStoredInfoTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata GetStoredInfoTypeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListStoredInfoTypesRequest::InitAsDefaultInstance() {
}
class ListStoredInfoTypesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListStoredInfoTypesRequest::kParentFieldNumber;
const int ListStoredInfoTypesRequest::kPageTokenFieldNumber;
const int ListStoredInfoTypesRequest::kPageSizeFieldNumber;
const int ListStoredInfoTypesRequest::kOrderByFieldNumber;
const int ListStoredInfoTypesRequest::kLocationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListStoredInfoTypesRequest::ListStoredInfoTypesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
}
ListStoredInfoTypesRequest::ListStoredInfoTypesRequest(const ListStoredInfoTypesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_by().size() > 0) {
    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location_id().size() > 0) {
    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
}

void ListStoredInfoTypesRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListStoredInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListStoredInfoTypesRequest::~ListStoredInfoTypesRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  SharedDtor();
}

void ListStoredInfoTypesRequest::SharedDtor() {
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListStoredInfoTypesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStoredInfoTypesRequest& ListStoredInfoTypesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListStoredInfoTypesRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListStoredInfoTypesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListStoredInfoTypesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListStoredInfoTypesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent");
        object = msg->mutable_parent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token");
        object = msg->mutable_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 page_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_page_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string order_by = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListStoredInfoTypesRequest.order_by");
        object = msg->mutable_order_by();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string location_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListStoredInfoTypesRequest.location_id");
        object = msg->mutable_location_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListStoredInfoTypesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_by = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_by().data(), static_cast<int>(this->order_by().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListStoredInfoTypesRequest.order_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location_id().data(), static_cast<int>(this->location_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListStoredInfoTypesRequest.location_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListStoredInfoTypesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->page_token(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.order_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_by(), output);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->location_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
}

::google::protobuf::uint8* ListStoredInfoTypesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_by().data(), static_cast<int>(this->order_by().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.order_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_by(), target);
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location_id().data(), static_cast<int>(this->location_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesRequest.location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->location_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  return target;
}

size_t ListStoredInfoTypesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // string order_by = 4;
  if (this->order_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_by());
  }

  // string location_id = 5;
  if (this->location_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location_id());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStoredInfoTypesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStoredInfoTypesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListStoredInfoTypesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
    MergeFrom(*source);
  }
}

void ListStoredInfoTypesRequest::MergeFrom(const ListStoredInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {

    parent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_);
  }
  if (from.page_token().size() > 0) {

    page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token_);
  }
  if (from.order_by().size() > 0) {

    order_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_by_);
  }
  if (from.location_id().size() > 0) {

    location_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_id_);
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListStoredInfoTypesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStoredInfoTypesRequest::CopyFrom(const ListStoredInfoTypesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListStoredInfoTypesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStoredInfoTypesRequest::IsInitialized() const {
  return true;
}

void ListStoredInfoTypesRequest::Swap(ListStoredInfoTypesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListStoredInfoTypesRequest::InternalSwap(ListStoredInfoTypesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_by_.Swap(&other->order_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_id_.Swap(&other->location_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::google::protobuf::Metadata ListStoredInfoTypesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListStoredInfoTypesResponse::InitAsDefaultInstance() {
}
class ListStoredInfoTypesResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListStoredInfoTypesResponse::kStoredInfoTypesFieldNumber;
const int ListStoredInfoTypesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListStoredInfoTypesResponse::ListStoredInfoTypesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
}
ListStoredInfoTypesResponse::ListStoredInfoTypesResponse(const ListStoredInfoTypesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      stored_info_types_(from.stored_info_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
}

void ListStoredInfoTypesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListStoredInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListStoredInfoTypesResponse::~ListStoredInfoTypesResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  SharedDtor();
}

void ListStoredInfoTypesResponse::SharedDtor() {
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListStoredInfoTypesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListStoredInfoTypesResponse& ListStoredInfoTypesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListStoredInfoTypesResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void ListStoredInfoTypesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stored_info_types_.Clear();
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListStoredInfoTypesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListStoredInfoTypesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::StoredInfoType::_InternalParse;
          object = msg->add_stored_info_types();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string next_page_token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListStoredInfoTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stored_info_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListStoredInfoTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stored_info_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->stored_info_types(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
}

::google::protobuf::uint8* ListStoredInfoTypesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stored_info_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stored_info_types(static_cast<int>(i)), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.ListStoredInfoTypesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  return target;
}

size_t ListStoredInfoTypesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stored_info_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stored_info_types(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListStoredInfoTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListStoredInfoTypesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListStoredInfoTypesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
    MergeFrom(*source);
  }
}

void ListStoredInfoTypesResponse::MergeFrom(const ListStoredInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stored_info_types_.MergeFrom(from.stored_info_types_);
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void ListStoredInfoTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStoredInfoTypesResponse::CopyFrom(const ListStoredInfoTypesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.ListStoredInfoTypesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStoredInfoTypesResponse::IsInitialized() const {
  return true;
}

void ListStoredInfoTypesResponse::Swap(ListStoredInfoTypesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListStoredInfoTypesResponse::InternalSwap(ListStoredInfoTypesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stored_info_types_)->InternalSwap(CastToBase(&other->stored_info_types_));
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ListStoredInfoTypesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeleteStoredInfoTypeRequest::InitAsDefaultInstance() {
}
class DeleteStoredInfoTypeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteStoredInfoTypeRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteStoredInfoTypeRequest::DeleteStoredInfoTypeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
}
DeleteStoredInfoTypeRequest::DeleteStoredInfoTypeRequest(const DeleteStoredInfoTypeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
}

void DeleteStoredInfoTypeRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeleteStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteStoredInfoTypeRequest::~DeleteStoredInfoTypeRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  SharedDtor();
}

void DeleteStoredInfoTypeRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteStoredInfoTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStoredInfoTypeRequest& DeleteStoredInfoTypeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeleteStoredInfoTypeRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void DeleteStoredInfoTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeleteStoredInfoTypeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeleteStoredInfoTypeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeleteStoredInfoTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeleteStoredInfoTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
}

::google::protobuf::uint8* DeleteStoredInfoTypeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  return target;
}

size_t DeleteStoredInfoTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStoredInfoTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStoredInfoTypeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DeleteStoredInfoTypeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
    MergeFrom(*source);
  }
}

void DeleteStoredInfoTypeRequest::MergeFrom(const DeleteStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteStoredInfoTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStoredInfoTypeRequest::CopyFrom(const DeleteStoredInfoTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DeleteStoredInfoTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStoredInfoTypeRequest::IsInitialized() const {
  return true;
}

void DeleteStoredInfoTypeRequest::Swap(DeleteStoredInfoTypeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteStoredInfoTypeRequest::InternalSwap(DeleteStoredInfoTypeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DeleteStoredInfoTypeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HybridInspectJobTriggerRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_HybridInspectJobTriggerRequest_default_instance_._instance.get_mutable()->hybrid_item_ = const_cast< ::google::privacy::dlp::v2::HybridContentItem*>(
      ::google::privacy::dlp::v2::HybridContentItem::internal_default_instance());
}
class HybridInspectJobTriggerRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::HybridContentItem& hybrid_item(const HybridInspectJobTriggerRequest* msg);
};

const ::google::privacy::dlp::v2::HybridContentItem&
HybridInspectJobTriggerRequest::HasBitSetters::hybrid_item(const HybridInspectJobTriggerRequest* msg) {
  return *msg->hybrid_item_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridInspectJobTriggerRequest::kNameFieldNumber;
const int HybridInspectJobTriggerRequest::kHybridItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridInspectJobTriggerRequest::HybridInspectJobTriggerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
}
HybridInspectJobTriggerRequest::HybridInspectJobTriggerRequest(const HybridInspectJobTriggerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_hybrid_item()) {
    hybrid_item_ = new ::google::privacy::dlp::v2::HybridContentItem(*from.hybrid_item_);
  } else {
    hybrid_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
}

void HybridInspectJobTriggerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HybridInspectJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hybrid_item_ = nullptr;
}

HybridInspectJobTriggerRequest::~HybridInspectJobTriggerRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  SharedDtor();
}

void HybridInspectJobTriggerRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hybrid_item_;
}

void HybridInspectJobTriggerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridInspectJobTriggerRequest& HybridInspectJobTriggerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HybridInspectJobTriggerRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void HybridInspectJobTriggerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hybrid_item_ != nullptr) {
    delete hybrid_item_;
  }
  hybrid_item_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HybridInspectJobTriggerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HybridInspectJobTriggerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.HybridInspectJobTriggerRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::HybridContentItem::_InternalParse;
        object = msg->mutable_hybrid_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridInspectJobTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridInspectJobTriggerRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hybrid_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HybridInspectJobTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridInspectJobTriggerRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
  if (this->has_hybrid_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::hybrid_item(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
}

::google::protobuf::uint8* HybridInspectJobTriggerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridInspectJobTriggerRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
  if (this->has_hybrid_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::hybrid_item(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  return target;
}

size_t HybridInspectJobTriggerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
  if (this->has_hybrid_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hybrid_item_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridInspectJobTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridInspectJobTriggerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HybridInspectJobTriggerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
    MergeFrom(*source);
  }
}

void HybridInspectJobTriggerRequest::MergeFrom(const HybridInspectJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_hybrid_item()) {
    mutable_hybrid_item()->::google::privacy::dlp::v2::HybridContentItem::MergeFrom(from.hybrid_item());
  }
}

void HybridInspectJobTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridInspectJobTriggerRequest::CopyFrom(const HybridInspectJobTriggerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.HybridInspectJobTriggerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridInspectJobTriggerRequest::IsInitialized() const {
  return true;
}

void HybridInspectJobTriggerRequest::Swap(HybridInspectJobTriggerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridInspectJobTriggerRequest::InternalSwap(HybridInspectJobTriggerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hybrid_item_, other->hybrid_item_);
}

::google::protobuf::Metadata HybridInspectJobTriggerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HybridInspectDlpJobRequest::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_HybridInspectDlpJobRequest_default_instance_._instance.get_mutable()->hybrid_item_ = const_cast< ::google::privacy::dlp::v2::HybridContentItem*>(
      ::google::privacy::dlp::v2::HybridContentItem::internal_default_instance());
}
class HybridInspectDlpJobRequest::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::HybridContentItem& hybrid_item(const HybridInspectDlpJobRequest* msg);
};

const ::google::privacy::dlp::v2::HybridContentItem&
HybridInspectDlpJobRequest::HasBitSetters::hybrid_item(const HybridInspectDlpJobRequest* msg) {
  return *msg->hybrid_item_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridInspectDlpJobRequest::kNameFieldNumber;
const int HybridInspectDlpJobRequest::kHybridItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridInspectDlpJobRequest::HybridInspectDlpJobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
}
HybridInspectDlpJobRequest::HybridInspectDlpJobRequest(const HybridInspectDlpJobRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_hybrid_item()) {
    hybrid_item_ = new ::google::privacy::dlp::v2::HybridContentItem(*from.hybrid_item_);
  } else {
    hybrid_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
}

void HybridInspectDlpJobRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HybridInspectDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hybrid_item_ = nullptr;
}

HybridInspectDlpJobRequest::~HybridInspectDlpJobRequest() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  SharedDtor();
}

void HybridInspectDlpJobRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hybrid_item_;
}

void HybridInspectDlpJobRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridInspectDlpJobRequest& HybridInspectDlpJobRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HybridInspectDlpJobRequest_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void HybridInspectDlpJobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hybrid_item_ != nullptr) {
    delete hybrid_item_;
  }
  hybrid_item_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HybridInspectDlpJobRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HybridInspectDlpJobRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.HybridInspectDlpJobRequest.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::HybridContentItem::_InternalParse;
        object = msg->mutable_hybrid_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridInspectDlpJobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridInspectDlpJobRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hybrid_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HybridInspectDlpJobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridInspectDlpJobRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
  if (this->has_hybrid_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::hybrid_item(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
}

::google::protobuf::uint8* HybridInspectDlpJobRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridInspectDlpJobRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
  if (this->has_hybrid_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::hybrid_item(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  return target;
}

size_t HybridInspectDlpJobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
  if (this->has_hybrid_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hybrid_item_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridInspectDlpJobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridInspectDlpJobRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HybridInspectDlpJobRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
    MergeFrom(*source);
  }
}

void HybridInspectDlpJobRequest::MergeFrom(const HybridInspectDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_hybrid_item()) {
    mutable_hybrid_item()->::google::privacy::dlp::v2::HybridContentItem::MergeFrom(from.hybrid_item());
  }
}

void HybridInspectDlpJobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridInspectDlpJobRequest::CopyFrom(const HybridInspectDlpJobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.HybridInspectDlpJobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridInspectDlpJobRequest::IsInitialized() const {
  return true;
}

void HybridInspectDlpJobRequest::Swap(HybridInspectDlpJobRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridInspectDlpJobRequest::InternalSwap(HybridInspectDlpJobRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hybrid_item_, other->hybrid_item_);
}

::google::protobuf::Metadata HybridInspectDlpJobRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HybridContentItem::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_HybridContentItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::google::privacy::dlp::v2::ContentItem*>(
      ::google::privacy::dlp::v2::ContentItem::internal_default_instance());
  ::google::privacy::dlp::v2::_HybridContentItem_default_instance_._instance.get_mutable()->finding_details_ = const_cast< ::google::privacy::dlp::v2::HybridFindingDetails*>(
      ::google::privacy::dlp::v2::HybridFindingDetails::internal_default_instance());
}
class HybridContentItem::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::ContentItem& item(const HybridContentItem* msg);
  static const ::google::privacy::dlp::v2::HybridFindingDetails& finding_details(const HybridContentItem* msg);
};

const ::google::privacy::dlp::v2::ContentItem&
HybridContentItem::HasBitSetters::item(const HybridContentItem* msg) {
  return *msg->item_;
}
const ::google::privacy::dlp::v2::HybridFindingDetails&
HybridContentItem::HasBitSetters::finding_details(const HybridContentItem* msg) {
  return *msg->finding_details_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridContentItem::kItemFieldNumber;
const int HybridContentItem::kFindingDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridContentItem::HybridContentItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.HybridContentItem)
}
HybridContentItem::HybridContentItem(const HybridContentItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::google::privacy::dlp::v2::ContentItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from.has_finding_details()) {
    finding_details_ = new ::google::privacy::dlp::v2::HybridFindingDetails(*from.finding_details_);
  } else {
    finding_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.HybridContentItem)
}

void HybridContentItem::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finding_details_) -
      reinterpret_cast<char*>(&item_)) + sizeof(finding_details_));
}

HybridContentItem::~HybridContentItem() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.HybridContentItem)
  SharedDtor();
}

void HybridContentItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete finding_details_;
}

void HybridContentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridContentItem& HybridContentItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HybridContentItem_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void HybridContentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.HybridContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && finding_details_ != nullptr) {
    delete finding_details_;
  }
  finding_details_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HybridContentItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HybridContentItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.ContentItem item = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::ContentItem::_InternalParse;
        object = msg->mutable_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.HybridFindingDetails finding_details = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::HybridFindingDetails::_InternalParse;
        object = msg->mutable_finding_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridContentItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.HybridContentItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.ContentItem item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.HybridFindingDetails finding_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_finding_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.HybridContentItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.HybridContentItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HybridContentItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.HybridContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::item(this), output);
  }

  // .google.privacy.dlp.v2.HybridFindingDetails finding_details = 2;
  if (this->has_finding_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::finding_details(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.HybridContentItem)
}

::google::protobuf::uint8* HybridContentItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.HybridContentItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::item(this), target);
  }

  // .google.privacy.dlp.v2.HybridFindingDetails finding_details = 2;
  if (this->has_finding_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::finding_details(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.HybridContentItem)
  return target;
}

size_t HybridContentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.HybridContentItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.ContentItem item = 1;
  if (this->has_item()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .google.privacy.dlp.v2.HybridFindingDetails finding_details = 2;
  if (this->has_finding_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *finding_details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridContentItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.HybridContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridContentItem* source =
      ::google::protobuf::DynamicCastToGenerated<HybridContentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.HybridContentItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.HybridContentItem)
    MergeFrom(*source);
  }
}

void HybridContentItem::MergeFrom(const HybridContentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.HybridContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    mutable_item()->::google::privacy::dlp::v2::ContentItem::MergeFrom(from.item());
  }
  if (from.has_finding_details()) {
    mutable_finding_details()->::google::privacy::dlp::v2::HybridFindingDetails::MergeFrom(from.finding_details());
  }
}

void HybridContentItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.HybridContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridContentItem::CopyFrom(const HybridContentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.HybridContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridContentItem::IsInitialized() const {
  return true;
}

void HybridContentItem::Swap(HybridContentItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridContentItem::InternalSwap(HybridContentItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_, other->item_);
  swap(finding_details_, other->finding_details_);
}

::google::protobuf::Metadata HybridContentItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

HybridFindingDetails_LabelsEntry_DoNotUse::HybridFindingDetails_LabelsEntry_DoNotUse() {}
HybridFindingDetails_LabelsEntry_DoNotUse::HybridFindingDetails_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void HybridFindingDetails_LabelsEntry_DoNotUse::MergeFrom(const HybridFindingDetails_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HybridFindingDetails_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[171];
}
void HybridFindingDetails_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridFindingDetails_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      HybridFindingDetails_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void HybridFindingDetails::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_HybridFindingDetails_default_instance_._instance.get_mutable()->container_details_ = const_cast< ::google::privacy::dlp::v2::Container*>(
      ::google::privacy::dlp::v2::Container::internal_default_instance());
  ::google::privacy::dlp::v2::_HybridFindingDetails_default_instance_._instance.get_mutable()->table_options_ = const_cast< ::google::privacy::dlp::v2::TableOptions*>(
      ::google::privacy::dlp::v2::TableOptions::internal_default_instance());
}
class HybridFindingDetails::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Container& container_details(const HybridFindingDetails* msg);
  static const ::google::privacy::dlp::v2::TableOptions& table_options(const HybridFindingDetails* msg);
};

const ::google::privacy::dlp::v2::Container&
HybridFindingDetails::HasBitSetters::container_details(const HybridFindingDetails* msg) {
  return *msg->container_details_;
}
const ::google::privacy::dlp::v2::TableOptions&
HybridFindingDetails::HasBitSetters::table_options(const HybridFindingDetails* msg) {
  return *msg->table_options_;
}
void HybridFindingDetails::clear_table_options() {
  if (GetArenaNoVirtual() == nullptr && table_options_ != nullptr) {
    delete table_options_;
  }
  table_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridFindingDetails::kContainerDetailsFieldNumber;
const int HybridFindingDetails::kFileOffsetFieldNumber;
const int HybridFindingDetails::kRowOffsetFieldNumber;
const int HybridFindingDetails::kTableOptionsFieldNumber;
const int HybridFindingDetails::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridFindingDetails::HybridFindingDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.HybridFindingDetails)
}
HybridFindingDetails::HybridFindingDetails(const HybridFindingDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  if (from.has_container_details()) {
    container_details_ = new ::google::privacy::dlp::v2::Container(*from.container_details_);
  } else {
    container_details_ = nullptr;
  }
  if (from.has_table_options()) {
    table_options_ = new ::google::privacy::dlp::v2::TableOptions(*from.table_options_);
  } else {
    table_options_ = nullptr;
  }
  ::memcpy(&file_offset_, &from.file_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_offset_) -
    reinterpret_cast<char*>(&file_offset_)) + sizeof(row_offset_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.HybridFindingDetails)
}

void HybridFindingDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  ::memset(&container_details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_offset_) -
      reinterpret_cast<char*>(&container_details_)) + sizeof(row_offset_));
}

HybridFindingDetails::~HybridFindingDetails() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.HybridFindingDetails)
  SharedDtor();
}

void HybridFindingDetails::SharedDtor() {
  if (this != internal_default_instance()) delete container_details_;
  if (this != internal_default_instance()) delete table_options_;
}

void HybridFindingDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridFindingDetails& HybridFindingDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HybridFindingDetails_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void HybridFindingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.HybridFindingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  if (GetArenaNoVirtual() == nullptr && container_details_ != nullptr) {
    delete container_details_;
  }
  container_details_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && table_options_ != nullptr) {
    delete table_options_;
  }
  table_options_ = nullptr;
  ::memset(&file_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_offset_) -
      reinterpret_cast<char*>(&file_offset_)) + sizeof(row_offset_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HybridFindingDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HybridFindingDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Container container_details = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Container::_InternalParse;
        object = msg->mutable_container_details();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 file_offset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 row_offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_row_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.TableOptions table_options = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TableOptions::_InternalParse;
        object = msg->mutable_table_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, string> labels = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridFindingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.HybridFindingDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Container container_details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_container_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 file_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 row_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &row_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TableOptions table_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          HybridFindingDetails_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HybridFindingDetails_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.HybridFindingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.HybridFindingDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HybridFindingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.HybridFindingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Container container_details = 1;
  if (this->has_container_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::container_details(this), output);
  }

  // int64 file_offset = 2;
  if (this->file_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_offset(), output);
  }

  // int64 row_offset = 3;
  if (this->row_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->row_offset(), output);
  }

  // .google.privacy.dlp.v2.TableOptions table_options = 4;
  if (this->has_table_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::table_options(this), output);
  }

  // map<string, string> labels = 5;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HybridFindingDetails_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<HybridFindingDetails_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.HybridFindingDetails)
}

::google::protobuf::uint8* HybridFindingDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.HybridFindingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Container container_details = 1;
  if (this->has_container_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::container_details(this), target);
  }

  // int64 file_offset = 2;
  if (this->file_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->file_offset(), target);
  }

  // int64 row_offset = 3;
  if (this->row_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->row_offset(), target);
  }

  // .google.privacy.dlp.v2.TableOptions table_options = 4;
  if (this->has_table_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::table_options(this), target);
  }

  // map<string, string> labels = 5;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridFindingDetails.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HybridFindingDetails_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<HybridFindingDetails_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.HybridFindingDetails)
  return target;
}

size_t HybridFindingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.HybridFindingDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<HybridFindingDetails_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .google.privacy.dlp.v2.Container container_details = 1;
  if (this->has_container_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *container_details_);
  }

  // .google.privacy.dlp.v2.TableOptions table_options = 4;
  if (this->has_table_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_options_);
  }

  // int64 file_offset = 2;
  if (this->file_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->file_offset());
  }

  // int64 row_offset = 3;
  if (this->row_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->row_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridFindingDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.HybridFindingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridFindingDetails* source =
      ::google::protobuf::DynamicCastToGenerated<HybridFindingDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.HybridFindingDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.HybridFindingDetails)
    MergeFrom(*source);
  }
}

void HybridFindingDetails::MergeFrom(const HybridFindingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.HybridFindingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.has_container_details()) {
    mutable_container_details()->::google::privacy::dlp::v2::Container::MergeFrom(from.container_details());
  }
  if (from.has_table_options()) {
    mutable_table_options()->::google::privacy::dlp::v2::TableOptions::MergeFrom(from.table_options());
  }
  if (from.file_offset() != 0) {
    set_file_offset(from.file_offset());
  }
  if (from.row_offset() != 0) {
    set_row_offset(from.row_offset());
  }
}

void HybridFindingDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.HybridFindingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridFindingDetails::CopyFrom(const HybridFindingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.HybridFindingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridFindingDetails::IsInitialized() const {
  return true;
}

void HybridFindingDetails::Swap(HybridFindingDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridFindingDetails::InternalSwap(HybridFindingDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  swap(container_details_, other->container_details_);
  swap(table_options_, other->table_options_);
  swap(file_offset_, other->file_offset_);
  swap(row_offset_, other->row_offset_);
}

::google::protobuf::Metadata HybridFindingDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HybridInspectResponse::InitAsDefaultInstance() {
}
class HybridInspectResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridInspectResponse::HybridInspectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.HybridInspectResponse)
}
HybridInspectResponse::HybridInspectResponse(const HybridInspectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.HybridInspectResponse)
}

void HybridInspectResponse::SharedCtor() {
}

HybridInspectResponse::~HybridInspectResponse() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.HybridInspectResponse)
  SharedDtor();
}

void HybridInspectResponse::SharedDtor() {
}

void HybridInspectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridInspectResponse& HybridInspectResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HybridInspectResponse_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto.base);
  return *internal_default_instance();
}


void HybridInspectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.HybridInspectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HybridInspectResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HybridInspectResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridInspectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.HybridInspectResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.HybridInspectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.HybridInspectResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HybridInspectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.HybridInspectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.HybridInspectResponse)
}

::google::protobuf::uint8* HybridInspectResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.HybridInspectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.HybridInspectResponse)
  return target;
}

size_t HybridInspectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.HybridInspectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridInspectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.HybridInspectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridInspectResponse* source =
      ::google::protobuf::DynamicCastToGenerated<HybridInspectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.HybridInspectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.HybridInspectResponse)
    MergeFrom(*source);
  }
}

void HybridInspectResponse::MergeFrom(const HybridInspectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.HybridInspectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HybridInspectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.HybridInspectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridInspectResponse::CopyFrom(const HybridInspectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.HybridInspectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridInspectResponse::IsInitialized() const {
  return true;
}

void HybridInspectResponse::Swap(HybridInspectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridInspectResponse::InternalSwap(HybridInspectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HybridInspectResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fdlp_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace dlp
}  // namespace privacy
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ExcludeInfoTypes* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ExcludeInfoTypes >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ExcludeInfoTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ExclusionRule* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ExclusionRule >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ExclusionRule >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectionRule* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectionRule >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectionRule >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectionRuleSet* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectionRuleSet >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectionRuleSet >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectConfig_FindingLimits_InfoTypeLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectConfig_FindingLimits* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectConfig_FindingLimits >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectConfig_FindingLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ByteContentItem* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ByteContentItem >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ByteContentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ContentItem* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ContentItem >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ContentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Table_Row* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Table_Row >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Table_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Table* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Table >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Finding_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Finding* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Finding >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Finding >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Location* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Location >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ContentLocation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ContentLocation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ContentLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::MetadataLocation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::MetadataLocation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::MetadataLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StorageMetadataLabel* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StorageMetadataLabel >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StorageMetadataLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DocumentLocation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DocumentLocation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DocumentLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordLocation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordLocation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TableLocation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TableLocation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TableLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Container* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Container >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Container >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Range* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Range >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Range >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ImageLocation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ImageLocation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ImageLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::BoundingBox* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::BoundingBox >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RedactImageRequest_ImageRedactionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RedactImageRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RedactImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RedactImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Color* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Color >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RedactImageResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RedactImageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RedactImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeidentifyContentRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeidentifyContentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeidentifyContentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeidentifyContentResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeidentifyContentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeidentifyContentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ReidentifyContentRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ReidentifyContentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ReidentifyContentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ReidentifyContentResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ReidentifyContentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ReidentifyContentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectContentRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectContentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectContentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectContentResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectContentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectContentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::OutputStorageConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::OutputStorageConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::OutputStorageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InfoTypeStats* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InfoTypeStats >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InfoTypeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectDataSourceDetails_RequestedOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectDataSourceDetails_Result* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectDataSourceDetails_Result >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectDataSourceDetails_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectDataSourceDetails* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectDataSourceDetails >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectDataSourceDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridInspectStatistics* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridInspectStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridInspectStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InfoTypeDescription* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InfoTypeDescription >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InfoTypeDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListInfoTypesRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListInfoTypesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListInfoTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListInfoTypesResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListInfoTypesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListInfoTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RiskAnalysisJobConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RiskAnalysisJobConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RiskAnalysisJobConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::QuasiId* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::QuasiId >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::QuasiId >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StatisticalTable_QuasiIdentifierField >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StatisticalTable* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StatisticalTable >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StatisticalTable >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_NumericalStatsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_CategoricalStatsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_KAnonymityConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_LDiversityConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_TaggedField >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig_AuxiliaryTable >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_KMapEstimationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric_DeltaPresenceEstimationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrivacyMetric* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrivacyMetric >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrivacyMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_NumericalStatsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_CategoricalStatsResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KAnonymityResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_LDiversityResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_KMapEstimationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::AnalyzeDataSourceRiskDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ValueFrequency* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ValueFrequency >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ValueFrequency >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Value* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Value >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::QuoteInfo* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::QuoteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::QuoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DateTime_TimeZone* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DateTime_TimeZone >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DateTime_TimeZone >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DateTime* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DateTime >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeidentifyConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeidentifyConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeidentifyConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TransformationErrorHandling_ThrowError >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TransformationErrorHandling_LeaveUntransformed >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TransformationErrorHandling* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TransformationErrorHandling >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TransformationErrorHandling >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PrimitiveTransformation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PrimitiveTransformation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PrimitiveTransformation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TimePartConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TimePartConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TimePartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CryptoHashConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CryptoHashConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CryptoHashConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CryptoDeterministicConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CryptoDeterministicConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CryptoDeterministicConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ReplaceValueConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ReplaceValueConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ReplaceValueConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ReplaceWithInfoTypeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RedactConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RedactConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RedactConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CharsToIgnore* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CharsToIgnore >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CharsToIgnore >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CharacterMaskConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CharacterMaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CharacterMaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::FixedSizeBucketingConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::FixedSizeBucketingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::FixedSizeBucketingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::BucketingConfig_Bucket* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::BucketingConfig_Bucket >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::BucketingConfig_Bucket >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::BucketingConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::BucketingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::BucketingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CryptoReplaceFfxFpeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CryptoKey* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CryptoKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CryptoKey >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TransientCryptoKey* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TransientCryptoKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TransientCryptoKey >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::UnwrappedCryptoKey* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::UnwrappedCryptoKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::UnwrappedCryptoKey >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::KmsWrappedCryptoKey* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::KmsWrappedCryptoKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::KmsWrappedCryptoKey >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DateShiftConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DateShiftConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DateShiftConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InfoTypeTransformations_InfoTypeTransformation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InfoTypeTransformations* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InfoTypeTransformations >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InfoTypeTransformations >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::FieldTransformation* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::FieldTransformation >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::FieldTransformation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordTransformations* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordTransformations >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordTransformations >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordSuppression* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordSuppression >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordSuppression >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordCondition_Condition* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordCondition_Condition >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordCondition_Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordCondition_Conditions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordCondition_Conditions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordCondition_Conditions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordCondition_Expressions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordCondition_Expressions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordCondition_Expressions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordCondition* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordCondition >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TransformationOverview* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TransformationOverview >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TransformationOverview >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TransformationSummary_SummaryResult* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TransformationSummary_SummaryResult >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TransformationSummary_SummaryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TransformationSummary* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TransformationSummary >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TransformationSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Schedule* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Schedule >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Schedule >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Manual* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Manual >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Manual >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectTemplate* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeidentifyTemplate* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeidentifyTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeidentifyTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Error* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Error >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::JobTrigger_Trigger* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::JobTrigger_Trigger >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::JobTrigger_Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::JobTrigger* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::JobTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::JobTrigger >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Action_SaveFindings* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Action_SaveFindings >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Action_SaveFindings >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Action_PublishToPubSub* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Action_PublishToPubSub >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Action_PublishToPubSub >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Action_PublishSummaryToCscc* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Action_PublishSummaryToCscc >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Action_PublishSummaryToCscc >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Action_PublishFindingsToCloudDataCatalog >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Action_JobNotificationEmails* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Action_JobNotificationEmails >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Action_JobNotificationEmails >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Action_PublishToStackdriver* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Action_PublishToStackdriver >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Action_PublishToStackdriver >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Action* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Action >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CreateInspectTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CreateInspectTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CreateInspectTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::UpdateInspectTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::UpdateInspectTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::UpdateInspectTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::GetInspectTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::GetInspectTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::GetInspectTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListInspectTemplatesRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListInspectTemplatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListInspectTemplatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListInspectTemplatesResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListInspectTemplatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListInspectTemplatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeleteInspectTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeleteInspectTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeleteInspectTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CreateJobTriggerRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CreateJobTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CreateJobTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ActivateJobTriggerRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ActivateJobTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ActivateJobTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::UpdateJobTriggerRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::UpdateJobTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::UpdateJobTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::GetJobTriggerRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::GetJobTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::GetJobTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CreateDlpJobRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CreateDlpJobRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CreateDlpJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListJobTriggersRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListJobTriggersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListJobTriggersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListJobTriggersResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListJobTriggersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListJobTriggersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeleteJobTriggerRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeleteJobTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeleteJobTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InspectJobConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InspectJobConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InspectJobConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DlpJob* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DlpJob >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DlpJob >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::GetDlpJobRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::GetDlpJobRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::GetDlpJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListDlpJobsRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListDlpJobsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListDlpJobsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListDlpJobsResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListDlpJobsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListDlpJobsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CancelDlpJobRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CancelDlpJobRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CancelDlpJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::FinishDlpJobRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::FinishDlpJobRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::FinishDlpJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeleteDlpJobRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeleteDlpJobRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeleteDlpJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::LargeCustomDictionaryConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::LargeCustomDictionaryConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::LargeCustomDictionaryConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::LargeCustomDictionaryStats* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::LargeCustomDictionaryStats >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::LargeCustomDictionaryStats >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StoredInfoTypeConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StoredInfoTypeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StoredInfoTypeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StoredInfoTypeStats* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StoredInfoTypeStats >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StoredInfoTypeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StoredInfoTypeVersion* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StoredInfoTypeVersion >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StoredInfoTypeVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StoredInfoType* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StoredInfoType >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StoredInfoType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::GetStoredInfoTypeRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::GetStoredInfoTypeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::GetStoredInfoTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListStoredInfoTypesRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListStoredInfoTypesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListStoredInfoTypesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::ListStoredInfoTypesResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::ListStoredInfoTypesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::ListStoredInfoTypesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridInspectDlpJobRequest* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridInspectDlpJobRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridInspectDlpJobRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridContentItem* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridContentItem >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridContentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridFindingDetails_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridFindingDetails* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridFindingDetails >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridFindingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridInspectResponse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridInspectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridInspectResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
