// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/privacy/dlp/v2/dlp.proto

#include "google/privacy/dlp/v2/dlp.pb.h"
#include "google/privacy/dlp/v2/dlp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace privacy {
namespace dlp {
namespace v2 {

static const char* DlpService_method_names[] = {
  "/google.privacy.dlp.v2.DlpService/InspectContent",
  "/google.privacy.dlp.v2.DlpService/RedactImage",
  "/google.privacy.dlp.v2.DlpService/DeidentifyContent",
  "/google.privacy.dlp.v2.DlpService/ReidentifyContent",
  "/google.privacy.dlp.v2.DlpService/ListInfoTypes",
  "/google.privacy.dlp.v2.DlpService/CreateInspectTemplate",
  "/google.privacy.dlp.v2.DlpService/UpdateInspectTemplate",
  "/google.privacy.dlp.v2.DlpService/GetInspectTemplate",
  "/google.privacy.dlp.v2.DlpService/ListInspectTemplates",
  "/google.privacy.dlp.v2.DlpService/DeleteInspectTemplate",
  "/google.privacy.dlp.v2.DlpService/CreateDeidentifyTemplate",
  "/google.privacy.dlp.v2.DlpService/UpdateDeidentifyTemplate",
  "/google.privacy.dlp.v2.DlpService/GetDeidentifyTemplate",
  "/google.privacy.dlp.v2.DlpService/ListDeidentifyTemplates",
  "/google.privacy.dlp.v2.DlpService/DeleteDeidentifyTemplate",
  "/google.privacy.dlp.v2.DlpService/CreateJobTrigger",
  "/google.privacy.dlp.v2.DlpService/UpdateJobTrigger",
  "/google.privacy.dlp.v2.DlpService/HybridInspectJobTrigger",
  "/google.privacy.dlp.v2.DlpService/GetJobTrigger",
  "/google.privacy.dlp.v2.DlpService/ListJobTriggers",
  "/google.privacy.dlp.v2.DlpService/DeleteJobTrigger",
  "/google.privacy.dlp.v2.DlpService/ActivateJobTrigger",
  "/google.privacy.dlp.v2.DlpService/CreateDlpJob",
  "/google.privacy.dlp.v2.DlpService/ListDlpJobs",
  "/google.privacy.dlp.v2.DlpService/GetDlpJob",
  "/google.privacy.dlp.v2.DlpService/DeleteDlpJob",
  "/google.privacy.dlp.v2.DlpService/CancelDlpJob",
  "/google.privacy.dlp.v2.DlpService/CreateStoredInfoType",
  "/google.privacy.dlp.v2.DlpService/UpdateStoredInfoType",
  "/google.privacy.dlp.v2.DlpService/GetStoredInfoType",
  "/google.privacy.dlp.v2.DlpService/ListStoredInfoTypes",
  "/google.privacy.dlp.v2.DlpService/DeleteStoredInfoType",
  "/google.privacy.dlp.v2.DlpService/HybridInspectDlpJob",
  "/google.privacy.dlp.v2.DlpService/FinishDlpJob",
};

std::unique_ptr< DlpService::Stub> DlpService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DlpService::Stub> stub(new DlpService::Stub(channel, options));
  return stub;
}

DlpService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InspectContent_(DlpService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RedactImage_(DlpService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeidentifyContent_(DlpService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReidentifyContent_(DlpService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInfoTypes_(DlpService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateInspectTemplate_(DlpService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateInspectTemplate_(DlpService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInspectTemplate_(DlpService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInspectTemplates_(DlpService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteInspectTemplate_(DlpService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDeidentifyTemplate_(DlpService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDeidentifyTemplate_(DlpService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeidentifyTemplate_(DlpService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDeidentifyTemplates_(DlpService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDeidentifyTemplate_(DlpService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateJobTrigger_(DlpService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateJobTrigger_(DlpService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HybridInspectJobTrigger_(DlpService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJobTrigger_(DlpService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListJobTriggers_(DlpService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteJobTrigger_(DlpService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateJobTrigger_(DlpService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDlpJob_(DlpService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDlpJobs_(DlpService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDlpJob_(DlpService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDlpJob_(DlpService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelDlpJob_(DlpService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateStoredInfoType_(DlpService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateStoredInfoType_(DlpService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStoredInfoType_(DlpService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListStoredInfoTypes_(DlpService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteStoredInfoType_(DlpService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HybridInspectDlpJob_(DlpService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinishDlpJob_(DlpService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DlpService::Stub::InspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::InspectContentRequest& request, ::google::privacy::dlp::v2::InspectContentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::InspectContentRequest, ::google::privacy::dlp::v2::InspectContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InspectContent_, context, request, response);
}

void DlpService::Stub::async::InspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::InspectContentRequest* request, ::google::privacy::dlp::v2::InspectContentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::InspectContentRequest, ::google::privacy::dlp::v2::InspectContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InspectContent_, context, request, response, std::move(f));
}

void DlpService::Stub::async::InspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::InspectContentRequest* request, ::google::privacy::dlp::v2::InspectContentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InspectContent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectContentResponse>* DlpService::Stub::PrepareAsyncInspectContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::InspectContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::InspectContentResponse, ::google::privacy::dlp::v2::InspectContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InspectContent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectContentResponse>* DlpService::Stub::AsyncInspectContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::InspectContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInspectContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::RedactImage(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::RedactImageRequest& request, ::google::privacy::dlp::v2::RedactImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::RedactImageRequest, ::google::privacy::dlp::v2::RedactImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RedactImage_, context, request, response);
}

void DlpService::Stub::async::RedactImage(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::RedactImageRequest* request, ::google::privacy::dlp::v2::RedactImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::RedactImageRequest, ::google::privacy::dlp::v2::RedactImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RedactImage_, context, request, response, std::move(f));
}

void DlpService::Stub::async::RedactImage(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::RedactImageRequest* request, ::google::privacy::dlp::v2::RedactImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RedactImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::RedactImageResponse>* DlpService::Stub::PrepareAsyncRedactImageRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::RedactImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::RedactImageResponse, ::google::privacy::dlp::v2::RedactImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RedactImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::RedactImageResponse>* DlpService::Stub::AsyncRedactImageRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::RedactImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRedactImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::DeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeidentifyContentRequest& request, ::google::privacy::dlp::v2::DeidentifyContentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::DeidentifyContentRequest, ::google::privacy::dlp::v2::DeidentifyContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeidentifyContent_, context, request, response);
}

void DlpService::Stub::async::DeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeidentifyContentRequest* request, ::google::privacy::dlp::v2::DeidentifyContentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::DeidentifyContentRequest, ::google::privacy::dlp::v2::DeidentifyContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeidentifyContent_, context, request, response, std::move(f));
}

void DlpService::Stub::async::DeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeidentifyContentRequest* request, ::google::privacy::dlp::v2::DeidentifyContentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeidentifyContent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyContentResponse>* DlpService::Stub::PrepareAsyncDeidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::DeidentifyContentResponse, ::google::privacy::dlp::v2::DeidentifyContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeidentifyContent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyContentResponse>* DlpService::Stub::AsyncDeidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeidentifyContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ReidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ReidentifyContentRequest& request, ::google::privacy::dlp::v2::ReidentifyContentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ReidentifyContentRequest, ::google::privacy::dlp::v2::ReidentifyContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReidentifyContent_, context, request, response);
}

void DlpService::Stub::async::ReidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ReidentifyContentRequest* request, ::google::privacy::dlp::v2::ReidentifyContentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ReidentifyContentRequest, ::google::privacy::dlp::v2::ReidentifyContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReidentifyContent_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ReidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ReidentifyContentRequest* request, ::google::privacy::dlp::v2::ReidentifyContentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReidentifyContent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ReidentifyContentResponse>* DlpService::Stub::PrepareAsyncReidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ReidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::ReidentifyContentResponse, ::google::privacy::dlp::v2::ReidentifyContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReidentifyContent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ReidentifyContentResponse>* DlpService::Stub::AsyncReidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ReidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReidentifyContentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInfoTypesRequest& request, ::google::privacy::dlp::v2::ListInfoTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ListInfoTypesRequest, ::google::privacy::dlp::v2::ListInfoTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListInfoTypes_, context, request, response);
}

void DlpService::Stub::async::ListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInfoTypesRequest* request, ::google::privacy::dlp::v2::ListInfoTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ListInfoTypesRequest, ::google::privacy::dlp::v2::ListInfoTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInfoTypes_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInfoTypesRequest* request, ::google::privacy::dlp::v2::ListInfoTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInfoTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListInfoTypesResponse>* DlpService::Stub::PrepareAsyncListInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::ListInfoTypesResponse, ::google::privacy::dlp::v2::ListInfoTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListInfoTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListInfoTypesResponse>* DlpService::Stub::AsyncListInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListInfoTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::CreateInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateInspectTemplateRequest& request, ::google::privacy::dlp::v2::InspectTemplate* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::CreateInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateInspectTemplate_, context, request, response);
}

void DlpService::Stub::async::CreateInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::CreateInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInspectTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::CreateInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInspectTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectTemplate>* DlpService::Stub::PrepareAsyncCreateInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::InspectTemplate, ::google::privacy::dlp::v2::CreateInspectTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateInspectTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectTemplate>* DlpService::Stub::AsyncCreateInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateInspectTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::UpdateInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateInspectTemplateRequest& request, ::google::privacy::dlp::v2::InspectTemplate* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::UpdateInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateInspectTemplate_, context, request, response);
}

void DlpService::Stub::async::UpdateInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::UpdateInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateInspectTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::UpdateInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateInspectTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectTemplate>* DlpService::Stub::PrepareAsyncUpdateInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::InspectTemplate, ::google::privacy::dlp::v2::UpdateInspectTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateInspectTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectTemplate>* DlpService::Stub::AsyncUpdateInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateInspectTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::GetInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetInspectTemplateRequest& request, ::google::privacy::dlp::v2::InspectTemplate* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::GetInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInspectTemplate_, context, request, response);
}

void DlpService::Stub::async::GetInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::GetInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInspectTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::GetInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInspectTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectTemplate>* DlpService::Stub::PrepareAsyncGetInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::InspectTemplate, ::google::privacy::dlp::v2::GetInspectTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInspectTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::InspectTemplate>* DlpService::Stub::AsyncGetInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInspectTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ListInspectTemplates(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInspectTemplatesRequest& request, ::google::privacy::dlp::v2::ListInspectTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ListInspectTemplatesRequest, ::google::privacy::dlp::v2::ListInspectTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListInspectTemplates_, context, request, response);
}

void DlpService::Stub::async::ListInspectTemplates(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInspectTemplatesRequest* request, ::google::privacy::dlp::v2::ListInspectTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ListInspectTemplatesRequest, ::google::privacy::dlp::v2::ListInspectTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInspectTemplates_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ListInspectTemplates(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInspectTemplatesRequest* request, ::google::privacy::dlp::v2::ListInspectTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListInspectTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListInspectTemplatesResponse>* DlpService::Stub::PrepareAsyncListInspectTemplatesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInspectTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::ListInspectTemplatesResponse, ::google::privacy::dlp::v2::ListInspectTemplatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListInspectTemplates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListInspectTemplatesResponse>* DlpService::Stub::AsyncListInspectTemplatesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListInspectTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListInspectTemplatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::DeleteInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteInspectTemplateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::DeleteInspectTemplateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteInspectTemplate_, context, request, response);
}

void DlpService::Stub::async::DeleteInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteInspectTemplateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::DeleteInspectTemplateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteInspectTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::DeleteInspectTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteInspectTemplateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteInspectTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::PrepareAsyncDeleteInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::privacy::dlp::v2::DeleteInspectTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteInspectTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::AsyncDeleteInspectTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteInspectTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteInspectTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::CreateDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest& request, ::google::privacy::dlp::v2::DeidentifyTemplate* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDeidentifyTemplate_, context, request, response);
}

void DlpService::Stub::async::CreateDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDeidentifyTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::CreateDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDeidentifyTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyTemplate>* DlpService::Stub::PrepareAsyncCreateDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::DeidentifyTemplate, ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDeidentifyTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyTemplate>* DlpService::Stub::AsyncCreateDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDeidentifyTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::UpdateDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest& request, ::google::privacy::dlp::v2::DeidentifyTemplate* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateDeidentifyTemplate_, context, request, response);
}

void DlpService::Stub::async::UpdateDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDeidentifyTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::UpdateDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateDeidentifyTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyTemplate>* DlpService::Stub::PrepareAsyncUpdateDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::DeidentifyTemplate, ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateDeidentifyTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyTemplate>* DlpService::Stub::AsyncUpdateDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateDeidentifyTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::GetDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest& request, ::google::privacy::dlp::v2::DeidentifyTemplate* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeidentifyTemplate_, context, request, response);
}

void DlpService::Stub::async::GetDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeidentifyTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::GetDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeidentifyTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyTemplate>* DlpService::Stub::PrepareAsyncGetDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::DeidentifyTemplate, ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeidentifyTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DeidentifyTemplate>* DlpService::Stub::AsyncGetDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeidentifyTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ListDeidentifyTemplates(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest& request, ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDeidentifyTemplates_, context, request, response);
}

void DlpService::Stub::async::ListDeidentifyTemplates(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest* request, ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDeidentifyTemplates_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ListDeidentifyTemplates(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest* request, ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDeidentifyTemplates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse>* DlpService::Stub::PrepareAsyncListDeidentifyTemplatesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse, ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDeidentifyTemplates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse>* DlpService::Stub::AsyncListDeidentifyTemplatesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDeidentifyTemplatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::DeleteDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDeidentifyTemplate_, context, request, response);
}

void DlpService::Stub::async::DeleteDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDeidentifyTemplate_, context, request, response, std::move(f));
}

void DlpService::Stub::async::DeleteDeidentifyTemplate(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDeidentifyTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::PrepareAsyncDeleteDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDeidentifyTemplate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::AsyncDeleteDeidentifyTemplateRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDeidentifyTemplateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::CreateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateJobTriggerRequest& request, ::google::privacy::dlp::v2::JobTrigger* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::CreateJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateJobTrigger_, context, request, response);
}

void DlpService::Stub::async::CreateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::CreateJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateJobTrigger_, context, request, response, std::move(f));
}

void DlpService::Stub::async::CreateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateJobTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::JobTrigger>* DlpService::Stub::PrepareAsyncCreateJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::JobTrigger, ::google::privacy::dlp::v2::CreateJobTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateJobTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::JobTrigger>* DlpService::Stub::AsyncCreateJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateJobTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::UpdateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateJobTriggerRequest& request, ::google::privacy::dlp::v2::JobTrigger* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::UpdateJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateJobTrigger_, context, request, response);
}

void DlpService::Stub::async::UpdateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::UpdateJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateJobTrigger_, context, request, response, std::move(f));
}

void DlpService::Stub::async::UpdateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateJobTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::JobTrigger>* DlpService::Stub::PrepareAsyncUpdateJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::JobTrigger, ::google::privacy::dlp::v2::UpdateJobTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateJobTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::JobTrigger>* DlpService::Stub::AsyncUpdateJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateJobTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::HybridInspectJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest& request, ::google::privacy::dlp::v2::HybridInspectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest, ::google::privacy::dlp::v2::HybridInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HybridInspectJobTrigger_, context, request, response);
}

void DlpService::Stub::async::HybridInspectJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest* request, ::google::privacy::dlp::v2::HybridInspectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest, ::google::privacy::dlp::v2::HybridInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HybridInspectJobTrigger_, context, request, response, std::move(f));
}

void DlpService::Stub::async::HybridInspectJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest* request, ::google::privacy::dlp::v2::HybridInspectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HybridInspectJobTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::HybridInspectResponse>* DlpService::Stub::PrepareAsyncHybridInspectJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::HybridInspectResponse, ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HybridInspectJobTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::HybridInspectResponse>* DlpService::Stub::AsyncHybridInspectJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHybridInspectJobTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::GetJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetJobTriggerRequest& request, ::google::privacy::dlp::v2::JobTrigger* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::GetJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJobTrigger_, context, request, response);
}

void DlpService::Stub::async::GetJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::GetJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJobTrigger_, context, request, response, std::move(f));
}

void DlpService::Stub::async::GetJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJobTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::JobTrigger>* DlpService::Stub::PrepareAsyncGetJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::JobTrigger, ::google::privacy::dlp::v2::GetJobTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJobTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::JobTrigger>* DlpService::Stub::AsyncGetJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJobTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ListJobTriggers(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListJobTriggersRequest& request, ::google::privacy::dlp::v2::ListJobTriggersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ListJobTriggersRequest, ::google::privacy::dlp::v2::ListJobTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListJobTriggers_, context, request, response);
}

void DlpService::Stub::async::ListJobTriggers(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListJobTriggersRequest* request, ::google::privacy::dlp::v2::ListJobTriggersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ListJobTriggersRequest, ::google::privacy::dlp::v2::ListJobTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListJobTriggers_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ListJobTriggers(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListJobTriggersRequest* request, ::google::privacy::dlp::v2::ListJobTriggersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListJobTriggers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListJobTriggersResponse>* DlpService::Stub::PrepareAsyncListJobTriggersRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListJobTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::ListJobTriggersResponse, ::google::privacy::dlp::v2::ListJobTriggersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListJobTriggers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListJobTriggersResponse>* DlpService::Stub::AsyncListJobTriggersRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListJobTriggersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListJobTriggersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::DeleteJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteJobTriggerRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::DeleteJobTriggerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteJobTrigger_, context, request, response);
}

void DlpService::Stub::async::DeleteJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteJobTriggerRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::DeleteJobTriggerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteJobTrigger_, context, request, response, std::move(f));
}

void DlpService::Stub::async::DeleteJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteJobTriggerRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteJobTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::PrepareAsyncDeleteJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::privacy::dlp::v2::DeleteJobTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteJobTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::AsyncDeleteJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteJobTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ActivateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ActivateJobTriggerRequest& request, ::google::privacy::dlp::v2::DlpJob* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ActivateJobTriggerRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActivateJobTrigger_, context, request, response);
}

void DlpService::Stub::async::ActivateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ActivateJobTriggerRequest* request, ::google::privacy::dlp::v2::DlpJob* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ActivateJobTriggerRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateJobTrigger_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ActivateJobTrigger(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ActivateJobTriggerRequest* request, ::google::privacy::dlp::v2::DlpJob* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateJobTrigger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DlpJob>* DlpService::Stub::PrepareAsyncActivateJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ActivateJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::DlpJob, ::google::privacy::dlp::v2::ActivateJobTriggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActivateJobTrigger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DlpJob>* DlpService::Stub::AsyncActivateJobTriggerRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ActivateJobTriggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActivateJobTriggerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::CreateDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDlpJobRequest& request, ::google::privacy::dlp::v2::DlpJob* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::CreateDlpJobRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDlpJob_, context, request, response);
}

void DlpService::Stub::async::CreateDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDlpJobRequest* request, ::google::privacy::dlp::v2::DlpJob* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::CreateDlpJobRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDlpJob_, context, request, response, std::move(f));
}

void DlpService::Stub::async::CreateDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDlpJobRequest* request, ::google::privacy::dlp::v2::DlpJob* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDlpJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DlpJob>* DlpService::Stub::PrepareAsyncCreateDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::DlpJob, ::google::privacy::dlp::v2::CreateDlpJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDlpJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DlpJob>* DlpService::Stub::AsyncCreateDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDlpJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ListDlpJobs(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDlpJobsRequest& request, ::google::privacy::dlp::v2::ListDlpJobsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ListDlpJobsRequest, ::google::privacy::dlp::v2::ListDlpJobsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDlpJobs_, context, request, response);
}

void DlpService::Stub::async::ListDlpJobs(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDlpJobsRequest* request, ::google::privacy::dlp::v2::ListDlpJobsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ListDlpJobsRequest, ::google::privacy::dlp::v2::ListDlpJobsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDlpJobs_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ListDlpJobs(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDlpJobsRequest* request, ::google::privacy::dlp::v2::ListDlpJobsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDlpJobs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListDlpJobsResponse>* DlpService::Stub::PrepareAsyncListDlpJobsRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDlpJobsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::ListDlpJobsResponse, ::google::privacy::dlp::v2::ListDlpJobsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDlpJobs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListDlpJobsResponse>* DlpService::Stub::AsyncListDlpJobsRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListDlpJobsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDlpJobsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::GetDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDlpJobRequest& request, ::google::privacy::dlp::v2::DlpJob* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::GetDlpJobRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDlpJob_, context, request, response);
}

void DlpService::Stub::async::GetDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDlpJobRequest* request, ::google::privacy::dlp::v2::DlpJob* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::GetDlpJobRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDlpJob_, context, request, response, std::move(f));
}

void DlpService::Stub::async::GetDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDlpJobRequest* request, ::google::privacy::dlp::v2::DlpJob* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDlpJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DlpJob>* DlpService::Stub::PrepareAsyncGetDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::DlpJob, ::google::privacy::dlp::v2::GetDlpJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDlpJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::DlpJob>* DlpService::Stub::AsyncGetDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDlpJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::DeleteDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDlpJobRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::DeleteDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDlpJob_, context, request, response);
}

void DlpService::Stub::async::DeleteDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDlpJobRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::DeleteDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDlpJob_, context, request, response, std::move(f));
}

void DlpService::Stub::async::DeleteDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDlpJobRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDlpJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::PrepareAsyncDeleteDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::privacy::dlp::v2::DeleteDlpJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDlpJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::AsyncDeleteDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDlpJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::CancelDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CancelDlpJobRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::CancelDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelDlpJob_, context, request, response);
}

void DlpService::Stub::async::CancelDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CancelDlpJobRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::CancelDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelDlpJob_, context, request, response, std::move(f));
}

void DlpService::Stub::async::CancelDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CancelDlpJobRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelDlpJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::PrepareAsyncCancelDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CancelDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::privacy::dlp::v2::CancelDlpJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelDlpJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::AsyncCancelDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CancelDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelDlpJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::CreateStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest& request, ::google::privacy::dlp::v2::StoredInfoType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateStoredInfoType_, context, request, response);
}

void DlpService::Stub::async::CreateStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateStoredInfoType_, context, request, response, std::move(f));
}

void DlpService::Stub::async::CreateStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateStoredInfoType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::StoredInfoType>* DlpService::Stub::PrepareAsyncCreateStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::StoredInfoType, ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateStoredInfoType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::StoredInfoType>* DlpService::Stub::AsyncCreateStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateStoredInfoTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::UpdateStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest& request, ::google::privacy::dlp::v2::StoredInfoType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateStoredInfoType_, context, request, response);
}

void DlpService::Stub::async::UpdateStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStoredInfoType_, context, request, response, std::move(f));
}

void DlpService::Stub::async::UpdateStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStoredInfoType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::StoredInfoType>* DlpService::Stub::PrepareAsyncUpdateStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::StoredInfoType, ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateStoredInfoType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::StoredInfoType>* DlpService::Stub::AsyncUpdateStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateStoredInfoTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::GetStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetStoredInfoTypeRequest& request, ::google::privacy::dlp::v2::StoredInfoType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::GetStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStoredInfoType_, context, request, response);
}

void DlpService::Stub::async::GetStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::GetStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStoredInfoType_, context, request, response, std::move(f));
}

void DlpService::Stub::async::GetStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStoredInfoType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::StoredInfoType>* DlpService::Stub::PrepareAsyncGetStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::StoredInfoType, ::google::privacy::dlp::v2::GetStoredInfoTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStoredInfoType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::StoredInfoType>* DlpService::Stub::AsyncGetStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::GetStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStoredInfoTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::ListStoredInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListStoredInfoTypesRequest& request, ::google::privacy::dlp::v2::ListStoredInfoTypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::ListStoredInfoTypesRequest, ::google::privacy::dlp::v2::ListStoredInfoTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListStoredInfoTypes_, context, request, response);
}

void DlpService::Stub::async::ListStoredInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListStoredInfoTypesRequest* request, ::google::privacy::dlp::v2::ListStoredInfoTypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::ListStoredInfoTypesRequest, ::google::privacy::dlp::v2::ListStoredInfoTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListStoredInfoTypes_, context, request, response, std::move(f));
}

void DlpService::Stub::async::ListStoredInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListStoredInfoTypesRequest* request, ::google::privacy::dlp::v2::ListStoredInfoTypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListStoredInfoTypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListStoredInfoTypesResponse>* DlpService::Stub::PrepareAsyncListStoredInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListStoredInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::ListStoredInfoTypesResponse, ::google::privacy::dlp::v2::ListStoredInfoTypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListStoredInfoTypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::ListStoredInfoTypesResponse>* DlpService::Stub::AsyncListStoredInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::ListStoredInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListStoredInfoTypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::DeleteStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteStoredInfoType_, context, request, response);
}

void DlpService::Stub::async::DeleteStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteStoredInfoType_, context, request, response, std::move(f));
}

void DlpService::Stub::async::DeleteStoredInfoType(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteStoredInfoType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::PrepareAsyncDeleteStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteStoredInfoType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::AsyncDeleteStoredInfoTypeRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteStoredInfoTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::HybridInspectDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectDlpJobRequest& request, ::google::privacy::dlp::v2::HybridInspectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::HybridInspectDlpJobRequest, ::google::privacy::dlp::v2::HybridInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HybridInspectDlpJob_, context, request, response);
}

void DlpService::Stub::async::HybridInspectDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectDlpJobRequest* request, ::google::privacy::dlp::v2::HybridInspectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::HybridInspectDlpJobRequest, ::google::privacy::dlp::v2::HybridInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HybridInspectDlpJob_, context, request, response, std::move(f));
}

void DlpService::Stub::async::HybridInspectDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectDlpJobRequest* request, ::google::privacy::dlp::v2::HybridInspectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HybridInspectDlpJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::HybridInspectResponse>* DlpService::Stub::PrepareAsyncHybridInspectDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::privacy::dlp::v2::HybridInspectResponse, ::google::privacy::dlp::v2::HybridInspectDlpJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HybridInspectDlpJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2::HybridInspectResponse>* DlpService::Stub::AsyncHybridInspectDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::HybridInspectDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHybridInspectDlpJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DlpService::Stub::FinishDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::FinishDlpJobRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::privacy::dlp::v2::FinishDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FinishDlpJob_, context, request, response);
}

void DlpService::Stub::async::FinishDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::FinishDlpJobRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::privacy::dlp::v2::FinishDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishDlpJob_, context, request, response, std::move(f));
}

void DlpService::Stub::async::FinishDlpJob(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::FinishDlpJobRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FinishDlpJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::PrepareAsyncFinishDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::FinishDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::privacy::dlp::v2::FinishDlpJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FinishDlpJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DlpService::Stub::AsyncFinishDlpJobRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2::FinishDlpJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinishDlpJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

DlpService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::InspectContentRequest, ::google::privacy::dlp::v2::InspectContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::InspectContentRequest* req,
             ::google::privacy::dlp::v2::InspectContentResponse* resp) {
               return service->InspectContent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::RedactImageRequest, ::google::privacy::dlp::v2::RedactImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::RedactImageRequest* req,
             ::google::privacy::dlp::v2::RedactImageResponse* resp) {
               return service->RedactImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::DeidentifyContentRequest, ::google::privacy::dlp::v2::DeidentifyContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::DeidentifyContentRequest* req,
             ::google::privacy::dlp::v2::DeidentifyContentResponse* resp) {
               return service->DeidentifyContent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ReidentifyContentRequest, ::google::privacy::dlp::v2::ReidentifyContentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ReidentifyContentRequest* req,
             ::google::privacy::dlp::v2::ReidentifyContentResponse* resp) {
               return service->ReidentifyContent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ListInfoTypesRequest, ::google::privacy::dlp::v2::ListInfoTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ListInfoTypesRequest* req,
             ::google::privacy::dlp::v2::ListInfoTypesResponse* resp) {
               return service->ListInfoTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::CreateInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::CreateInspectTemplateRequest* req,
             ::google::privacy::dlp::v2::InspectTemplate* resp) {
               return service->CreateInspectTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::UpdateInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::UpdateInspectTemplateRequest* req,
             ::google::privacy::dlp::v2::InspectTemplate* resp) {
               return service->UpdateInspectTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::GetInspectTemplateRequest, ::google::privacy::dlp::v2::InspectTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::GetInspectTemplateRequest* req,
             ::google::privacy::dlp::v2::InspectTemplate* resp) {
               return service->GetInspectTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ListInspectTemplatesRequest, ::google::privacy::dlp::v2::ListInspectTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ListInspectTemplatesRequest* req,
             ::google::privacy::dlp::v2::ListInspectTemplatesResponse* resp) {
               return service->ListInspectTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::DeleteInspectTemplateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::DeleteInspectTemplateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteInspectTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest* req,
             ::google::privacy::dlp::v2::DeidentifyTemplate* resp) {
               return service->CreateDeidentifyTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest* req,
             ::google::privacy::dlp::v2::DeidentifyTemplate* resp) {
               return service->UpdateDeidentifyTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest, ::google::privacy::dlp::v2::DeidentifyTemplate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest* req,
             ::google::privacy::dlp::v2::DeidentifyTemplate* resp) {
               return service->GetDeidentifyTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest, ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest* req,
             ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse* resp) {
               return service->ListDeidentifyTemplates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteDeidentifyTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::CreateJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::CreateJobTriggerRequest* req,
             ::google::privacy::dlp::v2::JobTrigger* resp) {
               return service->CreateJobTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::UpdateJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::UpdateJobTriggerRequest* req,
             ::google::privacy::dlp::v2::JobTrigger* resp) {
               return service->UpdateJobTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest, ::google::privacy::dlp::v2::HybridInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest* req,
             ::google::privacy::dlp::v2::HybridInspectResponse* resp) {
               return service->HybridInspectJobTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::GetJobTriggerRequest, ::google::privacy::dlp::v2::JobTrigger, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::GetJobTriggerRequest* req,
             ::google::privacy::dlp::v2::JobTrigger* resp) {
               return service->GetJobTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ListJobTriggersRequest, ::google::privacy::dlp::v2::ListJobTriggersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ListJobTriggersRequest* req,
             ::google::privacy::dlp::v2::ListJobTriggersResponse* resp) {
               return service->ListJobTriggers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::DeleteJobTriggerRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::DeleteJobTriggerRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteJobTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ActivateJobTriggerRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ActivateJobTriggerRequest* req,
             ::google::privacy::dlp::v2::DlpJob* resp) {
               return service->ActivateJobTrigger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::CreateDlpJobRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::CreateDlpJobRequest* req,
             ::google::privacy::dlp::v2::DlpJob* resp) {
               return service->CreateDlpJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ListDlpJobsRequest, ::google::privacy::dlp::v2::ListDlpJobsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ListDlpJobsRequest* req,
             ::google::privacy::dlp::v2::ListDlpJobsResponse* resp) {
               return service->ListDlpJobs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::GetDlpJobRequest, ::google::privacy::dlp::v2::DlpJob, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::GetDlpJobRequest* req,
             ::google::privacy::dlp::v2::DlpJob* resp) {
               return service->GetDlpJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::DeleteDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::DeleteDlpJobRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteDlpJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::CancelDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::CancelDlpJobRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->CancelDlpJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest* req,
             ::google::privacy::dlp::v2::StoredInfoType* resp) {
               return service->CreateStoredInfoType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest* req,
             ::google::privacy::dlp::v2::StoredInfoType* resp) {
               return service->UpdateStoredInfoType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::GetStoredInfoTypeRequest, ::google::privacy::dlp::v2::StoredInfoType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::GetStoredInfoTypeRequest* req,
             ::google::privacy::dlp::v2::StoredInfoType* resp) {
               return service->GetStoredInfoType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::ListStoredInfoTypesRequest, ::google::privacy::dlp::v2::ListStoredInfoTypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::ListStoredInfoTypesRequest* req,
             ::google::privacy::dlp::v2::ListStoredInfoTypesResponse* resp) {
               return service->ListStoredInfoTypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteStoredInfoType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::HybridInspectDlpJobRequest, ::google::privacy::dlp::v2::HybridInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::HybridInspectDlpJobRequest* req,
             ::google::privacy::dlp::v2::HybridInspectResponse* resp) {
               return service->HybridInspectDlpJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DlpService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DlpService::Service, ::google::privacy::dlp::v2::FinishDlpJobRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DlpService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::privacy::dlp::v2::FinishDlpJobRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->FinishDlpJob(ctx, req, resp);
             }, this)));
}

DlpService::Service::~Service() {
}

::grpc::Status DlpService::Service::InspectContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::InspectContentRequest* request, ::google::privacy::dlp::v2::InspectContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::RedactImage(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::RedactImageRequest* request, ::google::privacy::dlp::v2::RedactImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::DeidentifyContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::DeidentifyContentRequest* request, ::google::privacy::dlp::v2::DeidentifyContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ReidentifyContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ReidentifyContentRequest* request, ::google::privacy::dlp::v2::ReidentifyContentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListInfoTypes(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ListInfoTypesRequest* request, ::google::privacy::dlp::v2::ListInfoTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::CreateInspectTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::CreateInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::UpdateInspectTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::UpdateInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::GetInspectTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::GetInspectTemplateRequest* request, ::google::privacy::dlp::v2::InspectTemplate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListInspectTemplates(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ListInspectTemplatesRequest* request, ::google::privacy::dlp::v2::ListInspectTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::DeleteInspectTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::DeleteInspectTemplateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::CreateDeidentifyTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::CreateDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::UpdateDeidentifyTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::UpdateDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::GetDeidentifyTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::GetDeidentifyTemplateRequest* request, ::google::privacy::dlp::v2::DeidentifyTemplate* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListDeidentifyTemplates(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ListDeidentifyTemplatesRequest* request, ::google::privacy::dlp::v2::ListDeidentifyTemplatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::DeleteDeidentifyTemplate(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::DeleteDeidentifyTemplateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::CreateJobTrigger(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::CreateJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::UpdateJobTrigger(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::UpdateJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::HybridInspectJobTrigger(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::HybridInspectJobTriggerRequest* request, ::google::privacy::dlp::v2::HybridInspectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::GetJobTrigger(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::GetJobTriggerRequest* request, ::google::privacy::dlp::v2::JobTrigger* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListJobTriggers(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ListJobTriggersRequest* request, ::google::privacy::dlp::v2::ListJobTriggersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::DeleteJobTrigger(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::DeleteJobTriggerRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ActivateJobTrigger(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ActivateJobTriggerRequest* request, ::google::privacy::dlp::v2::DlpJob* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::CreateDlpJob(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::CreateDlpJobRequest* request, ::google::privacy::dlp::v2::DlpJob* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListDlpJobs(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ListDlpJobsRequest* request, ::google::privacy::dlp::v2::ListDlpJobsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::GetDlpJob(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::GetDlpJobRequest* request, ::google::privacy::dlp::v2::DlpJob* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::DeleteDlpJob(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::DeleteDlpJobRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::CancelDlpJob(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::CancelDlpJobRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::CreateStoredInfoType(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::CreateStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::UpdateStoredInfoType(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::UpdateStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::GetStoredInfoType(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::GetStoredInfoTypeRequest* request, ::google::privacy::dlp::v2::StoredInfoType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::ListStoredInfoTypes(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::ListStoredInfoTypesRequest* request, ::google::privacy::dlp::v2::ListStoredInfoTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::DeleteStoredInfoType(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::DeleteStoredInfoTypeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::HybridInspectDlpJob(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::HybridInspectDlpJobRequest* request, ::google::privacy::dlp::v2::HybridInspectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DlpService::Service::FinishDlpJob(::grpc::ServerContext* context, const ::google::privacy::dlp::v2::FinishDlpJobRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace privacy
}  // namespace dlp
}  // namespace v2

