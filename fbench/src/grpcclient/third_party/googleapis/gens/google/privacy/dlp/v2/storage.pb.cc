// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/privacy/dlp/v2/storage.proto

#include "google/privacy/dlp/v2/storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_DetectionRule_LikelihoodAdjustment_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_DetectionRule_Proximity_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_SurrogateType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HybridOptions_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Key_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_HybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Key_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace google {
namespace privacy {
namespace dlp {
namespace v2 {
class InfoTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InfoType> _instance;
} _InfoType_default_instance_;
class StoredTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StoredType> _instance;
} _StoredType_default_instance_;
class CustomInfoType_Dictionary_WordListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_Dictionary_WordList> _instance;
} _CustomInfoType_Dictionary_WordList_default_instance_;
class CustomInfoType_DictionaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_Dictionary> _instance;
  const ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList* word_list_;
  const ::google::privacy::dlp::v2::CloudStoragePath* cloud_storage_path_;
} _CustomInfoType_Dictionary_default_instance_;
class CustomInfoType_RegexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_Regex> _instance;
} _CustomInfoType_Regex_default_instance_;
class CustomInfoType_SurrogateTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_SurrogateType> _instance;
} _CustomInfoType_SurrogateType_default_instance_;
class CustomInfoType_DetectionRule_ProximityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_DetectionRule_Proximity> _instance;
} _CustomInfoType_DetectionRule_Proximity_default_instance_;
class CustomInfoType_DetectionRule_LikelihoodAdjustmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_DetectionRule_LikelihoodAdjustment> _instance;
  int fixed_likelihood_;
  ::google::protobuf::int32 relative_likelihood_;
} _CustomInfoType_DetectionRule_LikelihoodAdjustment_default_instance_;
class CustomInfoType_DetectionRule_HotwordRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_DetectionRule_HotwordRule> _instance;
} _CustomInfoType_DetectionRule_HotwordRule_default_instance_;
class CustomInfoType_DetectionRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType_DetectionRule> _instance;
  const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule* hotword_rule_;
} _CustomInfoType_DetectionRule_default_instance_;
class CustomInfoTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomInfoType> _instance;
  const ::google::privacy::dlp::v2::CustomInfoType_Dictionary* dictionary_;
  const ::google::privacy::dlp::v2::CustomInfoType_Regex* regex_;
  const ::google::privacy::dlp::v2::CustomInfoType_SurrogateType* surrogate_type_;
  const ::google::privacy::dlp::v2::StoredType* stored_type_;
} _CustomInfoType_default_instance_;
class FieldIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FieldId> _instance;
} _FieldId_default_instance_;
class PartitionIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionId> _instance;
} _PartitionId_default_instance_;
class KindExpressionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KindExpression> _instance;
} _KindExpression_default_instance_;
class DatastoreOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatastoreOptions> _instance;
} _DatastoreOptions_default_instance_;
class CloudStorageRegexFileSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStorageRegexFileSet> _instance;
} _CloudStorageRegexFileSet_default_instance_;
class CloudStorageOptions_FileSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStorageOptions_FileSet> _instance;
} _CloudStorageOptions_FileSet_default_instance_;
class CloudStorageOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStorageOptions> _instance;
} _CloudStorageOptions_default_instance_;
class CloudStorageFileSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStorageFileSet> _instance;
} _CloudStorageFileSet_default_instance_;
class CloudStoragePathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloudStoragePath> _instance;
} _CloudStoragePath_default_instance_;
class BigQueryOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigQueryOptions> _instance;
} _BigQueryOptions_default_instance_;
class StorageConfig_TimespanConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageConfig_TimespanConfig> _instance;
} _StorageConfig_TimespanConfig_default_instance_;
class StorageConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StorageConfig> _instance;
  const ::google::privacy::dlp::v2::DatastoreOptions* datastore_options_;
  const ::google::privacy::dlp::v2::CloudStorageOptions* cloud_storage_options_;
  const ::google::privacy::dlp::v2::BigQueryOptions* big_query_options_;
  const ::google::privacy::dlp::v2::HybridOptions* hybrid_options_;
} _StorageConfig_default_instance_;
class HybridOptions_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridOptions_LabelsEntry_DoNotUse> _instance;
} _HybridOptions_LabelsEntry_DoNotUse_default_instance_;
class HybridOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridOptions> _instance;
} _HybridOptions_default_instance_;
class BigQueryKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigQueryKey> _instance;
} _BigQueryKey_default_instance_;
class DatastoreKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatastoreKey> _instance;
} _DatastoreKey_default_instance_;
class Key_PathElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Key_PathElement> _instance;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
} _Key_PathElement_default_instance_;
class KeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Key> _instance;
} _Key_default_instance_;
class RecordKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordKey> _instance;
  const ::google::privacy::dlp::v2::DatastoreKey* datastore_key_;
  const ::google::privacy::dlp::v2::BigQueryKey* big_query_key_;
} _RecordKey_default_instance_;
class BigQueryTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigQueryTable> _instance;
} _BigQueryTable_default_instance_;
class BigQueryFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigQueryField> _instance;
} _BigQueryField_default_instance_;
class EntityIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EntityId> _instance;
} _EntityId_default_instance_;
class TableOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableOptions> _instance;
} _TableOptions_default_instance_;
}  // namespace v2
}  // namespace dlp
}  // namespace privacy
}  // namespace google
static void InitDefaultsInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_InfoType_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::InfoType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::InfoType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsStoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StoredType_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StoredType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StoredType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsCustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_Dictionary_WordList_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsCustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_Dictionary_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_Dictionary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_Dictionary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_CustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsCustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_Regex_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_Regex();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_Regex::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsCustomInfoType_SurrogateType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_SurrogateType_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_SurrogateType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_SurrogateType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_SurrogateType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomInfoType_SurrogateType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsCustomInfoType_DetectionRule_Proximity_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_Proximity_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_DetectionRule_Proximity_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomInfoType_DetectionRule_Proximity_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsCustomInfoType_DetectionRule_LikelihoodAdjustment_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_LikelihoodAdjustment_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomInfoType_DetectionRule_LikelihoodAdjustment_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomInfoType_DetectionRule_LikelihoodAdjustment_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsCustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_HotwordRule_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_DetectionRule_Proximity_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_DetectionRule_LikelihoodAdjustment_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsCustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType_DetectionRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType_DetectionRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsCustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CustomInfoType_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CustomInfoType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CustomInfoType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_CustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsCustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_SurrogateType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_StoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsFieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_FieldId_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::FieldId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::FieldId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsPartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_PartitionId_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::PartitionId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::PartitionId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsKindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_KindExpression_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::KindExpression();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::KindExpression::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsDatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DatastoreOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DatastoreOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DatastoreOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_PartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_KindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsCloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CloudStorageRegexFileSet_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CloudStorageRegexFileSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CloudStorageRegexFileSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsCloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CloudStorageOptions_FileSet_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CloudStorageOptions_FileSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CloudStorageOptions_FileSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_CloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsCloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CloudStorageOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CloudStorageOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CloudStorageOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_CloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsCloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CloudStorageFileSet_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CloudStorageFileSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CloudStorageFileSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsCloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_CloudStoragePath_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::CloudStoragePath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::CloudStoragePath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsBigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_BigQueryOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::BigQueryOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::BigQueryOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsStorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StorageConfig_TimespanConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StorageConfig_TimespanConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StorageConfig_TimespanConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsStorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_StorageConfig_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::StorageConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::StorageConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_StorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsStorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_DatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_CloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_BigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_HybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_StorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsHybridOptions_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridOptions_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse();
  }
  ::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HybridOptions_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHybridOptions_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsHybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_HybridOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::HybridOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::HybridOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_HybridOptions_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsBigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_BigQueryKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::BigQueryKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::BigQueryKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsDatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_DatastoreKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::DatastoreKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::DatastoreKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_Key_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsKey_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Key_PathElement_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Key_PathElement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Key_PathElement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Key_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKey_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_Key_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::Key();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::Key::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Key_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_PartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_Key_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsRecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_RecordKey_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::RecordKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::RecordKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_DatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_BigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsBigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_BigQueryTable_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::BigQueryTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::BigQueryTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {}};

static void InitDefaultsBigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_BigQueryField_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::BigQueryField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::BigQueryField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsEntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_EntityId_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::EntityId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::EntityId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

static void InitDefaultsTableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::privacy::dlp::v2::_TableOptions_default_instance_;
    new (ptr) ::google::privacy::dlp::v2::TableOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::privacy::dlp::v2::TableOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto}, {
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base,}};

void InitDefaults_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_SurrogateType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_DetectionRule_Proximity_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_DetectionRule_LikelihoodAdjustment_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridOptions_LabelsEntry_DoNotUse_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Key_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Key_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[34];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::InfoType, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredType, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StoredType, create_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList, words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Dictionary, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::CustomInfoType_DictionaryDefaultTypeInternal, word_list_),
  offsetof(::google::privacy::dlp::v2::CustomInfoType_DictionaryDefaultTypeInternal, cloud_storage_path_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Dictionary, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Regex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Regex, pattern_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_Regex, group_indexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_SurrogateType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity, window_before_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity, window_after_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustmentDefaultTypeInternal, fixed_likelihood_),
  offsetof(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustmentDefaultTypeInternal, relative_likelihood_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment, adjustment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule, hotword_regex_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule, proximity_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule, likelihood_adjustment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::CustomInfoType_DetectionRuleDefaultTypeInternal, hotword_rule_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType_DetectionRule, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType, info_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType, likelihood_),
  offsetof(::google::privacy::dlp::v2::CustomInfoTypeDefaultTypeInternal, dictionary_),
  offsetof(::google::privacy::dlp::v2::CustomInfoTypeDefaultTypeInternal, regex_),
  offsetof(::google::privacy::dlp::v2::CustomInfoTypeDefaultTypeInternal, surrogate_type_),
  offsetof(::google::privacy::dlp::v2::CustomInfoTypeDefaultTypeInternal, stored_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType, detection_rules_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType, exclusion_type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CustomInfoType, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FieldId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::FieldId, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PartitionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PartitionId, project_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::PartitionId, namespace_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::KindExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::KindExpression, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DatastoreOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DatastoreOptions, partition_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DatastoreOptions, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageRegexFileSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageRegexFileSet, bucket_name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageRegexFileSet, include_regex_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageRegexFileSet, exclude_regex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions_FileSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions_FileSet, url_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions_FileSet, regex_file_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions, file_set_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions, bytes_limit_per_file_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions, bytes_limit_per_file_percent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions, file_types_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions, sample_method_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageOptions, files_limit_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageFileSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStorageFileSet, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStoragePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::CloudStoragePath, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryOptions, table_reference_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryOptions, identifying_fields_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryOptions, rows_limit_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryOptions, rows_limit_percent_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryOptions, sample_method_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryOptions, excluded_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig_TimespanConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig_TimespanConfig, start_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig_TimespanConfig, end_time_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig_TimespanConfig, timestamp_field_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig_TimespanConfig, enable_auto_population_of_timespan_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::StorageConfigDefaultTypeInternal, datastore_options_),
  offsetof(::google::privacy::dlp::v2::StorageConfigDefaultTypeInternal, cloud_storage_options_),
  offsetof(::google::privacy::dlp::v2::StorageConfigDefaultTypeInternal, big_query_options_),
  offsetof(::google::privacy::dlp::v2::StorageConfigDefaultTypeInternal, hybrid_options_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig, timespan_config_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::StorageConfig, type_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions, description_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions, required_finding_label_keys_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions, labels_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::HybridOptions, table_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryKey, table_reference_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryKey, row_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DatastoreKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::DatastoreKey, entity_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Key_PathElement, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Key_PathElement, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Key_PathElement, kind_),
  offsetof(::google::privacy::dlp::v2::Key_PathElementDefaultTypeInternal, id_),
  offsetof(::google::privacy::dlp::v2::Key_PathElementDefaultTypeInternal, name_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Key_PathElement, id_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Key, partition_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::Key, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordKey, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordKey, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::privacy::dlp::v2::RecordKeyDefaultTypeInternal, datastore_key_),
  offsetof(::google::privacy::dlp::v2::RecordKeyDefaultTypeInternal, big_query_key_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordKey, id_values_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::RecordKey, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryTable, project_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryTable, dataset_id_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryTable, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryField, table_),
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::BigQueryField, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::EntityId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::EntityId, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TableOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::privacy::dlp::v2::TableOptions, identifying_fields_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::privacy::dlp::v2::InfoType)},
  { 6, -1, sizeof(::google::privacy::dlp::v2::StoredType)},
  { 13, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList)},
  { 19, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_Dictionary)},
  { 27, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_Regex)},
  { 34, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_SurrogateType)},
  { 39, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity)},
  { 46, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment)},
  { 54, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule)},
  { 62, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType_DetectionRule)},
  { 69, -1, sizeof(::google::privacy::dlp::v2::CustomInfoType)},
  { 83, -1, sizeof(::google::privacy::dlp::v2::FieldId)},
  { 89, -1, sizeof(::google::privacy::dlp::v2::PartitionId)},
  { 96, -1, sizeof(::google::privacy::dlp::v2::KindExpression)},
  { 102, -1, sizeof(::google::privacy::dlp::v2::DatastoreOptions)},
  { 109, -1, sizeof(::google::privacy::dlp::v2::CloudStorageRegexFileSet)},
  { 117, -1, sizeof(::google::privacy::dlp::v2::CloudStorageOptions_FileSet)},
  { 124, -1, sizeof(::google::privacy::dlp::v2::CloudStorageOptions)},
  { 135, -1, sizeof(::google::privacy::dlp::v2::CloudStorageFileSet)},
  { 141, -1, sizeof(::google::privacy::dlp::v2::CloudStoragePath)},
  { 147, -1, sizeof(::google::privacy::dlp::v2::BigQueryOptions)},
  { 158, -1, sizeof(::google::privacy::dlp::v2::StorageConfig_TimespanConfig)},
  { 167, -1, sizeof(::google::privacy::dlp::v2::StorageConfig)},
  { 178, 185, sizeof(::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse)},
  { 187, -1, sizeof(::google::privacy::dlp::v2::HybridOptions)},
  { 196, -1, sizeof(::google::privacy::dlp::v2::BigQueryKey)},
  { 203, -1, sizeof(::google::privacy::dlp::v2::DatastoreKey)},
  { 209, -1, sizeof(::google::privacy::dlp::v2::Key_PathElement)},
  { 218, -1, sizeof(::google::privacy::dlp::v2::Key)},
  { 225, -1, sizeof(::google::privacy::dlp::v2::RecordKey)},
  { 234, -1, sizeof(::google::privacy::dlp::v2::BigQueryTable)},
  { 242, -1, sizeof(::google::privacy::dlp::v2::BigQueryField)},
  { 249, -1, sizeof(::google::privacy::dlp::v2::EntityId)},
  { 255, -1, sizeof(::google::privacy::dlp::v2::TableOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_InfoType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StoredType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_Dictionary_WordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_Dictionary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_Regex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_SurrogateType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_Proximity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_LikelihoodAdjustment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_HotwordRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CustomInfoType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_FieldId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_PartitionId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_KindExpression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DatastoreOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CloudStorageRegexFileSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CloudStorageOptions_FileSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CloudStorageOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CloudStorageFileSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_CloudStoragePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_BigQueryOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StorageConfig_TimespanConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_StorageConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridOptions_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_HybridOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_BigQueryKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_DatastoreKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Key_PathElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_Key_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_RecordKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_BigQueryTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_BigQueryField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_EntityId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::privacy::dlp::v2::_TableOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto = {
  {}, AddDescriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto, "google/privacy/dlp/v2/storage.proto", schemas,
  file_default_instances, TableStruct_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto::offsets,
  file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto, 34, file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto, file_level_service_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto,
};

const char descriptor_table_protodef_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[] =
  "\n#google/privacy/dlp/v2/storage.proto\022\025g"
  "oogle.privacy.dlp.v2\032\031google/api/resourc"
  "e.proto\032\037google/protobuf/timestamp.proto"
  "\032\034google/api/annotations.proto\"\030\n\010InfoTy"
  "pe\022\014\n\004name\030\001 \001(\t\"K\n\nStoredType\022\014\n\004name\030\001"
  " \001(\t\022/\n\013create_time\030\002 \001(\0132\032.google.proto"
  "buf.Timestamp\"\310\013\n\016CustomInfoType\0222\n\tinfo"
  "_type\030\001 \001(\0132\037.google.privacy.dlp.v2.Info"
  "Type\0225\n\nlikelihood\030\006 \001(\0162!.google.privac"
  "y.dlp.v2.Likelihood\022F\n\ndictionary\030\002 \001(\0132"
  "0.google.privacy.dlp.v2.CustomInfoType.D"
  "ictionaryH\000\022<\n\005regex\030\003 \001(\0132+.google.priv"
  "acy.dlp.v2.CustomInfoType.RegexH\000\022M\n\016sur"
  "rogate_type\030\004 \001(\01323.google.privacy.dlp.v"
  "2.CustomInfoType.SurrogateTypeH\000\0228\n\013stor"
  "ed_type\030\005 \001(\0132!.google.privacy.dlp.v2.St"
  "oredTypeH\000\022L\n\017detection_rules\030\007 \003(\01323.go"
  "ogle.privacy.dlp.v2.CustomInfoType.Detec"
  "tionRule\022K\n\016exclusion_type\030\010 \001(\01623.googl"
  "e.privacy.dlp.v2.CustomInfoType.Exclusio"
  "nType\032\310\001\n\nDictionary\022N\n\tword_list\030\001 \001(\0132"
  "9.google.privacy.dlp.v2.CustomInfoType.D"
  "ictionary.WordListH\000\022E\n\022cloud_storage_pa"
  "th\030\003 \001(\0132\'.google.privacy.dlp.v2.CloudSt"
  "oragePathH\000\032\031\n\010WordList\022\r\n\005words\030\001 \003(\tB\010"
  "\n\006source\032/\n\005Regex\022\017\n\007pattern\030\001 \001(\t\022\025\n\rgr"
  "oup_indexes\030\002 \003(\005\032\017\n\rSurrogateType\032\276\004\n\rD"
  "etectionRule\022W\n\014hotword_rule\030\001 \001(\0132\?.goo"
  "gle.privacy.dlp.v2.CustomInfoType.Detect"
  "ionRule.HotwordRuleH\000\0328\n\tProximity\022\025\n\rwi"
  "ndow_before\030\001 \001(\005\022\024\n\014window_after\030\002 \001(\005\032"
  "\202\001\n\024LikelihoodAdjustment\022=\n\020fixed_likeli"
  "hood\030\001 \001(\0162!.google.privacy.dlp.v2.Likel"
  "ihoodH\000\022\035\n\023relative_likelihood\030\002 \001(\005H\000B\014"
  "\n\nadjustment\032\214\002\n\013HotwordRule\022B\n\rhotword_"
  "regex\030\001 \001(\0132+.google.privacy.dlp.v2.Cust"
  "omInfoType.Regex\022P\n\tproximity\030\002 \001(\0132=.go"
  "ogle.privacy.dlp.v2.CustomInfoType.Detec"
  "tionRule.Proximity\022g\n\025likelihood_adjustm"
  "ent\030\003 \001(\0132H.google.privacy.dlp.v2.Custom"
  "InfoType.DetectionRule.LikelihoodAdjustm"
  "entB\006\n\004type\"K\n\rExclusionType\022\036\n\032EXCLUSIO"
  "N_TYPE_UNSPECIFIED\020\000\022\032\n\026EXCLUSION_TYPE_E"
  "XCLUDE\020\001B\006\n\004type\"\027\n\007FieldId\022\014\n\004name\030\001 \001("
  "\t\"7\n\013PartitionId\022\022\n\nproject_id\030\002 \001(\t\022\024\n\014"
  "namespace_id\030\004 \001(\t\"\036\n\016KindExpression\022\014\n\004"
  "name\030\001 \001(\t\"\201\001\n\020DatastoreOptions\0228\n\014parti"
  "tion_id\030\001 \001(\0132\".google.privacy.dlp.v2.Pa"
  "rtitionId\0223\n\004kind\030\002 \001(\0132%.google.privacy"
  ".dlp.v2.KindExpression\"]\n\030CloudStorageRe"
  "gexFileSet\022\023\n\013bucket_name\030\001 \001(\t\022\025\n\rinclu"
  "de_regex\030\002 \003(\t\022\025\n\rexclude_regex\030\003 \003(\t\"\354\003"
  "\n\023CloudStorageOptions\022D\n\010file_set\030\001 \001(\0132"
  "2.google.privacy.dlp.v2.CloudStorageOpti"
  "ons.FileSet\022\034\n\024bytes_limit_per_file\030\004 \001("
  "\003\022$\n\034bytes_limit_per_file_percent\030\010 \001(\005\022"
  "3\n\nfile_types\030\005 \003(\0162\037.google.privacy.dlp"
  ".v2.FileType\022N\n\rsample_method\030\006 \001(\01627.go"
  "ogle.privacy.dlp.v2.CloudStorageOptions."
  "SampleMethod\022\033\n\023files_limit_percent\030\007 \001("
  "\005\032_\n\007FileSet\022\013\n\003url\030\001 \001(\t\022G\n\016regex_file_"
  "set\030\002 \001(\0132/.google.privacy.dlp.v2.CloudS"
  "torageRegexFileSet\"H\n\014SampleMethod\022\035\n\031SA"
  "MPLE_METHOD_UNSPECIFIED\020\000\022\007\n\003TOP\020\001\022\020\n\014RA"
  "NDOM_START\020\002\"\"\n\023CloudStorageFileSet\022\013\n\003u"
  "rl\030\001 \001(\t\" \n\020CloudStoragePath\022\014\n\004path\030\001 \001"
  "(\t\"\213\003\n\017BigQueryOptions\022=\n\017table_referenc"
  "e\030\001 \001(\0132$.google.privacy.dlp.v2.BigQuery"
  "Table\022:\n\022identifying_fields\030\002 \003(\0132\036.goog"
  "le.privacy.dlp.v2.FieldId\022\022\n\nrows_limit\030"
  "\003 \001(\003\022\032\n\022rows_limit_percent\030\006 \001(\005\022J\n\rsam"
  "ple_method\030\004 \001(\01623.google.privacy.dlp.v2"
  ".BigQueryOptions.SampleMethod\0227\n\017exclude"
  "d_fields\030\005 \003(\0132\036.google.privacy.dlp.v2.F"
  "ieldId\"H\n\014SampleMethod\022\035\n\031SAMPLE_METHOD_"
  "UNSPECIFIED\020\000\022\007\n\003TOP\020\001\022\020\n\014RANDOM_START\020\002"
  "\"\332\004\n\rStorageConfig\022D\n\021datastore_options\030"
  "\002 \001(\0132\'.google.privacy.dlp.v2.DatastoreO"
  "ptionsH\000\022K\n\025cloud_storage_options\030\003 \001(\0132"
  "*.google.privacy.dlp.v2.CloudStorageOpti"
  "onsH\000\022C\n\021big_query_options\030\004 \001(\0132&.googl"
  "e.privacy.dlp.v2.BigQueryOptionsH\000\022>\n\016hy"
  "brid_options\030\t \001(\0132$.google.privacy.dlp."
  "v2.HybridOptionsH\000\022L\n\017timespan_config\030\006 "
  "\001(\01323.google.privacy.dlp.v2.StorageConfi"
  "g.TimespanConfig\032\332\001\n\016TimespanConfig\022.\n\ns"
  "tart_time\030\001 \001(\0132\032.google.protobuf.Timest"
  "amp\022,\n\010end_time\030\002 \001(\0132\032.google.protobuf."
  "Timestamp\0227\n\017timestamp_field\030\003 \001(\0132\036.goo"
  "gle.privacy.dlp.v2.FieldId\0221\n)enable_aut"
  "o_population_of_timespan_config\030\004 \001(\010B\006\n"
  "\004type\"\366\001\n\rHybridOptions\022\023\n\013description\030\001"
  " \001(\t\022#\n\033required_finding_label_keys\030\002 \003("
  "\t\022@\n\006labels\030\003 \003(\01320.google.privacy.dlp.v"
  "2.HybridOptions.LabelsEntry\022:\n\rtable_opt"
  "ions\030\004 \001(\0132#.google.privacy.dlp.v2.Table"
  "Options\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\"`\n\013BigQueryKey\022=\n\017table_r"
  "eference\030\001 \001(\0132$.google.privacy.dlp.v2.B"
  "igQueryTable\022\022\n\nrow_number\030\002 \001(\003\">\n\014Data"
  "storeKey\022.\n\nentity_key\030\001 \001(\0132\032.google.pr"
  "ivacy.dlp.v2.Key\"\273\001\n\003Key\0228\n\014partition_id"
  "\030\001 \001(\0132\".google.privacy.dlp.v2.Partition"
  "Id\0224\n\004path\030\002 \003(\0132&.google.privacy.dlp.v2"
  ".Key.PathElement\032D\n\013PathElement\022\014\n\004kind\030"
  "\001 \001(\t\022\014\n\002id\030\002 \001(\003H\000\022\016\n\004name\030\003 \001(\tH\000B\t\n\007i"
  "d_type\"\241\001\n\tRecordKey\022<\n\rdatastore_key\030\002 "
  "\001(\0132#.google.privacy.dlp.v2.DatastoreKey"
  "H\000\022;\n\rbig_query_key\030\003 \001(\0132\".google.priva"
  "cy.dlp.v2.BigQueryKeyH\000\022\021\n\tid_values\030\005 \003"
  "(\tB\006\n\004type\"I\n\rBigQueryTable\022\022\n\nproject_i"
  "d\030\001 \001(\t\022\022\n\ndataset_id\030\002 \001(\t\022\020\n\010table_id\030"
  "\003 \001(\t\"s\n\rBigQueryField\0223\n\005table\030\001 \001(\0132$."
  "google.privacy.dlp.v2.BigQueryTable\022-\n\005f"
  "ield\030\002 \001(\0132\036.google.privacy.dlp.v2.Field"
  "Id\"9\n\010EntityId\022-\n\005field\030\001 \001(\0132\036.google.p"
  "rivacy.dlp.v2.FieldId\"J\n\014TableOptions\022:\n"
  "\022identifying_fields\030\001 \003(\0132\036.google.priva"
  "cy.dlp.v2.FieldId*t\n\nLikelihood\022\032\n\026LIKEL"
  "IHOOD_UNSPECIFIED\020\000\022\021\n\rVERY_UNLIKELY\020\001\022\014"
  "\n\010UNLIKELY\020\002\022\014\n\010POSSIBLE\020\003\022\n\n\006LIKELY\020\004\022\017"
  "\n\013VERY_LIKELY\020\005*\177\n\010FileType\022\031\n\025FILE_TYPE"
  "_UNSPECIFIED\020\000\022\017\n\013BINARY_FILE\020\001\022\r\n\tTEXT_"
  "FILE\020\002\022\t\n\005IMAGE\020\003\022\010\n\004WORD\020\005\022\007\n\003PDF\020\006\022\010\n\004"
  "AVRO\020\007\022\007\n\003CSV\020\010\022\007\n\003TSV\020\tB\250\001\n\031com.google."
  "privacy.dlp.v2B\nDlpStorageP\001Z8google.gol"
  "ang.org/genproto/googleapis/privacy/dlp/"
  "v2;dlp\252\002\023Google.Cloud.Dlp.V2\312\002\023Google\\Cl"
  "oud\\Dlp\\V2\352\002\026Google::Cloud::Dlp::V2b\006pro"
  "to3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto = {
  false, InitDefaults_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto, 
  descriptor_table_protodef_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto,
  "google/privacy/dlp/v2/storage.proto", &assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto, 5163,
};

void AddDescriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_google_2fapi_2fresource_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto = []() { AddDescriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto(); return true; }();
namespace google {
namespace privacy {
namespace dlp {
namespace v2 {
const ::google::protobuf::EnumDescriptor* CustomInfoType_ExclusionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[0];
}
bool CustomInfoType_ExclusionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CustomInfoType_ExclusionType CustomInfoType::EXCLUSION_TYPE_UNSPECIFIED;
const CustomInfoType_ExclusionType CustomInfoType::EXCLUSION_TYPE_EXCLUDE;
const CustomInfoType_ExclusionType CustomInfoType::ExclusionType_MIN;
const CustomInfoType_ExclusionType CustomInfoType::ExclusionType_MAX;
const int CustomInfoType::ExclusionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CloudStorageOptions_SampleMethod_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[1];
}
bool CloudStorageOptions_SampleMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CloudStorageOptions_SampleMethod CloudStorageOptions::SAMPLE_METHOD_UNSPECIFIED;
const CloudStorageOptions_SampleMethod CloudStorageOptions::TOP;
const CloudStorageOptions_SampleMethod CloudStorageOptions::RANDOM_START;
const CloudStorageOptions_SampleMethod CloudStorageOptions::SampleMethod_MIN;
const CloudStorageOptions_SampleMethod CloudStorageOptions::SampleMethod_MAX;
const int CloudStorageOptions::SampleMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BigQueryOptions_SampleMethod_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[2];
}
bool BigQueryOptions_SampleMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BigQueryOptions_SampleMethod BigQueryOptions::SAMPLE_METHOD_UNSPECIFIED;
const BigQueryOptions_SampleMethod BigQueryOptions::TOP;
const BigQueryOptions_SampleMethod BigQueryOptions::RANDOM_START;
const BigQueryOptions_SampleMethod BigQueryOptions::SampleMethod_MIN;
const BigQueryOptions_SampleMethod BigQueryOptions::SampleMethod_MAX;
const int BigQueryOptions::SampleMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Likelihood_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[3];
}
bool Likelihood_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return file_level_enum_descriptors_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[4];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void InfoType::InitAsDefaultInstance() {
}
class InfoType::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InfoType::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoType::InfoType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.InfoType)
}
InfoType::InfoType(const InfoType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.InfoType)
}

void InfoType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InfoType::~InfoType() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.InfoType)
  SharedDtor();
}

void InfoType::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InfoType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoType& InfoType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void InfoType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.InfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InfoType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InfoType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.InfoType.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.InfoType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.InfoType.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.InfoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.InfoType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.InfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.InfoType)
}

::google::protobuf::uint8* InfoType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.InfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.InfoType.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.InfoType)
  return target;
}

size_t InfoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.InfoType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.InfoType)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoType* source =
      ::google::protobuf::DynamicCastToGenerated<InfoType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.InfoType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.InfoType)
    MergeFrom(*source);
  }
}

void InfoType::MergeFrom(const InfoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.InfoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void InfoType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.InfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoType::CopyFrom(const InfoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.InfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoType::IsInitialized() const {
  return true;
}

void InfoType::Swap(InfoType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoType::InternalSwap(InfoType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata InfoType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StoredType::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StoredType_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class StoredType::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& create_time(const StoredType* msg);
};

const ::google::protobuf::Timestamp&
StoredType::HasBitSetters::create_time(const StoredType* msg) {
  return *msg->create_time_;
}
void StoredType::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoredType::kNameFieldNumber;
const int StoredType::kCreateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoredType::StoredType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StoredType)
}
StoredType::StoredType(const StoredType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StoredType)
}

void StoredType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = nullptr;
}

StoredType::~StoredType() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StoredType)
  SharedDtor();
}

void StoredType::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
}

void StoredType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoredType& StoredType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StoredType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StoredType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StoredType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoredType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StoredType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.StoredType.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoredType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StoredType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.StoredType.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StoredType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StoredType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoredType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StoredType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::create_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StoredType)
}

::google::protobuf::uint8* StoredType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StoredType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.StoredType.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::create_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StoredType)
  return target;
}

size_t StoredType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StoredType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp create_time = 2;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoredType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StoredType)
  GOOGLE_DCHECK_NE(&from, this);
  const StoredType* source =
      ::google::protobuf::DynamicCastToGenerated<StoredType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StoredType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StoredType)
    MergeFrom(*source);
  }
}

void StoredType::MergeFrom(const StoredType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StoredType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
}

void StoredType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StoredType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredType::CopyFrom(const StoredType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StoredType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredType::IsInitialized() const {
  return true;
}

void StoredType::Swap(StoredType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoredType::InternalSwap(StoredType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
}

::google::protobuf::Metadata StoredType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_Dictionary_WordList::InitAsDefaultInstance() {
}
class CustomInfoType_Dictionary_WordList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType_Dictionary_WordList::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_Dictionary_WordList::CustomInfoType_Dictionary_WordList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
}
CustomInfoType_Dictionary_WordList::CustomInfoType_Dictionary_WordList(const CustomInfoType_Dictionary_WordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
}

void CustomInfoType_Dictionary_WordList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
}

CustomInfoType_Dictionary_WordList::~CustomInfoType_Dictionary_WordList() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  SharedDtor();
}

void CustomInfoType_Dictionary_WordList::SharedDtor() {
}

void CustomInfoType_Dictionary_WordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_Dictionary_WordList& CustomInfoType_Dictionary_WordList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_Dictionary_WordList_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_Dictionary_WordList::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_Dictionary_WordList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_Dictionary_WordList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string words = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.words");
          object = msg->add_words();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_Dictionary_WordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string words = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_words()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->words(this->words_size() - 1).data(),
            static_cast<int>(this->words(this->words_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.words"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_Dictionary_WordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words(i).data(), static_cast<int>(this->words(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.words");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->words(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
}

::google::protobuf::uint8* CustomInfoType_Dictionary_WordList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->words(i).data(), static_cast<int>(this->words(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList.words");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->words(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  return target;
}

size_t CustomInfoType_Dictionary_WordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string words = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->words_size());
  for (int i = 0, n = this->words_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->words(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_Dictionary_WordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_Dictionary_WordList* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_Dictionary_WordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
    MergeFrom(*source);
  }
}

void CustomInfoType_Dictionary_WordList::MergeFrom(const CustomInfoType_Dictionary_WordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
}

void CustomInfoType_Dictionary_WordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_Dictionary_WordList::CopyFrom(const CustomInfoType_Dictionary_WordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_Dictionary_WordList::IsInitialized() const {
  return true;
}

void CustomInfoType_Dictionary_WordList::Swap(CustomInfoType_Dictionary_WordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_Dictionary_WordList::InternalSwap(CustomInfoType_Dictionary_WordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  words_.InternalSwap(CastToBase(&other->words_));
}

::google::protobuf::Metadata CustomInfoType_Dictionary_WordList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_Dictionary::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CustomInfoType_Dictionary_default_instance_.word_list_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList*>(
      ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList::internal_default_instance());
  ::google::privacy::dlp::v2::_CustomInfoType_Dictionary_default_instance_.cloud_storage_path_ = const_cast< ::google::privacy::dlp::v2::CloudStoragePath*>(
      ::google::privacy::dlp::v2::CloudStoragePath::internal_default_instance());
}
class CustomInfoType_Dictionary::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList& word_list(const CustomInfoType_Dictionary* msg);
  static const ::google::privacy::dlp::v2::CloudStoragePath& cloud_storage_path(const CustomInfoType_Dictionary* msg);
};

const ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList&
CustomInfoType_Dictionary::HasBitSetters::word_list(const CustomInfoType_Dictionary* msg) {
  return *msg->source_.word_list_;
}
const ::google::privacy::dlp::v2::CloudStoragePath&
CustomInfoType_Dictionary::HasBitSetters::cloud_storage_path(const CustomInfoType_Dictionary* msg) {
  return *msg->source_.cloud_storage_path_;
}
void CustomInfoType_Dictionary::set_allocated_word_list(::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList* word_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (word_list) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      word_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, word_list, submessage_arena);
    }
    set_has_word_list();
    source_.word_list_ = word_list;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CustomInfoType.Dictionary.word_list)
}
void CustomInfoType_Dictionary::set_allocated_cloud_storage_path(::google::privacy::dlp::v2::CloudStoragePath* cloud_storage_path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (cloud_storage_path) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cloud_storage_path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud_storage_path, submessage_arena);
    }
    set_has_cloud_storage_path();
    source_.cloud_storage_path_ = cloud_storage_path;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CustomInfoType.Dictionary.cloud_storage_path)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType_Dictionary::kWordListFieldNumber;
const int CustomInfoType_Dictionary::kCloudStoragePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_Dictionary::CustomInfoType_Dictionary()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.Dictionary)
}
CustomInfoType_Dictionary::CustomInfoType_Dictionary(const CustomInfoType_Dictionary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_source();
  switch (from.source_case()) {
    case kWordList: {
      mutable_word_list()->::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList::MergeFrom(from.word_list());
      break;
    }
    case kCloudStoragePath: {
      mutable_cloud_storage_path()->::google::privacy::dlp::v2::CloudStoragePath::MergeFrom(from.cloud_storage_path());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.Dictionary)
}

void CustomInfoType_Dictionary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  clear_has_source();
}

CustomInfoType_Dictionary::~CustomInfoType_Dictionary() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  SharedDtor();
}

void CustomInfoType_Dictionary::SharedDtor() {
  if (has_source()) {
    clear_source();
  }
}

void CustomInfoType_Dictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_Dictionary& CustomInfoType_Dictionary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_Dictionary_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_Dictionary::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  switch (source_case()) {
    case kWordList: {
      delete source_.word_list_;
      break;
    }
    case kCloudStoragePath: {
      delete source_.cloud_storage_path_;
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void CustomInfoType_Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_source();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_Dictionary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_Dictionary*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList word_list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList::_InternalParse;
        object = msg->mutable_word_list();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CloudStoragePath cloud_storage_path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CloudStoragePath::_InternalParse;
        object = msg->mutable_cloud_storage_path();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_Dictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList word_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_word_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CloudStoragePath cloud_storage_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud_storage_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_Dictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList word_list = 1;
  if (has_word_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::word_list(this), output);
  }

  // .google.privacy.dlp.v2.CloudStoragePath cloud_storage_path = 3;
  if (has_cloud_storage_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cloud_storage_path(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.Dictionary)
}

::google::protobuf::uint8* CustomInfoType_Dictionary::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList word_list = 1;
  if (has_word_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::word_list(this), target);
  }

  // .google.privacy.dlp.v2.CloudStoragePath cloud_storage_path = 3;
  if (has_cloud_storage_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cloud_storage_path(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  return target;
}

size_t CustomInfoType_Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (source_case()) {
    // .google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList word_list = 1;
    case kWordList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.word_list_);
      break;
    }
    // .google.privacy.dlp.v2.CloudStoragePath cloud_storage_path = 3;
    case kCloudStoragePath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.cloud_storage_path_);
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_Dictionary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_Dictionary* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_Dictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.Dictionary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.Dictionary)
    MergeFrom(*source);
  }
}

void CustomInfoType_Dictionary::MergeFrom(const CustomInfoType_Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.source_case()) {
    case kWordList: {
      mutable_word_list()->::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList::MergeFrom(from.word_list());
      break;
    }
    case kCloudStoragePath: {
      mutable_cloud_storage_path()->::google::privacy::dlp::v2::CloudStoragePath::MergeFrom(from.cloud_storage_path());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void CustomInfoType_Dictionary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_Dictionary::CopyFrom(const CustomInfoType_Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_Dictionary::IsInitialized() const {
  return true;
}

void CustomInfoType_Dictionary::Swap(CustomInfoType_Dictionary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_Dictionary::InternalSwap(CustomInfoType_Dictionary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(source_, other->source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CustomInfoType_Dictionary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_Regex::InitAsDefaultInstance() {
}
class CustomInfoType_Regex::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType_Regex::kPatternFieldNumber;
const int CustomInfoType_Regex::kGroupIndexesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_Regex::CustomInfoType_Regex()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.Regex)
}
CustomInfoType_Regex::CustomInfoType_Regex(const CustomInfoType_Regex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      group_indexes_(from.group_indexes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pattern().size() > 0) {
    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.Regex)
}

void CustomInfoType_Regex::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CustomInfoType_Regex::~CustomInfoType_Regex() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.Regex)
  SharedDtor();
}

void CustomInfoType_Regex::SharedDtor() {
  pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomInfoType_Regex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_Regex& CustomInfoType_Regex::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_Regex_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_Regex::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_indexes_.Clear();
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_Regex::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_Regex*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string pattern = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CustomInfoType.Regex.pattern");
        object = msg->mutable_pattern();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated int32 group_indexes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_group_indexes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_group_indexes(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_Regex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pattern().data(), static_cast<int>(this->pattern().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CustomInfoType.Regex.pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 group_indexes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_group_indexes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_group_indexes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.Regex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.Regex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_Regex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pattern = 1;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CustomInfoType.Regex.pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // repeated int32 group_indexes = 2;
  if (this->group_indexes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_group_indexes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->group_indexes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->group_indexes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.Regex)
}

::google::protobuf::uint8* CustomInfoType_Regex::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pattern = 1;
  if (this->pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pattern().data(), static_cast<int>(this->pattern().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CustomInfoType.Regex.pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pattern(), target);
  }

  // repeated int32 group_indexes = 2;
  if (this->group_indexes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _group_indexes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->group_indexes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.Regex)
  return target;
}

size_t CustomInfoType_Regex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 group_indexes = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->group_indexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _group_indexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string pattern = 1;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pattern());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_Regex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_Regex* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_Regex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.Regex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.Regex)
    MergeFrom(*source);
  }
}

void CustomInfoType_Regex::MergeFrom(const CustomInfoType_Regex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_indexes_.MergeFrom(from.group_indexes_);
  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
}

void CustomInfoType_Regex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_Regex::CopyFrom(const CustomInfoType_Regex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.Regex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_Regex::IsInitialized() const {
  return true;
}

void CustomInfoType_Regex::Swap(CustomInfoType_Regex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_Regex::InternalSwap(CustomInfoType_Regex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  group_indexes_.InternalSwap(&other->group_indexes_);
  pattern_.Swap(&other->pattern_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CustomInfoType_Regex::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_SurrogateType::InitAsDefaultInstance() {
}
class CustomInfoType_SurrogateType::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_SurrogateType::CustomInfoType_SurrogateType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
}
CustomInfoType_SurrogateType::CustomInfoType_SurrogateType(const CustomInfoType_SurrogateType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
}

void CustomInfoType_SurrogateType::SharedCtor() {
}

CustomInfoType_SurrogateType::~CustomInfoType_SurrogateType() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  SharedDtor();
}

void CustomInfoType_SurrogateType::SharedDtor() {
}

void CustomInfoType_SurrogateType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_SurrogateType& CustomInfoType_SurrogateType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_SurrogateType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_SurrogateType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_SurrogateType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_SurrogateType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_SurrogateType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_SurrogateType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
}

::google::protobuf::uint8* CustomInfoType_SurrogateType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  return target;
}

size_t CustomInfoType_SurrogateType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_SurrogateType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_SurrogateType* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_SurrogateType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
    MergeFrom(*source);
  }
}

void CustomInfoType_SurrogateType::MergeFrom(const CustomInfoType_SurrogateType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CustomInfoType_SurrogateType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_SurrogateType::CopyFrom(const CustomInfoType_SurrogateType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.SurrogateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_SurrogateType::IsInitialized() const {
  return true;
}

void CustomInfoType_SurrogateType::Swap(CustomInfoType_SurrogateType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_SurrogateType::InternalSwap(CustomInfoType_SurrogateType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CustomInfoType_SurrogateType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_DetectionRule_Proximity::InitAsDefaultInstance() {
}
class CustomInfoType_DetectionRule_Proximity::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType_DetectionRule_Proximity::kWindowBeforeFieldNumber;
const int CustomInfoType_DetectionRule_Proximity::kWindowAfterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_DetectionRule_Proximity::CustomInfoType_DetectionRule_Proximity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
}
CustomInfoType_DetectionRule_Proximity::CustomInfoType_DetectionRule_Proximity(const CustomInfoType_DetectionRule_Proximity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&window_before_, &from.window_before_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_after_) -
    reinterpret_cast<char*>(&window_before_)) + sizeof(window_after_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
}

void CustomInfoType_DetectionRule_Proximity::SharedCtor() {
  ::memset(&window_before_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_after_) -
      reinterpret_cast<char*>(&window_before_)) + sizeof(window_after_));
}

CustomInfoType_DetectionRule_Proximity::~CustomInfoType_DetectionRule_Proximity() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  SharedDtor();
}

void CustomInfoType_DetectionRule_Proximity::SharedDtor() {
}

void CustomInfoType_DetectionRule_Proximity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_DetectionRule_Proximity& CustomInfoType_DetectionRule_Proximity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_DetectionRule_Proximity_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_DetectionRule_Proximity::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&window_before_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_after_) -
      reinterpret_cast<char*>(&window_before_)) + sizeof(window_after_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_DetectionRule_Proximity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_DetectionRule_Proximity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 window_before = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_window_before(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 window_after = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_window_after(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_DetectionRule_Proximity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 window_before = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_before_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 window_after = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_DetectionRule_Proximity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 window_before = 1;
  if (this->window_before() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_before(), output);
  }

  // int32 window_after = 2;
  if (this->window_after() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_after(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
}

::google::protobuf::uint8* CustomInfoType_DetectionRule_Proximity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 window_before = 1;
  if (this->window_before() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_before(), target);
  }

  // int32 window_after = 2;
  if (this->window_after() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->window_after(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  return target;
}

size_t CustomInfoType_DetectionRule_Proximity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 window_before = 1;
  if (this->window_before() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_before());
  }

  // int32 window_after = 2;
  if (this->window_after() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->window_after());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_DetectionRule_Proximity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_DetectionRule_Proximity* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_DetectionRule_Proximity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
    MergeFrom(*source);
  }
}

void CustomInfoType_DetectionRule_Proximity::MergeFrom(const CustomInfoType_DetectionRule_Proximity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.window_before() != 0) {
    set_window_before(from.window_before());
  }
  if (from.window_after() != 0) {
    set_window_after(from.window_after());
  }
}

void CustomInfoType_DetectionRule_Proximity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_DetectionRule_Proximity::CopyFrom(const CustomInfoType_DetectionRule_Proximity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_DetectionRule_Proximity::IsInitialized() const {
  return true;
}

void CustomInfoType_DetectionRule_Proximity::Swap(CustomInfoType_DetectionRule_Proximity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_DetectionRule_Proximity::InternalSwap(CustomInfoType_DetectionRule_Proximity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(window_before_, other->window_before_);
  swap(window_after_, other->window_after_);
}

::google::protobuf::Metadata CustomInfoType_DetectionRule_Proximity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_DetectionRule_LikelihoodAdjustment::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_LikelihoodAdjustment_default_instance_.fixed_likelihood_ = 0;
  ::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_LikelihoodAdjustment_default_instance_.relative_likelihood_ = 0;
}
class CustomInfoType_DetectionRule_LikelihoodAdjustment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType_DetectionRule_LikelihoodAdjustment::kFixedLikelihoodFieldNumber;
const int CustomInfoType_DetectionRule_LikelihoodAdjustment::kRelativeLikelihoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_DetectionRule_LikelihoodAdjustment::CustomInfoType_DetectionRule_LikelihoodAdjustment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
}
CustomInfoType_DetectionRule_LikelihoodAdjustment::CustomInfoType_DetectionRule_LikelihoodAdjustment(const CustomInfoType_DetectionRule_LikelihoodAdjustment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_adjustment();
  switch (from.adjustment_case()) {
    case kFixedLikelihood: {
      set_fixed_likelihood(from.fixed_likelihood());
      break;
    }
    case kRelativeLikelihood: {
      set_relative_likelihood(from.relative_likelihood());
      break;
    }
    case ADJUSTMENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::SharedCtor() {
  clear_has_adjustment();
}

CustomInfoType_DetectionRule_LikelihoodAdjustment::~CustomInfoType_DetectionRule_LikelihoodAdjustment() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  SharedDtor();
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::SharedDtor() {
  if (has_adjustment()) {
    clear_adjustment();
  }
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_DetectionRule_LikelihoodAdjustment& CustomInfoType_DetectionRule_LikelihoodAdjustment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_DetectionRule_LikelihoodAdjustment_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_DetectionRule_LikelihoodAdjustment::clear_adjustment() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  switch (adjustment_case()) {
    case kFixedLikelihood: {
      // No need to clear
      break;
    }
    case kRelativeLikelihood: {
      // No need to clear
      break;
    }
    case ADJUSTMENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADJUSTMENT_NOT_SET;
}


void CustomInfoType_DetectionRule_LikelihoodAdjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_adjustment();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_DetectionRule_LikelihoodAdjustment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_DetectionRule_LikelihoodAdjustment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Likelihood fixed_likelihood = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_fixed_likelihood(static_cast<::google::privacy::dlp::v2::Likelihood>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 relative_likelihood = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_relative_likelihood(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_DetectionRule_LikelihoodAdjustment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Likelihood fixed_likelihood = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fixed_likelihood(static_cast< ::google::privacy::dlp::v2::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 relative_likelihood = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          clear_adjustment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adjustment_.relative_likelihood_)));
          set_has_relative_likelihood();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_DetectionRule_LikelihoodAdjustment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Likelihood fixed_likelihood = 1;
  if (has_fixed_likelihood()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fixed_likelihood(), output);
  }

  // int32 relative_likelihood = 2;
  if (has_relative_likelihood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relative_likelihood(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
}

::google::protobuf::uint8* CustomInfoType_DetectionRule_LikelihoodAdjustment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Likelihood fixed_likelihood = 1;
  if (has_fixed_likelihood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fixed_likelihood(), target);
  }

  // int32 relative_likelihood = 2;
  if (has_relative_likelihood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relative_likelihood(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  return target;
}

size_t CustomInfoType_DetectionRule_LikelihoodAdjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (adjustment_case()) {
    // .google.privacy.dlp.v2.Likelihood fixed_likelihood = 1;
    case kFixedLikelihood: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fixed_likelihood());
      break;
    }
    // int32 relative_likelihood = 2;
    case kRelativeLikelihood: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relative_likelihood());
      break;
    }
    case ADJUSTMENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_DetectionRule_LikelihoodAdjustment* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_DetectionRule_LikelihoodAdjustment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
    MergeFrom(*source);
  }
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::MergeFrom(const CustomInfoType_DetectionRule_LikelihoodAdjustment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.adjustment_case()) {
    case kFixedLikelihood: {
      set_fixed_likelihood(from.fixed_likelihood());
      break;
    }
    case kRelativeLikelihood: {
      set_relative_likelihood(from.relative_likelihood());
      break;
    }
    case ADJUSTMENT_NOT_SET: {
      break;
    }
  }
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::CopyFrom(const CustomInfoType_DetectionRule_LikelihoodAdjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_DetectionRule_LikelihoodAdjustment::IsInitialized() const {
  return true;
}

void CustomInfoType_DetectionRule_LikelihoodAdjustment::Swap(CustomInfoType_DetectionRule_LikelihoodAdjustment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_DetectionRule_LikelihoodAdjustment::InternalSwap(CustomInfoType_DetectionRule_LikelihoodAdjustment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(adjustment_, other->adjustment_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CustomInfoType_DetectionRule_LikelihoodAdjustment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_DetectionRule_HotwordRule::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_HotwordRule_default_instance_._instance.get_mutable()->hotword_regex_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Regex*>(
      ::google::privacy::dlp::v2::CustomInfoType_Regex::internal_default_instance());
  ::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_HotwordRule_default_instance_._instance.get_mutable()->proximity_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity*>(
      ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity::internal_default_instance());
  ::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_HotwordRule_default_instance_._instance.get_mutable()->likelihood_adjustment_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment*>(
      ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment::internal_default_instance());
}
class CustomInfoType_DetectionRule_HotwordRule::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CustomInfoType_Regex& hotword_regex(const CustomInfoType_DetectionRule_HotwordRule* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity& proximity(const CustomInfoType_DetectionRule_HotwordRule* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment& likelihood_adjustment(const CustomInfoType_DetectionRule_HotwordRule* msg);
};

const ::google::privacy::dlp::v2::CustomInfoType_Regex&
CustomInfoType_DetectionRule_HotwordRule::HasBitSetters::hotword_regex(const CustomInfoType_DetectionRule_HotwordRule* msg) {
  return *msg->hotword_regex_;
}
const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity&
CustomInfoType_DetectionRule_HotwordRule::HasBitSetters::proximity(const CustomInfoType_DetectionRule_HotwordRule* msg) {
  return *msg->proximity_;
}
const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment&
CustomInfoType_DetectionRule_HotwordRule::HasBitSetters::likelihood_adjustment(const CustomInfoType_DetectionRule_HotwordRule* msg) {
  return *msg->likelihood_adjustment_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType_DetectionRule_HotwordRule::kHotwordRegexFieldNumber;
const int CustomInfoType_DetectionRule_HotwordRule::kProximityFieldNumber;
const int CustomInfoType_DetectionRule_HotwordRule::kLikelihoodAdjustmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_DetectionRule_HotwordRule::CustomInfoType_DetectionRule_HotwordRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
}
CustomInfoType_DetectionRule_HotwordRule::CustomInfoType_DetectionRule_HotwordRule(const CustomInfoType_DetectionRule_HotwordRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hotword_regex()) {
    hotword_regex_ = new ::google::privacy::dlp::v2::CustomInfoType_Regex(*from.hotword_regex_);
  } else {
    hotword_regex_ = nullptr;
  }
  if (from.has_proximity()) {
    proximity_ = new ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity(*from.proximity_);
  } else {
    proximity_ = nullptr;
  }
  if (from.has_likelihood_adjustment()) {
    likelihood_adjustment_ = new ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment(*from.likelihood_adjustment_);
  } else {
    likelihood_adjustment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
}

void CustomInfoType_DetectionRule_HotwordRule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&hotword_regex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&likelihood_adjustment_) -
      reinterpret_cast<char*>(&hotword_regex_)) + sizeof(likelihood_adjustment_));
}

CustomInfoType_DetectionRule_HotwordRule::~CustomInfoType_DetectionRule_HotwordRule() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  SharedDtor();
}

void CustomInfoType_DetectionRule_HotwordRule::SharedDtor() {
  if (this != internal_default_instance()) delete hotword_regex_;
  if (this != internal_default_instance()) delete proximity_;
  if (this != internal_default_instance()) delete likelihood_adjustment_;
}

void CustomInfoType_DetectionRule_HotwordRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_DetectionRule_HotwordRule& CustomInfoType_DetectionRule_HotwordRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_DetectionRule_HotwordRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_DetectionRule_HotwordRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hotword_regex_ != nullptr) {
    delete hotword_regex_;
  }
  hotword_regex_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && proximity_ != nullptr) {
    delete proximity_;
  }
  proximity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && likelihood_adjustment_ != nullptr) {
    delete likelihood_adjustment_;
  }
  likelihood_adjustment_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_DetectionRule_HotwordRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_DetectionRule_HotwordRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CustomInfoType.Regex hotword_regex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Regex::_InternalParse;
        object = msg->mutable_hotword_regex();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity proximity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity::_InternalParse;
        object = msg->mutable_proximity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment likelihood_adjustment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment::_InternalParse;
        object = msg->mutable_likelihood_adjustment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_DetectionRule_HotwordRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CustomInfoType.Regex hotword_regex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hotword_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity proximity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proximity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment likelihood_adjustment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_likelihood_adjustment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_DetectionRule_HotwordRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.Regex hotword_regex = 1;
  if (this->has_hotword_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hotword_regex(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity proximity = 2;
  if (this->has_proximity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::proximity(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment likelihood_adjustment = 3;
  if (this->has_likelihood_adjustment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::likelihood_adjustment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
}

::google::protobuf::uint8* CustomInfoType_DetectionRule_HotwordRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.Regex hotword_regex = 1;
  if (this->has_hotword_regex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hotword_regex(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity proximity = 2;
  if (this->has_proximity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::proximity(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment likelihood_adjustment = 3;
  if (this->has_likelihood_adjustment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::likelihood_adjustment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  return target;
}

size_t CustomInfoType_DetectionRule_HotwordRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.Regex hotword_regex = 1;
  if (this->has_hotword_regex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hotword_regex_);
  }

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity proximity = 2;
  if (this->has_proximity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proximity_);
  }

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment likelihood_adjustment = 3;
  if (this->has_likelihood_adjustment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *likelihood_adjustment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_DetectionRule_HotwordRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_DetectionRule_HotwordRule* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_DetectionRule_HotwordRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
    MergeFrom(*source);
  }
}

void CustomInfoType_DetectionRule_HotwordRule::MergeFrom(const CustomInfoType_DetectionRule_HotwordRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hotword_regex()) {
    mutable_hotword_regex()->::google::privacy::dlp::v2::CustomInfoType_Regex::MergeFrom(from.hotword_regex());
  }
  if (from.has_proximity()) {
    mutable_proximity()->::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity::MergeFrom(from.proximity());
  }
  if (from.has_likelihood_adjustment()) {
    mutable_likelihood_adjustment()->::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment::MergeFrom(from.likelihood_adjustment());
  }
}

void CustomInfoType_DetectionRule_HotwordRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_DetectionRule_HotwordRule::CopyFrom(const CustomInfoType_DetectionRule_HotwordRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_DetectionRule_HotwordRule::IsInitialized() const {
  return true;
}

void CustomInfoType_DetectionRule_HotwordRule::Swap(CustomInfoType_DetectionRule_HotwordRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_DetectionRule_HotwordRule::InternalSwap(CustomInfoType_DetectionRule_HotwordRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hotword_regex_, other->hotword_regex_);
  swap(proximity_, other->proximity_);
  swap(likelihood_adjustment_, other->likelihood_adjustment_);
}

::google::protobuf::Metadata CustomInfoType_DetectionRule_HotwordRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType_DetectionRule::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CustomInfoType_DetectionRule_default_instance_.hotword_rule_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule*>(
      ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::internal_default_instance());
}
class CustomInfoType_DetectionRule::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule& hotword_rule(const CustomInfoType_DetectionRule* msg);
};

const ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule&
CustomInfoType_DetectionRule::HasBitSetters::hotword_rule(const CustomInfoType_DetectionRule* msg) {
  return *msg->type_.hotword_rule_;
}
void CustomInfoType_DetectionRule::set_allocated_hotword_rule(::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule* hotword_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (hotword_rule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hotword_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hotword_rule, submessage_arena);
    }
    set_has_hotword_rule();
    type_.hotword_rule_ = hotword_rule;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CustomInfoType.DetectionRule.hotword_rule)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType_DetectionRule::kHotwordRuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType_DetectionRule::CustomInfoType_DetectionRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
}
CustomInfoType_DetectionRule::CustomInfoType_DetectionRule(const CustomInfoType_DetectionRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kHotwordRule: {
      mutable_hotword_rule()->::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::MergeFrom(from.hotword_rule());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
}

void CustomInfoType_DetectionRule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  clear_has_type();
}

CustomInfoType_DetectionRule::~CustomInfoType_DetectionRule() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  SharedDtor();
}

void CustomInfoType_DetectionRule::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void CustomInfoType_DetectionRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType_DetectionRule& CustomInfoType_DetectionRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_DetectionRule_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType_DetectionRule::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  switch (type_case()) {
    case kHotwordRule: {
      delete type_.hotword_rule_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void CustomInfoType_DetectionRule::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType_DetectionRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType_DetectionRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::_InternalParse;
        object = msg->mutable_hotword_rule();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType_DetectionRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hotword_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType_DetectionRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
  if (has_hotword_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hotword_rule(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
}

::google::protobuf::uint8* CustomInfoType_DetectionRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
  if (has_hotword_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hotword_rule(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  return target;
}

size_t CustomInfoType_DetectionRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
    case kHotwordRule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.hotword_rule_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType_DetectionRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType_DetectionRule* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType_DetectionRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
    MergeFrom(*source);
  }
}

void CustomInfoType_DetectionRule::MergeFrom(const CustomInfoType_DetectionRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kHotwordRule: {
      mutable_hotword_rule()->::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule::MergeFrom(from.hotword_rule());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void CustomInfoType_DetectionRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType_DetectionRule::CopyFrom(const CustomInfoType_DetectionRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType.DetectionRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType_DetectionRule::IsInitialized() const {
  return true;
}

void CustomInfoType_DetectionRule::Swap(CustomInfoType_DetectionRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType_DetectionRule::InternalSwap(CustomInfoType_DetectionRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CustomInfoType_DetectionRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomInfoType::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CustomInfoType_default_instance_._instance.get_mutable()->info_type_ = const_cast< ::google::privacy::dlp::v2::InfoType*>(
      ::google::privacy::dlp::v2::InfoType::internal_default_instance());
  ::google::privacy::dlp::v2::_CustomInfoType_default_instance_.dictionary_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Dictionary*>(
      ::google::privacy::dlp::v2::CustomInfoType_Dictionary::internal_default_instance());
  ::google::privacy::dlp::v2::_CustomInfoType_default_instance_.regex_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_Regex*>(
      ::google::privacy::dlp::v2::CustomInfoType_Regex::internal_default_instance());
  ::google::privacy::dlp::v2::_CustomInfoType_default_instance_.surrogate_type_ = const_cast< ::google::privacy::dlp::v2::CustomInfoType_SurrogateType*>(
      ::google::privacy::dlp::v2::CustomInfoType_SurrogateType::internal_default_instance());
  ::google::privacy::dlp::v2::_CustomInfoType_default_instance_.stored_type_ = const_cast< ::google::privacy::dlp::v2::StoredType*>(
      ::google::privacy::dlp::v2::StoredType::internal_default_instance());
}
class CustomInfoType::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::InfoType& info_type(const CustomInfoType* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_Dictionary& dictionary(const CustomInfoType* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_Regex& regex(const CustomInfoType* msg);
  static const ::google::privacy::dlp::v2::CustomInfoType_SurrogateType& surrogate_type(const CustomInfoType* msg);
  static const ::google::privacy::dlp::v2::StoredType& stored_type(const CustomInfoType* msg);
};

const ::google::privacy::dlp::v2::InfoType&
CustomInfoType::HasBitSetters::info_type(const CustomInfoType* msg) {
  return *msg->info_type_;
}
const ::google::privacy::dlp::v2::CustomInfoType_Dictionary&
CustomInfoType::HasBitSetters::dictionary(const CustomInfoType* msg) {
  return *msg->type_.dictionary_;
}
const ::google::privacy::dlp::v2::CustomInfoType_Regex&
CustomInfoType::HasBitSetters::regex(const CustomInfoType* msg) {
  return *msg->type_.regex_;
}
const ::google::privacy::dlp::v2::CustomInfoType_SurrogateType&
CustomInfoType::HasBitSetters::surrogate_type(const CustomInfoType* msg) {
  return *msg->type_.surrogate_type_;
}
const ::google::privacy::dlp::v2::StoredType&
CustomInfoType::HasBitSetters::stored_type(const CustomInfoType* msg) {
  return *msg->type_.stored_type_;
}
void CustomInfoType::set_allocated_dictionary(::google::privacy::dlp::v2::CustomInfoType_Dictionary* dictionary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (dictionary) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dictionary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dictionary, submessage_arena);
    }
    set_has_dictionary();
    type_.dictionary_ = dictionary;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CustomInfoType.dictionary)
}
void CustomInfoType::set_allocated_regex(::google::privacy::dlp::v2::CustomInfoType_Regex* regex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (regex) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, regex, submessage_arena);
    }
    set_has_regex();
    type_.regex_ = regex;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CustomInfoType.regex)
}
void CustomInfoType::set_allocated_surrogate_type(::google::privacy::dlp::v2::CustomInfoType_SurrogateType* surrogate_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (surrogate_type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surrogate_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, surrogate_type, submessage_arena);
    }
    set_has_surrogate_type();
    type_.surrogate_type_ = surrogate_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CustomInfoType.surrogate_type)
}
void CustomInfoType::set_allocated_stored_type(::google::privacy::dlp::v2::StoredType* stored_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (stored_type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stored_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stored_type, submessage_arena);
    }
    set_has_stored_type();
    type_.stored_type_ = stored_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.CustomInfoType.stored_type)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomInfoType::kInfoTypeFieldNumber;
const int CustomInfoType::kLikelihoodFieldNumber;
const int CustomInfoType::kDictionaryFieldNumber;
const int CustomInfoType::kRegexFieldNumber;
const int CustomInfoType::kSurrogateTypeFieldNumber;
const int CustomInfoType::kStoredTypeFieldNumber;
const int CustomInfoType::kDetectionRulesFieldNumber;
const int CustomInfoType::kExclusionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomInfoType::CustomInfoType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CustomInfoType)
}
CustomInfoType::CustomInfoType(const CustomInfoType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      detection_rules_(from.detection_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info_type()) {
    info_type_ = new ::google::privacy::dlp::v2::InfoType(*from.info_type_);
  } else {
    info_type_ = nullptr;
  }
  ::memcpy(&likelihood_, &from.likelihood_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclusion_type_) -
    reinterpret_cast<char*>(&likelihood_)) + sizeof(exclusion_type_));
  clear_has_type();
  switch (from.type_case()) {
    case kDictionary: {
      mutable_dictionary()->::google::privacy::dlp::v2::CustomInfoType_Dictionary::MergeFrom(from.dictionary());
      break;
    }
    case kRegex: {
      mutable_regex()->::google::privacy::dlp::v2::CustomInfoType_Regex::MergeFrom(from.regex());
      break;
    }
    case kSurrogateType: {
      mutable_surrogate_type()->::google::privacy::dlp::v2::CustomInfoType_SurrogateType::MergeFrom(from.surrogate_type());
      break;
    }
    case kStoredType: {
      mutable_stored_type()->::google::privacy::dlp::v2::StoredType::MergeFrom(from.stored_type());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CustomInfoType)
}

void CustomInfoType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&info_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclusion_type_) -
      reinterpret_cast<char*>(&info_type_)) + sizeof(exclusion_type_));
  clear_has_type();
}

CustomInfoType::~CustomInfoType() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CustomInfoType)
  SharedDtor();
}

void CustomInfoType::SharedDtor() {
  if (this != internal_default_instance()) delete info_type_;
  if (has_type()) {
    clear_type();
  }
}

void CustomInfoType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomInfoType& CustomInfoType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomInfoType_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CustomInfoType::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.CustomInfoType)
  switch (type_case()) {
    case kDictionary: {
      delete type_.dictionary_;
      break;
    }
    case kRegex: {
      delete type_.regex_;
      break;
    }
    case kSurrogateType: {
      delete type_.surrogate_type_;
      break;
    }
    case kStoredType: {
      delete type_.stored_type_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void CustomInfoType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CustomInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_rules_.Clear();
  if (GetArenaNoVirtual() == nullptr && info_type_ != nullptr) {
    delete info_type_;
  }
  info_type_ = nullptr;
  ::memset(&likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclusion_type_) -
      reinterpret_cast<char*>(&likelihood_)) + sizeof(exclusion_type_));
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomInfoType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomInfoType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::InfoType::_InternalParse;
        object = msg->mutable_info_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Dictionary::_InternalParse;
        object = msg->mutable_dictionary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_Regex::_InternalParse;
        object = msg->mutable_regex();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.SurrogateType surrogate_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_SurrogateType::_InternalParse;
        object = msg->mutable_surrogate_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.StoredType stored_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StoredType::_InternalParse;
        object = msg->mutable_stored_type();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.Likelihood likelihood = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_likelihood(static_cast<::google::privacy::dlp::v2::Likelihood>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.CustomInfoType.DetectionRule detection_rules = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::CustomInfoType_DetectionRule::_InternalParse;
          object = msg->add_detection_rules();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.CustomInfoType.ExclusionType exclusion_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_exclusion_type(static_cast<::google::privacy::dlp::v2::CustomInfoType_ExclusionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomInfoType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CustomInfoType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.InfoType info_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dictionary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_regex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.SurrogateType surrogate_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surrogate_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StoredType stored_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stored_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.Likelihood likelihood = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_likelihood(static_cast< ::google::privacy::dlp::v2::Likelihood >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.CustomInfoType.DetectionRule detection_rules = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detection_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CustomInfoType.ExclusionType exclusion_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exclusion_type(static_cast< ::google::privacy::dlp::v2::CustomInfoType_ExclusionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CustomInfoType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CustomInfoType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomInfoType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CustomInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info_type(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 2;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::dictionary(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 3;
  if (has_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::regex(this), output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.SurrogateType surrogate_type = 4;
  if (has_surrogate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::surrogate_type(this), output);
  }

  // .google.privacy.dlp.v2.StoredType stored_type = 5;
  if (has_stored_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::stored_type(this), output);
  }

  // .google.privacy.dlp.v2.Likelihood likelihood = 6;
  if (this->likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->likelihood(), output);
  }

  // repeated .google.privacy.dlp.v2.CustomInfoType.DetectionRule detection_rules = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_rules_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->detection_rules(static_cast<int>(i)),
      output);
  }

  // .google.privacy.dlp.v2.CustomInfoType.ExclusionType exclusion_type = 8;
  if (this->exclusion_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->exclusion_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CustomInfoType)
}

::google::protobuf::uint8* CustomInfoType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CustomInfoType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info_type(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 2;
  if (has_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::dictionary(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 3;
  if (has_regex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::regex(this), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.SurrogateType surrogate_type = 4;
  if (has_surrogate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::surrogate_type(this), target);
  }

  // .google.privacy.dlp.v2.StoredType stored_type = 5;
  if (has_stored_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::stored_type(this), target);
  }

  // .google.privacy.dlp.v2.Likelihood likelihood = 6;
  if (this->likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->likelihood(), target);
  }

  // repeated .google.privacy.dlp.v2.CustomInfoType.DetectionRule detection_rules = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_rules_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->detection_rules(static_cast<int>(i)), target);
  }

  // .google.privacy.dlp.v2.CustomInfoType.ExclusionType exclusion_type = 8;
  if (this->exclusion_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->exclusion_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CustomInfoType)
  return target;
}

size_t CustomInfoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CustomInfoType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.CustomInfoType.DetectionRule detection_rules = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detection_rules(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.InfoType info_type = 1;
  if (this->has_info_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_type_);
  }

  // .google.privacy.dlp.v2.Likelihood likelihood = 6;
  if (this->likelihood() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->likelihood());
  }

  // .google.privacy.dlp.v2.CustomInfoType.ExclusionType exclusion_type = 8;
  if (this->exclusion_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exclusion_type());
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 2;
    case kDictionary: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.dictionary_);
      break;
    }
    // .google.privacy.dlp.v2.CustomInfoType.Regex regex = 3;
    case kRegex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.regex_);
      break;
    }
    // .google.privacy.dlp.v2.CustomInfoType.SurrogateType surrogate_type = 4;
    case kSurrogateType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.surrogate_type_);
      break;
    }
    // .google.privacy.dlp.v2.StoredType stored_type = 5;
    case kStoredType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.stored_type_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomInfoType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CustomInfoType)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomInfoType* source =
      ::google::protobuf::DynamicCastToGenerated<CustomInfoType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CustomInfoType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CustomInfoType)
    MergeFrom(*source);
  }
}

void CustomInfoType::MergeFrom(const CustomInfoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CustomInfoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_rules_.MergeFrom(from.detection_rules_);
  if (from.has_info_type()) {
    mutable_info_type()->::google::privacy::dlp::v2::InfoType::MergeFrom(from.info_type());
  }
  if (from.likelihood() != 0) {
    set_likelihood(from.likelihood());
  }
  if (from.exclusion_type() != 0) {
    set_exclusion_type(from.exclusion_type());
  }
  switch (from.type_case()) {
    case kDictionary: {
      mutable_dictionary()->::google::privacy::dlp::v2::CustomInfoType_Dictionary::MergeFrom(from.dictionary());
      break;
    }
    case kRegex: {
      mutable_regex()->::google::privacy::dlp::v2::CustomInfoType_Regex::MergeFrom(from.regex());
      break;
    }
    case kSurrogateType: {
      mutable_surrogate_type()->::google::privacy::dlp::v2::CustomInfoType_SurrogateType::MergeFrom(from.surrogate_type());
      break;
    }
    case kStoredType: {
      mutable_stored_type()->::google::privacy::dlp::v2::StoredType::MergeFrom(from.stored_type());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void CustomInfoType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CustomInfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomInfoType::CopyFrom(const CustomInfoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CustomInfoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomInfoType::IsInitialized() const {
  return true;
}

void CustomInfoType::Swap(CustomInfoType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomInfoType::InternalSwap(CustomInfoType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detection_rules_)->InternalSwap(CastToBase(&other->detection_rules_));
  swap(info_type_, other->info_type_);
  swap(likelihood_, other->likelihood_);
  swap(exclusion_type_, other->exclusion_type_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata CustomInfoType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FieldId::InitAsDefaultInstance() {
}
class FieldId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldId::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldId::FieldId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.FieldId)
}
FieldId::FieldId(const FieldId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.FieldId)
}

void FieldId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FieldId::~FieldId() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.FieldId)
  SharedDtor();
}

void FieldId::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FieldId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldId& FieldId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FieldId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void FieldId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.FieldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FieldId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.FieldId.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.FieldId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.FieldId.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.FieldId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.FieldId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.FieldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.FieldId.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.FieldId)
}

::google::protobuf::uint8* FieldId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.FieldId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.FieldId.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.FieldId)
  return target;
}

size_t FieldId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.FieldId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.FieldId)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldId* source =
      ::google::protobuf::DynamicCastToGenerated<FieldId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.FieldId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.FieldId)
    MergeFrom(*source);
  }
}

void FieldId::MergeFrom(const FieldId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.FieldId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FieldId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.FieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldId::CopyFrom(const FieldId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.FieldId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldId::IsInitialized() const {
  return true;
}

void FieldId::Swap(FieldId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldId::InternalSwap(FieldId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FieldId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PartitionId::InitAsDefaultInstance() {
}
class PartitionId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionId::kProjectIdFieldNumber;
const int PartitionId::kNamespaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionId::PartitionId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.PartitionId)
}
PartitionId::PartitionId(const PartitionId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  namespace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_id().size() > 0) {
    namespace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.PartitionId)
}

void PartitionId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PartitionId::~PartitionId() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.PartitionId)
  SharedDtor();
}

void PartitionId::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartitionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartitionId& PartitionId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartitionId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void PartitionId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.PartitionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartitionId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartitionId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.PartitionId.project_id");
        object = msg->mutable_project_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string namespace_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.PartitionId.namespace_id");
        object = msg->mutable_namespace_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartitionId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.PartitionId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.PartitionId.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_id().data(), static_cast<int>(this->namespace_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.PartitionId.namespace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.PartitionId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.PartitionId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartitionId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.PartitionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PartitionId.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project_id(), output);
  }

  // string namespace_id = 4;
  if (this->namespace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_id().data(), static_cast<int>(this->namespace_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PartitionId.namespace_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.PartitionId)
}

::google::protobuf::uint8* PartitionId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.PartitionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PartitionId.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project_id(), target);
  }

  // string namespace_id = 4;
  if (this->namespace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_id().data(), static_cast<int>(this->namespace_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.PartitionId.namespace_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->namespace_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.PartitionId)
  return target;
}

size_t PartitionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.PartitionId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string namespace_id = 4;
  if (this->namespace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.PartitionId)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionId* source =
      ::google::protobuf::DynamicCastToGenerated<PartitionId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.PartitionId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.PartitionId)
    MergeFrom(*source);
  }
}

void PartitionId::MergeFrom(const PartitionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.PartitionId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.namespace_id().size() > 0) {

    namespace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace_id_);
  }
}

void PartitionId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.PartitionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionId::CopyFrom(const PartitionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.PartitionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionId::IsInitialized() const {
  return true;
}

void PartitionId::Swap(PartitionId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionId::InternalSwap(PartitionId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_id_.Swap(&other->project_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namespace_id_.Swap(&other->namespace_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PartitionId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void KindExpression::InitAsDefaultInstance() {
}
class KindExpression::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KindExpression::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KindExpression::KindExpression()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.KindExpression)
}
KindExpression::KindExpression(const KindExpression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.KindExpression)
}

void KindExpression::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KindExpression::~KindExpression() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.KindExpression)
  SharedDtor();
}

void KindExpression::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KindExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KindExpression& KindExpression::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KindExpression_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void KindExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.KindExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KindExpression::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KindExpression*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.KindExpression.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KindExpression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.KindExpression)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.KindExpression.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.KindExpression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.KindExpression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KindExpression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.KindExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.KindExpression.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.KindExpression)
}

::google::protobuf::uint8* KindExpression::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.KindExpression)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.KindExpression.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.KindExpression)
  return target;
}

size_t KindExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.KindExpression)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KindExpression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.KindExpression)
  GOOGLE_DCHECK_NE(&from, this);
  const KindExpression* source =
      ::google::protobuf::DynamicCastToGenerated<KindExpression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.KindExpression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.KindExpression)
    MergeFrom(*source);
  }
}

void KindExpression::MergeFrom(const KindExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.KindExpression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void KindExpression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.KindExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KindExpression::CopyFrom(const KindExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.KindExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KindExpression::IsInitialized() const {
  return true;
}

void KindExpression::Swap(KindExpression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KindExpression::InternalSwap(KindExpression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata KindExpression::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DatastoreOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DatastoreOptions_default_instance_._instance.get_mutable()->partition_id_ = const_cast< ::google::privacy::dlp::v2::PartitionId*>(
      ::google::privacy::dlp::v2::PartitionId::internal_default_instance());
  ::google::privacy::dlp::v2::_DatastoreOptions_default_instance_._instance.get_mutable()->kind_ = const_cast< ::google::privacy::dlp::v2::KindExpression*>(
      ::google::privacy::dlp::v2::KindExpression::internal_default_instance());
}
class DatastoreOptions::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::PartitionId& partition_id(const DatastoreOptions* msg);
  static const ::google::privacy::dlp::v2::KindExpression& kind(const DatastoreOptions* msg);
};

const ::google::privacy::dlp::v2::PartitionId&
DatastoreOptions::HasBitSetters::partition_id(const DatastoreOptions* msg) {
  return *msg->partition_id_;
}
const ::google::privacy::dlp::v2::KindExpression&
DatastoreOptions::HasBitSetters::kind(const DatastoreOptions* msg) {
  return *msg->kind_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatastoreOptions::kPartitionIdFieldNumber;
const int DatastoreOptions::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatastoreOptions::DatastoreOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DatastoreOptions)
}
DatastoreOptions::DatastoreOptions(const DatastoreOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_partition_id()) {
    partition_id_ = new ::google::privacy::dlp::v2::PartitionId(*from.partition_id_);
  } else {
    partition_id_ = nullptr;
  }
  if (from.has_kind()) {
    kind_ = new ::google::privacy::dlp::v2::KindExpression(*from.kind_);
  } else {
    kind_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DatastoreOptions)
}

void DatastoreOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&partition_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&partition_id_)) + sizeof(kind_));
}

DatastoreOptions::~DatastoreOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DatastoreOptions)
  SharedDtor();
}

void DatastoreOptions::SharedDtor() {
  if (this != internal_default_instance()) delete partition_id_;
  if (this != internal_default_instance()) delete kind_;
}

void DatastoreOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatastoreOptions& DatastoreOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DatastoreOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void DatastoreOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DatastoreOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && partition_id_ != nullptr) {
    delete partition_id_;
  }
  partition_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kind_ != nullptr) {
    delete kind_;
  }
  kind_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatastoreOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DatastoreOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.PartitionId partition_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PartitionId::_InternalParse;
        object = msg->mutable_partition_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.KindExpression kind = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::KindExpression::_InternalParse;
        object = msg->mutable_kind();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatastoreOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DatastoreOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.PartitionId partition_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.KindExpression kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DatastoreOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DatastoreOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatastoreOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DatastoreOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::partition_id(this), output);
  }

  // .google.privacy.dlp.v2.KindExpression kind = 2;
  if (this->has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::kind(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DatastoreOptions)
}

::google::protobuf::uint8* DatastoreOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DatastoreOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::partition_id(this), target);
  }

  // .google.privacy.dlp.v2.KindExpression kind = 2;
  if (this->has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::kind(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DatastoreOptions)
  return target;
}

size_t DatastoreOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DatastoreOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *partition_id_);
  }

  // .google.privacy.dlp.v2.KindExpression kind = 2;
  if (this->has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kind_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatastoreOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DatastoreOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const DatastoreOptions* source =
      ::google::protobuf::DynamicCastToGenerated<DatastoreOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DatastoreOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DatastoreOptions)
    MergeFrom(*source);
  }
}

void DatastoreOptions::MergeFrom(const DatastoreOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DatastoreOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_partition_id()) {
    mutable_partition_id()->::google::privacy::dlp::v2::PartitionId::MergeFrom(from.partition_id());
  }
  if (from.has_kind()) {
    mutable_kind()->::google::privacy::dlp::v2::KindExpression::MergeFrom(from.kind());
  }
}

void DatastoreOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DatastoreOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatastoreOptions::CopyFrom(const DatastoreOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DatastoreOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatastoreOptions::IsInitialized() const {
  return true;
}

void DatastoreOptions::Swap(DatastoreOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatastoreOptions::InternalSwap(DatastoreOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(partition_id_, other->partition_id_);
  swap(kind_, other->kind_);
}

::google::protobuf::Metadata DatastoreOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CloudStorageRegexFileSet::InitAsDefaultInstance() {
}
class CloudStorageRegexFileSet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStorageRegexFileSet::kBucketNameFieldNumber;
const int CloudStorageRegexFileSet::kIncludeRegexFieldNumber;
const int CloudStorageRegexFileSet::kExcludeRegexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStorageRegexFileSet::CloudStorageRegexFileSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CloudStorageRegexFileSet)
}
CloudStorageRegexFileSet::CloudStorageRegexFileSet(const CloudStorageRegexFileSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      include_regex_(from.include_regex_),
      exclude_regex_(from.exclude_regex_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucket_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bucket_name().size() > 0) {
    bucket_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CloudStorageRegexFileSet)
}

void CloudStorageRegexFileSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  bucket_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloudStorageRegexFileSet::~CloudStorageRegexFileSet() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  SharedDtor();
}

void CloudStorageRegexFileSet::SharedDtor() {
  bucket_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudStorageRegexFileSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudStorageRegexFileSet& CloudStorageRegexFileSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudStorageRegexFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CloudStorageRegexFileSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_regex_.Clear();
  exclude_regex_.Clear();
  bucket_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudStorageRegexFileSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudStorageRegexFileSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string bucket_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CloudStorageRegexFileSet.bucket_name");
        object = msg->mutable_bucket_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string include_regex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CloudStorageRegexFileSet.include_regex");
          object = msg->add_include_regex();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated string exclude_regex = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CloudStorageRegexFileSet.exclude_regex");
          object = msg->add_exclude_regex();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudStorageRegexFileSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bucket_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bucket_name().data(), static_cast<int>(this->bucket_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CloudStorageRegexFileSet.bucket_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string include_regex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_include_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->include_regex(this->include_regex_size() - 1).data(),
            static_cast<int>(this->include_regex(this->include_regex_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CloudStorageRegexFileSet.include_regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_regex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exclude_regex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exclude_regex(this->exclude_regex_size() - 1).data(),
            static_cast<int>(this->exclude_regex(this->exclude_regex_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CloudStorageRegexFileSet.exclude_regex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudStorageRegexFileSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket_name = 1;
  if (this->bucket_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket_name().data(), static_cast<int>(this->bucket_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageRegexFileSet.bucket_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bucket_name(), output);
  }

  // repeated string include_regex = 2;
  for (int i = 0, n = this->include_regex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->include_regex(i).data(), static_cast<int>(this->include_regex(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageRegexFileSet.include_regex");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->include_regex(i), output);
  }

  // repeated string exclude_regex = 3;
  for (int i = 0, n = this->exclude_regex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_regex(i).data(), static_cast<int>(this->exclude_regex(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageRegexFileSet.exclude_regex");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exclude_regex(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CloudStorageRegexFileSet)
}

::google::protobuf::uint8* CloudStorageRegexFileSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bucket_name = 1;
  if (this->bucket_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bucket_name().data(), static_cast<int>(this->bucket_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageRegexFileSet.bucket_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bucket_name(), target);
  }

  // repeated string include_regex = 2;
  for (int i = 0, n = this->include_regex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->include_regex(i).data(), static_cast<int>(this->include_regex(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageRegexFileSet.include_regex");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->include_regex(i), target);
  }

  // repeated string exclude_regex = 3;
  for (int i = 0, n = this->exclude_regex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_regex(i).data(), static_cast<int>(this->exclude_regex(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageRegexFileSet.exclude_regex");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->exclude_regex(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  return target;
}

size_t CloudStorageRegexFileSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string include_regex = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->include_regex_size());
  for (int i = 0, n = this->include_regex_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->include_regex(i));
  }

  // repeated string exclude_regex = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->exclude_regex_size());
  for (int i = 0, n = this->exclude_regex_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exclude_regex(i));
  }

  // string bucket_name = 1;
  if (this->bucket_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bucket_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudStorageRegexFileSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStorageRegexFileSet* source =
      ::google::protobuf::DynamicCastToGenerated<CloudStorageRegexFileSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CloudStorageRegexFileSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CloudStorageRegexFileSet)
    MergeFrom(*source);
  }
}

void CloudStorageRegexFileSet::MergeFrom(const CloudStorageRegexFileSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  include_regex_.MergeFrom(from.include_regex_);
  exclude_regex_.MergeFrom(from.exclude_regex_);
  if (from.bucket_name().size() > 0) {

    bucket_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bucket_name_);
  }
}

void CloudStorageRegexFileSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStorageRegexFileSet::CopyFrom(const CloudStorageRegexFileSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CloudStorageRegexFileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStorageRegexFileSet::IsInitialized() const {
  return true;
}

void CloudStorageRegexFileSet::Swap(CloudStorageRegexFileSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStorageRegexFileSet::InternalSwap(CloudStorageRegexFileSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  include_regex_.InternalSwap(CastToBase(&other->include_regex_));
  exclude_regex_.InternalSwap(CastToBase(&other->exclude_regex_));
  bucket_name_.Swap(&other->bucket_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CloudStorageRegexFileSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CloudStorageOptions_FileSet::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CloudStorageOptions_FileSet_default_instance_._instance.get_mutable()->regex_file_set_ = const_cast< ::google::privacy::dlp::v2::CloudStorageRegexFileSet*>(
      ::google::privacy::dlp::v2::CloudStorageRegexFileSet::internal_default_instance());
}
class CloudStorageOptions_FileSet::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CloudStorageRegexFileSet& regex_file_set(const CloudStorageOptions_FileSet* msg);
};

const ::google::privacy::dlp::v2::CloudStorageRegexFileSet&
CloudStorageOptions_FileSet::HasBitSetters::regex_file_set(const CloudStorageOptions_FileSet* msg) {
  return *msg->regex_file_set_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStorageOptions_FileSet::kUrlFieldNumber;
const int CloudStorageOptions_FileSet::kRegexFileSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStorageOptions_FileSet::CloudStorageOptions_FileSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
}
CloudStorageOptions_FileSet::CloudStorageOptions_FileSet(const CloudStorageOptions_FileSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_regex_file_set()) {
    regex_file_set_ = new ::google::privacy::dlp::v2::CloudStorageRegexFileSet(*from.regex_file_set_);
  } else {
    regex_file_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
}

void CloudStorageOptions_FileSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regex_file_set_ = nullptr;
}

CloudStorageOptions_FileSet::~CloudStorageOptions_FileSet() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  SharedDtor();
}

void CloudStorageOptions_FileSet::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete regex_file_set_;
}

void CloudStorageOptions_FileSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudStorageOptions_FileSet& CloudStorageOptions_FileSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudStorageOptions_FileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CloudStorageOptions_FileSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && regex_file_set_ != nullptr) {
    delete regex_file_set_;
  }
  regex_file_set_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudStorageOptions_FileSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudStorageOptions_FileSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CloudStorageOptions.FileSet.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.privacy.dlp.v2.CloudStorageRegexFileSet regex_file_set = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CloudStorageRegexFileSet::_InternalParse;
        object = msg->mutable_regex_file_set();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudStorageOptions_FileSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CloudStorageOptions.FileSet.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CloudStorageRegexFileSet regex_file_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_regex_file_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudStorageOptions_FileSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageOptions.FileSet.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // .google.privacy.dlp.v2.CloudStorageRegexFileSet regex_file_set = 2;
  if (this->has_regex_file_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::regex_file_set(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
}

::google::protobuf::uint8* CloudStorageOptions_FileSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageOptions.FileSet.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // .google.privacy.dlp.v2.CloudStorageRegexFileSet regex_file_set = 2;
  if (this->has_regex_file_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::regex_file_set(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  return target;
}

size_t CloudStorageOptions_FileSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // .google.privacy.dlp.v2.CloudStorageRegexFileSet regex_file_set = 2;
  if (this->has_regex_file_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *regex_file_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudStorageOptions_FileSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStorageOptions_FileSet* source =
      ::google::protobuf::DynamicCastToGenerated<CloudStorageOptions_FileSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
    MergeFrom(*source);
  }
}

void CloudStorageOptions_FileSet::MergeFrom(const CloudStorageOptions_FileSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_regex_file_set()) {
    mutable_regex_file_set()->::google::privacy::dlp::v2::CloudStorageRegexFileSet::MergeFrom(from.regex_file_set());
  }
}

void CloudStorageOptions_FileSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStorageOptions_FileSet::CopyFrom(const CloudStorageOptions_FileSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CloudStorageOptions.FileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStorageOptions_FileSet::IsInitialized() const {
  return true;
}

void CloudStorageOptions_FileSet::Swap(CloudStorageOptions_FileSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStorageOptions_FileSet::InternalSwap(CloudStorageOptions_FileSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(regex_file_set_, other->regex_file_set_);
}

::google::protobuf::Metadata CloudStorageOptions_FileSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CloudStorageOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_CloudStorageOptions_default_instance_._instance.get_mutable()->file_set_ = const_cast< ::google::privacy::dlp::v2::CloudStorageOptions_FileSet*>(
      ::google::privacy::dlp::v2::CloudStorageOptions_FileSet::internal_default_instance());
}
class CloudStorageOptions::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::CloudStorageOptions_FileSet& file_set(const CloudStorageOptions* msg);
};

const ::google::privacy::dlp::v2::CloudStorageOptions_FileSet&
CloudStorageOptions::HasBitSetters::file_set(const CloudStorageOptions* msg) {
  return *msg->file_set_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStorageOptions::kFileSetFieldNumber;
const int CloudStorageOptions::kBytesLimitPerFileFieldNumber;
const int CloudStorageOptions::kBytesLimitPerFilePercentFieldNumber;
const int CloudStorageOptions::kFileTypesFieldNumber;
const int CloudStorageOptions::kSampleMethodFieldNumber;
const int CloudStorageOptions::kFilesLimitPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStorageOptions::CloudStorageOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CloudStorageOptions)
}
CloudStorageOptions::CloudStorageOptions(const CloudStorageOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      file_types_(from.file_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_file_set()) {
    file_set_ = new ::google::privacy::dlp::v2::CloudStorageOptions_FileSet(*from.file_set_);
  } else {
    file_set_ = nullptr;
  }
  ::memcpy(&bytes_limit_per_file_, &from.bytes_limit_per_file_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_limit_per_file_percent_) -
    reinterpret_cast<char*>(&bytes_limit_per_file_)) + sizeof(bytes_limit_per_file_percent_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CloudStorageOptions)
}

void CloudStorageOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&file_set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_limit_per_file_percent_) -
      reinterpret_cast<char*>(&file_set_)) + sizeof(bytes_limit_per_file_percent_));
}

CloudStorageOptions::~CloudStorageOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CloudStorageOptions)
  SharedDtor();
}

void CloudStorageOptions::SharedDtor() {
  if (this != internal_default_instance()) delete file_set_;
}

void CloudStorageOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudStorageOptions& CloudStorageOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudStorageOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CloudStorageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CloudStorageOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_types_.Clear();
  if (GetArenaNoVirtual() == nullptr && file_set_ != nullptr) {
    delete file_set_;
  }
  file_set_ = nullptr;
  ::memset(&bytes_limit_per_file_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_limit_per_file_percent_) -
      reinterpret_cast<char*>(&bytes_limit_per_file_)) + sizeof(bytes_limit_per_file_percent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudStorageOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudStorageOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.CloudStorageOptions.FileSet file_set = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CloudStorageOptions_FileSet::_InternalParse;
        object = msg->mutable_file_set();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 bytes_limit_per_file = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bytes_limit_per_file(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.FileType file_types = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_file_types();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_file_types(static_cast<::google::privacy::dlp::v2::FileType>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.CloudStorageOptions.SampleMethod sample_method = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_sample_method(static_cast<::google::privacy::dlp::v2::CloudStorageOptions_SampleMethod>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 files_limit_percent = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_files_limit_percent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bytes_limit_per_file_percent = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_bytes_limit_per_file_percent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudStorageOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CloudStorageOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.CloudStorageOptions.FileSet file_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bytes_limit_per_file = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_limit_per_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.FileType file_types = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_file_types(static_cast< ::google::privacy::dlp::v2::FileType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_file_types(static_cast< ::google::privacy::dlp::v2::FileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CloudStorageOptions.SampleMethod sample_method = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sample_method(static_cast< ::google::privacy::dlp::v2::CloudStorageOptions_SampleMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 files_limit_percent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &files_limit_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bytes_limit_per_file_percent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_limit_per_file_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CloudStorageOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CloudStorageOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudStorageOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CloudStorageOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CloudStorageOptions.FileSet file_set = 1;
  if (this->has_file_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::file_set(this), output);
  }

  // int64 bytes_limit_per_file = 4;
  if (this->bytes_limit_per_file() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bytes_limit_per_file(), output);
  }

  // repeated .google.privacy.dlp.v2.FileType file_types = 5;
  if (this->file_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_file_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->file_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->file_types(i), output);
  }

  // .google.privacy.dlp.v2.CloudStorageOptions.SampleMethod sample_method = 6;
  if (this->sample_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sample_method(), output);
  }

  // int32 files_limit_percent = 7;
  if (this->files_limit_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->files_limit_percent(), output);
  }

  // int32 bytes_limit_per_file_percent = 8;
  if (this->bytes_limit_per_file_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bytes_limit_per_file_percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CloudStorageOptions)
}

::google::protobuf::uint8* CloudStorageOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CloudStorageOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.CloudStorageOptions.FileSet file_set = 1;
  if (this->has_file_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::file_set(this), target);
  }

  // int64 bytes_limit_per_file = 4;
  if (this->bytes_limit_per_file() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bytes_limit_per_file(), target);
  }

  // repeated .google.privacy.dlp.v2.FileType file_types = 5;
  if (this->file_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _file_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->file_types_, target);
  }

  // .google.privacy.dlp.v2.CloudStorageOptions.SampleMethod sample_method = 6;
  if (this->sample_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sample_method(), target);
  }

  // int32 files_limit_percent = 7;
  if (this->files_limit_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->files_limit_percent(), target);
  }

  // int32 bytes_limit_per_file_percent = 8;
  if (this->bytes_limit_per_file_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bytes_limit_per_file_percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CloudStorageOptions)
  return target;
}

size_t CloudStorageOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CloudStorageOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FileType file_types = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->file_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->file_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _file_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .google.privacy.dlp.v2.CloudStorageOptions.FileSet file_set = 1;
  if (this->has_file_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_set_);
  }

  // int64 bytes_limit_per_file = 4;
  if (this->bytes_limit_per_file() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes_limit_per_file());
  }

  // .google.privacy.dlp.v2.CloudStorageOptions.SampleMethod sample_method = 6;
  if (this->sample_method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sample_method());
  }

  // int32 files_limit_percent = 7;
  if (this->files_limit_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->files_limit_percent());
  }

  // int32 bytes_limit_per_file_percent = 8;
  if (this->bytes_limit_per_file_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bytes_limit_per_file_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudStorageOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CloudStorageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStorageOptions* source =
      ::google::protobuf::DynamicCastToGenerated<CloudStorageOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CloudStorageOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CloudStorageOptions)
    MergeFrom(*source);
  }
}

void CloudStorageOptions::MergeFrom(const CloudStorageOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CloudStorageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_types_.MergeFrom(from.file_types_);
  if (from.has_file_set()) {
    mutable_file_set()->::google::privacy::dlp::v2::CloudStorageOptions_FileSet::MergeFrom(from.file_set());
  }
  if (from.bytes_limit_per_file() != 0) {
    set_bytes_limit_per_file(from.bytes_limit_per_file());
  }
  if (from.sample_method() != 0) {
    set_sample_method(from.sample_method());
  }
  if (from.files_limit_percent() != 0) {
    set_files_limit_percent(from.files_limit_percent());
  }
  if (from.bytes_limit_per_file_percent() != 0) {
    set_bytes_limit_per_file_percent(from.bytes_limit_per_file_percent());
  }
}

void CloudStorageOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CloudStorageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStorageOptions::CopyFrom(const CloudStorageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CloudStorageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStorageOptions::IsInitialized() const {
  return true;
}

void CloudStorageOptions::Swap(CloudStorageOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStorageOptions::InternalSwap(CloudStorageOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_types_.InternalSwap(&other->file_types_);
  swap(file_set_, other->file_set_);
  swap(bytes_limit_per_file_, other->bytes_limit_per_file_);
  swap(sample_method_, other->sample_method_);
  swap(files_limit_percent_, other->files_limit_percent_);
  swap(bytes_limit_per_file_percent_, other->bytes_limit_per_file_percent_);
}

::google::protobuf::Metadata CloudStorageOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CloudStorageFileSet::InitAsDefaultInstance() {
}
class CloudStorageFileSet::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStorageFileSet::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStorageFileSet::CloudStorageFileSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CloudStorageFileSet)
}
CloudStorageFileSet::CloudStorageFileSet(const CloudStorageFileSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CloudStorageFileSet)
}

void CloudStorageFileSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloudStorageFileSet::~CloudStorageFileSet() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CloudStorageFileSet)
  SharedDtor();
}

void CloudStorageFileSet::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudStorageFileSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudStorageFileSet& CloudStorageFileSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudStorageFileSet_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CloudStorageFileSet::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CloudStorageFileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudStorageFileSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudStorageFileSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CloudStorageFileSet.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudStorageFileSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CloudStorageFileSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CloudStorageFileSet.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CloudStorageFileSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CloudStorageFileSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudStorageFileSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CloudStorageFileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageFileSet.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CloudStorageFileSet)
}

::google::protobuf::uint8* CloudStorageFileSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CloudStorageFileSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStorageFileSet.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CloudStorageFileSet)
  return target;
}

size_t CloudStorageFileSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CloudStorageFileSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudStorageFileSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CloudStorageFileSet)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStorageFileSet* source =
      ::google::protobuf::DynamicCastToGenerated<CloudStorageFileSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CloudStorageFileSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CloudStorageFileSet)
    MergeFrom(*source);
  }
}

void CloudStorageFileSet::MergeFrom(const CloudStorageFileSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CloudStorageFileSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void CloudStorageFileSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CloudStorageFileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStorageFileSet::CopyFrom(const CloudStorageFileSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CloudStorageFileSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStorageFileSet::IsInitialized() const {
  return true;
}

void CloudStorageFileSet::Swap(CloudStorageFileSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStorageFileSet::InternalSwap(CloudStorageFileSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CloudStorageFileSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CloudStoragePath::InitAsDefaultInstance() {
}
class CloudStoragePath::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloudStoragePath::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloudStoragePath::CloudStoragePath()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.CloudStoragePath)
}
CloudStoragePath::CloudStoragePath(const CloudStoragePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.CloudStoragePath)
}

void CloudStoragePath::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloudStoragePath::~CloudStoragePath() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.CloudStoragePath)
  SharedDtor();
}

void CloudStoragePath::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloudStoragePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudStoragePath& CloudStoragePath::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CloudStoragePath_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void CloudStoragePath::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.CloudStoragePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudStoragePath::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CloudStoragePath*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.CloudStoragePath.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudStoragePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.CloudStoragePath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.CloudStoragePath.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.CloudStoragePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.CloudStoragePath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudStoragePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.CloudStoragePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStoragePath.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.CloudStoragePath)
}

::google::protobuf::uint8* CloudStoragePath::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.CloudStoragePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.CloudStoragePath.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.CloudStoragePath)
  return target;
}

size_t CloudStoragePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.CloudStoragePath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudStoragePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.CloudStoragePath)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudStoragePath* source =
      ::google::protobuf::DynamicCastToGenerated<CloudStoragePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.CloudStoragePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.CloudStoragePath)
    MergeFrom(*source);
  }
}

void CloudStoragePath::MergeFrom(const CloudStoragePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.CloudStoragePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void CloudStoragePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.CloudStoragePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudStoragePath::CopyFrom(const CloudStoragePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.CloudStoragePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudStoragePath::IsInitialized() const {
  return true;
}

void CloudStoragePath::Swap(CloudStoragePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloudStoragePath::InternalSwap(CloudStoragePath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CloudStoragePath::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BigQueryOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_BigQueryOptions_default_instance_._instance.get_mutable()->table_reference_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
}
class BigQueryOptions::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::BigQueryTable& table_reference(const BigQueryOptions* msg);
};

const ::google::privacy::dlp::v2::BigQueryTable&
BigQueryOptions::HasBitSetters::table_reference(const BigQueryOptions* msg) {
  return *msg->table_reference_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryOptions::kTableReferenceFieldNumber;
const int BigQueryOptions::kIdentifyingFieldsFieldNumber;
const int BigQueryOptions::kRowsLimitFieldNumber;
const int BigQueryOptions::kRowsLimitPercentFieldNumber;
const int BigQueryOptions::kSampleMethodFieldNumber;
const int BigQueryOptions::kExcludedFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryOptions::BigQueryOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.BigQueryOptions)
}
BigQueryOptions::BigQueryOptions(const BigQueryOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      identifying_fields_(from.identifying_fields_),
      excluded_fields_(from.excluded_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_reference()) {
    table_reference_ = new ::google::privacy::dlp::v2::BigQueryTable(*from.table_reference_);
  } else {
    table_reference_ = nullptr;
  }
  ::memcpy(&rows_limit_, &from.rows_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&rows_limit_percent_) -
    reinterpret_cast<char*>(&rows_limit_)) + sizeof(rows_limit_percent_));
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.BigQueryOptions)
}

void BigQueryOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&table_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rows_limit_percent_) -
      reinterpret_cast<char*>(&table_reference_)) + sizeof(rows_limit_percent_));
}

BigQueryOptions::~BigQueryOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.BigQueryOptions)
  SharedDtor();
}

void BigQueryOptions::SharedDtor() {
  if (this != internal_default_instance()) delete table_reference_;
}

void BigQueryOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigQueryOptions& BigQueryOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BigQueryOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void BigQueryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.BigQueryOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifying_fields_.Clear();
  excluded_fields_.Clear();
  if (GetArenaNoVirtual() == nullptr && table_reference_ != nullptr) {
    delete table_reference_;
  }
  table_reference_ = nullptr;
  ::memset(&rows_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rows_limit_percent_) -
      reinterpret_cast<char*>(&rows_limit_)) + sizeof(rows_limit_percent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BigQueryOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BigQueryOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_table_reference();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
          object = msg->add_identifying_fields();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // int64 rows_limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rows_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.privacy.dlp.v2.BigQueryOptions.SampleMethod sample_method = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_sample_method(static_cast<::google::privacy::dlp::v2::BigQueryOptions_SampleMethod>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.privacy.dlp.v2.FieldId excluded_fields = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
          object = msg->add_excluded_fields();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // int32 rows_limit_percent = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_rows_limit_percent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BigQueryOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.BigQueryOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_identifying_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rows_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rows_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryOptions.SampleMethod sample_method = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sample_method(static_cast< ::google::privacy::dlp::v2::BigQueryOptions_SampleMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.FieldId excluded_fields = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_excluded_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rows_limit_percent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_limit_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.BigQueryOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.BigQueryOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BigQueryOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.BigQueryOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::table_reference(this), output);
  }

  // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identifying_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->identifying_fields(static_cast<int>(i)),
      output);
  }

  // int64 rows_limit = 3;
  if (this->rows_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->rows_limit(), output);
  }

  // .google.privacy.dlp.v2.BigQueryOptions.SampleMethod sample_method = 4;
  if (this->sample_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sample_method(), output);
  }

  // repeated .google.privacy.dlp.v2.FieldId excluded_fields = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->excluded_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->excluded_fields(static_cast<int>(i)),
      output);
  }

  // int32 rows_limit_percent = 6;
  if (this->rows_limit_percent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rows_limit_percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.BigQueryOptions)
}

::google::protobuf::uint8* BigQueryOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.BigQueryOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::table_reference(this), target);
  }

  // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identifying_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->identifying_fields(static_cast<int>(i)), target);
  }

  // int64 rows_limit = 3;
  if (this->rows_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->rows_limit(), target);
  }

  // .google.privacy.dlp.v2.BigQueryOptions.SampleMethod sample_method = 4;
  if (this->sample_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sample_method(), target);
  }

  // repeated .google.privacy.dlp.v2.FieldId excluded_fields = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->excluded_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->excluded_fields(static_cast<int>(i)), target);
  }

  // int32 rows_limit_percent = 6;
  if (this->rows_limit_percent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rows_limit_percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.BigQueryOptions)
  return target;
}

size_t BigQueryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.BigQueryOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->identifying_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->identifying_fields(static_cast<int>(i)));
    }
  }

  // repeated .google.privacy.dlp.v2.FieldId excluded_fields = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->excluded_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->excluded_fields(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_reference_);
  }

  // int64 rows_limit = 3;
  if (this->rows_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rows_limit());
  }

  // .google.privacy.dlp.v2.BigQueryOptions.SampleMethod sample_method = 4;
  if (this->sample_method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sample_method());
  }

  // int32 rows_limit_percent = 6;
  if (this->rows_limit_percent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows_limit_percent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigQueryOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.BigQueryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryOptions* source =
      ::google::protobuf::DynamicCastToGenerated<BigQueryOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.BigQueryOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.BigQueryOptions)
    MergeFrom(*source);
  }
}

void BigQueryOptions::MergeFrom(const BigQueryOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.BigQueryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifying_fields_.MergeFrom(from.identifying_fields_);
  excluded_fields_.MergeFrom(from.excluded_fields_);
  if (from.has_table_reference()) {
    mutable_table_reference()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.table_reference());
  }
  if (from.rows_limit() != 0) {
    set_rows_limit(from.rows_limit());
  }
  if (from.sample_method() != 0) {
    set_sample_method(from.sample_method());
  }
  if (from.rows_limit_percent() != 0) {
    set_rows_limit_percent(from.rows_limit_percent());
  }
}

void BigQueryOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.BigQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryOptions::CopyFrom(const BigQueryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.BigQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryOptions::IsInitialized() const {
  return true;
}

void BigQueryOptions::Swap(BigQueryOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryOptions::InternalSwap(BigQueryOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&identifying_fields_)->InternalSwap(CastToBase(&other->identifying_fields_));
  CastToBase(&excluded_fields_)->InternalSwap(CastToBase(&other->excluded_fields_));
  swap(table_reference_, other->table_reference_);
  swap(rows_limit_, other->rows_limit_);
  swap(sample_method_, other->sample_method_);
  swap(rows_limit_percent_, other->rows_limit_percent_);
}

::google::protobuf::Metadata BigQueryOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StorageConfig_TimespanConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StorageConfig_TimespanConfig_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_StorageConfig_TimespanConfig_default_instance_._instance.get_mutable()->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::privacy::dlp::v2::_StorageConfig_TimespanConfig_default_instance_._instance.get_mutable()->timestamp_field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class StorageConfig_TimespanConfig::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& start_time(const StorageConfig_TimespanConfig* msg);
  static const ::google::protobuf::Timestamp& end_time(const StorageConfig_TimespanConfig* msg);
  static const ::google::privacy::dlp::v2::FieldId& timestamp_field(const StorageConfig_TimespanConfig* msg);
};

const ::google::protobuf::Timestamp&
StorageConfig_TimespanConfig::HasBitSetters::start_time(const StorageConfig_TimespanConfig* msg) {
  return *msg->start_time_;
}
const ::google::protobuf::Timestamp&
StorageConfig_TimespanConfig::HasBitSetters::end_time(const StorageConfig_TimespanConfig* msg) {
  return *msg->end_time_;
}
const ::google::privacy::dlp::v2::FieldId&
StorageConfig_TimespanConfig::HasBitSetters::timestamp_field(const StorageConfig_TimespanConfig* msg) {
  return *msg->timestamp_field_;
}
void StorageConfig_TimespanConfig::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void StorageConfig_TimespanConfig::clear_end_time() {
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageConfig_TimespanConfig::kStartTimeFieldNumber;
const int StorageConfig_TimespanConfig::kEndTimeFieldNumber;
const int StorageConfig_TimespanConfig::kTimestampFieldFieldNumber;
const int StorageConfig_TimespanConfig::kEnableAutoPopulationOfTimespanConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageConfig_TimespanConfig::StorageConfig_TimespanConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
}
StorageConfig_TimespanConfig::StorageConfig_TimespanConfig(const StorageConfig_TimespanConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from.has_timestamp_field()) {
    timestamp_field_ = new ::google::privacy::dlp::v2::FieldId(*from.timestamp_field_);
  } else {
    timestamp_field_ = nullptr;
  }
  enable_auto_population_of_timespan_config_ = from.enable_auto_population_of_timespan_config_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
}

void StorageConfig_TimespanConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_auto_population_of_timespan_config_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(enable_auto_population_of_timespan_config_));
}

StorageConfig_TimespanConfig::~StorageConfig_TimespanConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  SharedDtor();
}

void StorageConfig_TimespanConfig::SharedDtor() {
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete timestamp_field_;
}

void StorageConfig_TimespanConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageConfig_TimespanConfig& StorageConfig_TimespanConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StorageConfig_TimespanConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StorageConfig_TimespanConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_field_ != nullptr) {
    delete timestamp_field_;
  }
  timestamp_field_ = nullptr;
  enable_auto_population_of_timespan_config_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StorageConfig_TimespanConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StorageConfig_TimespanConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_start_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp end_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_end_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.FieldId timestamp_field = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_timestamp_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool enable_auto_population_of_timespan_config = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_enable_auto_population_of_timespan_config(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StorageConfig_TimespanConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId timestamp_field = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_auto_population_of_timespan_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_auto_population_of_timespan_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StorageConfig_TimespanConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start_time(this), output);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end_time(this), output);
  }

  // .google.privacy.dlp.v2.FieldId timestamp_field = 3;
  if (this->has_timestamp_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::timestamp_field(this), output);
  }

  // bool enable_auto_population_of_timespan_config = 4;
  if (this->enable_auto_population_of_timespan_config() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_auto_population_of_timespan_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
}

::google::protobuf::uint8* StorageConfig_TimespanConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start_time(this), target);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end_time(this), target);
  }

  // .google.privacy.dlp.v2.FieldId timestamp_field = 3;
  if (this->has_timestamp_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::timestamp_field(this), target);
  }

  // bool enable_auto_population_of_timespan_config = 4;
  if (this->enable_auto_population_of_timespan_config() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_auto_population_of_timespan_config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  return target;
}

size_t StorageConfig_TimespanConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if (this->has_end_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.privacy.dlp.v2.FieldId timestamp_field = 3;
  if (this->has_timestamp_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_field_);
  }

  // bool enable_auto_population_of_timespan_config = 4;
  if (this->enable_auto_population_of_timespan_config() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageConfig_TimespanConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageConfig_TimespanConfig* source =
      ::google::protobuf::DynamicCastToGenerated<StorageConfig_TimespanConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
    MergeFrom(*source);
  }
}

void StorageConfig_TimespanConfig::MergeFrom(const StorageConfig_TimespanConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(from.end_time());
  }
  if (from.has_timestamp_field()) {
    mutable_timestamp_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.timestamp_field());
  }
  if (from.enable_auto_population_of_timespan_config() != 0) {
    set_enable_auto_population_of_timespan_config(from.enable_auto_population_of_timespan_config());
  }
}

void StorageConfig_TimespanConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageConfig_TimespanConfig::CopyFrom(const StorageConfig_TimespanConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StorageConfig.TimespanConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig_TimespanConfig::IsInitialized() const {
  return true;
}

void StorageConfig_TimespanConfig::Swap(StorageConfig_TimespanConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageConfig_TimespanConfig::InternalSwap(StorageConfig_TimespanConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(timestamp_field_, other->timestamp_field_);
  swap(enable_auto_population_of_timespan_config_, other->enable_auto_population_of_timespan_config_);
}

::google::protobuf::Metadata StorageConfig_TimespanConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StorageConfig::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_StorageConfig_default_instance_.datastore_options_ = const_cast< ::google::privacy::dlp::v2::DatastoreOptions*>(
      ::google::privacy::dlp::v2::DatastoreOptions::internal_default_instance());
  ::google::privacy::dlp::v2::_StorageConfig_default_instance_.cloud_storage_options_ = const_cast< ::google::privacy::dlp::v2::CloudStorageOptions*>(
      ::google::privacy::dlp::v2::CloudStorageOptions::internal_default_instance());
  ::google::privacy::dlp::v2::_StorageConfig_default_instance_.big_query_options_ = const_cast< ::google::privacy::dlp::v2::BigQueryOptions*>(
      ::google::privacy::dlp::v2::BigQueryOptions::internal_default_instance());
  ::google::privacy::dlp::v2::_StorageConfig_default_instance_.hybrid_options_ = const_cast< ::google::privacy::dlp::v2::HybridOptions*>(
      ::google::privacy::dlp::v2::HybridOptions::internal_default_instance());
  ::google::privacy::dlp::v2::_StorageConfig_default_instance_._instance.get_mutable()->timespan_config_ = const_cast< ::google::privacy::dlp::v2::StorageConfig_TimespanConfig*>(
      ::google::privacy::dlp::v2::StorageConfig_TimespanConfig::internal_default_instance());
}
class StorageConfig::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::DatastoreOptions& datastore_options(const StorageConfig* msg);
  static const ::google::privacy::dlp::v2::CloudStorageOptions& cloud_storage_options(const StorageConfig* msg);
  static const ::google::privacy::dlp::v2::BigQueryOptions& big_query_options(const StorageConfig* msg);
  static const ::google::privacy::dlp::v2::HybridOptions& hybrid_options(const StorageConfig* msg);
  static const ::google::privacy::dlp::v2::StorageConfig_TimespanConfig& timespan_config(const StorageConfig* msg);
};

const ::google::privacy::dlp::v2::DatastoreOptions&
StorageConfig::HasBitSetters::datastore_options(const StorageConfig* msg) {
  return *msg->type_.datastore_options_;
}
const ::google::privacy::dlp::v2::CloudStorageOptions&
StorageConfig::HasBitSetters::cloud_storage_options(const StorageConfig* msg) {
  return *msg->type_.cloud_storage_options_;
}
const ::google::privacy::dlp::v2::BigQueryOptions&
StorageConfig::HasBitSetters::big_query_options(const StorageConfig* msg) {
  return *msg->type_.big_query_options_;
}
const ::google::privacy::dlp::v2::HybridOptions&
StorageConfig::HasBitSetters::hybrid_options(const StorageConfig* msg) {
  return *msg->type_.hybrid_options_;
}
const ::google::privacy::dlp::v2::StorageConfig_TimespanConfig&
StorageConfig::HasBitSetters::timespan_config(const StorageConfig* msg) {
  return *msg->timespan_config_;
}
void StorageConfig::set_allocated_datastore_options(::google::privacy::dlp::v2::DatastoreOptions* datastore_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (datastore_options) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      datastore_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, datastore_options, submessage_arena);
    }
    set_has_datastore_options();
    type_.datastore_options_ = datastore_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StorageConfig.datastore_options)
}
void StorageConfig::set_allocated_cloud_storage_options(::google::privacy::dlp::v2::CloudStorageOptions* cloud_storage_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (cloud_storage_options) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cloud_storage_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud_storage_options, submessage_arena);
    }
    set_has_cloud_storage_options();
    type_.cloud_storage_options_ = cloud_storage_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StorageConfig.cloud_storage_options)
}
void StorageConfig::set_allocated_big_query_options(::google::privacy::dlp::v2::BigQueryOptions* big_query_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (big_query_options) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      big_query_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, big_query_options, submessage_arena);
    }
    set_has_big_query_options();
    type_.big_query_options_ = big_query_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StorageConfig.big_query_options)
}
void StorageConfig::set_allocated_hybrid_options(::google::privacy::dlp::v2::HybridOptions* hybrid_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (hybrid_options) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hybrid_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hybrid_options, submessage_arena);
    }
    set_has_hybrid_options();
    type_.hybrid_options_ = hybrid_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.StorageConfig.hybrid_options)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageConfig::kDatastoreOptionsFieldNumber;
const int StorageConfig::kCloudStorageOptionsFieldNumber;
const int StorageConfig::kBigQueryOptionsFieldNumber;
const int StorageConfig::kHybridOptionsFieldNumber;
const int StorageConfig::kTimespanConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageConfig::StorageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.StorageConfig)
}
StorageConfig::StorageConfig(const StorageConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timespan_config()) {
    timespan_config_ = new ::google::privacy::dlp::v2::StorageConfig_TimespanConfig(*from.timespan_config_);
  } else {
    timespan_config_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kDatastoreOptions: {
      mutable_datastore_options()->::google::privacy::dlp::v2::DatastoreOptions::MergeFrom(from.datastore_options());
      break;
    }
    case kCloudStorageOptions: {
      mutable_cloud_storage_options()->::google::privacy::dlp::v2::CloudStorageOptions::MergeFrom(from.cloud_storage_options());
      break;
    }
    case kBigQueryOptions: {
      mutable_big_query_options()->::google::privacy::dlp::v2::BigQueryOptions::MergeFrom(from.big_query_options());
      break;
    }
    case kHybridOptions: {
      mutable_hybrid_options()->::google::privacy::dlp::v2::HybridOptions::MergeFrom(from.hybrid_options());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.StorageConfig)
}

void StorageConfig::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  timespan_config_ = nullptr;
  clear_has_type();
}

StorageConfig::~StorageConfig() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.StorageConfig)
  SharedDtor();
}

void StorageConfig::SharedDtor() {
  if (this != internal_default_instance()) delete timespan_config_;
  if (has_type()) {
    clear_type();
  }
}

void StorageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StorageConfig& StorageConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StorageConfig_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void StorageConfig::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.StorageConfig)
  switch (type_case()) {
    case kDatastoreOptions: {
      delete type_.datastore_options_;
      break;
    }
    case kCloudStorageOptions: {
      delete type_.cloud_storage_options_;
      break;
    }
    case kBigQueryOptions: {
      delete type_.big_query_options_;
      break;
    }
    case kHybridOptions: {
      delete type_.hybrid_options_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void StorageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.StorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && timespan_config_ != nullptr) {
    delete timespan_config_;
  }
  timespan_config_ = nullptr;
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StorageConfig::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StorageConfig*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.DatastoreOptions datastore_options = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DatastoreOptions::_InternalParse;
        object = msg->mutable_datastore_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.CloudStorageOptions cloud_storage_options = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::CloudStorageOptions::_InternalParse;
        object = msg->mutable_cloud_storage_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BigQueryOptions big_query_options = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryOptions::_InternalParse;
        object = msg->mutable_big_query_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.StorageConfig.TimespanConfig timespan_config = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::StorageConfig_TimespanConfig::_InternalParse;
        object = msg->mutable_timespan_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.HybridOptions hybrid_options = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::HybridOptions::_InternalParse;
        object = msg->mutable_hybrid_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StorageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.StorageConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.DatastoreOptions datastore_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_datastore_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.CloudStorageOptions cloud_storage_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cloud_storage_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryOptions big_query_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_big_query_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.StorageConfig.TimespanConfig timespan_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timespan_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.HybridOptions hybrid_options = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hybrid_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.StorageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.StorageConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StorageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.StorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.DatastoreOptions datastore_options = 2;
  if (has_datastore_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::datastore_options(this), output);
  }

  // .google.privacy.dlp.v2.CloudStorageOptions cloud_storage_options = 3;
  if (has_cloud_storage_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cloud_storage_options(this), output);
  }

  // .google.privacy.dlp.v2.BigQueryOptions big_query_options = 4;
  if (has_big_query_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::big_query_options(this), output);
  }

  // .google.privacy.dlp.v2.StorageConfig.TimespanConfig timespan_config = 6;
  if (this->has_timespan_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::timespan_config(this), output);
  }

  // .google.privacy.dlp.v2.HybridOptions hybrid_options = 9;
  if (has_hybrid_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::hybrid_options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.StorageConfig)
}

::google::protobuf::uint8* StorageConfig::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.StorageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.DatastoreOptions datastore_options = 2;
  if (has_datastore_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::datastore_options(this), target);
  }

  // .google.privacy.dlp.v2.CloudStorageOptions cloud_storage_options = 3;
  if (has_cloud_storage_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cloud_storage_options(this), target);
  }

  // .google.privacy.dlp.v2.BigQueryOptions big_query_options = 4;
  if (has_big_query_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::big_query_options(this), target);
  }

  // .google.privacy.dlp.v2.StorageConfig.TimespanConfig timespan_config = 6;
  if (this->has_timespan_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::timespan_config(this), target);
  }

  // .google.privacy.dlp.v2.HybridOptions hybrid_options = 9;
  if (has_hybrid_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::hybrid_options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.StorageConfig)
  return target;
}

size_t StorageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.StorageConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.StorageConfig.TimespanConfig timespan_config = 6;
  if (this->has_timespan_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timespan_config_);
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2.DatastoreOptions datastore_options = 2;
    case kDatastoreOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.datastore_options_);
      break;
    }
    // .google.privacy.dlp.v2.CloudStorageOptions cloud_storage_options = 3;
    case kCloudStorageOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.cloud_storage_options_);
      break;
    }
    // .google.privacy.dlp.v2.BigQueryOptions big_query_options = 4;
    case kBigQueryOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.big_query_options_);
      break;
    }
    // .google.privacy.dlp.v2.HybridOptions hybrid_options = 9;
    case kHybridOptions: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.hybrid_options_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StorageConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.StorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageConfig* source =
      ::google::protobuf::DynamicCastToGenerated<StorageConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.StorageConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.StorageConfig)
    MergeFrom(*source);
  }
}

void StorageConfig::MergeFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.StorageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timespan_config()) {
    mutable_timespan_config()->::google::privacy::dlp::v2::StorageConfig_TimespanConfig::MergeFrom(from.timespan_config());
  }
  switch (from.type_case()) {
    case kDatastoreOptions: {
      mutable_datastore_options()->::google::privacy::dlp::v2::DatastoreOptions::MergeFrom(from.datastore_options());
      break;
    }
    case kCloudStorageOptions: {
      mutable_cloud_storage_options()->::google::privacy::dlp::v2::CloudStorageOptions::MergeFrom(from.cloud_storage_options());
      break;
    }
    case kBigQueryOptions: {
      mutable_big_query_options()->::google::privacy::dlp::v2::BigQueryOptions::MergeFrom(from.big_query_options());
      break;
    }
    case kHybridOptions: {
      mutable_hybrid_options()->::google::privacy::dlp::v2::HybridOptions::MergeFrom(from.hybrid_options());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void StorageConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageConfig::CopyFrom(const StorageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.StorageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageConfig::IsInitialized() const {
  return true;
}

void StorageConfig::Swap(StorageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StorageConfig::InternalSwap(StorageConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timespan_config_, other->timespan_config_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata StorageConfig::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

HybridOptions_LabelsEntry_DoNotUse::HybridOptions_LabelsEntry_DoNotUse() {}
HybridOptions_LabelsEntry_DoNotUse::HybridOptions_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void HybridOptions_LabelsEntry_DoNotUse::MergeFrom(const HybridOptions_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HybridOptions_LabelsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[23];
}
void HybridOptions_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridOptions_LabelsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      HybridOptions_LabelsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.privacy.dlp.v2.HybridOptions.LabelsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "google.privacy.dlp.v2.HybridOptions.LabelsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void HybridOptions::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_HybridOptions_default_instance_._instance.get_mutable()->table_options_ = const_cast< ::google::privacy::dlp::v2::TableOptions*>(
      ::google::privacy::dlp::v2::TableOptions::internal_default_instance());
}
class HybridOptions::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::TableOptions& table_options(const HybridOptions* msg);
};

const ::google::privacy::dlp::v2::TableOptions&
HybridOptions::HasBitSetters::table_options(const HybridOptions* msg) {
  return *msg->table_options_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridOptions::kDescriptionFieldNumber;
const int HybridOptions::kRequiredFindingLabelKeysFieldNumber;
const int HybridOptions::kLabelsFieldNumber;
const int HybridOptions::kTableOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridOptions::HybridOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.HybridOptions)
}
HybridOptions::HybridOptions(const HybridOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      required_finding_label_keys_(from.required_finding_label_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_table_options()) {
    table_options_ = new ::google::privacy::dlp::v2::TableOptions(*from.table_options_);
  } else {
    table_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.HybridOptions)
}

void HybridOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_options_ = nullptr;
}

HybridOptions::~HybridOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.HybridOptions)
  SharedDtor();
}

void HybridOptions::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_options_;
}

void HybridOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HybridOptions& HybridOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HybridOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void HybridOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.HybridOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_finding_label_keys_.Clear();
  labels_.Clear();
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && table_options_ != nullptr) {
    delete table_options_;
  }
  table_options_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HybridOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HybridOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string description = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.HybridOptions.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string required_finding_label_keys = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.HybridOptions.required_finding_label_keys");
          object = msg->add_required_finding_label_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // map<string, string> labels = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->labels_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .google.privacy.dlp.v2.TableOptions table_options = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::TableOptions::_InternalParse;
        object = msg->mutable_table_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HybridOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.HybridOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridOptions.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string required_finding_label_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_finding_label_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->required_finding_label_keys(this->required_finding_label_keys_size() - 1).data(),
            static_cast<int>(this->required_finding_label_keys(this->required_finding_label_keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridOptions.required_finding_label_keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          HybridOptions_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HybridOptions_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridOptions.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.HybridOptions.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.TableOptions table_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.HybridOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.HybridOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HybridOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.HybridOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridOptions.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // repeated string required_finding_label_keys = 2;
  for (int i = 0, n = this->required_finding_label_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->required_finding_label_keys(i).data(), static_cast<int>(this->required_finding_label_keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridOptions.required_finding_label_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->required_finding_label_keys(i), output);
  }

  // map<string, string> labels = 3;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridOptions.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridOptions.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HybridOptions_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<HybridOptions_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.privacy.dlp.v2.TableOptions table_options = 4;
  if (this->has_table_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::table_options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.HybridOptions)
}

::google::protobuf::uint8* HybridOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.HybridOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridOptions.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // repeated string required_finding_label_keys = 2;
  for (int i = 0, n = this->required_finding_label_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->required_finding_label_keys(i).data(), static_cast<int>(this->required_finding_label_keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.HybridOptions.required_finding_label_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->required_finding_label_keys(i), target);
  }

  // map<string, string> labels = 3;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridOptions.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.privacy.dlp.v2.HybridOptions.LabelsEntry.value");
      }
    };

    if (false &&
        this->labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HybridOptions_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<HybridOptions_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.privacy.dlp.v2.TableOptions table_options = 4;
  if (this->has_table_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::table_options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.HybridOptions)
  return target;
}

size_t HybridOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.HybridOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_finding_label_keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->required_finding_label_keys_size());
  for (int i = 0, n = this->required_finding_label_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_finding_label_keys(i));
  }

  // map<string, string> labels = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::std::unique_ptr<HybridOptions_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .google.privacy.dlp.v2.TableOptions table_options = 4;
  if (this->has_table_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.HybridOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridOptions* source =
      ::google::protobuf::DynamicCastToGenerated<HybridOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.HybridOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.HybridOptions)
    MergeFrom(*source);
  }
}

void HybridOptions::MergeFrom(const HybridOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.HybridOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  required_finding_label_keys_.MergeFrom(from.required_finding_label_keys_);
  labels_.MergeFrom(from.labels_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_table_options()) {
    mutable_table_options()->::google::privacy::dlp::v2::TableOptions::MergeFrom(from.table_options());
  }
}

void HybridOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.HybridOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridOptions::CopyFrom(const HybridOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.HybridOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridOptions::IsInitialized() const {
  return true;
}

void HybridOptions::Swap(HybridOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridOptions::InternalSwap(HybridOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  required_finding_label_keys_.InternalSwap(CastToBase(&other->required_finding_label_keys_));
  labels_.Swap(&other->labels_);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(table_options_, other->table_options_);
}

::google::protobuf::Metadata HybridOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BigQueryKey::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_BigQueryKey_default_instance_._instance.get_mutable()->table_reference_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
}
class BigQueryKey::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::BigQueryTable& table_reference(const BigQueryKey* msg);
};

const ::google::privacy::dlp::v2::BigQueryTable&
BigQueryKey::HasBitSetters::table_reference(const BigQueryKey* msg) {
  return *msg->table_reference_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryKey::kTableReferenceFieldNumber;
const int BigQueryKey::kRowNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryKey::BigQueryKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.BigQueryKey)
}
BigQueryKey::BigQueryKey(const BigQueryKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table_reference()) {
    table_reference_ = new ::google::privacy::dlp::v2::BigQueryTable(*from.table_reference_);
  } else {
    table_reference_ = nullptr;
  }
  row_number_ = from.row_number_;
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.BigQueryKey)
}

void BigQueryKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&table_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_number_) -
      reinterpret_cast<char*>(&table_reference_)) + sizeof(row_number_));
}

BigQueryKey::~BigQueryKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.BigQueryKey)
  SharedDtor();
}

void BigQueryKey::SharedDtor() {
  if (this != internal_default_instance()) delete table_reference_;
}

void BigQueryKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigQueryKey& BigQueryKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BigQueryKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void BigQueryKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.BigQueryKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && table_reference_ != nullptr) {
    delete table_reference_;
  }
  table_reference_ = nullptr;
  row_number_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BigQueryKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BigQueryKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_table_reference();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 row_number = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_row_number(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BigQueryKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.BigQueryKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 row_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &row_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.BigQueryKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.BigQueryKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BigQueryKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.BigQueryKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::table_reference(this), output);
  }

  // int64 row_number = 2;
  if (this->row_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->row_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.BigQueryKey)
}

::google::protobuf::uint8* BigQueryKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.BigQueryKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::table_reference(this), target);
  }

  // int64 row_number = 2;
  if (this->row_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->row_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.BigQueryKey)
  return target;
}

size_t BigQueryKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.BigQueryKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table_reference = 1;
  if (this->has_table_reference()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_reference_);
  }

  // int64 row_number = 2;
  if (this->row_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->row_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigQueryKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.BigQueryKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryKey* source =
      ::google::protobuf::DynamicCastToGenerated<BigQueryKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.BigQueryKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.BigQueryKey)
    MergeFrom(*source);
  }
}

void BigQueryKey::MergeFrom(const BigQueryKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.BigQueryKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table_reference()) {
    mutable_table_reference()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.table_reference());
  }
  if (from.row_number() != 0) {
    set_row_number(from.row_number());
  }
}

void BigQueryKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.BigQueryKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryKey::CopyFrom(const BigQueryKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.BigQueryKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryKey::IsInitialized() const {
  return true;
}

void BigQueryKey::Swap(BigQueryKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryKey::InternalSwap(BigQueryKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_reference_, other->table_reference_);
  swap(row_number_, other->row_number_);
}

::google::protobuf::Metadata BigQueryKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DatastoreKey::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_DatastoreKey_default_instance_._instance.get_mutable()->entity_key_ = const_cast< ::google::privacy::dlp::v2::Key*>(
      ::google::privacy::dlp::v2::Key::internal_default_instance());
}
class DatastoreKey::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::Key& entity_key(const DatastoreKey* msg);
};

const ::google::privacy::dlp::v2::Key&
DatastoreKey::HasBitSetters::entity_key(const DatastoreKey* msg) {
  return *msg->entity_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatastoreKey::kEntityKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatastoreKey::DatastoreKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.DatastoreKey)
}
DatastoreKey::DatastoreKey(const DatastoreKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity_key()) {
    entity_key_ = new ::google::privacy::dlp::v2::Key(*from.entity_key_);
  } else {
    entity_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.DatastoreKey)
}

void DatastoreKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  entity_key_ = nullptr;
}

DatastoreKey::~DatastoreKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.DatastoreKey)
  SharedDtor();
}

void DatastoreKey::SharedDtor() {
  if (this != internal_default_instance()) delete entity_key_;
}

void DatastoreKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatastoreKey& DatastoreKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DatastoreKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void DatastoreKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.DatastoreKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && entity_key_ != nullptr) {
    delete entity_key_;
  }
  entity_key_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DatastoreKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DatastoreKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.Key entity_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::Key::_InternalParse;
        object = msg->mutable_entity_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DatastoreKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.DatastoreKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.Key entity_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.DatastoreKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.DatastoreKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DatastoreKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.DatastoreKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Key entity_key = 1;
  if (this->has_entity_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::entity_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.DatastoreKey)
}

::google::protobuf::uint8* DatastoreKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.DatastoreKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Key entity_key = 1;
  if (this->has_entity_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::entity_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.DatastoreKey)
  return target;
}

size_t DatastoreKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.DatastoreKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.Key entity_key = 1;
  if (this->has_entity_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entity_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatastoreKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.DatastoreKey)
  GOOGLE_DCHECK_NE(&from, this);
  const DatastoreKey* source =
      ::google::protobuf::DynamicCastToGenerated<DatastoreKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.DatastoreKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.DatastoreKey)
    MergeFrom(*source);
  }
}

void DatastoreKey::MergeFrom(const DatastoreKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.DatastoreKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_key()) {
    mutable_entity_key()->::google::privacy::dlp::v2::Key::MergeFrom(from.entity_key());
  }
}

void DatastoreKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.DatastoreKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatastoreKey::CopyFrom(const DatastoreKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.DatastoreKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatastoreKey::IsInitialized() const {
  return true;
}

void DatastoreKey::Swap(DatastoreKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatastoreKey::InternalSwap(DatastoreKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(entity_key_, other->entity_key_);
}

::google::protobuf::Metadata DatastoreKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Key_PathElement::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Key_PathElement_default_instance_.id_ = PROTOBUF_LONGLONG(0);
  ::google::privacy::dlp::v2::_Key_PathElement_default_instance_.name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class Key_PathElement::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key_PathElement::kKindFieldNumber;
const int Key_PathElement::kIdFieldNumber;
const int Key_PathElement::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key_PathElement::Key_PathElement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Key.PathElement)
}
Key_PathElement::Key_PathElement(const Key_PathElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  clear_has_id_type();
  switch (from.id_type_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Key.PathElement)
}

void Key_PathElement::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Key_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id_type();
}

Key_PathElement::~Key_PathElement() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Key.PathElement)
  SharedDtor();
}

void Key_PathElement::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_id_type()) {
    clear_id_type();
  }
}

void Key_PathElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Key_PathElement& Key_PathElement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Key_PathElement_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void Key_PathElement::clear_id_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.Key.PathElement)
  switch (id_type_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kName: {
      id_type_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_TYPE_NOT_SET;
}


void Key_PathElement::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Key.PathElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_id_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Key_PathElement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Key_PathElement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Key.PathElement.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.Key.PathElement.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Key_PathElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Key.PathElement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Key.PathElement.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          clear_id_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_type_.id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.Key.PathElement.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Key.PathElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Key.PathElement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Key_PathElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Key.PathElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Key.PathElement.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Key.PathElement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Key.PathElement)
}

::google::protobuf::uint8* Key_PathElement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Key.PathElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Key.PathElement.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.Key.PathElement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Key.PathElement)
  return target;
}

size_t Key_PathElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Key.PathElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  switch (id_type_case()) {
    // int64 id = 2;
    case kId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
      break;
    }
    // string name = 3;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Key_PathElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Key.PathElement)
  GOOGLE_DCHECK_NE(&from, this);
  const Key_PathElement* source =
      ::google::protobuf::DynamicCastToGenerated<Key_PathElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Key.PathElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Key.PathElement)
    MergeFrom(*source);
  }
}

void Key_PathElement::MergeFrom(const Key_PathElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Key.PathElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  switch (from.id_type_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case ID_TYPE_NOT_SET: {
      break;
    }
  }
}

void Key_PathElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Key.PathElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key_PathElement::CopyFrom(const Key_PathElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Key.PathElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key_PathElement::IsInitialized() const {
  return true;
}

void Key_PathElement::Swap(Key_PathElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key_PathElement::InternalSwap(Key_PathElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_type_, other->id_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Key_PathElement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Key::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_Key_default_instance_._instance.get_mutable()->partition_id_ = const_cast< ::google::privacy::dlp::v2::PartitionId*>(
      ::google::privacy::dlp::v2::PartitionId::internal_default_instance());
}
class Key::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::PartitionId& partition_id(const Key* msg);
};

const ::google::privacy::dlp::v2::PartitionId&
Key::HasBitSetters::partition_id(const Key* msg) {
  return *msg->partition_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kPartitionIdFieldNumber;
const int Key::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.Key)
}
Key::Key(const Key& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_partition_id()) {
    partition_id_ = new ::google::privacy::dlp::v2::PartitionId(*from.partition_id_);
  } else {
    partition_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.Key)
}

void Key::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Key_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  partition_id_ = nullptr;
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  if (this != internal_default_instance()) delete partition_id_;
}

void Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Key& Key::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Key_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  if (GetArenaNoVirtual() == nullptr && partition_id_ != nullptr) {
    delete partition_id_;
  }
  partition_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Key::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Key*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.PartitionId partition_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::PartitionId::_InternalParse;
        object = msg->mutable_partition_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.privacy.dlp.v2.Key.PathElement path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::Key_PathElement::_InternalParse;
          object = msg->add_path();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.Key)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.PartitionId partition_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_partition_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.privacy.dlp.v2.Key.PathElement path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.Key)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::partition_id(this), output);
  }

  // repeated .google.privacy.dlp.v2.Key.PathElement path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->path(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.Key)
}

::google::protobuf::uint8* Key::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::partition_id(this), target);
  }

  // repeated .google.privacy.dlp.v2.Key.PathElement path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->path(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.Key)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.Key.PathElement path = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  // .google.privacy.dlp.v2.PartitionId partition_id = 1;
  if (this->has_partition_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *partition_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const Key* source =
      ::google::protobuf::DynamicCastToGenerated<Key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.has_partition_id()) {
    mutable_partition_id()->::google::privacy::dlp::v2::PartitionId::MergeFrom(from.partition_id());
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  swap(partition_id_, other->partition_id_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordKey::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_RecordKey_default_instance_.datastore_key_ = const_cast< ::google::privacy::dlp::v2::DatastoreKey*>(
      ::google::privacy::dlp::v2::DatastoreKey::internal_default_instance());
  ::google::privacy::dlp::v2::_RecordKey_default_instance_.big_query_key_ = const_cast< ::google::privacy::dlp::v2::BigQueryKey*>(
      ::google::privacy::dlp::v2::BigQueryKey::internal_default_instance());
}
class RecordKey::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::DatastoreKey& datastore_key(const RecordKey* msg);
  static const ::google::privacy::dlp::v2::BigQueryKey& big_query_key(const RecordKey* msg);
};

const ::google::privacy::dlp::v2::DatastoreKey&
RecordKey::HasBitSetters::datastore_key(const RecordKey* msg) {
  return *msg->type_.datastore_key_;
}
const ::google::privacy::dlp::v2::BigQueryKey&
RecordKey::HasBitSetters::big_query_key(const RecordKey* msg) {
  return *msg->type_.big_query_key_;
}
void RecordKey::set_allocated_datastore_key(::google::privacy::dlp::v2::DatastoreKey* datastore_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (datastore_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      datastore_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, datastore_key, submessage_arena);
    }
    set_has_datastore_key();
    type_.datastore_key_ = datastore_key;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordKey.datastore_key)
}
void RecordKey::set_allocated_big_query_key(::google::privacy::dlp::v2::BigQueryKey* big_query_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (big_query_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      big_query_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, big_query_key, submessage_arena);
    }
    set_has_big_query_key();
    type_.big_query_key_ = big_query_key;
  }
  // @@protoc_insertion_point(field_set_allocated:google.privacy.dlp.v2.RecordKey.big_query_key)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordKey::kDatastoreKeyFieldNumber;
const int RecordKey::kBigQueryKeyFieldNumber;
const int RecordKey::kIdValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordKey::RecordKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.RecordKey)
}
RecordKey::RecordKey(const RecordKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      id_values_(from.id_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kDatastoreKey: {
      mutable_datastore_key()->::google::privacy::dlp::v2::DatastoreKey::MergeFrom(from.datastore_key());
      break;
    }
    case kBigQueryKey: {
      mutable_big_query_key()->::google::privacy::dlp::v2::BigQueryKey::MergeFrom(from.big_query_key());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.RecordKey)
}

void RecordKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  clear_has_type();
}

RecordKey::~RecordKey() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.RecordKey)
  SharedDtor();
}

void RecordKey::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void RecordKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordKey& RecordKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordKey_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void RecordKey::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:google.privacy.dlp.v2.RecordKey)
  switch (type_case()) {
    case kDatastoreKey: {
      delete type_.datastore_key_;
      break;
    }
    case kBigQueryKey: {
      delete type_.big_query_key_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void RecordKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.RecordKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_values_.Clear();
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.DatastoreKey datastore_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::DatastoreKey::_InternalParse;
        object = msg->mutable_datastore_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.BigQueryKey big_query_key = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryKey::_InternalParse;
        object = msg->mutable_big_query_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string id_values = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.RecordKey.id_values");
          object = msg->add_id_values();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.RecordKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.DatastoreKey datastore_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_datastore_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.BigQueryKey big_query_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_big_query_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string id_values = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_id_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id_values(this->id_values_size() - 1).data(),
            static_cast<int>(this->id_values(this->id_values_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.RecordKey.id_values"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.RecordKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.RecordKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.RecordKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.DatastoreKey datastore_key = 2;
  if (has_datastore_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::datastore_key(this), output);
  }

  // .google.privacy.dlp.v2.BigQueryKey big_query_key = 3;
  if (has_big_query_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::big_query_key(this), output);
  }

  // repeated string id_values = 5;
  for (int i = 0, n = this->id_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_values(i).data(), static_cast<int>(this->id_values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RecordKey.id_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->id_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.RecordKey)
}

::google::protobuf::uint8* RecordKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.RecordKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.DatastoreKey datastore_key = 2;
  if (has_datastore_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::datastore_key(this), target);
  }

  // .google.privacy.dlp.v2.BigQueryKey big_query_key = 3;
  if (has_big_query_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::big_query_key(this), target);
  }

  // repeated string id_values = 5;
  for (int i = 0, n = this->id_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id_values(i).data(), static_cast<int>(this->id_values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.RecordKey.id_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->id_values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.RecordKey)
  return target;
}

size_t RecordKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.RecordKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string id_values = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->id_values_size());
  for (int i = 0, n = this->id_values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->id_values(i));
  }

  switch (type_case()) {
    // .google.privacy.dlp.v2.DatastoreKey datastore_key = 2;
    case kDatastoreKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.datastore_key_);
      break;
    }
    // .google.privacy.dlp.v2.BigQueryKey big_query_key = 3;
    case kBigQueryKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.big_query_key_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.RecordKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordKey* source =
      ::google::protobuf::DynamicCastToGenerated<RecordKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.RecordKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.RecordKey)
    MergeFrom(*source);
  }
}

void RecordKey::MergeFrom(const RecordKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.RecordKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_values_.MergeFrom(from.id_values_);
  switch (from.type_case()) {
    case kDatastoreKey: {
      mutable_datastore_key()->::google::privacy::dlp::v2::DatastoreKey::MergeFrom(from.datastore_key());
      break;
    }
    case kBigQueryKey: {
      mutable_big_query_key()->::google::privacy::dlp::v2::BigQueryKey::MergeFrom(from.big_query_key());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void RecordKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.RecordKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordKey::CopyFrom(const RecordKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.RecordKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordKey::IsInitialized() const {
  return true;
}

void RecordKey::Swap(RecordKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordKey::InternalSwap(RecordKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_values_.InternalSwap(CastToBase(&other->id_values_));
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata RecordKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BigQueryTable::InitAsDefaultInstance() {
}
class BigQueryTable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryTable::kProjectIdFieldNumber;
const int BigQueryTable::kDatasetIdFieldNumber;
const int BigQueryTable::kTableIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryTable::BigQueryTable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.BigQueryTable)
}
BigQueryTable::BigQueryTable(const BigQueryTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_id().size() > 0) {
    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  table_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table_id().size() > 0) {
    table_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.BigQueryTable)
}

void BigQueryTable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BigQueryTable::~BigQueryTable() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.BigQueryTable)
  SharedDtor();
}

void BigQueryTable::SharedDtor() {
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BigQueryTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigQueryTable& BigQueryTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BigQueryTable_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void BigQueryTable::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.BigQueryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BigQueryTable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BigQueryTable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.BigQueryTable.project_id");
        object = msg->mutable_project_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string dataset_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.BigQueryTable.dataset_id");
        object = msg->mutable_dataset_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string table_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.privacy.dlp.v2.BigQueryTable.table_id");
        object = msg->mutable_table_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BigQueryTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.BigQueryTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.BigQueryTable.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.BigQueryTable.dataset_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_id().data(), static_cast<int>(this->table_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.privacy.dlp.v2.BigQueryTable.table_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.BigQueryTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.BigQueryTable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BigQueryTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.BigQueryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.BigQueryTable.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project_id(), output);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.BigQueryTable.dataset_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dataset_id(), output);
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), static_cast<int>(this->table_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.BigQueryTable.table_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.BigQueryTable)
}

::google::protobuf::uint8* BigQueryTable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.BigQueryTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.BigQueryTable.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project_id(), target);
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_id().data(), static_cast<int>(this->dataset_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.BigQueryTable.dataset_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset_id(), target);
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_id().data(), static_cast<int>(this->table_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.privacy.dlp.v2.BigQueryTable.table_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.BigQueryTable)
  return target;
}

size_t BigQueryTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.BigQueryTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project_id = 1;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string dataset_id = 2;
  if (this->dataset_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_id());
  }

  // string table_id = 3;
  if (this->table_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigQueryTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.BigQueryTable)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryTable* source =
      ::google::protobuf::DynamicCastToGenerated<BigQueryTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.BigQueryTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.BigQueryTable)
    MergeFrom(*source);
  }
}

void BigQueryTable::MergeFrom(const BigQueryTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.BigQueryTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_id().size() > 0) {

    project_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id_);
  }
  if (from.dataset_id().size() > 0) {

    dataset_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_id_);
  }
  if (from.table_id().size() > 0) {

    table_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_id_);
  }
}

void BigQueryTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.BigQueryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryTable::CopyFrom(const BigQueryTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.BigQueryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryTable::IsInitialized() const {
  return true;
}

void BigQueryTable::Swap(BigQueryTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryTable::InternalSwap(BigQueryTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_id_.Swap(&other->project_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dataset_id_.Swap(&other->dataset_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_id_.Swap(&other->table_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BigQueryTable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BigQueryField::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_BigQueryField_default_instance_._instance.get_mutable()->table_ = const_cast< ::google::privacy::dlp::v2::BigQueryTable*>(
      ::google::privacy::dlp::v2::BigQueryTable::internal_default_instance());
  ::google::privacy::dlp::v2::_BigQueryField_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class BigQueryField::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::BigQueryTable& table(const BigQueryField* msg);
  static const ::google::privacy::dlp::v2::FieldId& field(const BigQueryField* msg);
};

const ::google::privacy::dlp::v2::BigQueryTable&
BigQueryField::HasBitSetters::table(const BigQueryField* msg) {
  return *msg->table_;
}
const ::google::privacy::dlp::v2::FieldId&
BigQueryField::HasBitSetters::field(const BigQueryField* msg) {
  return *msg->field_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigQueryField::kTableFieldNumber;
const int BigQueryField::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigQueryField::BigQueryField()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.BigQueryField)
}
BigQueryField::BigQueryField(const BigQueryField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::google::privacy::dlp::v2::BigQueryTable(*from.table_);
  } else {
    table_ = nullptr;
  }
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.BigQueryField)
}

void BigQueryField::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  ::memset(&table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_) -
      reinterpret_cast<char*>(&table_)) + sizeof(field_));
}

BigQueryField::~BigQueryField() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.BigQueryField)
  SharedDtor();
}

void BigQueryField::SharedDtor() {
  if (this != internal_default_instance()) delete table_;
  if (this != internal_default_instance()) delete field_;
}

void BigQueryField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigQueryField& BigQueryField::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BigQueryField_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void BigQueryField::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.BigQueryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BigQueryField::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BigQueryField*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.BigQueryTable table = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::BigQueryTable::_InternalParse;
        object = msg->mutable_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.privacy.dlp.v2.FieldId field = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BigQueryField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.BigQueryField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.BigQueryTable table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.privacy.dlp.v2.FieldId field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.BigQueryField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.BigQueryField)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BigQueryField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.BigQueryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table = 1;
  if (this->has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::table(this), output);
  }

  // .google.privacy.dlp.v2.FieldId field = 2;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::field(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.BigQueryField)
}

::google::protobuf::uint8* BigQueryField::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.BigQueryField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table = 1;
  if (this->has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::table(this), target);
  }

  // .google.privacy.dlp.v2.FieldId field = 2;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::field(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.BigQueryField)
  return target;
}

size_t BigQueryField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.BigQueryField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.BigQueryTable table = 1;
  if (this->has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *table_);
  }

  // .google.privacy.dlp.v2.FieldId field = 2;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigQueryField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.BigQueryField)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryField* source =
      ::google::protobuf::DynamicCastToGenerated<BigQueryField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.BigQueryField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.BigQueryField)
    MergeFrom(*source);
  }
}

void BigQueryField::MergeFrom(const BigQueryField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.BigQueryField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_table()) {
    mutable_table()->::google::privacy::dlp::v2::BigQueryTable::MergeFrom(from.table());
  }
  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
}

void BigQueryField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.BigQueryField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryField::CopyFrom(const BigQueryField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.BigQueryField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryField::IsInitialized() const {
  return true;
}

void BigQueryField::Swap(BigQueryField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigQueryField::InternalSwap(BigQueryField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(table_, other->table_);
  swap(field_, other->field_);
}

::google::protobuf::Metadata BigQueryField::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EntityId::InitAsDefaultInstance() {
  ::google::privacy::dlp::v2::_EntityId_default_instance_._instance.get_mutable()->field_ = const_cast< ::google::privacy::dlp::v2::FieldId*>(
      ::google::privacy::dlp::v2::FieldId::internal_default_instance());
}
class EntityId::HasBitSetters {
 public:
  static const ::google::privacy::dlp::v2::FieldId& field(const EntityId* msg);
};

const ::google::privacy::dlp::v2::FieldId&
EntityId::HasBitSetters::field(const EntityId* msg) {
  return *msg->field_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityId::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityId::EntityId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.EntityId)
}
EntityId::EntityId(const EntityId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::google::privacy::dlp::v2::FieldId(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.EntityId)
}

void EntityId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  field_ = nullptr;
}

EntityId::~EntityId() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.EntityId)
  SharedDtor();
}

void EntityId::SharedDtor() {
  if (this != internal_default_instance()) delete field_;
}

void EntityId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityId& EntityId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EntityId_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void EntityId::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.EntityId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EntityId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EntityId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
        object = msg->mutable_field();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EntityId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.EntityId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.privacy.dlp.v2.FieldId field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.EntityId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.EntityId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EntityId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.EntityId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::field(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.EntityId)
}

::google::protobuf::uint8* EntityId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.EntityId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::field(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.EntityId)
  return target;
}

size_t EntityId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.EntityId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.privacy.dlp.v2.FieldId field = 1;
  if (this->has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.EntityId)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityId* source =
      ::google::protobuf::DynamicCastToGenerated<EntityId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.EntityId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.EntityId)
    MergeFrom(*source);
  }
}

void EntityId::MergeFrom(const EntityId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.EntityId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_field()) {
    mutable_field()->::google::privacy::dlp::v2::FieldId::MergeFrom(from.field());
  }
}

void EntityId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.EntityId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityId::CopyFrom(const EntityId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.EntityId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityId::IsInitialized() const {
  return true;
}

void EntityId::Swap(EntityId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityId::InternalSwap(EntityId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(field_, other->field_);
}

::google::protobuf::Metadata EntityId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TableOptions::InitAsDefaultInstance() {
}
class TableOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableOptions::kIdentifyingFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableOptions::TableOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.privacy.dlp.v2.TableOptions)
}
TableOptions::TableOptions(const TableOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      identifying_fields_(from.identifying_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.privacy.dlp.v2.TableOptions)
}

void TableOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
}

TableOptions::~TableOptions() {
  // @@protoc_insertion_point(destructor:google.privacy.dlp.v2.TableOptions)
  SharedDtor();
}

void TableOptions::SharedDtor() {
}

void TableOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableOptions& TableOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TableOptions_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto.base);
  return *internal_default_instance();
}


void TableOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.privacy.dlp.v2.TableOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifying_fields_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TableOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TableOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::privacy::dlp::v2::FieldId::_InternalParse;
          object = msg->add_identifying_fields();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TableOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.privacy.dlp.v2.TableOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_identifying_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.privacy.dlp.v2.TableOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.privacy.dlp.v2.TableOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TableOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.privacy.dlp.v2.TableOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identifying_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->identifying_fields(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.privacy.dlp.v2.TableOptions)
}

::google::protobuf::uint8* TableOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.privacy.dlp.v2.TableOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identifying_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->identifying_fields(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.privacy.dlp.v2.TableOptions)
  return target;
}

size_t TableOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.privacy.dlp.v2.TableOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.privacy.dlp.v2.FieldId identifying_fields = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->identifying_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->identifying_fields(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.privacy.dlp.v2.TableOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TableOptions* source =
      ::google::protobuf::DynamicCastToGenerated<TableOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.privacy.dlp.v2.TableOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.privacy.dlp.v2.TableOptions)
    MergeFrom(*source);
  }
}

void TableOptions::MergeFrom(const TableOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.privacy.dlp.v2.TableOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifying_fields_.MergeFrom(from.identifying_fields_);
}

void TableOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.privacy.dlp.v2.TableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableOptions::CopyFrom(const TableOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.privacy.dlp.v2.TableOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableOptions::IsInitialized() const {
  return true;
}

void TableOptions::Swap(TableOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableOptions::InternalSwap(TableOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&identifying_fields_)->InternalSwap(CastToBase(&other->identifying_fields_));
}

::google::protobuf::Metadata TableOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto);
  return ::file_level_metadata_google_2fprivacy_2fdlp_2fv2_2fstorage_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace dlp
}  // namespace privacy
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::InfoType* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::InfoType >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::InfoType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StoredType* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StoredType >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StoredType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_Dictionary_WordList >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_Dictionary* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_Dictionary >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_Regex* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_Regex >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_Regex >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_SurrogateType* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_SurrogateType >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_SurrogateType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_Proximity >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_LikelihoodAdjustment >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule_HotwordRule >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType_DetectionRule* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType_DetectionRule >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CustomInfoType* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CustomInfoType >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CustomInfoType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::FieldId* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::FieldId >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::FieldId >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::PartitionId* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::PartitionId >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::PartitionId >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::KindExpression* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::KindExpression >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::KindExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DatastoreOptions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DatastoreOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DatastoreOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CloudStorageRegexFileSet* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CloudStorageRegexFileSet >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CloudStorageRegexFileSet >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CloudStorageOptions_FileSet* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CloudStorageOptions_FileSet >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CloudStorageOptions_FileSet >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CloudStorageOptions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CloudStorageOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CloudStorageOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CloudStorageFileSet* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CloudStorageFileSet >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CloudStorageFileSet >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::CloudStoragePath* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::CloudStoragePath >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::CloudStoragePath >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::BigQueryOptions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::BigQueryOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::BigQueryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StorageConfig_TimespanConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StorageConfig_TimespanConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StorageConfig_TimespanConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::StorageConfig* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::StorageConfig >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::StorageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridOptions_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::HybridOptions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::HybridOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::HybridOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::BigQueryKey* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::BigQueryKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::BigQueryKey >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::DatastoreKey* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::DatastoreKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::DatastoreKey >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Key_PathElement* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Key_PathElement >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Key_PathElement >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::Key* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::Key >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::RecordKey* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::RecordKey >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::RecordKey >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::BigQueryTable* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::BigQueryTable >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::BigQueryTable >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::BigQueryField* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::BigQueryField >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::BigQueryField >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::EntityId* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::EntityId >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::EntityId >(arena);
}
template<> PROTOBUF_NOINLINE ::google::privacy::dlp::v2::TableOptions* Arena::CreateMaybeMessage< ::google::privacy::dlp::v2::TableOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::privacy::dlp::v2::TableOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
