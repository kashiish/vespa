// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/market/v2/services.proto

#include "google/apps/market/v2/services.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {
class CustomerLicenseGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomerLicenseGetRequest> _instance;
} _CustomerLicenseGetRequest_default_instance_;
class LicenseNotificationListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LicenseNotificationListRequest> _instance;
} _LicenseNotificationListRequest_default_instance_;
class UserLicenseGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserLicenseGetRequest> _instance;
} _UserLicenseGetRequest_default_instance_;
}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc
static void InitDefaultsCustomerLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_CustomerLicenseGetRequest_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomerLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomerLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto}, {}};

static void InitDefaultsLicenseNotificationListRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_LicenseNotificationListRequest_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotificationListRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLicenseNotificationListRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto}, {}};

static void InitDefaultsUserLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_UserLicenseGetRequest_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::UserLicenseGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::UserLicenseGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto}, {}};

void InitDefaults_google_2fapps_2fmarket_2fv2_2fservices_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CustomerLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LicenseNotificationListRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fapps_2fmarket_2fv2_2fservices_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fapps_2fmarket_2fv2_2fservices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, max_results_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, start_token_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicenseGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicenseGetRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicenseGetRequest, user_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest)},
  { 7, -1, sizeof(::ccc::hosted::marketplace::v2::LicenseNotificationListRequest)},
  { 16, -1, sizeof(::ccc::hosted::marketplace::v2::UserLicenseGetRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_CustomerLicenseGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_LicenseNotificationListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_UserLicenseGetRequest_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fservices_2eproto = {
  {}, AddDescriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto, "google/apps/market/v2/services.proto", schemas,
  file_default_instances, TableStruct_google_2fapps_2fmarket_2fv2_2fservices_2eproto::offsets,
  file_level_metadata_google_2fapps_2fmarket_2fv2_2fservices_2eproto, 3, file_level_enum_descriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto, file_level_service_descriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto,
};

const char descriptor_table_protodef_google_2fapps_2fmarket_2fv2_2fservices_2eproto[] =
  "\n$google/apps/market/v2/services.proto\022\031"
  "ccc.hosted.marketplace.v2\032\034google/api/an"
  "notations.proto\032%google/apps/market/v2/r"
  "esources.proto\032\027google/api/client.proto\""
  "H\n\031CustomerLicenseGetRequest\022\026\n\016applicat"
  "ion_id\030\001 \001(\t\022\023\n\013customer_id\030\002 \001(\t\"u\n\036Lic"
  "enseNotificationListRequest\022\026\n\016applicati"
  "on_id\030\001 \001(\t\022\023\n\013max_results\030\002 \001(\r\022\023\n\013star"
  "t_token\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\004\"@\n\025User"
  "LicenseGetRequest\022\026\n\016application_id\030\001 \001("
  "\t\022\017\n\007user_id\030\002 \001(\t2\241\002\n\026CustomerLicenseSe"
  "rvice\022\256\001\n\003Get\0224.ccc.hosted.marketplace.v"
  "2.CustomerLicenseGetRequest\032*.ccc.hosted"
  ".marketplace.v2.CustomerLicense\"E\202\323\344\223\002\?\022"
  "=/appsmarket/v2/customerLicense/{applica"
  "tion_id}/{customer_id}\032V\312A\031appsmarket.go"
  "ogleapis.com\322A7https://www.googleapis.co"
  "m/auth/appsmarketplace.license2\254\002\n\032Licen"
  "seNotificationService\022\265\001\n\004List\0229.ccc.hos"
  "ted.marketplace.v2.LicenseNotificationLi"
  "stRequest\0322.ccc.hosted.marketplace.v2.Li"
  "censeNotificationList\">\202\323\344\223\0028\0223/appsmark"
  "et/v2/licenseNotification/{application_i"
  "d}:\001*\032V\312A\031appsmarket.googleapis.com\322A7ht"
  "tps://www.googleapis.com/auth/appsmarket"
  "place.license2\215\002\n\022UserLicenseService\022\236\001\n"
  "\003Get\0220.ccc.hosted.marketplace.v2.UserLic"
  "enseGetRequest\032&.ccc.hosted.marketplace."
  "v2.UserLicense\"=\202\323\344\223\0027\0225/appsmarket/v2/u"
  "serLicense/{application_id}/{user_id}\032V\312"
  "A\031appsmarket.googleapis.com\322A7https://ww"
  "w.googleapis.com/auth/appsmarketplace.li"
  "censeB\233\001\n$com.google.ccc.hosted.marketpl"
  "ace.v2B\014ServiceProtoP\001ZKgoogle.golang.or"
  "g/genproto/googleapis/ccc/hosted/marketp"
  "lace/v2;marketplace\312\002\025Google\\Apps\\Market"
  "\\V2b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fapps_2fmarket_2fv2_2fservices_2eproto = {
  false, InitDefaults_google_2fapps_2fmarket_2fv2_2fservices_2eproto, 
  descriptor_table_protodef_google_2fapps_2fmarket_2fv2_2fservices_2eproto,
  "google/apps/market/v2/services.proto", &assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fservices_2eproto, 1451,
};

void AddDescriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
    ::AddDescriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto,
    ::AddDescriptors_google_2fapi_2fclient_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fapps_2fmarket_2fv2_2fservices_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapps_2fmarket_2fv2_2fservices_2eproto = []() { AddDescriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto(); return true; }();
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {

// ===================================================================

void CustomerLicenseGetRequest::InitAsDefaultInstance() {
}
class CustomerLicenseGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomerLicenseGetRequest::kApplicationIdFieldNumber;
const int CustomerLicenseGetRequest::kCustomerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomerLicenseGetRequest::CustomerLicenseGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
}
CustomerLicenseGetRequest::CustomerLicenseGetRequest(const CustomerLicenseGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_id().size() > 0) {
    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_id().size() > 0) {
    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
}

void CustomerLicenseGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomerLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CustomerLicenseGetRequest::~CustomerLicenseGetRequest() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  SharedDtor();
}

void CustomerLicenseGetRequest::SharedDtor() {
  application_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomerLicenseGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerLicenseGetRequest& CustomerLicenseGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomerLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  return *internal_default_instance();
}


void CustomerLicenseGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomerLicenseGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomerLicenseGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string application_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id");
        object = msg->mutable_application_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string customer_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id");
        object = msg->mutable_customer_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomerLicenseGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string application_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_id().data(), static_cast<int>(this->application_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customer_id().data(), static_cast<int>(this->customer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomerLicenseGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application_id(), output);
  }

  // string customer_id = 2;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->customer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
}

::google::protobuf::uint8* CustomerLicenseGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application_id(), target);
  }

  // string customer_id = 2;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->customer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  return target;
}

size_t CustomerLicenseGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_id());
  }

  // string customer_id = 2;
  if (this->customer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerLicenseGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerLicenseGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CustomerLicenseGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
    MergeFrom(*source);
  }
}

void CustomerLicenseGetRequest::MergeFrom(const CustomerLicenseGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.application_id().size() > 0) {

    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  if (from.customer_id().size() > 0) {

    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
}

void CustomerLicenseGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerLicenseGetRequest::CopyFrom(const CustomerLicenseGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerLicenseGetRequest::IsInitialized() const {
  return true;
}

void CustomerLicenseGetRequest::Swap(CustomerLicenseGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomerLicenseGetRequest::InternalSwap(CustomerLicenseGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  application_id_.Swap(&other->application_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_id_.Swap(&other->customer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CustomerLicenseGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fservices_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fservices_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LicenseNotificationListRequest::InitAsDefaultInstance() {
}
class LicenseNotificationListRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseNotificationListRequest::kApplicationIdFieldNumber;
const int LicenseNotificationListRequest::kMaxResultsFieldNumber;
const int LicenseNotificationListRequest::kStartTokenFieldNumber;
const int LicenseNotificationListRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseNotificationListRequest::LicenseNotificationListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
}
LicenseNotificationListRequest::LicenseNotificationListRequest(const LicenseNotificationListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_id().size() > 0) {
    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  start_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_token().size() > 0) {
    start_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_token_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_results_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(max_results_));
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
}

void LicenseNotificationListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LicenseNotificationListRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_results_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(max_results_));
}

LicenseNotificationListRequest::~LicenseNotificationListRequest() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  SharedDtor();
}

void LicenseNotificationListRequest::SharedDtor() {
  application_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LicenseNotificationListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseNotificationListRequest& LicenseNotificationListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LicenseNotificationListRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  return *internal_default_instance();
}


void LicenseNotificationListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_results_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(max_results_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseNotificationListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LicenseNotificationListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string application_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id");
        object = msg->mutable_application_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 max_results = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_results(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string start_token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token");
        object = msg->mutable_start_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseNotificationListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string application_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_id().data(), static_cast<int>(this->application_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_token().data(), static_cast<int>(this->start_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseNotificationListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application_id(), output);
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_results(), output);
  }

  // string start_token = 3;
  if (this->start_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_token().data(), static_cast<int>(this->start_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_token(), output);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
}

::google::protobuf::uint8* LicenseNotificationListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application_id(), target);
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_results(), target);
  }

  // string start_token = 3;
  if (this->start_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_token().data(), static_cast<int>(this->start_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_token(), target);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  return target;
}

size_t LicenseNotificationListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_id());
  }

  // string start_token = 3;
  if (this->start_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_token());
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 max_results = 2;
  if (this->max_results() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_results());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseNotificationListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseNotificationListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LicenseNotificationListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
    MergeFrom(*source);
  }
}

void LicenseNotificationListRequest::MergeFrom(const LicenseNotificationListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.application_id().size() > 0) {

    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  if (from.start_token().size() > 0) {

    start_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_token_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.max_results() != 0) {
    set_max_results(from.max_results());
  }
}

void LicenseNotificationListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseNotificationListRequest::CopyFrom(const LicenseNotificationListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseNotificationListRequest::IsInitialized() const {
  return true;
}

void LicenseNotificationListRequest::Swap(LicenseNotificationListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseNotificationListRequest::InternalSwap(LicenseNotificationListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  application_id_.Swap(&other->application_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  start_token_.Swap(&other->start_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(max_results_, other->max_results_);
}

::google::protobuf::Metadata LicenseNotificationListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fservices_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fservices_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserLicenseGetRequest::InitAsDefaultInstance() {
}
class UserLicenseGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLicenseGetRequest::kApplicationIdFieldNumber;
const int UserLicenseGetRequest::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLicenseGetRequest::UserLicenseGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
}
UserLicenseGetRequest::UserLicenseGetRequest(const UserLicenseGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_id().size() > 0) {
    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
}

void UserLicenseGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserLicenseGetRequest::~UserLicenseGetRequest() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  SharedDtor();
}

void UserLicenseGetRequest::SharedDtor() {
  application_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserLicenseGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLicenseGetRequest& UserLicenseGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserLicenseGetRequest_google_2fapps_2fmarket_2fv2_2fservices_2eproto.base);
  return *internal_default_instance();
}


void UserLicenseGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserLicenseGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserLicenseGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string application_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id");
        object = msg->mutable_application_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserLicenseGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string application_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_id().data(), static_cast<int>(this->application_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserLicenseGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->application_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
}

::google::protobuf::uint8* UserLicenseGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->application_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  return target;
}

size_t UserLicenseGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string application_id = 1;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLicenseGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLicenseGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<UserLicenseGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
    MergeFrom(*source);
  }
}

void UserLicenseGetRequest::MergeFrom(const UserLicenseGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.application_id().size() > 0) {

    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void UserLicenseGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLicenseGetRequest::CopyFrom(const UserLicenseGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLicenseGetRequest::IsInitialized() const {
  return true;
}

void UserLicenseGetRequest::Swap(UserLicenseGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLicenseGetRequest::InternalSwap(UserLicenseGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  application_id_.Swap(&other->application_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata UserLicenseGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fservices_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fservices_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
