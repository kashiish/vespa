// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/apps/market/v2/services.proto

#include "google/apps/market/v2/services.pb.h"
#include "google/apps/market/v2/services.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {

static const char* CustomerLicenseService_method_names[] = {
  "/ccc.hosted.marketplace.v2.CustomerLicenseService/Get",
};

std::unique_ptr< CustomerLicenseService::Stub> CustomerLicenseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CustomerLicenseService::Stub> stub(new CustomerLicenseService::Stub(channel, options));
  return stub;
}

CustomerLicenseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(CustomerLicenseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CustomerLicenseService::Stub::Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::ccc::hosted::marketplace::v2::CustomerLicense* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void CustomerLicenseService::Stub::async::Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void CustomerLicenseService::Stub::async::Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>* CustomerLicenseService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ccc::hosted::marketplace::v2::CustomerLicense, ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>* CustomerLicenseService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

CustomerLicenseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CustomerLicenseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CustomerLicenseService::Service, ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CustomerLicenseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* req,
             ::ccc::hosted::marketplace::v2::CustomerLicense* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
}

CustomerLicenseService::Service::~Service() {
}

::grpc::Status CustomerLicenseService::Service::Get(::grpc::ServerContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LicenseNotificationService_method_names[] = {
  "/ccc.hosted.marketplace.v2.LicenseNotificationService/List",
};

std::unique_ptr< LicenseNotificationService::Stub> LicenseNotificationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LicenseNotificationService::Stub> stub(new LicenseNotificationService::Stub(channel, options));
  return stub;
}

LicenseNotificationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_List_(LicenseNotificationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LicenseNotificationService::Stub::List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void LicenseNotificationService::Stub::async::List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void LicenseNotificationService::Stub::async::List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>* LicenseNotificationService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ccc::hosted::marketplace::v2::LicenseNotificationList, ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>* LicenseNotificationService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

LicenseNotificationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LicenseNotificationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LicenseNotificationService::Service, ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LicenseNotificationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* req,
             ::ccc::hosted::marketplace::v2::LicenseNotificationList* resp) {
               return service->List(ctx, req, resp);
             }, this)));
}

LicenseNotificationService::Service::~Service() {
}

::grpc::Status LicenseNotificationService::Service::List(::grpc::ServerContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* UserLicenseService_method_names[] = {
  "/ccc.hosted.marketplace.v2.UserLicenseService/Get",
};

std::unique_ptr< UserLicenseService::Stub> UserLicenseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserLicenseService::Stub> stub(new UserLicenseService::Stub(channel, options));
  return stub;
}

UserLicenseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(UserLicenseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserLicenseService::Stub::Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::ccc::hosted::marketplace::v2::UserLicense* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void UserLicenseService::Stub::async::Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void UserLicenseService::Stub::async::Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>* UserLicenseService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ccc::hosted::marketplace::v2::UserLicense, ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>* UserLicenseService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserLicenseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserLicenseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserLicenseService::Service, ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserLicenseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* req,
             ::ccc::hosted::marketplace::v2::UserLicense* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
}

UserLicenseService::Service::~Service() {
}

::grpc::Status UserLicenseService::Service::Get(::grpc::ServerContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ccc
}  // namespace hosted
}  // namespace marketplace
}  // namespace v2

