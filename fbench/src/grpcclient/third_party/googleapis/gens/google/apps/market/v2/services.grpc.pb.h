// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/apps/market/v2/services.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fapps_2fmarket_2fv2_2fservices_2eproto__INCLUDED
#define GRPC_google_2fapps_2fmarket_2fv2_2fservices_2eproto__INCLUDED

#include "google/apps/market/v2/services.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {

class CustomerLicenseService final {
 public:
  static constexpr char const* service_full_name() {
    return "ccc.hosted.marketplace.v2.CustomerLicenseService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get the status of a license for a customer to determine if they have access
    // for a given app.
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::ccc::hosted::marketplace::v2::CustomerLicense* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::CustomerLicense>> AsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::CustomerLicense>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::CustomerLicense>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::CustomerLicense>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get the status of a license for a customer to determine if they have access
      // for a given app.
      virtual void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::CustomerLicense>* AsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::CustomerLicense>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::ccc::hosted::marketplace::v2::CustomerLicense* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>> AsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>* AsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::CustomerLicense>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get the status of a license for a customer to determine if they have access
    // for a given app.
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::CustomerLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::ccc::hosted::marketplace::v2::CustomerLicense>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::CustomerLicense* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::CustomerLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::CustomerLicense* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::CustomerLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::CustomerLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::CustomerLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest, ::ccc::hosted::marketplace::v2::CustomerLicense>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::CustomerLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest,::ccc::hosted::marketplace::v2::CustomerLicense>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<Service > StreamedService;
};

class LicenseNotificationService final {
 public:
  static constexpr char const* service_full_name() {
    return "ccc.hosted.marketplace.v2.LicenseNotificationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get a list of licensing notifications with regards to a given app.
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::LicenseNotificationList>> AsyncList(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::LicenseNotificationList>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::LicenseNotificationList>> PrepareAsyncList(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::LicenseNotificationList>>(PrepareAsyncListRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get a list of licensing notifications with regards to a given app.
      virtual void List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::LicenseNotificationList>* AsyncListRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::LicenseNotificationList>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>> AsyncList(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>> PrepareAsyncList(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>>(PrepareAsyncListRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>* AsyncListRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::LicenseNotificationList>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get a list of licensing notifications with regards to a given app.
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* /*request*/, ::ccc::hosted::marketplace::v2::LicenseNotificationList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::grpc::ServerAsyncResponseWriter< ::ccc::hosted::marketplace::v2::LicenseNotificationList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_List<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_List() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* request, ::ccc::hosted::marketplace::v2::LicenseNotificationList* response) { return this->List(context, request, response); }));}
    void SetMessageAllocatorFor_List(
        ::grpc::MessageAllocator< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* /*request*/, ::ccc::hosted::marketplace::v2::LicenseNotificationList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* /*request*/, ::ccc::hosted::marketplace::v2::LicenseNotificationList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_List<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* /*request*/, ::ccc::hosted::marketplace::v2::LicenseNotificationList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* /*request*/, ::ccc::hosted::marketplace::v2::LicenseNotificationList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_List() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->List(context, request, response); }));
    }
    ~WithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* /*request*/, ::ccc::hosted::marketplace::v2::LicenseNotificationList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest, ::ccc::hosted::marketplace::v2::LicenseNotificationList>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* /*request*/, ::ccc::hosted::marketplace::v2::LicenseNotificationList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest,::ccc::hosted::marketplace::v2::LicenseNotificationList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_List<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_List<Service > StreamedService;
};

class UserLicenseService final {
 public:
  static constexpr char const* service_full_name() {
    return "ccc.hosted.marketplace.v2.UserLicenseService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get the user's licensing status for their permission to use a given app.
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::ccc::hosted::marketplace::v2::UserLicense* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::UserLicense>> AsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::UserLicense>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::UserLicense>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::UserLicense>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get the user's licensing status for their permission to use a given app.
      virtual void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::UserLicense>* AsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ccc::hosted::marketplace::v2::UserLicense>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::ccc::hosted::marketplace::v2::UserLicense* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>> AsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>> PrepareAsyncGet(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>* AsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ccc::hosted::marketplace::v2::UserLicense>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get the user's licensing status for their permission to use a given app.
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::UserLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::ccc::hosted::marketplace::v2::UserLicense>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* request, ::ccc::hosted::marketplace::v2::UserLicense* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::UserLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::UserLicense* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::UserLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::UserLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::UserLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ccc::hosted::marketplace::v2::UserLicenseGetRequest, ::ccc::hosted::marketplace::v2::UserLicense>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* /*request*/, ::ccc::hosted::marketplace::v2::UserLicense* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ccc::hosted::marketplace::v2::UserLicenseGetRequest,::ccc::hosted::marketplace::v2::UserLicense>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<Service > StreamedService;
};

}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc


#endif  // GRPC_google_2fapps_2fmarket_2fv2_2fservices_2eproto__INCLUDED
