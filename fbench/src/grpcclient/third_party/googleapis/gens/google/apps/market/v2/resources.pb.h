// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/market/v2/resources.proto

#ifndef PROTOBUF_INCLUDED_google_2fapps_2fmarket_2fv2_2fresources_2eproto
#define PROTOBUF_INCLUDED_google_2fapps_2fmarket_2fv2_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fresources_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto();
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {
class CustomerLicense;
class CustomerLicenseDefaultTypeInternal;
extern CustomerLicenseDefaultTypeInternal _CustomerLicense_default_instance_;
class CustomerLicense_Editions;
class CustomerLicense_EditionsDefaultTypeInternal;
extern CustomerLicense_EditionsDefaultTypeInternal _CustomerLicense_Editions_default_instance_;
class LicenseNotification;
class LicenseNotificationDefaultTypeInternal;
extern LicenseNotificationDefaultTypeInternal _LicenseNotification_default_instance_;
class LicenseNotificationList;
class LicenseNotificationListDefaultTypeInternal;
extern LicenseNotificationListDefaultTypeInternal _LicenseNotificationList_default_instance_;
class LicenseNotification_Deletes;
class LicenseNotification_DeletesDefaultTypeInternal;
extern LicenseNotification_DeletesDefaultTypeInternal _LicenseNotification_Deletes_default_instance_;
class LicenseNotification_Expiries;
class LicenseNotification_ExpiriesDefaultTypeInternal;
extern LicenseNotification_ExpiriesDefaultTypeInternal _LicenseNotification_Expiries_default_instance_;
class LicenseNotification_Provisions;
class LicenseNotification_ProvisionsDefaultTypeInternal;
extern LicenseNotification_ProvisionsDefaultTypeInternal _LicenseNotification_Provisions_default_instance_;
class LicenseNotification_Reassignments;
class LicenseNotification_ReassignmentsDefaultTypeInternal;
extern LicenseNotification_ReassignmentsDefaultTypeInternal _LicenseNotification_Reassignments_default_instance_;
class UserLicense;
class UserLicenseDefaultTypeInternal;
extern UserLicenseDefaultTypeInternal _UserLicense_default_instance_;
}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc
namespace google {
namespace protobuf {
template<> ::ccc::hosted::marketplace::v2::CustomerLicense* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::CustomerLicense>(Arena*);
template<> ::ccc::hosted::marketplace::v2::CustomerLicense_Editions* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::CustomerLicense_Editions>(Arena*);
template<> ::ccc::hosted::marketplace::v2::LicenseNotification* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::LicenseNotification>(Arena*);
template<> ::ccc::hosted::marketplace::v2::LicenseNotificationList* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::LicenseNotificationList>(Arena*);
template<> ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::LicenseNotification_Deletes>(Arena*);
template<> ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::LicenseNotification_Expiries>(Arena*);
template<> ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::LicenseNotification_Provisions>(Arena*);
template<> ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments>(Arena*);
template<> ::ccc::hosted::marketplace::v2::UserLicense* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::UserLicense>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {

// ===================================================================

class CustomerLicense_Editions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.CustomerLicense.Editions) */ {
 public:
  CustomerLicense_Editions();
  virtual ~CustomerLicense_Editions();

  CustomerLicense_Editions(const CustomerLicense_Editions& from);

  inline CustomerLicense_Editions& operator=(const CustomerLicense_Editions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomerLicense_Editions(CustomerLicense_Editions&& from) noexcept
    : CustomerLicense_Editions() {
    *this = ::std::move(from);
  }

  inline CustomerLicense_Editions& operator=(CustomerLicense_Editions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CustomerLicense_Editions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerLicense_Editions* internal_default_instance() {
    return reinterpret_cast<const CustomerLicense_Editions*>(
               &_CustomerLicense_Editions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CustomerLicense_Editions* other);
  friend void swap(CustomerLicense_Editions& a, CustomerLicense_Editions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomerLicense_Editions* New() const final {
    return CreateMaybeMessage<CustomerLicense_Editions>(nullptr);
  }

  CustomerLicense_Editions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomerLicense_Editions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomerLicense_Editions& from);
  void MergeFrom(const CustomerLicense_Editions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerLicense_Editions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string edition_id = 405 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_edition_id();
  PROTOBUF_DEPRECATED static const int kEditionIdFieldNumber = 405;
  PROTOBUF_DEPRECATED const ::std::string& edition_id() const;
  PROTOBUF_DEPRECATED void set_edition_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_edition_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_edition_id(const char* value);
  PROTOBUF_DEPRECATED void set_edition_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_edition_id();
  PROTOBUF_DEPRECATED ::std::string* release_edition_id();
  PROTOBUF_DEPRECATED void set_allocated_edition_id(::std::string* edition_id);

  // int32 seat_count = 406 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_seat_count();
  PROTOBUF_DEPRECATED static const int kSeatCountFieldNumber = 406;
  PROTOBUF_DEPRECATED ::google::protobuf::int32 seat_count() const;
  PROTOBUF_DEPRECATED void set_seat_count(::google::protobuf::int32 value);

  // int32 assigned_seats = 409 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_assigned_seats();
  PROTOBUF_DEPRECATED static const int kAssignedSeatsFieldNumber = 409;
  PROTOBUF_DEPRECATED ::google::protobuf::int32 assigned_seats() const;
  PROTOBUF_DEPRECATED void set_assigned_seats(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr edition_id_;
  ::google::protobuf::int32 seat_count_;
  ::google::protobuf::int32 assigned_seats_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class CustomerLicense final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.CustomerLicense) */ {
 public:
  CustomerLicense();
  virtual ~CustomerLicense();

  CustomerLicense(const CustomerLicense& from);

  inline CustomerLicense& operator=(const CustomerLicense& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomerLicense(CustomerLicense&& from) noexcept
    : CustomerLicense() {
    *this = ::std::move(from);
  }

  inline CustomerLicense& operator=(CustomerLicense&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CustomerLicense& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerLicense* internal_default_instance() {
    return reinterpret_cast<const CustomerLicense*>(
               &_CustomerLicense_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CustomerLicense* other);
  friend void swap(CustomerLicense& a, CustomerLicense& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomerLicense* New() const final {
    return CreateMaybeMessage<CustomerLicense>(nullptr);
  }

  CustomerLicense* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomerLicense>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomerLicense& from);
  void MergeFrom(const CustomerLicense& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerLicense* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CustomerLicense_Editions Editions;

  // accessors -------------------------------------------------------

  // repeated .ccc.hosted.marketplace.v2.CustomerLicense.Editions editions = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int editions_size() const;
  PROTOBUF_DEPRECATED void clear_editions();
  PROTOBUF_DEPRECATED static const int kEditionsFieldNumber = 4;
  PROTOBUF_DEPRECATED ::ccc::hosted::marketplace::v2::CustomerLicense_Editions* mutable_editions(int index);
  PROTOBUF_DEPRECATED ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::CustomerLicense_Editions >*
      mutable_editions();
  PROTOBUF_DEPRECATED const ::ccc::hosted::marketplace::v2::CustomerLicense_Editions& editions(int index) const;
  PROTOBUF_DEPRECATED ::ccc::hosted::marketplace::v2::CustomerLicense_Editions* add_editions();
  PROTOBUF_DEPRECATED const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::CustomerLicense_Editions >&
      editions() const;

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string application_id = 3;
  void clear_application_id();
  static const int kApplicationIdFieldNumber = 3;
  const ::std::string& application_id() const;
  void set_application_id(const ::std::string& value);
  #if LANG_CXX11
  void set_application_id(::std::string&& value);
  #endif
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  ::std::string* mutable_application_id();
  ::std::string* release_application_id();
  void set_allocated_application_id(::std::string* application_id);

  // string id = 101;
  void clear_id();
  static const int kIdFieldNumber = 101;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string customer_id = 102;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 102;
  const ::std::string& customer_id() const;
  void set_customer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_id(::std::string&& value);
  #endif
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  ::std::string* mutable_customer_id();
  ::std::string* release_customer_id();
  void set_allocated_customer_id(::std::string* customer_id);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.CustomerLicense)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::CustomerLicense_Editions > editions_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr application_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr customer_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LicenseNotification_Deletes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.LicenseNotification.Deletes) */ {
 public:
  LicenseNotification_Deletes();
  virtual ~LicenseNotification_Deletes();

  LicenseNotification_Deletes(const LicenseNotification_Deletes& from);

  inline LicenseNotification_Deletes& operator=(const LicenseNotification_Deletes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LicenseNotification_Deletes(LicenseNotification_Deletes&& from) noexcept
    : LicenseNotification_Deletes() {
    *this = ::std::move(from);
  }

  inline LicenseNotification_Deletes& operator=(LicenseNotification_Deletes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LicenseNotification_Deletes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseNotification_Deletes* internal_default_instance() {
    return reinterpret_cast<const LicenseNotification_Deletes*>(
               &_LicenseNotification_Deletes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LicenseNotification_Deletes* other);
  friend void swap(LicenseNotification_Deletes& a, LicenseNotification_Deletes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LicenseNotification_Deletes* New() const final {
    return CreateMaybeMessage<LicenseNotification_Deletes>(nullptr);
  }

  LicenseNotification_Deletes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LicenseNotification_Deletes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LicenseNotification_Deletes& from);
  void MergeFrom(const LicenseNotification_Deletes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseNotification_Deletes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string edition_id = 901 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_edition_id();
  PROTOBUF_DEPRECATED static const int kEditionIdFieldNumber = 901;
  PROTOBUF_DEPRECATED const ::std::string& edition_id() const;
  PROTOBUF_DEPRECATED void set_edition_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_edition_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_edition_id(const char* value);
  PROTOBUF_DEPRECATED void set_edition_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_edition_id();
  PROTOBUF_DEPRECATED ::std::string* release_edition_id();
  PROTOBUF_DEPRECATED void set_allocated_edition_id(::std::string* edition_id);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr edition_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LicenseNotification_Expiries final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.LicenseNotification.Expiries) */ {
 public:
  LicenseNotification_Expiries();
  virtual ~LicenseNotification_Expiries();

  LicenseNotification_Expiries(const LicenseNotification_Expiries& from);

  inline LicenseNotification_Expiries& operator=(const LicenseNotification_Expiries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LicenseNotification_Expiries(LicenseNotification_Expiries&& from) noexcept
    : LicenseNotification_Expiries() {
    *this = ::std::move(from);
  }

  inline LicenseNotification_Expiries& operator=(LicenseNotification_Expiries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LicenseNotification_Expiries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseNotification_Expiries* internal_default_instance() {
    return reinterpret_cast<const LicenseNotification_Expiries*>(
               &_LicenseNotification_Expiries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LicenseNotification_Expiries* other);
  friend void swap(LicenseNotification_Expiries& a, LicenseNotification_Expiries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LicenseNotification_Expiries* New() const final {
    return CreateMaybeMessage<LicenseNotification_Expiries>(nullptr);
  }

  LicenseNotification_Expiries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LicenseNotification_Expiries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LicenseNotification_Expiries& from);
  void MergeFrom(const LicenseNotification_Expiries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseNotification_Expiries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string edition_id = 701 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_edition_id();
  PROTOBUF_DEPRECATED static const int kEditionIdFieldNumber = 701;
  PROTOBUF_DEPRECATED const ::std::string& edition_id() const;
  PROTOBUF_DEPRECATED void set_edition_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_edition_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_edition_id(const char* value);
  PROTOBUF_DEPRECATED void set_edition_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_edition_id();
  PROTOBUF_DEPRECATED ::std::string* release_edition_id();
  PROTOBUF_DEPRECATED void set_allocated_edition_id(::std::string* edition_id);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr edition_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LicenseNotification_Provisions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.LicenseNotification.Provisions) */ {
 public:
  LicenseNotification_Provisions();
  virtual ~LicenseNotification_Provisions();

  LicenseNotification_Provisions(const LicenseNotification_Provisions& from);

  inline LicenseNotification_Provisions& operator=(const LicenseNotification_Provisions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LicenseNotification_Provisions(LicenseNotification_Provisions&& from) noexcept
    : LicenseNotification_Provisions() {
    *this = ::std::move(from);
  }

  inline LicenseNotification_Provisions& operator=(LicenseNotification_Provisions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LicenseNotification_Provisions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseNotification_Provisions* internal_default_instance() {
    return reinterpret_cast<const LicenseNotification_Provisions*>(
               &_LicenseNotification_Provisions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LicenseNotification_Provisions* other);
  friend void swap(LicenseNotification_Provisions& a, LicenseNotification_Provisions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LicenseNotification_Provisions* New() const final {
    return CreateMaybeMessage<LicenseNotification_Provisions>(nullptr);
  }

  LicenseNotification_Provisions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LicenseNotification_Provisions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LicenseNotification_Provisions& from);
  void MergeFrom(const LicenseNotification_Provisions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseNotification_Provisions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string edition_id = 601 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_edition_id();
  PROTOBUF_DEPRECATED static const int kEditionIdFieldNumber = 601;
  PROTOBUF_DEPRECATED const ::std::string& edition_id() const;
  PROTOBUF_DEPRECATED void set_edition_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_edition_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_edition_id(const char* value);
  PROTOBUF_DEPRECATED void set_edition_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_edition_id();
  PROTOBUF_DEPRECATED ::std::string* release_edition_id();
  PROTOBUF_DEPRECATED void set_allocated_edition_id(::std::string* edition_id);

  // int64 seat_count = 602;
  void clear_seat_count();
  static const int kSeatCountFieldNumber = 602;
  ::google::protobuf::int64 seat_count() const;
  void set_seat_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr edition_id_;
  ::google::protobuf::int64 seat_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LicenseNotification_Reassignments final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments) */ {
 public:
  LicenseNotification_Reassignments();
  virtual ~LicenseNotification_Reassignments();

  LicenseNotification_Reassignments(const LicenseNotification_Reassignments& from);

  inline LicenseNotification_Reassignments& operator=(const LicenseNotification_Reassignments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LicenseNotification_Reassignments(LicenseNotification_Reassignments&& from) noexcept
    : LicenseNotification_Reassignments() {
    *this = ::std::move(from);
  }

  inline LicenseNotification_Reassignments& operator=(LicenseNotification_Reassignments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LicenseNotification_Reassignments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseNotification_Reassignments* internal_default_instance() {
    return reinterpret_cast<const LicenseNotification_Reassignments*>(
               &_LicenseNotification_Reassignments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LicenseNotification_Reassignments* other);
  friend void swap(LicenseNotification_Reassignments& a, LicenseNotification_Reassignments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LicenseNotification_Reassignments* New() const final {
    return CreateMaybeMessage<LicenseNotification_Reassignments>(nullptr);
  }

  LicenseNotification_Reassignments* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LicenseNotification_Reassignments>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LicenseNotification_Reassignments& from);
  void MergeFrom(const LicenseNotification_Reassignments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseNotification_Reassignments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string user_id = 801;
  void clear_user_id();
  static const int kUserIdFieldNumber = 801;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string type = 802;
  void clear_type();
  static const int kTypeFieldNumber = 802;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string edition_id = 803 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_edition_id();
  PROTOBUF_DEPRECATED static const int kEditionIdFieldNumber = 803;
  PROTOBUF_DEPRECATED const ::std::string& edition_id() const;
  PROTOBUF_DEPRECATED void set_edition_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_edition_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_edition_id(const char* value);
  PROTOBUF_DEPRECATED void set_edition_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_edition_id();
  PROTOBUF_DEPRECATED ::std::string* release_edition_id();
  PROTOBUF_DEPRECATED void set_allocated_edition_id(::std::string* edition_id);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr edition_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LicenseNotification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.LicenseNotification) */ {
 public:
  LicenseNotification();
  virtual ~LicenseNotification();

  LicenseNotification(const LicenseNotification& from);

  inline LicenseNotification& operator=(const LicenseNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LicenseNotification(LicenseNotification&& from) noexcept
    : LicenseNotification() {
    *this = ::std::move(from);
  }

  inline LicenseNotification& operator=(LicenseNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LicenseNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseNotification* internal_default_instance() {
    return reinterpret_cast<const LicenseNotification*>(
               &_LicenseNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LicenseNotification* other);
  friend void swap(LicenseNotification& a, LicenseNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LicenseNotification* New() const final {
    return CreateMaybeMessage<LicenseNotification>(nullptr);
  }

  LicenseNotification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LicenseNotification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LicenseNotification& from);
  void MergeFrom(const LicenseNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LicenseNotification_Deletes Deletes;
  typedef LicenseNotification_Expiries Expiries;
  typedef LicenseNotification_Provisions Provisions;
  typedef LicenseNotification_Reassignments Reassignments;

  // accessors -------------------------------------------------------

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Provisions provisions = 6;
  int provisions_size() const;
  void clear_provisions();
  static const int kProvisionsFieldNumber = 6;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions* mutable_provisions(int index);
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions >*
      mutable_provisions();
  const ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions& provisions(int index) const;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions* add_provisions();
  const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions >&
      provisions() const;

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Expiries expiries = 7;
  int expiries_size() const;
  void clear_expiries();
  static const int kExpiriesFieldNumber = 7;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries* mutable_expiries(int index);
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries >*
      mutable_expiries();
  const ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries& expiries(int index) const;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries* add_expiries();
  const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries >&
      expiries() const;

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Reassignments reassignments = 8;
  int reassignments_size() const;
  void clear_reassignments();
  static const int kReassignmentsFieldNumber = 8;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments* mutable_reassignments(int index);
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments >*
      mutable_reassignments();
  const ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments& reassignments(int index) const;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments* add_reassignments();
  const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments >&
      reassignments() const;

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Deletes deletes = 9;
  int deletes_size() const;
  void clear_deletes();
  static const int kDeletesFieldNumber = 9;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes* mutable_deletes(int index);
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes >*
      mutable_deletes();
  const ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes& deletes(int index) const;
  ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes* add_deletes();
  const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes >&
      deletes() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string application_id = 2;
  void clear_application_id();
  static const int kApplicationIdFieldNumber = 2;
  const ::std::string& application_id() const;
  void set_application_id(const ::std::string& value);
  #if LANG_CXX11
  void set_application_id(::std::string&& value);
  #endif
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  ::std::string* mutable_application_id();
  ::std::string* release_application_id();
  void set_allocated_application_id(::std::string* application_id);

  // string customer_id = 4;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 4;
  const ::std::string& customer_id() const;
  void set_customer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_id(::std::string&& value);
  #endif
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  ::std::string* mutable_customer_id();
  ::std::string* release_customer_id();
  void set_allocated_customer_id(::std::string* customer_id);

  // string kind = 5;
  void clear_kind();
  static const int kKindFieldNumber = 5;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.LicenseNotification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions > provisions_;
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries > expiries_;
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments > reassignments_;
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes > deletes_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr application_id_;
  ::google::protobuf::internal::ArenaStringPtr customer_id_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class LicenseNotificationList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.LicenseNotificationList) */ {
 public:
  LicenseNotificationList();
  virtual ~LicenseNotificationList();

  LicenseNotificationList(const LicenseNotificationList& from);

  inline LicenseNotificationList& operator=(const LicenseNotificationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LicenseNotificationList(LicenseNotificationList&& from) noexcept
    : LicenseNotificationList() {
    *this = ::std::move(from);
  }

  inline LicenseNotificationList& operator=(LicenseNotificationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LicenseNotificationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseNotificationList* internal_default_instance() {
    return reinterpret_cast<const LicenseNotificationList*>(
               &_LicenseNotificationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LicenseNotificationList* other);
  friend void swap(LicenseNotificationList& a, LicenseNotificationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LicenseNotificationList* New() const final {
    return CreateMaybeMessage<LicenseNotificationList>(nullptr);
  }

  LicenseNotificationList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LicenseNotificationList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LicenseNotificationList& from);
  void MergeFrom(const LicenseNotificationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseNotificationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification notifications = 1007;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 1007;
  ::ccc::hosted::marketplace::v2::LicenseNotification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification >*
      mutable_notifications();
  const ::ccc::hosted::marketplace::v2::LicenseNotification& notifications(int index) const;
  ::ccc::hosted::marketplace::v2::LicenseNotification* add_notifications();
  const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification >&
      notifications() const;

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string next_page_token = 100602;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 100602;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.LicenseNotificationList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification > notifications_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// -------------------------------------------------------------------

class UserLicense final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.UserLicense) */ {
 public:
  UserLicense();
  virtual ~UserLicense();

  UserLicense(const UserLicense& from);

  inline UserLicense& operator=(const UserLicense& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLicense(UserLicense&& from) noexcept
    : UserLicense() {
    *this = ::std::move(from);
  }

  inline UserLicense& operator=(UserLicense&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLicense& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLicense* internal_default_instance() {
    return reinterpret_cast<const UserLicense*>(
               &_UserLicense_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UserLicense* other);
  friend void swap(UserLicense& a, UserLicense& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLicense* New() const final {
    return CreateMaybeMessage<UserLicense>(nullptr);
  }

  UserLicense* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLicense>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLicense& from);
  void MergeFrom(const UserLicense& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLicense* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // string state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // string edition_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_edition_id();
  PROTOBUF_DEPRECATED static const int kEditionIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& edition_id() const;
  PROTOBUF_DEPRECATED void set_edition_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_edition_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_edition_id(const char* value);
  PROTOBUF_DEPRECATED void set_edition_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_edition_id();
  PROTOBUF_DEPRECATED ::std::string* release_edition_id();
  PROTOBUF_DEPRECATED void set_allocated_edition_id(::std::string* edition_id);

  // string customer_id = 5;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 5;
  const ::std::string& customer_id() const;
  void set_customer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_id(::std::string&& value);
  #endif
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  ::std::string* mutable_customer_id();
  ::std::string* release_customer_id();
  void set_allocated_customer_id(::std::string* customer_id);

  // string application_id = 6;
  void clear_application_id();
  static const int kApplicationIdFieldNumber = 6;
  const ::std::string& application_id() const;
  void set_application_id(const ::std::string& value);
  #if LANG_CXX11
  void set_application_id(::std::string&& value);
  #endif
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  ::std::string* mutable_application_id();
  ::std::string* release_application_id();
  void set_allocated_application_id(::std::string* application_id);

  // string id = 101;
  void clear_id();
  static const int kIdFieldNumber = 101;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string user_id = 102;
  void clear_user_id();
  static const int kUserIdFieldNumber = 102;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // bool enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.UserLicense)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr edition_id_;
  ::google::protobuf::internal::ArenaStringPtr customer_id_;
  ::google::protobuf::internal::ArenaStringPtr application_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomerLicense_Editions

// string edition_id = 405 [deprecated = true];
inline void CustomerLicense_Editions::clear_edition_id() {
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicense_Editions::edition_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
  return edition_id_.GetNoArena();
}
inline void CustomerLicense_Editions::set_edition_id(const ::std::string& value) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
}
#if LANG_CXX11
inline void CustomerLicense_Editions::set_edition_id(::std::string&& value) {
  
  edition_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
}
#endif
inline void CustomerLicense_Editions::set_edition_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
}
inline void CustomerLicense_Editions::set_edition_id(const char* value, size_t size) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
}
inline ::std::string* CustomerLicense_Editions::mutable_edition_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
  return edition_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicense_Editions::release_edition_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
  
  return edition_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicense_Editions::set_allocated_edition_id(::std::string* edition_id) {
  if (edition_id != nullptr) {
    
  } else {
    
  }
  edition_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), edition_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id)
}

// int32 seat_count = 406 [deprecated = true];
inline void CustomerLicense_Editions::clear_seat_count() {
  seat_count_ = 0;
}
inline ::google::protobuf::int32 CustomerLicense_Editions::seat_count() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.Editions.seat_count)
  return seat_count_;
}
inline void CustomerLicense_Editions::set_seat_count(::google::protobuf::int32 value) {
  
  seat_count_ = value;
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.Editions.seat_count)
}

// int32 assigned_seats = 409 [deprecated = true];
inline void CustomerLicense_Editions::clear_assigned_seats() {
  assigned_seats_ = 0;
}
inline ::google::protobuf::int32 CustomerLicense_Editions::assigned_seats() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.Editions.assigned_seats)
  return assigned_seats_;
}
inline void CustomerLicense_Editions::set_assigned_seats(::google::protobuf::int32 value) {
  
  assigned_seats_ = value;
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.Editions.assigned_seats)
}

// -------------------------------------------------------------------

// CustomerLicense

// string kind = 1;
inline void CustomerLicense::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicense::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.kind)
  return kind_.GetNoArena();
}
inline void CustomerLicense::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.kind)
}
#if LANG_CXX11
inline void CustomerLicense::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicense.kind)
}
#endif
inline void CustomerLicense::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicense.kind)
}
inline void CustomerLicense::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicense.kind)
}
inline ::std::string* CustomerLicense::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicense.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicense::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicense.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicense::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicense.kind)
}

// string state = 2;
inline void CustomerLicense::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicense::state() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.state)
  return state_.GetNoArena();
}
inline void CustomerLicense::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.state)
}
#if LANG_CXX11
inline void CustomerLicense::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicense.state)
}
#endif
inline void CustomerLicense::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicense.state)
}
inline void CustomerLicense::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicense.state)
}
inline ::std::string* CustomerLicense::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicense.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicense::release_state() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicense.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicense::set_allocated_state(::std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicense.state)
}

// string application_id = 3;
inline void CustomerLicense::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicense::application_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
  return application_id_.GetNoArena();
}
inline void CustomerLicense::set_application_id(const ::std::string& value) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
}
#if LANG_CXX11
inline void CustomerLicense::set_application_id(::std::string&& value) {
  
  application_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
}
#endif
inline void CustomerLicense::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
}
inline void CustomerLicense::set_application_id(const char* value, size_t size) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
}
inline ::std::string* CustomerLicense::mutable_application_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
  return application_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicense::release_application_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
  
  return application_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicense::set_allocated_application_id(::std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicense.application_id)
}

// repeated .ccc.hosted.marketplace.v2.CustomerLicense.Editions editions = 4 [deprecated = true];
inline int CustomerLicense::editions_size() const {
  return editions_.size();
}
inline void CustomerLicense::clear_editions() {
  editions_.Clear();
}
inline ::ccc::hosted::marketplace::v2::CustomerLicense_Editions* CustomerLicense::mutable_editions(int index) {
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicense.editions)
  return editions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::CustomerLicense_Editions >*
CustomerLicense::mutable_editions() {
  // @@protoc_insertion_point(field_mutable_list:ccc.hosted.marketplace.v2.CustomerLicense.editions)
  return &editions_;
}
inline const ::ccc::hosted::marketplace::v2::CustomerLicense_Editions& CustomerLicense::editions(int index) const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.editions)
  return editions_.Get(index);
}
inline ::ccc::hosted::marketplace::v2::CustomerLicense_Editions* CustomerLicense::add_editions() {
  // @@protoc_insertion_point(field_add:ccc.hosted.marketplace.v2.CustomerLicense.editions)
  return editions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::CustomerLicense_Editions >&
CustomerLicense::editions() const {
  // @@protoc_insertion_point(field_list:ccc.hosted.marketplace.v2.CustomerLicense.editions)
  return editions_;
}

// string id = 101;
inline void CustomerLicense::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicense::id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.id)
  return id_.GetNoArena();
}
inline void CustomerLicense::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.id)
}
#if LANG_CXX11
inline void CustomerLicense::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicense.id)
}
#endif
inline void CustomerLicense::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicense.id)
}
inline void CustomerLicense::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicense.id)
}
inline ::std::string* CustomerLicense::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicense.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicense::release_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicense.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicense::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicense.id)
}

// string customer_id = 102;
inline void CustomerLicense::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicense::customer_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
  return customer_id_.GetNoArena();
}
inline void CustomerLicense::set_customer_id(const ::std::string& value) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
}
#if LANG_CXX11
inline void CustomerLicense::set_customer_id(::std::string&& value) {
  
  customer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
}
#endif
inline void CustomerLicense::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
}
inline void CustomerLicense::set_customer_id(const char* value, size_t size) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
}
inline ::std::string* CustomerLicense::mutable_customer_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicense::release_customer_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
  
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicense::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicense.customer_id)
}

// -------------------------------------------------------------------

// LicenseNotification_Deletes

// string kind = 1;
inline void LicenseNotification_Deletes::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Deletes::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
  return kind_.GetNoArena();
}
inline void LicenseNotification_Deletes::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
}
#if LANG_CXX11
inline void LicenseNotification_Deletes::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
}
#endif
inline void LicenseNotification_Deletes::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
}
inline void LicenseNotification_Deletes::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
}
inline ::std::string* LicenseNotification_Deletes::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Deletes::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Deletes::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind)
}

// string edition_id = 901 [deprecated = true];
inline void LicenseNotification_Deletes::clear_edition_id() {
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Deletes::edition_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
  return edition_id_.GetNoArena();
}
inline void LicenseNotification_Deletes::set_edition_id(const ::std::string& value) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
}
#if LANG_CXX11
inline void LicenseNotification_Deletes::set_edition_id(::std::string&& value) {
  
  edition_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
}
#endif
inline void LicenseNotification_Deletes::set_edition_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
}
inline void LicenseNotification_Deletes::set_edition_id(const char* value, size_t size) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
}
inline ::std::string* LicenseNotification_Deletes::mutable_edition_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
  return edition_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Deletes::release_edition_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
  
  return edition_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Deletes::set_allocated_edition_id(::std::string* edition_id) {
  if (edition_id != nullptr) {
    
  } else {
    
  }
  edition_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), edition_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id)
}

// -------------------------------------------------------------------

// LicenseNotification_Expiries

// string kind = 1;
inline void LicenseNotification_Expiries::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Expiries::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
  return kind_.GetNoArena();
}
inline void LicenseNotification_Expiries::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
}
#if LANG_CXX11
inline void LicenseNotification_Expiries::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
}
#endif
inline void LicenseNotification_Expiries::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
}
inline void LicenseNotification_Expiries::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
}
inline ::std::string* LicenseNotification_Expiries::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Expiries::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Expiries::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind)
}

// string edition_id = 701 [deprecated = true];
inline void LicenseNotification_Expiries::clear_edition_id() {
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Expiries::edition_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
  return edition_id_.GetNoArena();
}
inline void LicenseNotification_Expiries::set_edition_id(const ::std::string& value) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
}
#if LANG_CXX11
inline void LicenseNotification_Expiries::set_edition_id(::std::string&& value) {
  
  edition_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
}
#endif
inline void LicenseNotification_Expiries::set_edition_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
}
inline void LicenseNotification_Expiries::set_edition_id(const char* value, size_t size) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
}
inline ::std::string* LicenseNotification_Expiries::mutable_edition_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
  return edition_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Expiries::release_edition_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
  
  return edition_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Expiries::set_allocated_edition_id(::std::string* edition_id) {
  if (edition_id != nullptr) {
    
  } else {
    
  }
  edition_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), edition_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id)
}

// -------------------------------------------------------------------

// LicenseNotification_Provisions

// string kind = 1;
inline void LicenseNotification_Provisions::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Provisions::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
  return kind_.GetNoArena();
}
inline void LicenseNotification_Provisions::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
}
#if LANG_CXX11
inline void LicenseNotification_Provisions::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
}
#endif
inline void LicenseNotification_Provisions::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
}
inline void LicenseNotification_Provisions::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
}
inline ::std::string* LicenseNotification_Provisions::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Provisions::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Provisions::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind)
}

// string edition_id = 601 [deprecated = true];
inline void LicenseNotification_Provisions::clear_edition_id() {
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Provisions::edition_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
  return edition_id_.GetNoArena();
}
inline void LicenseNotification_Provisions::set_edition_id(const ::std::string& value) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
}
#if LANG_CXX11
inline void LicenseNotification_Provisions::set_edition_id(::std::string&& value) {
  
  edition_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
}
#endif
inline void LicenseNotification_Provisions::set_edition_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
}
inline void LicenseNotification_Provisions::set_edition_id(const char* value, size_t size) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
}
inline ::std::string* LicenseNotification_Provisions::mutable_edition_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
  return edition_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Provisions::release_edition_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
  
  return edition_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Provisions::set_allocated_edition_id(::std::string* edition_id) {
  if (edition_id != nullptr) {
    
  } else {
    
  }
  edition_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), edition_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id)
}

// int64 seat_count = 602;
inline void LicenseNotification_Provisions::clear_seat_count() {
  seat_count_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LicenseNotification_Provisions::seat_count() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.seat_count)
  return seat_count_;
}
inline void LicenseNotification_Provisions::set_seat_count(::google::protobuf::int64 value) {
  
  seat_count_ = value;
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Provisions.seat_count)
}

// -------------------------------------------------------------------

// LicenseNotification_Reassignments

// string kind = 1;
inline void LicenseNotification_Reassignments::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Reassignments::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
  return kind_.GetNoArena();
}
inline void LicenseNotification_Reassignments::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
}
#if LANG_CXX11
inline void LicenseNotification_Reassignments::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
}
#endif
inline void LicenseNotification_Reassignments::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
}
inline void LicenseNotification_Reassignments::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
}
inline ::std::string* LicenseNotification_Reassignments::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Reassignments::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Reassignments::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind)
}

// string user_id = 801;
inline void LicenseNotification_Reassignments::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Reassignments::user_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
  return user_id_.GetNoArena();
}
inline void LicenseNotification_Reassignments::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
}
#if LANG_CXX11
inline void LicenseNotification_Reassignments::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
}
#endif
inline void LicenseNotification_Reassignments::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
}
inline void LicenseNotification_Reassignments::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
}
inline ::std::string* LicenseNotification_Reassignments::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Reassignments::release_user_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Reassignments::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id)
}

// string type = 802;
inline void LicenseNotification_Reassignments::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Reassignments::type() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
  return type_.GetNoArena();
}
inline void LicenseNotification_Reassignments::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
}
#if LANG_CXX11
inline void LicenseNotification_Reassignments::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
}
#endif
inline void LicenseNotification_Reassignments::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
}
inline void LicenseNotification_Reassignments::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
}
inline ::std::string* LicenseNotification_Reassignments::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Reassignments::release_type() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Reassignments::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type)
}

// string edition_id = 803 [deprecated = true];
inline void LicenseNotification_Reassignments::clear_edition_id() {
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification_Reassignments::edition_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
  return edition_id_.GetNoArena();
}
inline void LicenseNotification_Reassignments::set_edition_id(const ::std::string& value) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
}
#if LANG_CXX11
inline void LicenseNotification_Reassignments::set_edition_id(::std::string&& value) {
  
  edition_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
}
#endif
inline void LicenseNotification_Reassignments::set_edition_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
}
inline void LicenseNotification_Reassignments::set_edition_id(const char* value, size_t size) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
}
inline ::std::string* LicenseNotification_Reassignments::mutable_edition_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
  return edition_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification_Reassignments::release_edition_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
  
  return edition_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification_Reassignments::set_allocated_edition_id(::std::string* edition_id) {
  if (edition_id != nullptr) {
    
  } else {
    
  }
  edition_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), edition_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id)
}

// -------------------------------------------------------------------

// LicenseNotification

// string id = 1;
inline void LicenseNotification::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification::id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.id)
  return id_.GetNoArena();
}
inline void LicenseNotification::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.id)
}
#if LANG_CXX11
inline void LicenseNotification::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.id)
}
#endif
inline void LicenseNotification::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.id)
}
inline void LicenseNotification::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.id)
}
inline ::std::string* LicenseNotification::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification::release_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.id)
}

// string application_id = 2;
inline void LicenseNotification::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification::application_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
  return application_id_.GetNoArena();
}
inline void LicenseNotification::set_application_id(const ::std::string& value) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
}
#if LANG_CXX11
inline void LicenseNotification::set_application_id(::std::string&& value) {
  
  application_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
}
#endif
inline void LicenseNotification::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
}
inline void LicenseNotification::set_application_id(const char* value, size_t size) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
}
inline ::std::string* LicenseNotification::mutable_application_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
  return application_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification::release_application_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
  
  return application_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification::set_allocated_application_id(::std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.application_id)
}

// int64 timestamp = 3;
inline void LicenseNotification::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LicenseNotification::timestamp() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.timestamp)
  return timestamp_;
}
inline void LicenseNotification::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.timestamp)
}

// string customer_id = 4;
inline void LicenseNotification::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification::customer_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
  return customer_id_.GetNoArena();
}
inline void LicenseNotification::set_customer_id(const ::std::string& value) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
}
#if LANG_CXX11
inline void LicenseNotification::set_customer_id(::std::string&& value) {
  
  customer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
}
#endif
inline void LicenseNotification::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
}
inline void LicenseNotification::set_customer_id(const char* value, size_t size) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
}
inline ::std::string* LicenseNotification::mutable_customer_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification::release_customer_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
  
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.customer_id)
}

// string kind = 5;
inline void LicenseNotification::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotification::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.kind)
  return kind_.GetNoArena();
}
inline void LicenseNotification::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotification.kind)
}
#if LANG_CXX11
inline void LicenseNotification::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotification.kind)
}
#endif
inline void LicenseNotification::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotification.kind)
}
inline void LicenseNotification::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotification.kind)
}
inline ::std::string* LicenseNotification::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotification::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotification.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotification::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotification.kind)
}

// repeated .ccc.hosted.marketplace.v2.LicenseNotification.Provisions provisions = 6;
inline int LicenseNotification::provisions_size() const {
  return provisions_.size();
}
inline void LicenseNotification::clear_provisions() {
  provisions_.Clear();
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions* LicenseNotification::mutable_provisions(int index) {
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.provisions)
  return provisions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions >*
LicenseNotification::mutable_provisions() {
  // @@protoc_insertion_point(field_mutable_list:ccc.hosted.marketplace.v2.LicenseNotification.provisions)
  return &provisions_;
}
inline const ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions& LicenseNotification::provisions(int index) const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.provisions)
  return provisions_.Get(index);
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions* LicenseNotification::add_provisions() {
  // @@protoc_insertion_point(field_add:ccc.hosted.marketplace.v2.LicenseNotification.provisions)
  return provisions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions >&
LicenseNotification::provisions() const {
  // @@protoc_insertion_point(field_list:ccc.hosted.marketplace.v2.LicenseNotification.provisions)
  return provisions_;
}

// repeated .ccc.hosted.marketplace.v2.LicenseNotification.Expiries expiries = 7;
inline int LicenseNotification::expiries_size() const {
  return expiries_.size();
}
inline void LicenseNotification::clear_expiries() {
  expiries_.Clear();
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries* LicenseNotification::mutable_expiries(int index) {
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.expiries)
  return expiries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries >*
LicenseNotification::mutable_expiries() {
  // @@protoc_insertion_point(field_mutable_list:ccc.hosted.marketplace.v2.LicenseNotification.expiries)
  return &expiries_;
}
inline const ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries& LicenseNotification::expiries(int index) const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.expiries)
  return expiries_.Get(index);
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries* LicenseNotification::add_expiries() {
  // @@protoc_insertion_point(field_add:ccc.hosted.marketplace.v2.LicenseNotification.expiries)
  return expiries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries >&
LicenseNotification::expiries() const {
  // @@protoc_insertion_point(field_list:ccc.hosted.marketplace.v2.LicenseNotification.expiries)
  return expiries_;
}

// repeated .ccc.hosted.marketplace.v2.LicenseNotification.Reassignments reassignments = 8;
inline int LicenseNotification::reassignments_size() const {
  return reassignments_.size();
}
inline void LicenseNotification::clear_reassignments() {
  reassignments_.Clear();
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments* LicenseNotification::mutable_reassignments(int index) {
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.reassignments)
  return reassignments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments >*
LicenseNotification::mutable_reassignments() {
  // @@protoc_insertion_point(field_mutable_list:ccc.hosted.marketplace.v2.LicenseNotification.reassignments)
  return &reassignments_;
}
inline const ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments& LicenseNotification::reassignments(int index) const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.reassignments)
  return reassignments_.Get(index);
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments* LicenseNotification::add_reassignments() {
  // @@protoc_insertion_point(field_add:ccc.hosted.marketplace.v2.LicenseNotification.reassignments)
  return reassignments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments >&
LicenseNotification::reassignments() const {
  // @@protoc_insertion_point(field_list:ccc.hosted.marketplace.v2.LicenseNotification.reassignments)
  return reassignments_;
}

// repeated .ccc.hosted.marketplace.v2.LicenseNotification.Deletes deletes = 9;
inline int LicenseNotification::deletes_size() const {
  return deletes_.size();
}
inline void LicenseNotification::clear_deletes() {
  deletes_.Clear();
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes* LicenseNotification::mutable_deletes(int index) {
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotification.deletes)
  return deletes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes >*
LicenseNotification::mutable_deletes() {
  // @@protoc_insertion_point(field_mutable_list:ccc.hosted.marketplace.v2.LicenseNotification.deletes)
  return &deletes_;
}
inline const ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes& LicenseNotification::deletes(int index) const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotification.deletes)
  return deletes_.Get(index);
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes* LicenseNotification::add_deletes() {
  // @@protoc_insertion_point(field_add:ccc.hosted.marketplace.v2.LicenseNotification.deletes)
  return deletes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes >&
LicenseNotification::deletes() const {
  // @@protoc_insertion_point(field_list:ccc.hosted.marketplace.v2.LicenseNotification.deletes)
  return deletes_;
}

// -------------------------------------------------------------------

// LicenseNotificationList

// string kind = 1;
inline void LicenseNotificationList::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotificationList::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
  return kind_.GetNoArena();
}
inline void LicenseNotificationList::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
}
#if LANG_CXX11
inline void LicenseNotificationList::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
}
#endif
inline void LicenseNotificationList::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
}
inline void LicenseNotificationList::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
}
inline ::std::string* LicenseNotificationList::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotificationList::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotificationList::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotificationList.kind)
}

// repeated .ccc.hosted.marketplace.v2.LicenseNotification notifications = 1007;
inline int LicenseNotificationList::notifications_size() const {
  return notifications_.size();
}
inline void LicenseNotificationList::clear_notifications() {
  notifications_.Clear();
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification* LicenseNotificationList::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotificationList.notifications)
  return notifications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification >*
LicenseNotificationList::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:ccc.hosted.marketplace.v2.LicenseNotificationList.notifications)
  return &notifications_;
}
inline const ::ccc::hosted::marketplace::v2::LicenseNotification& LicenseNotificationList::notifications(int index) const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotificationList.notifications)
  return notifications_.Get(index);
}
inline ::ccc::hosted::marketplace::v2::LicenseNotification* LicenseNotificationList::add_notifications() {
  // @@protoc_insertion_point(field_add:ccc.hosted.marketplace.v2.LicenseNotificationList.notifications)
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccc::hosted::marketplace::v2::LicenseNotification >&
LicenseNotificationList::notifications() const {
  // @@protoc_insertion_point(field_list:ccc.hosted.marketplace.v2.LicenseNotificationList.notifications)
  return notifications_;
}

// string next_page_token = 100602;
inline void LicenseNotificationList::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotificationList::next_page_token() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void LicenseNotificationList::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
}
#if LANG_CXX11
inline void LicenseNotificationList::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
}
#endif
inline void LicenseNotificationList::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
}
inline void LicenseNotificationList::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
}
inline ::std::string* LicenseNotificationList::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotificationList::release_next_page_token() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotificationList::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token)
}

// -------------------------------------------------------------------

// UserLicense

// string kind = 1;
inline void UserLicense::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicense::kind() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.kind)
  return kind_.GetNoArena();
}
inline void UserLicense::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.kind)
}
#if LANG_CXX11
inline void UserLicense::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicense.kind)
}
#endif
inline void UserLicense::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicense.kind)
}
inline void UserLicense::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicense.kind)
}
inline ::std::string* UserLicense::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicense.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicense::release_kind() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicense.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicense::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicense.kind)
}

// bool enabled = 2;
inline void UserLicense::clear_enabled() {
  enabled_ = false;
}
inline bool UserLicense::enabled() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.enabled)
  return enabled_;
}
inline void UserLicense::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.enabled)
}

// string state = 3;
inline void UserLicense::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicense::state() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.state)
  return state_.GetNoArena();
}
inline void UserLicense::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.state)
}
#if LANG_CXX11
inline void UserLicense::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicense.state)
}
#endif
inline void UserLicense::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicense.state)
}
inline void UserLicense::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicense.state)
}
inline ::std::string* UserLicense::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicense.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicense::release_state() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicense.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicense::set_allocated_state(::std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicense.state)
}

// string edition_id = 4 [deprecated = true];
inline void UserLicense::clear_edition_id() {
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicense::edition_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.edition_id)
  return edition_id_.GetNoArena();
}
inline void UserLicense::set_edition_id(const ::std::string& value) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.edition_id)
}
#if LANG_CXX11
inline void UserLicense::set_edition_id(::std::string&& value) {
  
  edition_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicense.edition_id)
}
#endif
inline void UserLicense::set_edition_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicense.edition_id)
}
inline void UserLicense::set_edition_id(const char* value, size_t size) {
  
  edition_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicense.edition_id)
}
inline ::std::string* UserLicense::mutable_edition_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicense.edition_id)
  return edition_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicense::release_edition_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicense.edition_id)
  
  return edition_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicense::set_allocated_edition_id(::std::string* edition_id) {
  if (edition_id != nullptr) {
    
  } else {
    
  }
  edition_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), edition_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicense.edition_id)
}

// string customer_id = 5;
inline void UserLicense::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicense::customer_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.customer_id)
  return customer_id_.GetNoArena();
}
inline void UserLicense::set_customer_id(const ::std::string& value) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.customer_id)
}
#if LANG_CXX11
inline void UserLicense::set_customer_id(::std::string&& value) {
  
  customer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicense.customer_id)
}
#endif
inline void UserLicense::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicense.customer_id)
}
inline void UserLicense::set_customer_id(const char* value, size_t size) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicense.customer_id)
}
inline ::std::string* UserLicense::mutable_customer_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicense.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicense::release_customer_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicense.customer_id)
  
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicense::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicense.customer_id)
}

// string application_id = 6;
inline void UserLicense::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicense::application_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.application_id)
  return application_id_.GetNoArena();
}
inline void UserLicense::set_application_id(const ::std::string& value) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.application_id)
}
#if LANG_CXX11
inline void UserLicense::set_application_id(::std::string&& value) {
  
  application_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicense.application_id)
}
#endif
inline void UserLicense::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicense.application_id)
}
inline void UserLicense::set_application_id(const char* value, size_t size) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicense.application_id)
}
inline ::std::string* UserLicense::mutable_application_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicense.application_id)
  return application_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicense::release_application_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicense.application_id)
  
  return application_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicense::set_allocated_application_id(::std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicense.application_id)
}

// string id = 101;
inline void UserLicense::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicense::id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.id)
  return id_.GetNoArena();
}
inline void UserLicense::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.id)
}
#if LANG_CXX11
inline void UserLicense::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicense.id)
}
#endif
inline void UserLicense::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicense.id)
}
inline void UserLicense::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicense.id)
}
inline ::std::string* UserLicense::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicense.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicense::release_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicense.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicense::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicense.id)
}

// string user_id = 102;
inline void UserLicense::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicense::user_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicense.user_id)
  return user_id_.GetNoArena();
}
inline void UserLicense::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicense.user_id)
}
#if LANG_CXX11
inline void UserLicense::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicense.user_id)
}
#endif
inline void UserLicense::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicense.user_id)
}
inline void UserLicense::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicense.user_id)
}
inline ::std::string* UserLicense::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicense.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicense::release_user_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicense.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicense::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicense.user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fapps_2fmarket_2fv2_2fresources_2eproto
