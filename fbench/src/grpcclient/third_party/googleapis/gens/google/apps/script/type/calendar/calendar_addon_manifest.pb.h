// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/script/type/calendar/calendar_addon_manifest.proto

#ifndef PROTOBUF_INCLUDED_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto
#define PROTOBUF_INCLUDED_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/apps/script/type/extension_point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto();
namespace google {
namespace apps {
namespace script {
namespace type {
namespace calendar {
class CalendarAddOnManifest;
class CalendarAddOnManifestDefaultTypeInternal;
extern CalendarAddOnManifestDefaultTypeInternal _CalendarAddOnManifest_default_instance_;
class CalendarExtensionPoint;
class CalendarExtensionPointDefaultTypeInternal;
extern CalendarExtensionPointDefaultTypeInternal _CalendarExtensionPoint_default_instance_;
class ConferenceSolution;
class ConferenceSolutionDefaultTypeInternal;
extern ConferenceSolutionDefaultTypeInternal _ConferenceSolution_default_instance_;
}  // namespace calendar
}  // namespace type
}  // namespace script
}  // namespace apps
namespace protobuf {
template<> ::google::apps::script::type::calendar::CalendarAddOnManifest* Arena::CreateMaybeMessage<::google::apps::script::type::calendar::CalendarAddOnManifest>(Arena*);
template<> ::google::apps::script::type::calendar::CalendarExtensionPoint* Arena::CreateMaybeMessage<::google::apps::script::type::calendar::CalendarExtensionPoint>(Arena*);
template<> ::google::apps::script::type::calendar::ConferenceSolution* Arena::CreateMaybeMessage<::google::apps::script::type::calendar::ConferenceSolution>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace apps {
namespace script {
namespace type {
namespace calendar {

enum CalendarAddOnManifest_EventAccess {
  CalendarAddOnManifest_EventAccess_UNSPECIFIED = 0,
  CalendarAddOnManifest_EventAccess_METADATA = 1,
  CalendarAddOnManifest_EventAccess_READ = 3,
  CalendarAddOnManifest_EventAccess_WRITE = 4,
  CalendarAddOnManifest_EventAccess_READ_WRITE = 5,
  CalendarAddOnManifest_EventAccess_CalendarAddOnManifest_EventAccess_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CalendarAddOnManifest_EventAccess_CalendarAddOnManifest_EventAccess_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CalendarAddOnManifest_EventAccess_IsValid(int value);
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest_EventAccess_EventAccess_MIN = CalendarAddOnManifest_EventAccess_UNSPECIFIED;
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest_EventAccess_EventAccess_MAX = CalendarAddOnManifest_EventAccess_READ_WRITE;
const int CalendarAddOnManifest_EventAccess_EventAccess_ARRAYSIZE = CalendarAddOnManifest_EventAccess_EventAccess_MAX + 1;

const ::google::protobuf::EnumDescriptor* CalendarAddOnManifest_EventAccess_descriptor();
inline const ::std::string& CalendarAddOnManifest_EventAccess_Name(CalendarAddOnManifest_EventAccess value) {
  return ::google::protobuf::internal::NameOfEnum(
    CalendarAddOnManifest_EventAccess_descriptor(), value);
}
inline bool CalendarAddOnManifest_EventAccess_Parse(
    const ::std::string& name, CalendarAddOnManifest_EventAccess* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CalendarAddOnManifest_EventAccess>(
    CalendarAddOnManifest_EventAccess_descriptor(), name, value);
}
// ===================================================================

class CalendarAddOnManifest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.script.type.calendar.CalendarAddOnManifest) */ {
 public:
  CalendarAddOnManifest();
  virtual ~CalendarAddOnManifest();

  CalendarAddOnManifest(const CalendarAddOnManifest& from);

  inline CalendarAddOnManifest& operator=(const CalendarAddOnManifest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalendarAddOnManifest(CalendarAddOnManifest&& from) noexcept
    : CalendarAddOnManifest() {
    *this = ::std::move(from);
  }

  inline CalendarAddOnManifest& operator=(CalendarAddOnManifest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CalendarAddOnManifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalendarAddOnManifest* internal_default_instance() {
    return reinterpret_cast<const CalendarAddOnManifest*>(
               &_CalendarAddOnManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CalendarAddOnManifest* other);
  friend void swap(CalendarAddOnManifest& a, CalendarAddOnManifest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalendarAddOnManifest* New() const final {
    return CreateMaybeMessage<CalendarAddOnManifest>(nullptr);
  }

  CalendarAddOnManifest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalendarAddOnManifest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalendarAddOnManifest& from);
  void MergeFrom(const CalendarAddOnManifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalendarAddOnManifest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CalendarAddOnManifest_EventAccess EventAccess;
  static const EventAccess UNSPECIFIED =
    CalendarAddOnManifest_EventAccess_UNSPECIFIED;
  static const EventAccess METADATA =
    CalendarAddOnManifest_EventAccess_METADATA;
  static const EventAccess READ =
    CalendarAddOnManifest_EventAccess_READ;
  static const EventAccess WRITE =
    CalendarAddOnManifest_EventAccess_WRITE;
  static const EventAccess READ_WRITE =
    CalendarAddOnManifest_EventAccess_READ_WRITE;
  static inline bool EventAccess_IsValid(int value) {
    return CalendarAddOnManifest_EventAccess_IsValid(value);
  }
  static const EventAccess EventAccess_MIN =
    CalendarAddOnManifest_EventAccess_EventAccess_MIN;
  static const EventAccess EventAccess_MAX =
    CalendarAddOnManifest_EventAccess_EventAccess_MAX;
  static const int EventAccess_ARRAYSIZE =
    CalendarAddOnManifest_EventAccess_EventAccess_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventAccess_descriptor() {
    return CalendarAddOnManifest_EventAccess_descriptor();
  }
  static inline const ::std::string& EventAccess_Name(EventAccess value) {
    return CalendarAddOnManifest_EventAccess_Name(value);
  }
  static inline bool EventAccess_Parse(const ::std::string& name,
      EventAccess* value) {
    return CalendarAddOnManifest_EventAccess_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
  int conference_solution_size() const;
  void clear_conference_solution();
  static const int kConferenceSolutionFieldNumber = 3;
  ::google::apps::script::type::calendar::ConferenceSolution* mutable_conference_solution(int index);
  ::google::protobuf::RepeatedPtrField< ::google::apps::script::type::calendar::ConferenceSolution >*
      mutable_conference_solution();
  const ::google::apps::script::type::calendar::ConferenceSolution& conference_solution(int index) const;
  ::google::apps::script::type::calendar::ConferenceSolution* add_conference_solution();
  const ::google::protobuf::RepeatedPtrField< ::google::apps::script::type::calendar::ConferenceSolution >&
      conference_solution() const;

  // string create_settings_url_function = 5;
  void clear_create_settings_url_function();
  static const int kCreateSettingsUrlFunctionFieldNumber = 5;
  const ::std::string& create_settings_url_function() const;
  void set_create_settings_url_function(const ::std::string& value);
  #if LANG_CXX11
  void set_create_settings_url_function(::std::string&& value);
  #endif
  void set_create_settings_url_function(const char* value);
  void set_create_settings_url_function(const char* value, size_t size);
  ::std::string* mutable_create_settings_url_function();
  ::std::string* release_create_settings_url_function();
  void set_allocated_create_settings_url_function(::std::string* create_settings_url_function);

  // .google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
  bool has_homepage_trigger() const;
  void clear_homepage_trigger();
  static const int kHomepageTriggerFieldNumber = 6;
  const ::google::apps::script::type::HomepageExtensionPoint& homepage_trigger() const;
  ::google::apps::script::type::HomepageExtensionPoint* release_homepage_trigger();
  ::google::apps::script::type::HomepageExtensionPoint* mutable_homepage_trigger();
  void set_allocated_homepage_trigger(::google::apps::script::type::HomepageExtensionPoint* homepage_trigger);

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
  bool has_event_open_trigger() const;
  void clear_event_open_trigger();
  static const int kEventOpenTriggerFieldNumber = 10;
  const ::google::apps::script::type::calendar::CalendarExtensionPoint& event_open_trigger() const;
  ::google::apps::script::type::calendar::CalendarExtensionPoint* release_event_open_trigger();
  ::google::apps::script::type::calendar::CalendarExtensionPoint* mutable_event_open_trigger();
  void set_allocated_event_open_trigger(::google::apps::script::type::calendar::CalendarExtensionPoint* event_open_trigger);

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
  bool has_event_update_trigger() const;
  void clear_event_update_trigger();
  static const int kEventUpdateTriggerFieldNumber = 11;
  const ::google::apps::script::type::calendar::CalendarExtensionPoint& event_update_trigger() const;
  ::google::apps::script::type::calendar::CalendarExtensionPoint* release_event_update_trigger();
  ::google::apps::script::type::calendar::CalendarExtensionPoint* mutable_event_update_trigger();
  void set_allocated_event_update_trigger(::google::apps::script::type::calendar::CalendarExtensionPoint* event_update_trigger);

  // .google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
  void clear_current_event_access();
  static const int kCurrentEventAccessFieldNumber = 12;
  ::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess current_event_access() const;
  void set_current_event_access(::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess value);

  // @@protoc_insertion_point(class_scope:google.apps.script.type.calendar.CalendarAddOnManifest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::apps::script::type::calendar::ConferenceSolution > conference_solution_;
  ::google::protobuf::internal::ArenaStringPtr create_settings_url_function_;
  ::google::apps::script::type::HomepageExtensionPoint* homepage_trigger_;
  ::google::apps::script::type::calendar::CalendarExtensionPoint* event_open_trigger_;
  ::google::apps::script::type::calendar::CalendarExtensionPoint* event_update_trigger_;
  int current_event_access_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class ConferenceSolution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.script.type.calendar.ConferenceSolution) */ {
 public:
  ConferenceSolution();
  virtual ~ConferenceSolution();

  ConferenceSolution(const ConferenceSolution& from);

  inline ConferenceSolution& operator=(const ConferenceSolution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConferenceSolution(ConferenceSolution&& from) noexcept
    : ConferenceSolution() {
    *this = ::std::move(from);
  }

  inline ConferenceSolution& operator=(ConferenceSolution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConferenceSolution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConferenceSolution* internal_default_instance() {
    return reinterpret_cast<const ConferenceSolution*>(
               &_ConferenceSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ConferenceSolution* other);
  friend void swap(ConferenceSolution& a, ConferenceSolution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConferenceSolution* New() const final {
    return CreateMaybeMessage<ConferenceSolution>(nullptr);
  }

  ConferenceSolution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConferenceSolution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConferenceSolution& from);
  void MergeFrom(const ConferenceSolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConferenceSolution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string on_create_function = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_on_create_function();
  static const int kOnCreateFunctionFieldNumber = 1;
  const ::std::string& on_create_function() const;
  void set_on_create_function(const ::std::string& value);
  #if LANG_CXX11
  void set_on_create_function(::std::string&& value);
  #endif
  void set_on_create_function(const char* value);
  void set_on_create_function(const char* value, size_t size);
  ::std::string* mutable_on_create_function();
  ::std::string* release_on_create_function();
  void set_allocated_on_create_function(::std::string* on_create_function);

  // string id = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_id();
  static const int kIdFieldNumber = 4;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string logo_url = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_logo_url();
  static const int kLogoUrlFieldNumber = 6;
  const ::std::string& logo_url() const;
  void set_logo_url(const ::std::string& value);
  #if LANG_CXX11
  void set_logo_url(::std::string&& value);
  #endif
  void set_logo_url(const char* value);
  void set_logo_url(const char* value, size_t size);
  ::std::string* mutable_logo_url();
  ::std::string* release_logo_url();
  void set_allocated_logo_url(::std::string* logo_url);

  // @@protoc_insertion_point(class_scope:google.apps.script.type.calendar.ConferenceSolution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr on_create_function_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr logo_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto;
};
// -------------------------------------------------------------------

class CalendarExtensionPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.script.type.calendar.CalendarExtensionPoint) */ {
 public:
  CalendarExtensionPoint();
  virtual ~CalendarExtensionPoint();

  CalendarExtensionPoint(const CalendarExtensionPoint& from);

  inline CalendarExtensionPoint& operator=(const CalendarExtensionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalendarExtensionPoint(CalendarExtensionPoint&& from) noexcept
    : CalendarExtensionPoint() {
    *this = ::std::move(from);
  }

  inline CalendarExtensionPoint& operator=(CalendarExtensionPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CalendarExtensionPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalendarExtensionPoint* internal_default_instance() {
    return reinterpret_cast<const CalendarExtensionPoint*>(
               &_CalendarExtensionPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CalendarExtensionPoint* other);
  friend void swap(CalendarExtensionPoint& a, CalendarExtensionPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalendarExtensionPoint* New() const final {
    return CreateMaybeMessage<CalendarExtensionPoint>(nullptr);
  }

  CalendarExtensionPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalendarExtensionPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalendarExtensionPoint& from);
  void MergeFrom(const CalendarExtensionPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalendarExtensionPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string run_function = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_run_function();
  static const int kRunFunctionFieldNumber = 1;
  const ::std::string& run_function() const;
  void set_run_function(const ::std::string& value);
  #if LANG_CXX11
  void set_run_function(::std::string&& value);
  #endif
  void set_run_function(const char* value);
  void set_run_function(const char* value, size_t size);
  ::std::string* mutable_run_function();
  ::std::string* release_run_function();
  void set_allocated_run_function(::std::string* run_function);

  // @@protoc_insertion_point(class_scope:google.apps.script.type.calendar.CalendarExtensionPoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr run_function_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalendarAddOnManifest

// .google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
inline bool CalendarAddOnManifest::has_homepage_trigger() const {
  return this != internal_default_instance() && homepage_trigger_ != nullptr;
}
inline const ::google::apps::script::type::HomepageExtensionPoint& CalendarAddOnManifest::homepage_trigger() const {
  const ::google::apps::script::type::HomepageExtensionPoint* p = homepage_trigger_;
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.CalendarAddOnManifest.homepage_trigger)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::script::type::HomepageExtensionPoint*>(
      &::google::apps::script::type::_HomepageExtensionPoint_default_instance_);
}
inline ::google::apps::script::type::HomepageExtensionPoint* CalendarAddOnManifest::release_homepage_trigger() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.CalendarAddOnManifest.homepage_trigger)
  
  ::google::apps::script::type::HomepageExtensionPoint* temp = homepage_trigger_;
  homepage_trigger_ = nullptr;
  return temp;
}
inline ::google::apps::script::type::HomepageExtensionPoint* CalendarAddOnManifest::mutable_homepage_trigger() {
  
  if (homepage_trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::script::type::HomepageExtensionPoint>(GetArenaNoVirtual());
    homepage_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.CalendarAddOnManifest.homepage_trigger)
  return homepage_trigger_;
}
inline void CalendarAddOnManifest::set_allocated_homepage_trigger(::google::apps::script::type::HomepageExtensionPoint* homepage_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(homepage_trigger_);
  }
  if (homepage_trigger) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      homepage_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, homepage_trigger, submessage_arena);
    }
    
  } else {
    
  }
  homepage_trigger_ = homepage_trigger;
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.CalendarAddOnManifest.homepage_trigger)
}

// repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
inline int CalendarAddOnManifest::conference_solution_size() const {
  return conference_solution_.size();
}
inline void CalendarAddOnManifest::clear_conference_solution() {
  conference_solution_.Clear();
}
inline ::google::apps::script::type::calendar::ConferenceSolution* CalendarAddOnManifest::mutable_conference_solution(int index) {
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.CalendarAddOnManifest.conference_solution)
  return conference_solution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::apps::script::type::calendar::ConferenceSolution >*
CalendarAddOnManifest::mutable_conference_solution() {
  // @@protoc_insertion_point(field_mutable_list:google.apps.script.type.calendar.CalendarAddOnManifest.conference_solution)
  return &conference_solution_;
}
inline const ::google::apps::script::type::calendar::ConferenceSolution& CalendarAddOnManifest::conference_solution(int index) const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.CalendarAddOnManifest.conference_solution)
  return conference_solution_.Get(index);
}
inline ::google::apps::script::type::calendar::ConferenceSolution* CalendarAddOnManifest::add_conference_solution() {
  // @@protoc_insertion_point(field_add:google.apps.script.type.calendar.CalendarAddOnManifest.conference_solution)
  return conference_solution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::apps::script::type::calendar::ConferenceSolution >&
CalendarAddOnManifest::conference_solution() const {
  // @@protoc_insertion_point(field_list:google.apps.script.type.calendar.CalendarAddOnManifest.conference_solution)
  return conference_solution_;
}

// string create_settings_url_function = 5;
inline void CalendarAddOnManifest::clear_create_settings_url_function() {
  create_settings_url_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CalendarAddOnManifest::create_settings_url_function() const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
  return create_settings_url_function_.GetNoArena();
}
inline void CalendarAddOnManifest::set_create_settings_url_function(const ::std::string& value) {
  
  create_settings_url_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
}
#if LANG_CXX11
inline void CalendarAddOnManifest::set_create_settings_url_function(::std::string&& value) {
  
  create_settings_url_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
}
#endif
inline void CalendarAddOnManifest::set_create_settings_url_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_settings_url_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
}
inline void CalendarAddOnManifest::set_create_settings_url_function(const char* value, size_t size) {
  
  create_settings_url_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
}
inline ::std::string* CalendarAddOnManifest::mutable_create_settings_url_function() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
  return create_settings_url_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarAddOnManifest::release_create_settings_url_function() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
  
  return create_settings_url_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarAddOnManifest::set_allocated_create_settings_url_function(::std::string* create_settings_url_function) {
  if (create_settings_url_function != nullptr) {
    
  } else {
    
  }
  create_settings_url_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_settings_url_function);
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function)
}

// .google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
inline bool CalendarAddOnManifest::has_event_open_trigger() const {
  return this != internal_default_instance() && event_open_trigger_ != nullptr;
}
inline void CalendarAddOnManifest::clear_event_open_trigger() {
  if (GetArenaNoVirtual() == nullptr && event_open_trigger_ != nullptr) {
    delete event_open_trigger_;
  }
  event_open_trigger_ = nullptr;
}
inline const ::google::apps::script::type::calendar::CalendarExtensionPoint& CalendarAddOnManifest::event_open_trigger() const {
  const ::google::apps::script::type::calendar::CalendarExtensionPoint* p = event_open_trigger_;
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.CalendarAddOnManifest.event_open_trigger)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::script::type::calendar::CalendarExtensionPoint*>(
      &::google::apps::script::type::calendar::_CalendarExtensionPoint_default_instance_);
}
inline ::google::apps::script::type::calendar::CalendarExtensionPoint* CalendarAddOnManifest::release_event_open_trigger() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.CalendarAddOnManifest.event_open_trigger)
  
  ::google::apps::script::type::calendar::CalendarExtensionPoint* temp = event_open_trigger_;
  event_open_trigger_ = nullptr;
  return temp;
}
inline ::google::apps::script::type::calendar::CalendarExtensionPoint* CalendarAddOnManifest::mutable_event_open_trigger() {
  
  if (event_open_trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::script::type::calendar::CalendarExtensionPoint>(GetArenaNoVirtual());
    event_open_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.CalendarAddOnManifest.event_open_trigger)
  return event_open_trigger_;
}
inline void CalendarAddOnManifest::set_allocated_event_open_trigger(::google::apps::script::type::calendar::CalendarExtensionPoint* event_open_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_open_trigger_;
  }
  if (event_open_trigger) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event_open_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_open_trigger, submessage_arena);
    }
    
  } else {
    
  }
  event_open_trigger_ = event_open_trigger;
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.CalendarAddOnManifest.event_open_trigger)
}

// .google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
inline bool CalendarAddOnManifest::has_event_update_trigger() const {
  return this != internal_default_instance() && event_update_trigger_ != nullptr;
}
inline void CalendarAddOnManifest::clear_event_update_trigger() {
  if (GetArenaNoVirtual() == nullptr && event_update_trigger_ != nullptr) {
    delete event_update_trigger_;
  }
  event_update_trigger_ = nullptr;
}
inline const ::google::apps::script::type::calendar::CalendarExtensionPoint& CalendarAddOnManifest::event_update_trigger() const {
  const ::google::apps::script::type::calendar::CalendarExtensionPoint* p = event_update_trigger_;
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.CalendarAddOnManifest.event_update_trigger)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::script::type::calendar::CalendarExtensionPoint*>(
      &::google::apps::script::type::calendar::_CalendarExtensionPoint_default_instance_);
}
inline ::google::apps::script::type::calendar::CalendarExtensionPoint* CalendarAddOnManifest::release_event_update_trigger() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.CalendarAddOnManifest.event_update_trigger)
  
  ::google::apps::script::type::calendar::CalendarExtensionPoint* temp = event_update_trigger_;
  event_update_trigger_ = nullptr;
  return temp;
}
inline ::google::apps::script::type::calendar::CalendarExtensionPoint* CalendarAddOnManifest::mutable_event_update_trigger() {
  
  if (event_update_trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::script::type::calendar::CalendarExtensionPoint>(GetArenaNoVirtual());
    event_update_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.CalendarAddOnManifest.event_update_trigger)
  return event_update_trigger_;
}
inline void CalendarAddOnManifest::set_allocated_event_update_trigger(::google::apps::script::type::calendar::CalendarExtensionPoint* event_update_trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_update_trigger_;
  }
  if (event_update_trigger) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event_update_trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_update_trigger, submessage_arena);
    }
    
  } else {
    
  }
  event_update_trigger_ = event_update_trigger;
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.CalendarAddOnManifest.event_update_trigger)
}

// .google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
inline void CalendarAddOnManifest::clear_current_event_access() {
  current_event_access_ = 0;
}
inline ::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess CalendarAddOnManifest::current_event_access() const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.CalendarAddOnManifest.current_event_access)
  return static_cast< ::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess >(current_event_access_);
}
inline void CalendarAddOnManifest::set_current_event_access(::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess value) {
  
  current_event_access_ = value;
  // @@protoc_insertion_point(field_set:google.apps.script.type.calendar.CalendarAddOnManifest.current_event_access)
}

// -------------------------------------------------------------------

// ConferenceSolution

// string on_create_function = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ConferenceSolution::clear_on_create_function() {
  on_create_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConferenceSolution::on_create_function() const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
  return on_create_function_.GetNoArena();
}
inline void ConferenceSolution::set_on_create_function(const ::std::string& value) {
  
  on_create_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
}
#if LANG_CXX11
inline void ConferenceSolution::set_on_create_function(::std::string&& value) {
  
  on_create_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
}
#endif
inline void ConferenceSolution::set_on_create_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  on_create_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
}
inline void ConferenceSolution::set_on_create_function(const char* value, size_t size) {
  
  on_create_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
}
inline ::std::string* ConferenceSolution::mutable_on_create_function() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
  return on_create_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConferenceSolution::release_on_create_function() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
  
  return on_create_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConferenceSolution::set_allocated_on_create_function(::std::string* on_create_function) {
  if (on_create_function != nullptr) {
    
  } else {
    
  }
  on_create_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), on_create_function);
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.ConferenceSolution.on_create_function)
}

// string id = 4 [(.google.api.field_behavior) = REQUIRED];
inline void ConferenceSolution::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConferenceSolution::id() const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.ConferenceSolution.id)
  return id_.GetNoArena();
}
inline void ConferenceSolution::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.script.type.calendar.ConferenceSolution.id)
}
#if LANG_CXX11
inline void ConferenceSolution::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.script.type.calendar.ConferenceSolution.id)
}
#endif
inline void ConferenceSolution::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.script.type.calendar.ConferenceSolution.id)
}
inline void ConferenceSolution::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.script.type.calendar.ConferenceSolution.id)
}
inline ::std::string* ConferenceSolution::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.ConferenceSolution.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConferenceSolution::release_id() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.ConferenceSolution.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConferenceSolution::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.ConferenceSolution.id)
}

// string name = 5 [(.google.api.field_behavior) = REQUIRED];
inline void ConferenceSolution::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConferenceSolution::name() const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.ConferenceSolution.name)
  return name_.GetNoArena();
}
inline void ConferenceSolution::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.script.type.calendar.ConferenceSolution.name)
}
#if LANG_CXX11
inline void ConferenceSolution::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.script.type.calendar.ConferenceSolution.name)
}
#endif
inline void ConferenceSolution::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.script.type.calendar.ConferenceSolution.name)
}
inline void ConferenceSolution::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.script.type.calendar.ConferenceSolution.name)
}
inline ::std::string* ConferenceSolution::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.ConferenceSolution.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConferenceSolution::release_name() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.ConferenceSolution.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConferenceSolution::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.ConferenceSolution.name)
}

// string logo_url = 6 [(.google.api.field_behavior) = REQUIRED];
inline void ConferenceSolution::clear_logo_url() {
  logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConferenceSolution::logo_url() const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.ConferenceSolution.logo_url)
  return logo_url_.GetNoArena();
}
inline void ConferenceSolution::set_logo_url(const ::std::string& value) {
  
  logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.script.type.calendar.ConferenceSolution.logo_url)
}
#if LANG_CXX11
inline void ConferenceSolution::set_logo_url(::std::string&& value) {
  
  logo_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.script.type.calendar.ConferenceSolution.logo_url)
}
#endif
inline void ConferenceSolution::set_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.script.type.calendar.ConferenceSolution.logo_url)
}
inline void ConferenceSolution::set_logo_url(const char* value, size_t size) {
  
  logo_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.script.type.calendar.ConferenceSolution.logo_url)
}
inline ::std::string* ConferenceSolution::mutable_logo_url() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.ConferenceSolution.logo_url)
  return logo_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConferenceSolution::release_logo_url() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.ConferenceSolution.logo_url)
  
  return logo_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConferenceSolution::set_allocated_logo_url(::std::string* logo_url) {
  if (logo_url != nullptr) {
    
  } else {
    
  }
  logo_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_url);
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.ConferenceSolution.logo_url)
}

// -------------------------------------------------------------------

// CalendarExtensionPoint

// string run_function = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CalendarExtensionPoint::clear_run_function() {
  run_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CalendarExtensionPoint::run_function() const {
  // @@protoc_insertion_point(field_get:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
  return run_function_.GetNoArena();
}
inline void CalendarExtensionPoint::set_run_function(const ::std::string& value) {
  
  run_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
}
#if LANG_CXX11
inline void CalendarExtensionPoint::set_run_function(::std::string&& value) {
  
  run_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
}
#endif
inline void CalendarExtensionPoint::set_run_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  run_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
}
inline void CalendarExtensionPoint::set_run_function(const char* value, size_t size) {
  
  run_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
}
inline ::std::string* CalendarExtensionPoint::mutable_run_function() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
  return run_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalendarExtensionPoint::release_run_function() {
  // @@protoc_insertion_point(field_release:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
  
  return run_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalendarExtensionPoint::set_allocated_run_function(::std::string* run_function) {
  if (run_function != nullptr) {
    
  } else {
    
  }
  run_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), run_function);
  // @@protoc_insertion_point(field_set_allocated:google.apps.script.type.calendar.CalendarExtensionPoint.run_function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calendar
}  // namespace type
}  // namespace script
}  // namespace apps
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess>() {
  return ::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto
