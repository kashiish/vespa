// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/market/v2/resources.proto

#include "google/apps/market/v2/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fresources_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fresources_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_LicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto;
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {
class CustomerLicense_EditionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomerLicense_Editions> _instance;
} _CustomerLicense_Editions_default_instance_;
class CustomerLicenseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomerLicense> _instance;
} _CustomerLicense_default_instance_;
class LicenseNotification_DeletesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LicenseNotification_Deletes> _instance;
} _LicenseNotification_Deletes_default_instance_;
class LicenseNotification_ExpiriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LicenseNotification_Expiries> _instance;
} _LicenseNotification_Expiries_default_instance_;
class LicenseNotification_ProvisionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LicenseNotification_Provisions> _instance;
} _LicenseNotification_Provisions_default_instance_;
class LicenseNotification_ReassignmentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LicenseNotification_Reassignments> _instance;
} _LicenseNotification_Reassignments_default_instance_;
class LicenseNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LicenseNotification> _instance;
} _LicenseNotification_default_instance_;
class LicenseNotificationListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LicenseNotificationList> _instance;
} _LicenseNotificationList_default_instance_;
class UserLicenseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserLicense> _instance;
} _UserLicense_default_instance_;
}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc
static void InitDefaultsCustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_CustomerLicense_Editions_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::CustomerLicense_Editions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::CustomerLicense_Editions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {}};

static void InitDefaultsCustomerLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_CustomerLicense_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::CustomerLicense();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::CustomerLicense::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CustomerLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCustomerLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {
      &scc_info_CustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base,}};

static void InitDefaultsLicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_LicenseNotification_Deletes_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {}};

static void InitDefaultsLicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_LicenseNotification_Expiries_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {}};

static void InitDefaultsLicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_LicenseNotification_Provisions_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {}};

static void InitDefaultsLicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_LicenseNotification_Reassignments_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {}};

static void InitDefaultsLicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_LicenseNotification_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::LicenseNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::LicenseNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_LicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {
      &scc_info_LicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base,
      &scc_info_LicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base,
      &scc_info_LicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base,
      &scc_info_LicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base,}};

static void InitDefaultsLicenseNotificationList_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_LicenseNotificationList_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::LicenseNotificationList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::LicenseNotificationList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LicenseNotificationList_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLicenseNotificationList_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {
      &scc_info_LicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base,}};

static void InitDefaultsUserLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ccc::hosted::marketplace::v2::_UserLicense_default_instance_;
    new (ptr) ::ccc::hosted::marketplace::v2::UserLicense();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ccc::hosted::marketplace::v2::UserLicense::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto}, {}};

void InitDefaults_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomerLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LicenseNotificationList_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[9];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense_Editions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense_Editions, edition_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense_Editions, seat_count_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense_Editions, assigned_seats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense, state_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense, application_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense, editions_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense, id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::CustomerLicense, customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Deletes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Deletes, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Deletes, edition_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Expiries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Expiries, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Expiries, edition_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Provisions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Provisions, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Provisions, edition_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Provisions, seat_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments, user_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments, type_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments, edition_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, application_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, customer_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, provisions_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, expiries_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, reassignments_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotification, deletes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationList, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationList, notifications_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::LicenseNotificationList, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, kind_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, enabled_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, state_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, edition_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, customer_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, application_id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, id_),
  PROTOBUF_FIELD_OFFSET(::ccc::hosted::marketplace::v2::UserLicense, user_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ccc::hosted::marketplace::v2::CustomerLicense_Editions)},
  { 8, -1, sizeof(::ccc::hosted::marketplace::v2::CustomerLicense)},
  { 19, -1, sizeof(::ccc::hosted::marketplace::v2::LicenseNotification_Deletes)},
  { 26, -1, sizeof(::ccc::hosted::marketplace::v2::LicenseNotification_Expiries)},
  { 33, -1, sizeof(::ccc::hosted::marketplace::v2::LicenseNotification_Provisions)},
  { 41, -1, sizeof(::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments)},
  { 50, -1, sizeof(::ccc::hosted::marketplace::v2::LicenseNotification)},
  { 64, -1, sizeof(::ccc::hosted::marketplace::v2::LicenseNotificationList)},
  { 72, -1, sizeof(::ccc::hosted::marketplace::v2::UserLicense)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_CustomerLicense_Editions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_CustomerLicense_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_LicenseNotification_Deletes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_LicenseNotification_Expiries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_LicenseNotification_Provisions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_LicenseNotification_Reassignments_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_LicenseNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_LicenseNotificationList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ccc::hosted::marketplace::v2::_UserLicense_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto = {
  {}, AddDescriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto, "google/apps/market/v2/resources.proto", schemas,
  file_default_instances, TableStruct_google_2fapps_2fmarket_2fv2_2fresources_2eproto::offsets,
  file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto, 9, file_level_enum_descriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto, file_level_service_descriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto,
};

const char descriptor_table_protodef_google_2fapps_2fmarket_2fv2_2fresources_2eproto[] =
  "\n%google/apps/market/v2/resources.proto\022"
  "\031ccc.hosted.marketplace.v2\032\034google/api/a"
  "nnotations.proto\"\215\002\n\017CustomerLicense\022\014\n\004"
  "kind\030\001 \001(\t\022\r\n\005state\030\002 \001(\t\022\026\n\016application"
  "_id\030\003 \001(\t\022I\n\010editions\030\004 \003(\01323.ccc.hosted"
  ".marketplace.v2.CustomerLicense.Editions"
  "B\002\030\001\022\n\n\002id\030e \001(\t\022\023\n\013customer_id\030f \001(\t\032Y\n"
  "\010Editions\022\027\n\nedition_id\030\225\003 \001(\tB\002\030\001\022\027\n\nse"
  "at_count\030\226\003 \001(\005B\002\030\001\022\033\n\016assigned_seats\030\231\003"
  " \001(\005B\002\030\001\"\257\005\n\023LicenseNotification\022\n\n\002id\030\001"
  " \001(\t\022\026\n\016application_id\030\002 \001(\t\022\021\n\ttimestam"
  "p\030\003 \001(\003\022\023\n\013customer_id\030\004 \001(\t\022\014\n\004kind\030\005 \001"
  "(\t\022M\n\nprovisions\030\006 \003(\01329.ccc.hosted.mark"
  "etplace.v2.LicenseNotification.Provision"
  "s\022I\n\010expiries\030\007 \003(\01327.ccc.hosted.marketp"
  "lace.v2.LicenseNotification.Expiries\022S\n\r"
  "reassignments\030\010 \003(\0132<.ccc.hosted.marketp"
  "lace.v2.LicenseNotification.Reassignment"
  "s\022G\n\007deletes\030\t \003(\01326.ccc.hosted.marketpl"
  "ace.v2.LicenseNotification.Deletes\0320\n\007De"
  "letes\022\014\n\004kind\030\001 \001(\t\022\027\n\nedition_id\030\205\007 \001(\t"
  "B\002\030\001\0321\n\010Expiries\022\014\n\004kind\030\001 \001(\t\022\027\n\neditio"
  "n_id\030\275\005 \001(\tB\002\030\001\032H\n\nProvisions\022\014\n\004kind\030\001 "
  "\001(\t\022\027\n\nedition_id\030\331\004 \001(\tB\002\030\001\022\023\n\nseat_cou"
  "nt\030\332\004 \001(\003\032W\n\rReassignments\022\014\n\004kind\030\001 \001(\t"
  "\022\020\n\007user_id\030\241\006 \001(\t\022\r\n\004type\030\242\006 \001(\t\022\027\n\nedi"
  "tion_id\030\243\006 \001(\tB\002\030\001\"\212\001\n\027LicenseNotificati"
  "onList\022\014\n\004kind\030\001 \001(\t\022F\n\rnotifications\030\357\007"
  " \003(\0132..ccc.hosted.marketplace.v2.License"
  "Notification\022\031\n\017next_page_token\030\372\221\006 \001(\t\""
  "\235\001\n\013UserLicense\022\014\n\004kind\030\001 \001(\t\022\017\n\007enabled"
  "\030\002 \001(\010\022\r\n\005state\030\003 \001(\t\022\026\n\nedition_id\030\004 \001("
  "\tB\002\030\001\022\023\n\013customer_id\030\005 \001(\t\022\026\n\016applicatio"
  "n_id\030\006 \001(\t\022\n\n\002id\030e \001(\t\022\017\n\007user_id\030f \001(\tB"
  "\235\001\n$com.google.ccc.hosted.marketplace.v2"
  "B\016ResourcesProtoP\001ZKgoogle.golang.org/ge"
  "nproto/googleapis/ccc/hosted/marketplace"
  "/v2;marketplace\312\002\025Google\\Apps\\Market\\V2b"
  "\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto = {
  false, InitDefaults_google_2fapps_2fmarket_2fv2_2fresources_2eproto, 
  descriptor_table_protodef_google_2fapps_2fmarket_2fv2_2fresources_2eproto,
  "google/apps/market/v2/resources.proto", &assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto, 1527,
};

void AddDescriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapps_2fmarket_2fv2_2fresources_2eproto = []() { AddDescriptors_google_2fapps_2fmarket_2fv2_2fresources_2eproto(); return true; }();
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {

// ===================================================================

void CustomerLicense_Editions::InitAsDefaultInstance() {
}
class CustomerLicense_Editions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomerLicense_Editions::kEditionIdFieldNumber;
const int CustomerLicense_Editions::kSeatCountFieldNumber;
const int CustomerLicense_Editions::kAssignedSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomerLicense_Editions::CustomerLicense_Editions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
}
CustomerLicense_Editions::CustomerLicense_Editions(const CustomerLicense_Editions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.edition_id().size() > 0) {
    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  ::memcpy(&seat_count_, &from.seat_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&assigned_seats_) -
    reinterpret_cast<char*>(&seat_count_)) + sizeof(assigned_seats_));
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
}

void CustomerLicense_Editions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seat_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_seats_) -
      reinterpret_cast<char*>(&seat_count_)) + sizeof(assigned_seats_));
}

CustomerLicense_Editions::~CustomerLicense_Editions() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  SharedDtor();
}

void CustomerLicense_Editions::SharedDtor() {
  edition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomerLicense_Editions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerLicense_Editions& CustomerLicense_Editions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomerLicense_Editions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void CustomerLicense_Editions::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seat_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&assigned_seats_) -
      reinterpret_cast<char*>(&seat_count_)) + sizeof(assigned_seats_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomerLicense_Editions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomerLicense_Editions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string edition_id = 405 [deprecated = true];
      case 405: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id");
        object = msg->mutable_edition_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 seat_count = 406 [deprecated = true];
      case 406: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_seat_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 assigned_seats = 409 [deprecated = true];
      case 409: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_assigned_seats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomerLicense_Editions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string edition_id = 405 [deprecated = true];
      case 405: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (3242 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edition_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->edition_id().data(), static_cast<int>(this->edition_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seat_count = 406 [deprecated = true];
      case 406: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (3248 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 assigned_seats = 409 [deprecated = true];
      case 409: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (3272 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assigned_seats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomerLicense_Editions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string edition_id = 405 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      405, this->edition_id(), output);
  }

  // int32 seat_count = 406 [deprecated = true];
  if (this->seat_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(406, this->seat_count(), output);
  }

  // int32 assigned_seats = 409 [deprecated = true];
  if (this->assigned_seats() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(409, this->assigned_seats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
}

::google::protobuf::uint8* CustomerLicense_Editions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string edition_id = 405 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.Editions.edition_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        405, this->edition_id(), target);
  }

  // int32 seat_count = 406 [deprecated = true];
  if (this->seat_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(406, this->seat_count(), target);
  }

  // int32 assigned_seats = 409 [deprecated = true];
  if (this->assigned_seats() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(409, this->assigned_seats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  return target;
}

size_t CustomerLicense_Editions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string edition_id = 405 [deprecated = true];
  if (this->edition_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->edition_id());
  }

  // int32 seat_count = 406 [deprecated = true];
  if (this->seat_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seat_count());
  }

  // int32 assigned_seats = 409 [deprecated = true];
  if (this->assigned_seats() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assigned_seats());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerLicense_Editions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerLicense_Editions* source =
      ::google::protobuf::DynamicCastToGenerated<CustomerLicense_Editions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
    MergeFrom(*source);
  }
}

void CustomerLicense_Editions::MergeFrom(const CustomerLicense_Editions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.edition_id().size() > 0) {

    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  if (from.seat_count() != 0) {
    set_seat_count(from.seat_count());
  }
  if (from.assigned_seats() != 0) {
    set_assigned_seats(from.assigned_seats());
  }
}

void CustomerLicense_Editions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerLicense_Editions::CopyFrom(const CustomerLicense_Editions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.CustomerLicense.Editions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerLicense_Editions::IsInitialized() const {
  return true;
}

void CustomerLicense_Editions::Swap(CustomerLicense_Editions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomerLicense_Editions::InternalSwap(CustomerLicense_Editions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  edition_id_.Swap(&other->edition_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seat_count_, other->seat_count_);
  swap(assigned_seats_, other->assigned_seats_);
}

::google::protobuf::Metadata CustomerLicense_Editions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomerLicense::InitAsDefaultInstance() {
}
class CustomerLicense::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomerLicense::kKindFieldNumber;
const int CustomerLicense::kStateFieldNumber;
const int CustomerLicense::kApplicationIdFieldNumber;
const int CustomerLicense::kEditionsFieldNumber;
const int CustomerLicense::kIdFieldNumber;
const int CustomerLicense::kCustomerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomerLicense::CustomerLicense()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.CustomerLicense)
}
CustomerLicense::CustomerLicense(const CustomerLicense& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      editions_(from.editions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_id().size() > 0) {
    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_id().size() > 0) {
    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.CustomerLicense)
}

void CustomerLicense::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomerLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CustomerLicense::~CustomerLicense() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.CustomerLicense)
  SharedDtor();
}

void CustomerLicense::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CustomerLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerLicense& CustomerLicense::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomerLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void CustomerLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.CustomerLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  editions_.Clear();
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomerLicense::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomerLicense*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicense.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicense.state");
        object = msg->mutable_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string application_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicense.application_id");
        object = msg->mutable_application_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ccc.hosted.marketplace.v2.CustomerLicense.Editions editions = 4 [deprecated = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ccc::hosted::marketplace::v2::CustomerLicense_Editions::_InternalParse;
          object = msg->add_editions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // string id = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicense.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string customer_id = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.CustomerLicense.customer_id");
        object = msg->mutable_customer_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomerLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.CustomerLicense)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicense.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicense.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_id().data(), static_cast<int>(this->application_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicense.application_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ccc.hosted.marketplace.v2.CustomerLicense.Editions editions = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_editions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicense.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customer_id = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (818 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customer_id().data(), static_cast<int>(this->customer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.CustomerLicense.customer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.CustomerLicense)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.CustomerLicense)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomerLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.CustomerLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // string state = 2;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state(), output);
  }

  // string application_id = 3;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.application_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->application_id(), output);
  }

  // repeated .ccc.hosted.marketplace.v2.CustomerLicense.Editions editions = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->editions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->editions(static_cast<int>(i)),
      output);
  }

  // string id = 101;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->id(), output);
  }

  // string customer_id = 102;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->customer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.CustomerLicense)
}

::google::protobuf::uint8* CustomerLicense::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.CustomerLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // string state = 2;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  // string application_id = 3;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.application_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->application_id(), target);
  }

  // repeated .ccc.hosted.marketplace.v2.CustomerLicense.Editions editions = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->editions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->editions(static_cast<int>(i)), target);
  }

  // string id = 101;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->id(), target);
  }

  // string customer_id = 102;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.CustomerLicense.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->customer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.CustomerLicense)
  return target;
}

size_t CustomerLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.CustomerLicense)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccc.hosted.marketplace.v2.CustomerLicense.Editions editions = 4 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->editions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->editions(static_cast<int>(i)));
    }
  }

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string state = 2;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string application_id = 3;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_id());
  }

  // string id = 101;
  if (this->id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string customer_id = 102;
  if (this->customer_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerLicense::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.CustomerLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerLicense* source =
      ::google::protobuf::DynamicCastToGenerated<CustomerLicense>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.CustomerLicense)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.CustomerLicense)
    MergeFrom(*source);
  }
}

void CustomerLicense::MergeFrom(const CustomerLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.CustomerLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  editions_.MergeFrom(from.editions_);
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.application_id().size() > 0) {

    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.customer_id().size() > 0) {

    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
}

void CustomerLicense::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.CustomerLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerLicense::CopyFrom(const CustomerLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.CustomerLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerLicense::IsInitialized() const {
  return true;
}

void CustomerLicense::Swap(CustomerLicense* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomerLicense::InternalSwap(CustomerLicense* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&editions_)->InternalSwap(CastToBase(&other->editions_));
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_id_.Swap(&other->application_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_id_.Swap(&other->customer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CustomerLicense::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LicenseNotification_Deletes::InitAsDefaultInstance() {
}
class LicenseNotification_Deletes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseNotification_Deletes::kKindFieldNumber;
const int LicenseNotification_Deletes::kEditionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseNotification_Deletes::LicenseNotification_Deletes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
}
LicenseNotification_Deletes::LicenseNotification_Deletes(const LicenseNotification_Deletes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.edition_id().size() > 0) {
    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
}

void LicenseNotification_Deletes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LicenseNotification_Deletes::~LicenseNotification_Deletes() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  SharedDtor();
}

void LicenseNotification_Deletes::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LicenseNotification_Deletes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseNotification_Deletes& LicenseNotification_Deletes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LicenseNotification_Deletes_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LicenseNotification_Deletes::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseNotification_Deletes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LicenseNotification_Deletes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string edition_id = 901 [deprecated = true];
      case 901: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id");
        object = msg->mutable_edition_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseNotification_Deletes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string edition_id = 901 [deprecated = true];
      case 901: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (7210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edition_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->edition_id().data(), static_cast<int>(this->edition_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseNotification_Deletes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // string edition_id = 901 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      901, this->edition_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
}

::google::protobuf::uint8* LicenseNotification_Deletes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Deletes.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // string edition_id = 901 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Deletes.edition_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        901, this->edition_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  return target;
}

size_t LicenseNotification_Deletes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string edition_id = 901 [deprecated = true];
  if (this->edition_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->edition_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseNotification_Deletes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseNotification_Deletes* source =
      ::google::protobuf::DynamicCastToGenerated<LicenseNotification_Deletes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
    MergeFrom(*source);
  }
}

void LicenseNotification_Deletes::MergeFrom(const LicenseNotification_Deletes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.edition_id().size() > 0) {

    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
}

void LicenseNotification_Deletes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseNotification_Deletes::CopyFrom(const LicenseNotification_Deletes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Deletes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseNotification_Deletes::IsInitialized() const {
  return true;
}

void LicenseNotification_Deletes::Swap(LicenseNotification_Deletes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseNotification_Deletes::InternalSwap(LicenseNotification_Deletes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  edition_id_.Swap(&other->edition_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LicenseNotification_Deletes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LicenseNotification_Expiries::InitAsDefaultInstance() {
}
class LicenseNotification_Expiries::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseNotification_Expiries::kKindFieldNumber;
const int LicenseNotification_Expiries::kEditionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseNotification_Expiries::LicenseNotification_Expiries()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
}
LicenseNotification_Expiries::LicenseNotification_Expiries(const LicenseNotification_Expiries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.edition_id().size() > 0) {
    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
}

void LicenseNotification_Expiries::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LicenseNotification_Expiries::~LicenseNotification_Expiries() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  SharedDtor();
}

void LicenseNotification_Expiries::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LicenseNotification_Expiries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseNotification_Expiries& LicenseNotification_Expiries::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LicenseNotification_Expiries_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LicenseNotification_Expiries::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseNotification_Expiries::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LicenseNotification_Expiries*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string edition_id = 701 [deprecated = true];
      case 701: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id");
        object = msg->mutable_edition_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseNotification_Expiries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string edition_id = 701 [deprecated = true];
      case 701: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (5610 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edition_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->edition_id().data(), static_cast<int>(this->edition_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseNotification_Expiries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // string edition_id = 701 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      701, this->edition_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
}

::google::protobuf::uint8* LicenseNotification_Expiries::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Expiries.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // string edition_id = 701 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Expiries.edition_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        701, this->edition_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  return target;
}

size_t LicenseNotification_Expiries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string edition_id = 701 [deprecated = true];
  if (this->edition_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->edition_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseNotification_Expiries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseNotification_Expiries* source =
      ::google::protobuf::DynamicCastToGenerated<LicenseNotification_Expiries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
    MergeFrom(*source);
  }
}

void LicenseNotification_Expiries::MergeFrom(const LicenseNotification_Expiries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.edition_id().size() > 0) {

    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
}

void LicenseNotification_Expiries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseNotification_Expiries::CopyFrom(const LicenseNotification_Expiries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Expiries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseNotification_Expiries::IsInitialized() const {
  return true;
}

void LicenseNotification_Expiries::Swap(LicenseNotification_Expiries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseNotification_Expiries::InternalSwap(LicenseNotification_Expiries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  edition_id_.Swap(&other->edition_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LicenseNotification_Expiries::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LicenseNotification_Provisions::InitAsDefaultInstance() {
}
class LicenseNotification_Provisions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseNotification_Provisions::kKindFieldNumber;
const int LicenseNotification_Provisions::kEditionIdFieldNumber;
const int LicenseNotification_Provisions::kSeatCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseNotification_Provisions::LicenseNotification_Provisions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
}
LicenseNotification_Provisions::LicenseNotification_Provisions(const LicenseNotification_Provisions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.edition_id().size() > 0) {
    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  seat_count_ = from.seat_count_;
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
}

void LicenseNotification_Provisions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seat_count_ = PROTOBUF_LONGLONG(0);
}

LicenseNotification_Provisions::~LicenseNotification_Provisions() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  SharedDtor();
}

void LicenseNotification_Provisions::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LicenseNotification_Provisions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseNotification_Provisions& LicenseNotification_Provisions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LicenseNotification_Provisions_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LicenseNotification_Provisions::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seat_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseNotification_Provisions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LicenseNotification_Provisions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string edition_id = 601 [deprecated = true];
      case 601: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id");
        object = msg->mutable_edition_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 seat_count = 602;
      case 602: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_seat_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseNotification_Provisions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string edition_id = 601 [deprecated = true];
      case 601: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (4810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edition_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->edition_id().data(), static_cast<int>(this->edition_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 seat_count = 602;
      case 602: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (4816 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seat_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseNotification_Provisions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // string edition_id = 601 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      601, this->edition_id(), output);
  }

  // int64 seat_count = 602;
  if (this->seat_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(602, this->seat_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
}

::google::protobuf::uint8* LicenseNotification_Provisions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Provisions.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // string edition_id = 601 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Provisions.edition_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        601, this->edition_id(), target);
  }

  // int64 seat_count = 602;
  if (this->seat_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(602, this->seat_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  return target;
}

size_t LicenseNotification_Provisions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string edition_id = 601 [deprecated = true];
  if (this->edition_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->edition_id());
  }

  // int64 seat_count = 602;
  if (this->seat_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seat_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseNotification_Provisions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseNotification_Provisions* source =
      ::google::protobuf::DynamicCastToGenerated<LicenseNotification_Provisions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
    MergeFrom(*source);
  }
}

void LicenseNotification_Provisions::MergeFrom(const LicenseNotification_Provisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.edition_id().size() > 0) {

    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  if (from.seat_count() != 0) {
    set_seat_count(from.seat_count());
  }
}

void LicenseNotification_Provisions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseNotification_Provisions::CopyFrom(const LicenseNotification_Provisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Provisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseNotification_Provisions::IsInitialized() const {
  return true;
}

void LicenseNotification_Provisions::Swap(LicenseNotification_Provisions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseNotification_Provisions::InternalSwap(LicenseNotification_Provisions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  edition_id_.Swap(&other->edition_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(seat_count_, other->seat_count_);
}

::google::protobuf::Metadata LicenseNotification_Provisions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LicenseNotification_Reassignments::InitAsDefaultInstance() {
}
class LicenseNotification_Reassignments::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseNotification_Reassignments::kKindFieldNumber;
const int LicenseNotification_Reassignments::kUserIdFieldNumber;
const int LicenseNotification_Reassignments::kTypeFieldNumber;
const int LicenseNotification_Reassignments::kEditionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseNotification_Reassignments::LicenseNotification_Reassignments()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
}
LicenseNotification_Reassignments::LicenseNotification_Reassignments(const LicenseNotification_Reassignments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.edition_id().size() > 0) {
    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
}

void LicenseNotification_Reassignments::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LicenseNotification_Reassignments::~LicenseNotification_Reassignments() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  SharedDtor();
}

void LicenseNotification_Reassignments::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LicenseNotification_Reassignments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseNotification_Reassignments& LicenseNotification_Reassignments::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LicenseNotification_Reassignments_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LicenseNotification_Reassignments::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseNotification_Reassignments::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LicenseNotification_Reassignments*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 801;
      case 801: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string type = 802;
      case 802: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string edition_id = 803 [deprecated = true];
      case 803: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id");
        object = msg->mutable_edition_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseNotification_Reassignments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 801;
      case 801: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (6410 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 802;
      case 802: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (6418 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string edition_id = 803 [deprecated = true];
      case 803: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (6426 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edition_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->edition_id().data(), static_cast<int>(this->edition_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseNotification_Reassignments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // string user_id = 801;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      801, this->user_id(), output);
  }

  // string type = 802;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      802, this->type(), output);
  }

  // string edition_id = 803 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      803, this->edition_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
}

::google::protobuf::uint8* LicenseNotification_Reassignments::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // string user_id = 801;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        801, this->user_id(), target);
  }

  // string type = 802;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        802, this->type(), target);
  }

  // string edition_id = 803 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.Reassignments.edition_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        803, this->edition_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  return target;
}

size_t LicenseNotification_Reassignments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string user_id = 801;
  if (this->user_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string type = 802;
  if (this->type().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string edition_id = 803 [deprecated = true];
  if (this->edition_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->edition_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseNotification_Reassignments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseNotification_Reassignments* source =
      ::google::protobuf::DynamicCastToGenerated<LicenseNotification_Reassignments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
    MergeFrom(*source);
  }
}

void LicenseNotification_Reassignments::MergeFrom(const LicenseNotification_Reassignments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.edition_id().size() > 0) {

    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
}

void LicenseNotification_Reassignments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseNotification_Reassignments::CopyFrom(const LicenseNotification_Reassignments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification.Reassignments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseNotification_Reassignments::IsInitialized() const {
  return true;
}

void LicenseNotification_Reassignments::Swap(LicenseNotification_Reassignments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseNotification_Reassignments::InternalSwap(LicenseNotification_Reassignments* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  edition_id_.Swap(&other->edition_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LicenseNotification_Reassignments::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LicenseNotification::InitAsDefaultInstance() {
}
class LicenseNotification::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseNotification::kIdFieldNumber;
const int LicenseNotification::kApplicationIdFieldNumber;
const int LicenseNotification::kTimestampFieldNumber;
const int LicenseNotification::kCustomerIdFieldNumber;
const int LicenseNotification::kKindFieldNumber;
const int LicenseNotification::kProvisionsFieldNumber;
const int LicenseNotification::kExpiriesFieldNumber;
const int LicenseNotification::kReassignmentsFieldNumber;
const int LicenseNotification::kDeletesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseNotification::LicenseNotification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.LicenseNotification)
}
LicenseNotification::LicenseNotification(const LicenseNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      provisions_(from.provisions_),
      expiries_(from.expiries_),
      reassignments_(from.reassignments_),
      deletes_(from.deletes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_id().size() > 0) {
    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_id().size() > 0) {
    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.LicenseNotification)
}

void LicenseNotification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

LicenseNotification::~LicenseNotification() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.LicenseNotification)
  SharedDtor();
}

void LicenseNotification::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LicenseNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseNotification& LicenseNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LicenseNotification_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LicenseNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.LicenseNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provisions_.Clear();
  expiries_.Clear();
  reassignments_.Clear();
  deletes_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseNotification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LicenseNotification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string application_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.application_id");
        object = msg->mutable_application_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string customer_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.customer_id");
        object = msg->mutable_customer_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string kind = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotification.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Provisions provisions = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions::_InternalParse;
          object = msg->add_provisions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Expiries expiries = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries::_InternalParse;
          object = msg->add_expiries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Reassignments reassignments = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments::_InternalParse;
          object = msg->add_reassignments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Deletes deletes = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes::_InternalParse;
          object = msg->add_deletes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.LicenseNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_id().data(), static_cast<int>(this->application_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.application_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customer_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customer_id().data(), static_cast<int>(this->customer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.customer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kind = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotification.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Provisions provisions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_provisions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Expiries expiries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_expiries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Reassignments reassignments = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reassignments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Deletes deletes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_deletes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.LicenseNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.LicenseNotification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.LicenseNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string application_id = 2;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.application_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->application_id(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // string customer_id = 4;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->customer_id(), output);
  }

  // string kind = 5;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->kind(), output);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Provisions provisions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->provisions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->provisions(static_cast<int>(i)),
      output);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Expiries expiries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expiries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->expiries(static_cast<int>(i)),
      output);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Reassignments reassignments = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reassignments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->reassignments(static_cast<int>(i)),
      output);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Deletes deletes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deletes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->deletes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.LicenseNotification)
}

::google::protobuf::uint8* LicenseNotification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.LicenseNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string application_id = 2;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.application_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->application_id(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // string customer_id = 4;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->customer_id(), target);
  }

  // string kind = 5;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotification.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->kind(), target);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Provisions provisions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->provisions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->provisions(static_cast<int>(i)), target);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Expiries expiries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expiries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->expiries(static_cast<int>(i)), target);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Reassignments reassignments = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reassignments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->reassignments(static_cast<int>(i)), target);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Deletes deletes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deletes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->deletes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.LicenseNotification)
  return target;
}

size_t LicenseNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.LicenseNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Provisions provisions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->provisions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->provisions(static_cast<int>(i)));
    }
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Expiries expiries = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->expiries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->expiries(static_cast<int>(i)));
    }
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Reassignments reassignments = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->reassignments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reassignments(static_cast<int>(i)));
    }
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification.Deletes deletes = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->deletes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->deletes(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string application_id = 2;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_id());
  }

  // string customer_id = 4;
  if (this->customer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  // string kind = 5;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseNotification* source =
      ::google::protobuf::DynamicCastToGenerated<LicenseNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.LicenseNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.LicenseNotification)
    MergeFrom(*source);
  }
}

void LicenseNotification::MergeFrom(const LicenseNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  provisions_.MergeFrom(from.provisions_);
  expiries_.MergeFrom(from.expiries_);
  reassignments_.MergeFrom(from.reassignments_);
  deletes_.MergeFrom(from.deletes_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.application_id().size() > 0) {

    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  if (from.customer_id().size() > 0) {

    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LicenseNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseNotification::CopyFrom(const LicenseNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseNotification::IsInitialized() const {
  return true;
}

void LicenseNotification::Swap(LicenseNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseNotification::InternalSwap(LicenseNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&provisions_)->InternalSwap(CastToBase(&other->provisions_));
  CastToBase(&expiries_)->InternalSwap(CastToBase(&other->expiries_));
  CastToBase(&reassignments_)->InternalSwap(CastToBase(&other->reassignments_));
  CastToBase(&deletes_)->InternalSwap(CastToBase(&other->deletes_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_id_.Swap(&other->application_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_id_.Swap(&other->customer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata LicenseNotification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LicenseNotificationList::InitAsDefaultInstance() {
}
class LicenseNotificationList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LicenseNotificationList::kKindFieldNumber;
const int LicenseNotificationList::kNotificationsFieldNumber;
const int LicenseNotificationList::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LicenseNotificationList::LicenseNotificationList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.LicenseNotificationList)
}
LicenseNotificationList::LicenseNotificationList(const LicenseNotificationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.LicenseNotificationList)
}

void LicenseNotificationList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LicenseNotificationList_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LicenseNotificationList::~LicenseNotificationList() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.LicenseNotificationList)
  SharedDtor();
}

void LicenseNotificationList::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LicenseNotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseNotificationList& LicenseNotificationList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LicenseNotificationList_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void LicenseNotificationList::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LicenseNotificationList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LicenseNotificationList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotificationList.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ccc.hosted.marketplace.v2.LicenseNotification notifications = 1007;
      case 1007: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ccc::hosted::marketplace::v2::LicenseNotification::_InternalParse;
          object = msg->add_notifications();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 16122 && (ptr += 2));
        break;
      }
      // string next_page_token = 100602;
      case 100602: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token");
        object = msg->mutable_next_page_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LicenseNotificationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(804821u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotificationList.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ccc.hosted.marketplace.v2.LicenseNotification notifications = 1007;
      case 1007: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8058 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 100602;
      case 100602: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (804818 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.LicenseNotificationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.LicenseNotificationList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LicenseNotificationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationList.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification notifications = 1007;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1007,
      this->notifications(static_cast<int>(i)),
      output);
  }

  // string next_page_token = 100602;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100602, this->next_page_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.LicenseNotificationList)
}

::google::protobuf::uint8* LicenseNotificationList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationList.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification notifications = 1007;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1007, this->notifications(static_cast<int>(i)), target);
  }

  // string next_page_token = 100602;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.LicenseNotificationList.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100602, this->next_page_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.LicenseNotificationList)
  return target;
}

size_t LicenseNotificationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ccc.hosted.marketplace.v2.LicenseNotification notifications = 1007;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string next_page_token = 100602;
  if (this->next_page_token().size() > 0) {
    total_size += 3 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseNotificationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseNotificationList* source =
      ::google::protobuf::DynamicCastToGenerated<LicenseNotificationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.LicenseNotificationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.LicenseNotificationList)
    MergeFrom(*source);
  }
}

void LicenseNotificationList::MergeFrom(const LicenseNotificationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.next_page_token().size() > 0) {

    next_page_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token_);
  }
}

void LicenseNotificationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseNotificationList::CopyFrom(const LicenseNotificationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.LicenseNotificationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseNotificationList::IsInitialized() const {
  return true;
}

void LicenseNotificationList::Swap(LicenseNotificationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LicenseNotificationList::InternalSwap(LicenseNotificationList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_page_token_.Swap(&other->next_page_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LicenseNotificationList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UserLicense::InitAsDefaultInstance() {
}
class UserLicense::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserLicense::kKindFieldNumber;
const int UserLicense::kEnabledFieldNumber;
const int UserLicense::kStateFieldNumber;
const int UserLicense::kEditionIdFieldNumber;
const int UserLicense::kCustomerIdFieldNumber;
const int UserLicense::kApplicationIdFieldNumber;
const int UserLicense::kIdFieldNumber;
const int UserLicense::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserLicense::UserLicense()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ccc.hosted.marketplace.v2.UserLicense)
}
UserLicense::UserLicense(const UserLicense& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kind().size() > 0) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.edition_id().size() > 0) {
    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_id().size() > 0) {
    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.application_id().size() > 0) {
    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:ccc.hosted.marketplace.v2.UserLicense)
}

void UserLicense::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UserLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
}

UserLicense::~UserLicense() {
  // @@protoc_insertion_point(destructor:ccc.hosted.marketplace.v2.UserLicense)
  SharedDtor();
}

void UserLicense::SharedDtor() {
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserLicense& UserLicense::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UserLicense_google_2fapps_2fmarket_2fv2_2fresources_2eproto.base);
  return *internal_default_instance();
}


void UserLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:ccc.hosted.marketplace.v2.UserLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  edition_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enabled_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserLicense::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UserLicense*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string kind = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicense.kind");
        object = msg->mutable_kind();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool enabled = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicense.state");
        object = msg->mutable_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string edition_id = 4 [deprecated = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicense.edition_id");
        object = msg->mutable_edition_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string customer_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicense.customer_id");
        object = msg->mutable_customer_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string application_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicense.application_id");
        object = msg->mutable_application_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string id = 101;
      case 101: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicense.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 102;
      case 102: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ccc.hosted.marketplace.v2.UserLicense.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ccc.hosted.marketplace.v2.UserLicense)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicense.kind"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicense.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string edition_id = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_edition_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->edition_id().data(), static_cast<int>(this->edition_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicense.edition_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customer_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customer_id().data(), static_cast<int>(this->customer_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicense.customer_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string application_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->application_id().data(), static_cast<int>(this->application_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicense.application_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (810 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicense.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (818 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ccc.hosted.marketplace.v2.UserLicense.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ccc.hosted.marketplace.v2.UserLicense)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ccc.hosted.marketplace.v2.UserLicense)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ccc.hosted.marketplace.v2.UserLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kind(), output);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // string state = 3;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->state(), output);
  }

  // string edition_id = 4 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.edition_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->edition_id(), output);
  }

  // string customer_id = 5;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.customer_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->customer_id(), output);
  }

  // string application_id = 6;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.application_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->application_id(), output);
  }

  // string id = 101;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->id(), output);
  }

  // string user_id = 102;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      102, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ccc.hosted.marketplace.v2.UserLicense)
}

::google::protobuf::uint8* UserLicense::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ccc.hosted.marketplace.v2.UserLicense)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kind(), target);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // string state = 3;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state(), target);
  }

  // string edition_id = 4 [deprecated = true];
  if (this->edition_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->edition_id().data(), static_cast<int>(this->edition_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.edition_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->edition_id(), target);
  }

  // string customer_id = 5;
  if (this->customer_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_id().data(), static_cast<int>(this->customer_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.customer_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->customer_id(), target);
  }

  // string application_id = 6;
  if (this->application_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->application_id().data(), static_cast<int>(this->application_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.application_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->application_id(), target);
  }

  // string id = 101;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->id(), target);
  }

  // string user_id = 102;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ccc.hosted.marketplace.v2.UserLicense.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        102, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ccc.hosted.marketplace.v2.UserLicense)
  return target;
}

size_t UserLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ccc.hosted.marketplace.v2.UserLicense)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kind = 1;
  if (this->kind().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  // string state = 3;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string edition_id = 4 [deprecated = true];
  if (this->edition_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->edition_id());
  }

  // string customer_id = 5;
  if (this->customer_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_id());
  }

  // string application_id = 6;
  if (this->application_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->application_id());
  }

  // string id = 101;
  if (this->id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string user_id = 102;
  if (this->user_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserLicense::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ccc.hosted.marketplace.v2.UserLicense)
  GOOGLE_DCHECK_NE(&from, this);
  const UserLicense* source =
      ::google::protobuf::DynamicCastToGenerated<UserLicense>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ccc.hosted.marketplace.v2.UserLicense)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ccc.hosted.marketplace.v2.UserLicense)
    MergeFrom(*source);
  }
}

void UserLicense::MergeFrom(const UserLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ccc.hosted.marketplace.v2.UserLicense)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kind().size() > 0) {

    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.edition_id().size() > 0) {

    edition_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.edition_id_);
  }
  if (from.customer_id().size() > 0) {

    customer_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_id_);
  }
  if (from.application_id().size() > 0) {

    application_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_id_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void UserLicense::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ccc.hosted.marketplace.v2.UserLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLicense::CopyFrom(const UserLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ccc.hosted.marketplace.v2.UserLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLicense::IsInitialized() const {
  return true;
}

void UserLicense::Swap(UserLicense* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserLicense::InternalSwap(UserLicense* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kind_.Swap(&other->kind_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  edition_id_.Swap(&other->edition_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_id_.Swap(&other->customer_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  application_id_.Swap(&other->application_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enabled_, other->enabled_);
}

::google::protobuf::Metadata UserLicense::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fmarket_2fv2_2fresources_2eproto);
  return ::file_level_metadata_google_2fapps_2fmarket_2fv2_2fresources_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::CustomerLicense_Editions* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::CustomerLicense_Editions >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::CustomerLicense_Editions >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::CustomerLicense* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::CustomerLicense >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::CustomerLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::LicenseNotification_Deletes >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::LicenseNotification_Expiries >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::LicenseNotification_Provisions >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::LicenseNotification_Reassignments >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::LicenseNotification* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::LicenseNotification >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::LicenseNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::LicenseNotificationList* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::LicenseNotificationList >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::LicenseNotificationList >(arena);
}
template<> PROTOBUF_NOINLINE ::ccc::hosted::marketplace::v2::UserLicense* Arena::CreateMaybeMessage< ::ccc::hosted::marketplace::v2::UserLicense >(Arena* arena) {
  return Arena::CreateInternal< ::ccc::hosted::marketplace::v2::UserLicense >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
