// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/drive/activity/v2/target.proto

#ifndef PROTOBUF_INCLUDED_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto
#define PROTOBUF_INCLUDED_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/apps/drive/activity/v2/actor.pb.h"
#include "google/apps/drive/activity/v2/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto();
namespace google {
namespace apps {
namespace drive {
namespace activity {
namespace v2 {
class Drive;
class DriveDefaultTypeInternal;
extern DriveDefaultTypeInternal _Drive_default_instance_;
class DriveItem;
class DriveItemDefaultTypeInternal;
extern DriveItemDefaultTypeInternal _DriveItem_default_instance_;
class DriveItemReference;
class DriveItemReferenceDefaultTypeInternal;
extern DriveItemReferenceDefaultTypeInternal _DriveItemReference_default_instance_;
class DriveItem_DriveFile;
class DriveItem_DriveFileDefaultTypeInternal;
extern DriveItem_DriveFileDefaultTypeInternal _DriveItem_DriveFile_default_instance_;
class DriveItem_DriveFolder;
class DriveItem_DriveFolderDefaultTypeInternal;
extern DriveItem_DriveFolderDefaultTypeInternal _DriveItem_DriveFolder_default_instance_;
class DriveItem_File;
class DriveItem_FileDefaultTypeInternal;
extern DriveItem_FileDefaultTypeInternal _DriveItem_File_default_instance_;
class DriveItem_Folder;
class DriveItem_FolderDefaultTypeInternal;
extern DriveItem_FolderDefaultTypeInternal _DriveItem_Folder_default_instance_;
class DriveReference;
class DriveReferenceDefaultTypeInternal;
extern DriveReferenceDefaultTypeInternal _DriveReference_default_instance_;
class FileComment;
class FileCommentDefaultTypeInternal;
extern FileCommentDefaultTypeInternal _FileComment_default_instance_;
class Owner;
class OwnerDefaultTypeInternal;
extern OwnerDefaultTypeInternal _Owner_default_instance_;
class Target;
class TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
class TargetReference;
class TargetReferenceDefaultTypeInternal;
extern TargetReferenceDefaultTypeInternal _TargetReference_default_instance_;
class TeamDrive;
class TeamDriveDefaultTypeInternal;
extern TeamDriveDefaultTypeInternal _TeamDrive_default_instance_;
class TeamDriveReference;
class TeamDriveReferenceDefaultTypeInternal;
extern TeamDriveReferenceDefaultTypeInternal _TeamDriveReference_default_instance_;
}  // namespace v2
}  // namespace activity
}  // namespace drive
}  // namespace apps
namespace protobuf {
template<> ::google::apps::drive::activity::v2::Drive* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::Drive>(Arena*);
template<> ::google::apps::drive::activity::v2::DriveItem* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem>(Arena*);
template<> ::google::apps::drive::activity::v2::DriveItemReference* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItemReference>(Arena*);
template<> ::google::apps::drive::activity::v2::DriveItem_DriveFile* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_DriveFile>(Arena*);
template<> ::google::apps::drive::activity::v2::DriveItem_DriveFolder* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_DriveFolder>(Arena*);
template<> ::google::apps::drive::activity::v2::DriveItem_File* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_File>(Arena*);
template<> ::google::apps::drive::activity::v2::DriveItem_Folder* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_Folder>(Arena*);
template<> ::google::apps::drive::activity::v2::DriveReference* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::DriveReference>(Arena*);
template<> ::google::apps::drive::activity::v2::FileComment* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::FileComment>(Arena*);
template<> ::google::apps::drive::activity::v2::Owner* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::Owner>(Arena*);
template<> ::google::apps::drive::activity::v2::Target* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::Target>(Arena*);
template<> ::google::apps::drive::activity::v2::TargetReference* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::TargetReference>(Arena*);
template<> ::google::apps::drive::activity::v2::TeamDrive* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::TeamDrive>(Arena*);
template<> ::google::apps::drive::activity::v2::TeamDriveReference* Arena::CreateMaybeMessage<::google::apps::drive::activity::v2::TeamDriveReference>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace apps {
namespace drive {
namespace activity {
namespace v2 {

enum DriveItem_Folder_Type {
  DriveItem_Folder_Type_TYPE_UNSPECIFIED = 0,
  DriveItem_Folder_Type_MY_DRIVE_ROOT = 1,
  DriveItem_Folder_Type_TEAM_DRIVE_ROOT = 2,
  DriveItem_Folder_Type_STANDARD_FOLDER = 3,
  DriveItem_Folder_Type_DriveItem_Folder_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DriveItem_Folder_Type_DriveItem_Folder_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DriveItem_Folder_Type_IsValid(int value);
const DriveItem_Folder_Type DriveItem_Folder_Type_Type_MIN = DriveItem_Folder_Type_TYPE_UNSPECIFIED;
const DriveItem_Folder_Type DriveItem_Folder_Type_Type_MAX = DriveItem_Folder_Type_STANDARD_FOLDER;
const int DriveItem_Folder_Type_Type_ARRAYSIZE = DriveItem_Folder_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DriveItem_Folder_Type_descriptor();
inline const ::std::string& DriveItem_Folder_Type_Name(DriveItem_Folder_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DriveItem_Folder_Type_descriptor(), value);
}
inline bool DriveItem_Folder_Type_Parse(
    const ::std::string& name, DriveItem_Folder_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DriveItem_Folder_Type>(
    DriveItem_Folder_Type_descriptor(), name, value);
}
enum DriveItem_DriveFolder_Type {
  DriveItem_DriveFolder_Type_TYPE_UNSPECIFIED = 0,
  DriveItem_DriveFolder_Type_MY_DRIVE_ROOT = 1,
  DriveItem_DriveFolder_Type_SHARED_DRIVE_ROOT = 2,
  DriveItem_DriveFolder_Type_STANDARD_FOLDER = 3,
  DriveItem_DriveFolder_Type_DriveItem_DriveFolder_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DriveItem_DriveFolder_Type_DriveItem_DriveFolder_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DriveItem_DriveFolder_Type_IsValid(int value);
const DriveItem_DriveFolder_Type DriveItem_DriveFolder_Type_Type_MIN = DriveItem_DriveFolder_Type_TYPE_UNSPECIFIED;
const DriveItem_DriveFolder_Type DriveItem_DriveFolder_Type_Type_MAX = DriveItem_DriveFolder_Type_STANDARD_FOLDER;
const int DriveItem_DriveFolder_Type_Type_ARRAYSIZE = DriveItem_DriveFolder_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DriveItem_DriveFolder_Type_descriptor();
inline const ::std::string& DriveItem_DriveFolder_Type_Name(DriveItem_DriveFolder_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DriveItem_DriveFolder_Type_descriptor(), value);
}
inline bool DriveItem_DriveFolder_Type_Parse(
    const ::std::string& name, DriveItem_DriveFolder_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DriveItem_DriveFolder_Type>(
    DriveItem_DriveFolder_Type_descriptor(), name, value);
}
// ===================================================================

class Target final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(Target&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Target& default_instance();

  enum ObjectCase {
    kDriveItem = 1,
    kDrive = 5,
    kFileComment = 3,
    OBJECT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Target* other);
  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Target* New() const final {
    return CreateMaybeMessage<Target>(nullptr);
  }

  Target* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.apps.drive.activity.v2.TeamDrive team_drive = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_team_drive() const;
  PROTOBUF_DEPRECATED void clear_team_drive();
  PROTOBUF_DEPRECATED static const int kTeamDriveFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::google::apps::drive::activity::v2::TeamDrive& team_drive() const;
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::TeamDrive* release_team_drive();
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::TeamDrive* mutable_team_drive();
  PROTOBUF_DEPRECATED void set_allocated_team_drive(::google::apps::drive::activity::v2::TeamDrive* team_drive);

  // .google.apps.drive.activity.v2.DriveItem drive_item = 1;
  bool has_drive_item() const;
  void clear_drive_item();
  static const int kDriveItemFieldNumber = 1;
  const ::google::apps::drive::activity::v2::DriveItem& drive_item() const;
  ::google::apps::drive::activity::v2::DriveItem* release_drive_item();
  ::google::apps::drive::activity::v2::DriveItem* mutable_drive_item();
  void set_allocated_drive_item(::google::apps::drive::activity::v2::DriveItem* drive_item);

  // .google.apps.drive.activity.v2.Drive drive = 5;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 5;
  const ::google::apps::drive::activity::v2::Drive& drive() const;
  ::google::apps::drive::activity::v2::Drive* release_drive();
  ::google::apps::drive::activity::v2::Drive* mutable_drive();
  void set_allocated_drive(::google::apps::drive::activity::v2::Drive* drive);

  // .google.apps.drive.activity.v2.FileComment file_comment = 3;
  bool has_file_comment() const;
  void clear_file_comment();
  static const int kFileCommentFieldNumber = 3;
  const ::google::apps::drive::activity::v2::FileComment& file_comment() const;
  ::google::apps::drive::activity::v2::FileComment* release_file_comment();
  ::google::apps::drive::activity::v2::FileComment* mutable_file_comment();
  void set_allocated_file_comment(::google::apps::drive::activity::v2::FileComment* file_comment);

  void clear_object();
  ObjectCase object_case() const;
  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.Target)
 private:
  class HasBitSetters;
  void set_has_drive_item();
  void set_has_drive();
  void set_has_file_comment();

  inline bool has_object() const;
  inline void clear_has_object();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::apps::drive::activity::v2::TeamDrive* team_drive_;
  union ObjectUnion {
    ObjectUnion() {}
    ::google::apps::drive::activity::v2::DriveItem* drive_item_;
    ::google::apps::drive::activity::v2::Drive* drive_;
    ::google::apps::drive::activity::v2::FileComment* file_comment_;
  } object_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class TargetReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.TargetReference) */ {
 public:
  TargetReference();
  virtual ~TargetReference();

  TargetReference(const TargetReference& from);

  inline TargetReference& operator=(const TargetReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetReference(TargetReference&& from) noexcept
    : TargetReference() {
    *this = ::std::move(from);
  }

  inline TargetReference& operator=(TargetReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TargetReference& default_instance();

  enum ObjectCase {
    kDriveItem = 1,
    kDrive = 3,
    OBJECT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetReference* internal_default_instance() {
    return reinterpret_cast<const TargetReference*>(
               &_TargetReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TargetReference* other);
  friend void swap(TargetReference& a, TargetReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetReference* New() const final {
    return CreateMaybeMessage<TargetReference>(nullptr);
  }

  TargetReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TargetReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TargetReference& from);
  void MergeFrom(const TargetReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.apps.drive.activity.v2.TeamDriveReference team_drive = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_team_drive() const;
  PROTOBUF_DEPRECATED void clear_team_drive();
  PROTOBUF_DEPRECATED static const int kTeamDriveFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::google::apps::drive::activity::v2::TeamDriveReference& team_drive() const;
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::TeamDriveReference* release_team_drive();
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::TeamDriveReference* mutable_team_drive();
  PROTOBUF_DEPRECATED void set_allocated_team_drive(::google::apps::drive::activity::v2::TeamDriveReference* team_drive);

  // .google.apps.drive.activity.v2.DriveItemReference drive_item = 1;
  bool has_drive_item() const;
  void clear_drive_item();
  static const int kDriveItemFieldNumber = 1;
  const ::google::apps::drive::activity::v2::DriveItemReference& drive_item() const;
  ::google::apps::drive::activity::v2::DriveItemReference* release_drive_item();
  ::google::apps::drive::activity::v2::DriveItemReference* mutable_drive_item();
  void set_allocated_drive_item(::google::apps::drive::activity::v2::DriveItemReference* drive_item);

  // .google.apps.drive.activity.v2.DriveReference drive = 3;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 3;
  const ::google::apps::drive::activity::v2::DriveReference& drive() const;
  ::google::apps::drive::activity::v2::DriveReference* release_drive();
  ::google::apps::drive::activity::v2::DriveReference* mutable_drive();
  void set_allocated_drive(::google::apps::drive::activity::v2::DriveReference* drive);

  void clear_object();
  ObjectCase object_case() const;
  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.TargetReference)
 private:
  class HasBitSetters;
  void set_has_drive_item();
  void set_has_drive();

  inline bool has_object() const;
  inline void clear_has_object();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::apps::drive::activity::v2::TeamDriveReference* team_drive_;
  union ObjectUnion {
    ObjectUnion() {}
    ::google::apps::drive::activity::v2::DriveItemReference* drive_item_;
    ::google::apps::drive::activity::v2::DriveReference* drive_;
  } object_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class FileComment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.FileComment) */ {
 public:
  FileComment();
  virtual ~FileComment();

  FileComment(const FileComment& from);

  inline FileComment& operator=(const FileComment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileComment(FileComment&& from) noexcept
    : FileComment() {
    *this = ::std::move(from);
  }

  inline FileComment& operator=(FileComment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileComment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileComment* internal_default_instance() {
    return reinterpret_cast<const FileComment*>(
               &_FileComment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileComment* other);
  friend void swap(FileComment& a, FileComment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileComment* New() const final {
    return CreateMaybeMessage<FileComment>(nullptr);
  }

  FileComment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileComment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileComment& from);
  void MergeFrom(const FileComment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileComment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string legacy_comment_id = 1;
  void clear_legacy_comment_id();
  static const int kLegacyCommentIdFieldNumber = 1;
  const ::std::string& legacy_comment_id() const;
  void set_legacy_comment_id(const ::std::string& value);
  #if LANG_CXX11
  void set_legacy_comment_id(::std::string&& value);
  #endif
  void set_legacy_comment_id(const char* value);
  void set_legacy_comment_id(const char* value, size_t size);
  ::std::string* mutable_legacy_comment_id();
  ::std::string* release_legacy_comment_id();
  void set_allocated_legacy_comment_id(::std::string* legacy_comment_id);

  // string legacy_discussion_id = 2;
  void clear_legacy_discussion_id();
  static const int kLegacyDiscussionIdFieldNumber = 2;
  const ::std::string& legacy_discussion_id() const;
  void set_legacy_discussion_id(const ::std::string& value);
  #if LANG_CXX11
  void set_legacy_discussion_id(::std::string&& value);
  #endif
  void set_legacy_discussion_id(const char* value);
  void set_legacy_discussion_id(const char* value, size_t size);
  ::std::string* mutable_legacy_discussion_id();
  ::std::string* release_legacy_discussion_id();
  void set_allocated_legacy_discussion_id(::std::string* legacy_discussion_id);

  // string link_to_discussion = 3;
  void clear_link_to_discussion();
  static const int kLinkToDiscussionFieldNumber = 3;
  const ::std::string& link_to_discussion() const;
  void set_link_to_discussion(const ::std::string& value);
  #if LANG_CXX11
  void set_link_to_discussion(::std::string&& value);
  #endif
  void set_link_to_discussion(const char* value);
  void set_link_to_discussion(const char* value, size_t size);
  ::std::string* mutable_link_to_discussion();
  ::std::string* release_link_to_discussion();
  void set_allocated_link_to_discussion(::std::string* link_to_discussion);

  // .google.apps.drive.activity.v2.DriveItem parent = 4;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::google::apps::drive::activity::v2::DriveItem& parent() const;
  ::google::apps::drive::activity::v2::DriveItem* release_parent();
  ::google::apps::drive::activity::v2::DriveItem* mutable_parent();
  void set_allocated_parent(::google::apps::drive::activity::v2::DriveItem* parent);

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.FileComment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr legacy_comment_id_;
  ::google::protobuf::internal::ArenaStringPtr legacy_discussion_id_;
  ::google::protobuf::internal::ArenaStringPtr link_to_discussion_;
  ::google::apps::drive::activity::v2::DriveItem* parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class DriveItem_File final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.DriveItem.File) */ {
 public:
  DriveItem_File();
  virtual ~DriveItem_File();

  DriveItem_File(const DriveItem_File& from);

  inline DriveItem_File& operator=(const DriveItem_File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveItem_File(DriveItem_File&& from) noexcept
    : DriveItem_File() {
    *this = ::std::move(from);
  }

  inline DriveItem_File& operator=(DriveItem_File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DriveItem_File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveItem_File* internal_default_instance() {
    return reinterpret_cast<const DriveItem_File*>(
               &_DriveItem_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DriveItem_File* other);
  friend void swap(DriveItem_File& a, DriveItem_File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveItem_File* New() const final {
    return CreateMaybeMessage<DriveItem_File>(nullptr);
  }

  DriveItem_File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DriveItem_File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DriveItem_File& from);
  void MergeFrom(const DriveItem_File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveItem_File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.DriveItem.File)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class DriveItem_Folder final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.DriveItem.Folder) */ {
 public:
  DriveItem_Folder();
  virtual ~DriveItem_Folder();

  DriveItem_Folder(const DriveItem_Folder& from);

  inline DriveItem_Folder& operator=(const DriveItem_Folder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveItem_Folder(DriveItem_Folder&& from) noexcept
    : DriveItem_Folder() {
    *this = ::std::move(from);
  }

  inline DriveItem_Folder& operator=(DriveItem_Folder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DriveItem_Folder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveItem_Folder* internal_default_instance() {
    return reinterpret_cast<const DriveItem_Folder*>(
               &_DriveItem_Folder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DriveItem_Folder* other);
  friend void swap(DriveItem_Folder& a, DriveItem_Folder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveItem_Folder* New() const final {
    return CreateMaybeMessage<DriveItem_Folder>(nullptr);
  }

  DriveItem_Folder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DriveItem_Folder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DriveItem_Folder& from);
  void MergeFrom(const DriveItem_Folder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveItem_Folder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DriveItem_Folder_Type Type;
  static const Type TYPE_UNSPECIFIED =
    DriveItem_Folder_Type_TYPE_UNSPECIFIED;
  static const Type MY_DRIVE_ROOT =
    DriveItem_Folder_Type_MY_DRIVE_ROOT;
  static const Type TEAM_DRIVE_ROOT =
    DriveItem_Folder_Type_TEAM_DRIVE_ROOT;
  static const Type STANDARD_FOLDER =
    DriveItem_Folder_Type_STANDARD_FOLDER;
  static inline bool Type_IsValid(int value) {
    return DriveItem_Folder_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DriveItem_Folder_Type_Type_MIN;
  static const Type Type_MAX =
    DriveItem_Folder_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DriveItem_Folder_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DriveItem_Folder_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DriveItem_Folder_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DriveItem_Folder_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.apps.drive.activity.v2.DriveItem.Folder.Type type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::apps::drive::activity::v2::DriveItem_Folder_Type type() const;
  void set_type(::google::apps::drive::activity::v2::DriveItem_Folder_Type value);

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.DriveItem.Folder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class DriveItem_DriveFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.DriveItem.DriveFile) */ {
 public:
  DriveItem_DriveFile();
  virtual ~DriveItem_DriveFile();

  DriveItem_DriveFile(const DriveItem_DriveFile& from);

  inline DriveItem_DriveFile& operator=(const DriveItem_DriveFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveItem_DriveFile(DriveItem_DriveFile&& from) noexcept
    : DriveItem_DriveFile() {
    *this = ::std::move(from);
  }

  inline DriveItem_DriveFile& operator=(DriveItem_DriveFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DriveItem_DriveFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveItem_DriveFile* internal_default_instance() {
    return reinterpret_cast<const DriveItem_DriveFile*>(
               &_DriveItem_DriveFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DriveItem_DriveFile* other);
  friend void swap(DriveItem_DriveFile& a, DriveItem_DriveFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveItem_DriveFile* New() const final {
    return CreateMaybeMessage<DriveItem_DriveFile>(nullptr);
  }

  DriveItem_DriveFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DriveItem_DriveFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DriveItem_DriveFile& from);
  void MergeFrom(const DriveItem_DriveFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveItem_DriveFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.DriveItem.DriveFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class DriveItem_DriveFolder final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.DriveItem.DriveFolder) */ {
 public:
  DriveItem_DriveFolder();
  virtual ~DriveItem_DriveFolder();

  DriveItem_DriveFolder(const DriveItem_DriveFolder& from);

  inline DriveItem_DriveFolder& operator=(const DriveItem_DriveFolder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveItem_DriveFolder(DriveItem_DriveFolder&& from) noexcept
    : DriveItem_DriveFolder() {
    *this = ::std::move(from);
  }

  inline DriveItem_DriveFolder& operator=(DriveItem_DriveFolder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DriveItem_DriveFolder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveItem_DriveFolder* internal_default_instance() {
    return reinterpret_cast<const DriveItem_DriveFolder*>(
               &_DriveItem_DriveFolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DriveItem_DriveFolder* other);
  friend void swap(DriveItem_DriveFolder& a, DriveItem_DriveFolder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveItem_DriveFolder* New() const final {
    return CreateMaybeMessage<DriveItem_DriveFolder>(nullptr);
  }

  DriveItem_DriveFolder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DriveItem_DriveFolder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DriveItem_DriveFolder& from);
  void MergeFrom(const DriveItem_DriveFolder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveItem_DriveFolder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DriveItem_DriveFolder_Type Type;
  static const Type TYPE_UNSPECIFIED =
    DriveItem_DriveFolder_Type_TYPE_UNSPECIFIED;
  static const Type MY_DRIVE_ROOT =
    DriveItem_DriveFolder_Type_MY_DRIVE_ROOT;
  static const Type SHARED_DRIVE_ROOT =
    DriveItem_DriveFolder_Type_SHARED_DRIVE_ROOT;
  static const Type STANDARD_FOLDER =
    DriveItem_DriveFolder_Type_STANDARD_FOLDER;
  static inline bool Type_IsValid(int value) {
    return DriveItem_DriveFolder_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DriveItem_DriveFolder_Type_Type_MIN;
  static const Type Type_MAX =
    DriveItem_DriveFolder_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DriveItem_DriveFolder_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DriveItem_DriveFolder_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DriveItem_DriveFolder_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DriveItem_DriveFolder_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.apps.drive.activity.v2.DriveItem.DriveFolder.Type type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type type() const;
  void set_type(::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type value);

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.DriveItem.DriveFolder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class DriveItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.DriveItem) */ {
 public:
  DriveItem();
  virtual ~DriveItem();

  DriveItem(const DriveItem& from);

  inline DriveItem& operator=(const DriveItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveItem(DriveItem&& from) noexcept
    : DriveItem() {
    *this = ::std::move(from);
  }

  inline DriveItem& operator=(DriveItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DriveItem& default_instance();

  enum ItemTypeCase {
    kDriveFile = 8,
    kDriveFolder = 9,
    ITEM_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveItem* internal_default_instance() {
    return reinterpret_cast<const DriveItem*>(
               &_DriveItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DriveItem* other);
  friend void swap(DriveItem& a, DriveItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveItem* New() const final {
    return CreateMaybeMessage<DriveItem>(nullptr);
  }

  DriveItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DriveItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DriveItem& from);
  void MergeFrom(const DriveItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DriveItem_File File;
  typedef DriveItem_Folder Folder;
  typedef DriveItem_DriveFile DriveFile;
  typedef DriveItem_DriveFolder DriveFolder;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string mime_type = 6;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 6;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  #if LANG_CXX11
  void set_mime_type(::std::string&& value);
  #endif
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // .google.apps.drive.activity.v2.DriveItem.File file = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_file() const;
  PROTOBUF_DEPRECATED void clear_file();
  PROTOBUF_DEPRECATED static const int kFileFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::google::apps::drive::activity::v2::DriveItem_File& file() const;
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_File* release_file();
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_File* mutable_file();
  PROTOBUF_DEPRECATED void set_allocated_file(::google::apps::drive::activity::v2::DriveItem_File* file);

  // .google.apps.drive.activity.v2.DriveItem.Folder folder = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_folder() const;
  PROTOBUF_DEPRECATED void clear_folder();
  PROTOBUF_DEPRECATED static const int kFolderFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::google::apps::drive::activity::v2::DriveItem_Folder& folder() const;
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_Folder* release_folder();
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_Folder* mutable_folder();
  PROTOBUF_DEPRECATED void set_allocated_folder(::google::apps::drive::activity::v2::DriveItem_Folder* folder);

  // .google.apps.drive.activity.v2.Owner owner = 7;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 7;
  const ::google::apps::drive::activity::v2::Owner& owner() const;
  ::google::apps::drive::activity::v2::Owner* release_owner();
  ::google::apps::drive::activity::v2::Owner* mutable_owner();
  void set_allocated_owner(::google::apps::drive::activity::v2::Owner* owner);

  // .google.apps.drive.activity.v2.DriveItem.DriveFile drive_file = 8;
  bool has_drive_file() const;
  void clear_drive_file();
  static const int kDriveFileFieldNumber = 8;
  const ::google::apps::drive::activity::v2::DriveItem_DriveFile& drive_file() const;
  ::google::apps::drive::activity::v2::DriveItem_DriveFile* release_drive_file();
  ::google::apps::drive::activity::v2::DriveItem_DriveFile* mutable_drive_file();
  void set_allocated_drive_file(::google::apps::drive::activity::v2::DriveItem_DriveFile* drive_file);

  // .google.apps.drive.activity.v2.DriveItem.DriveFolder drive_folder = 9;
  bool has_drive_folder() const;
  void clear_drive_folder();
  static const int kDriveFolderFieldNumber = 9;
  const ::google::apps::drive::activity::v2::DriveItem_DriveFolder& drive_folder() const;
  ::google::apps::drive::activity::v2::DriveItem_DriveFolder* release_drive_folder();
  ::google::apps::drive::activity::v2::DriveItem_DriveFolder* mutable_drive_folder();
  void set_allocated_drive_folder(::google::apps::drive::activity::v2::DriveItem_DriveFolder* drive_folder);

  void clear_item_type();
  ItemTypeCase item_type_case() const;
  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.DriveItem)
 private:
  class HasBitSetters;
  void set_has_drive_file();
  void set_has_drive_folder();

  inline bool has_item_type() const;
  inline void clear_has_item_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  ::google::apps::drive::activity::v2::DriveItem_File* file_;
  ::google::apps::drive::activity::v2::DriveItem_Folder* folder_;
  ::google::apps::drive::activity::v2::Owner* owner_;
  union ItemTypeUnion {
    ItemTypeUnion() {}
    ::google::apps::drive::activity::v2::DriveItem_DriveFile* drive_file_;
    ::google::apps::drive::activity::v2::DriveItem_DriveFolder* drive_folder_;
  } item_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class Owner final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.Owner) */ {
 public:
  Owner();
  virtual ~Owner();

  Owner(const Owner& from);

  inline Owner& operator=(const Owner& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Owner(Owner&& from) noexcept
    : Owner() {
    *this = ::std::move(from);
  }

  inline Owner& operator=(Owner&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Owner& default_instance();

  enum OwnerCase {
    kUser = 1,
    kDrive = 4,
    OWNER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Owner* internal_default_instance() {
    return reinterpret_cast<const Owner*>(
               &_Owner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Owner* other);
  friend void swap(Owner& a, Owner& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Owner* New() const final {
    return CreateMaybeMessage<Owner>(nullptr);
  }

  Owner* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Owner>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Owner& from);
  void MergeFrom(const Owner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Owner* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.apps.drive.activity.v2.TeamDriveReference team_drive = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_team_drive() const;
  PROTOBUF_DEPRECATED void clear_team_drive();
  PROTOBUF_DEPRECATED static const int kTeamDriveFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::google::apps::drive::activity::v2::TeamDriveReference& team_drive() const;
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::TeamDriveReference* release_team_drive();
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::TeamDriveReference* mutable_team_drive();
  PROTOBUF_DEPRECATED void set_allocated_team_drive(::google::apps::drive::activity::v2::TeamDriveReference* team_drive);

  // .google.apps.drive.activity.v2.Domain domain = 3;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::google::apps::drive::activity::v2::Domain& domain() const;
  ::google::apps::drive::activity::v2::Domain* release_domain();
  ::google::apps::drive::activity::v2::Domain* mutable_domain();
  void set_allocated_domain(::google::apps::drive::activity::v2::Domain* domain);

  // .google.apps.drive.activity.v2.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::google::apps::drive::activity::v2::User& user() const;
  ::google::apps::drive::activity::v2::User* release_user();
  ::google::apps::drive::activity::v2::User* mutable_user();
  void set_allocated_user(::google::apps::drive::activity::v2::User* user);

  // .google.apps.drive.activity.v2.DriveReference drive = 4;
  bool has_drive() const;
  void clear_drive();
  static const int kDriveFieldNumber = 4;
  const ::google::apps::drive::activity::v2::DriveReference& drive() const;
  ::google::apps::drive::activity::v2::DriveReference* release_drive();
  ::google::apps::drive::activity::v2::DriveReference* mutable_drive();
  void set_allocated_drive(::google::apps::drive::activity::v2::DriveReference* drive);

  void clear_owner();
  OwnerCase owner_case() const;
  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.Owner)
 private:
  class HasBitSetters;
  void set_has_user();
  void set_has_drive();

  inline bool has_owner() const;
  inline void clear_has_owner();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::apps::drive::activity::v2::TeamDriveReference* team_drive_;
  ::google::apps::drive::activity::v2::Domain* domain_;
  union OwnerUnion {
    OwnerUnion() {}
    ::google::apps::drive::activity::v2::User* user_;
    ::google::apps::drive::activity::v2::DriveReference* drive_;
  } owner_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class TeamDrive final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.TeamDrive) */ {
 public:
  TeamDrive();
  virtual ~TeamDrive();

  TeamDrive(const TeamDrive& from);

  inline TeamDrive& operator=(const TeamDrive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamDrive(TeamDrive&& from) noexcept
    : TeamDrive() {
    *this = ::std::move(from);
  }

  inline TeamDrive& operator=(TeamDrive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TeamDrive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamDrive* internal_default_instance() {
    return reinterpret_cast<const TeamDrive*>(
               &_TeamDrive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TeamDrive* other);
  friend void swap(TeamDrive& a, TeamDrive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamDrive* New() const final {
    return CreateMaybeMessage<TeamDrive>(nullptr);
  }

  TeamDrive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamDrive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamDrive& from);
  void MergeFrom(const TeamDrive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamDrive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .google.apps.drive.activity.v2.DriveItem root = 3;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 3;
  const ::google::apps::drive::activity::v2::DriveItem& root() const;
  ::google::apps::drive::activity::v2::DriveItem* release_root();
  ::google::apps::drive::activity::v2::DriveItem* mutable_root();
  void set_allocated_root(::google::apps::drive::activity::v2::DriveItem* root);

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.TeamDrive)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::apps::drive::activity::v2::DriveItem* root_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class Drive final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.Drive) */ {
 public:
  Drive();
  virtual ~Drive();

  Drive(const Drive& from);

  inline Drive& operator=(const Drive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Drive(Drive&& from) noexcept
    : Drive() {
    *this = ::std::move(from);
  }

  inline Drive& operator=(Drive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Drive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Drive* internal_default_instance() {
    return reinterpret_cast<const Drive*>(
               &_Drive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Drive* other);
  friend void swap(Drive& a, Drive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Drive* New() const final {
    return CreateMaybeMessage<Drive>(nullptr);
  }

  Drive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Drive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Drive& from);
  void MergeFrom(const Drive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Drive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .google.apps.drive.activity.v2.DriveItem root = 3;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 3;
  const ::google::apps::drive::activity::v2::DriveItem& root() const;
  ::google::apps::drive::activity::v2::DriveItem* release_root();
  ::google::apps::drive::activity::v2::DriveItem* mutable_root();
  void set_allocated_root(::google::apps::drive::activity::v2::DriveItem* root);

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.Drive)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::apps::drive::activity::v2::DriveItem* root_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class DriveItemReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.DriveItemReference) */ {
 public:
  DriveItemReference();
  virtual ~DriveItemReference();

  DriveItemReference(const DriveItemReference& from);

  inline DriveItemReference& operator=(const DriveItemReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveItemReference(DriveItemReference&& from) noexcept
    : DriveItemReference() {
    *this = ::std::move(from);
  }

  inline DriveItemReference& operator=(DriveItemReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DriveItemReference& default_instance();

  enum ItemTypeCase {
    kDriveFile = 8,
    kDriveFolder = 9,
    ITEM_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveItemReference* internal_default_instance() {
    return reinterpret_cast<const DriveItemReference*>(
               &_DriveItemReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DriveItemReference* other);
  friend void swap(DriveItemReference& a, DriveItemReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveItemReference* New() const final {
    return CreateMaybeMessage<DriveItemReference>(nullptr);
  }

  DriveItemReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DriveItemReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DriveItemReference& from);
  void MergeFrom(const DriveItemReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveItemReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .google.apps.drive.activity.v2.DriveItem.File file = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_file() const;
  PROTOBUF_DEPRECATED void clear_file();
  PROTOBUF_DEPRECATED static const int kFileFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::google::apps::drive::activity::v2::DriveItem_File& file() const;
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_File* release_file();
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_File* mutable_file();
  PROTOBUF_DEPRECATED void set_allocated_file(::google::apps::drive::activity::v2::DriveItem_File* file);

  // .google.apps.drive.activity.v2.DriveItem.Folder folder = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_folder() const;
  PROTOBUF_DEPRECATED void clear_folder();
  PROTOBUF_DEPRECATED static const int kFolderFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::google::apps::drive::activity::v2::DriveItem_Folder& folder() const;
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_Folder* release_folder();
  PROTOBUF_DEPRECATED ::google::apps::drive::activity::v2::DriveItem_Folder* mutable_folder();
  PROTOBUF_DEPRECATED void set_allocated_folder(::google::apps::drive::activity::v2::DriveItem_Folder* folder);

  // .google.apps.drive.activity.v2.DriveItem.DriveFile drive_file = 8;
  bool has_drive_file() const;
  void clear_drive_file();
  static const int kDriveFileFieldNumber = 8;
  const ::google::apps::drive::activity::v2::DriveItem_DriveFile& drive_file() const;
  ::google::apps::drive::activity::v2::DriveItem_DriveFile* release_drive_file();
  ::google::apps::drive::activity::v2::DriveItem_DriveFile* mutable_drive_file();
  void set_allocated_drive_file(::google::apps::drive::activity::v2::DriveItem_DriveFile* drive_file);

  // .google.apps.drive.activity.v2.DriveItem.DriveFolder drive_folder = 9;
  bool has_drive_folder() const;
  void clear_drive_folder();
  static const int kDriveFolderFieldNumber = 9;
  const ::google::apps::drive::activity::v2::DriveItem_DriveFolder& drive_folder() const;
  ::google::apps::drive::activity::v2::DriveItem_DriveFolder* release_drive_folder();
  ::google::apps::drive::activity::v2::DriveItem_DriveFolder* mutable_drive_folder();
  void set_allocated_drive_folder(::google::apps::drive::activity::v2::DriveItem_DriveFolder* drive_folder);

  void clear_item_type();
  ItemTypeCase item_type_case() const;
  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.DriveItemReference)
 private:
  class HasBitSetters;
  void set_has_drive_file();
  void set_has_drive_folder();

  inline bool has_item_type() const;
  inline void clear_has_item_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::apps::drive::activity::v2::DriveItem_File* file_;
  ::google::apps::drive::activity::v2::DriveItem_Folder* folder_;
  union ItemTypeUnion {
    ItemTypeUnion() {}
    ::google::apps::drive::activity::v2::DriveItem_DriveFile* drive_file_;
    ::google::apps::drive::activity::v2::DriveItem_DriveFolder* drive_folder_;
  } item_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class TeamDriveReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.TeamDriveReference) */ {
 public:
  TeamDriveReference();
  virtual ~TeamDriveReference();

  TeamDriveReference(const TeamDriveReference& from);

  inline TeamDriveReference& operator=(const TeamDriveReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamDriveReference(TeamDriveReference&& from) noexcept
    : TeamDriveReference() {
    *this = ::std::move(from);
  }

  inline TeamDriveReference& operator=(TeamDriveReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TeamDriveReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamDriveReference* internal_default_instance() {
    return reinterpret_cast<const TeamDriveReference*>(
               &_TeamDriveReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TeamDriveReference* other);
  friend void swap(TeamDriveReference& a, TeamDriveReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamDriveReference* New() const final {
    return CreateMaybeMessage<TeamDriveReference>(nullptr);
  }

  TeamDriveReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamDriveReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamDriveReference& from);
  void MergeFrom(const TeamDriveReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamDriveReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.TeamDriveReference)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// -------------------------------------------------------------------

class DriveReference final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.apps.drive.activity.v2.DriveReference) */ {
 public:
  DriveReference();
  virtual ~DriveReference();

  DriveReference(const DriveReference& from);

  inline DriveReference& operator=(const DriveReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DriveReference(DriveReference&& from) noexcept
    : DriveReference() {
    *this = ::std::move(from);
  }

  inline DriveReference& operator=(DriveReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DriveReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DriveReference* internal_default_instance() {
    return reinterpret_cast<const DriveReference*>(
               &_DriveReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DriveReference* other);
  friend void swap(DriveReference& a, DriveReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DriveReference* New() const final {
    return CreateMaybeMessage<DriveReference>(nullptr);
  }

  DriveReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DriveReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DriveReference& from);
  void MergeFrom(const DriveReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DriveReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:google.apps.drive.activity.v2.DriveReference)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Target

// .google.apps.drive.activity.v2.DriveItem drive_item = 1;
inline bool Target::has_drive_item() const {
  return object_case() == kDriveItem;
}
inline void Target::set_has_drive_item() {
  _oneof_case_[0] = kDriveItem;
}
inline void Target::clear_drive_item() {
  if (has_drive_item()) {
    delete object_.drive_item_;
    clear_has_object();
  }
}
inline ::google::apps::drive::activity::v2::DriveItem* Target::release_drive_item() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Target.drive_item)
  if (has_drive_item()) {
    clear_has_object();
      ::google::apps::drive::activity::v2::DriveItem* temp = object_.drive_item_;
    object_.drive_item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveItem& Target::drive_item() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Target.drive_item)
  return has_drive_item()
      ? *object_.drive_item_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveItem*>(&::google::apps::drive::activity::v2::_DriveItem_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem* Target::mutable_drive_item() {
  if (!has_drive_item()) {
    clear_object();
    set_has_drive_item();
    object_.drive_item_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveItem >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Target.drive_item)
  return object_.drive_item_;
}

// .google.apps.drive.activity.v2.Drive drive = 5;
inline bool Target::has_drive() const {
  return object_case() == kDrive;
}
inline void Target::set_has_drive() {
  _oneof_case_[0] = kDrive;
}
inline void Target::clear_drive() {
  if (has_drive()) {
    delete object_.drive_;
    clear_has_object();
  }
}
inline ::google::apps::drive::activity::v2::Drive* Target::release_drive() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Target.drive)
  if (has_drive()) {
    clear_has_object();
      ::google::apps::drive::activity::v2::Drive* temp = object_.drive_;
    object_.drive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::Drive& Target::drive() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Target.drive)
  return has_drive()
      ? *object_.drive_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::Drive*>(&::google::apps::drive::activity::v2::_Drive_default_instance_);
}
inline ::google::apps::drive::activity::v2::Drive* Target::mutable_drive() {
  if (!has_drive()) {
    clear_object();
    set_has_drive();
    object_.drive_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::Drive >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Target.drive)
  return object_.drive_;
}

// .google.apps.drive.activity.v2.FileComment file_comment = 3;
inline bool Target::has_file_comment() const {
  return object_case() == kFileComment;
}
inline void Target::set_has_file_comment() {
  _oneof_case_[0] = kFileComment;
}
inline void Target::clear_file_comment() {
  if (has_file_comment()) {
    delete object_.file_comment_;
    clear_has_object();
  }
}
inline ::google::apps::drive::activity::v2::FileComment* Target::release_file_comment() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Target.file_comment)
  if (has_file_comment()) {
    clear_has_object();
      ::google::apps::drive::activity::v2::FileComment* temp = object_.file_comment_;
    object_.file_comment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::FileComment& Target::file_comment() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Target.file_comment)
  return has_file_comment()
      ? *object_.file_comment_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::FileComment*>(&::google::apps::drive::activity::v2::_FileComment_default_instance_);
}
inline ::google::apps::drive::activity::v2::FileComment* Target::mutable_file_comment() {
  if (!has_file_comment()) {
    clear_object();
    set_has_file_comment();
    object_.file_comment_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::FileComment >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Target.file_comment)
  return object_.file_comment_;
}

// .google.apps.drive.activity.v2.TeamDrive team_drive = 2 [deprecated = true];
inline bool Target::has_team_drive() const {
  return this != internal_default_instance() && team_drive_ != nullptr;
}
inline void Target::clear_team_drive() {
  if (GetArenaNoVirtual() == nullptr && team_drive_ != nullptr) {
    delete team_drive_;
  }
  team_drive_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::TeamDrive& Target::team_drive() const {
  const ::google::apps::drive::activity::v2::TeamDrive* p = team_drive_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Target.team_drive)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::TeamDrive*>(
      &::google::apps::drive::activity::v2::_TeamDrive_default_instance_);
}
inline ::google::apps::drive::activity::v2::TeamDrive* Target::release_team_drive() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Target.team_drive)
  
  ::google::apps::drive::activity::v2::TeamDrive* temp = team_drive_;
  team_drive_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::TeamDrive* Target::mutable_team_drive() {
  
  if (team_drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::TeamDrive>(GetArenaNoVirtual());
    team_drive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Target.team_drive)
  return team_drive_;
}
inline void Target::set_allocated_team_drive(::google::apps::drive::activity::v2::TeamDrive* team_drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_drive_;
  }
  if (team_drive) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_drive, submessage_arena);
    }
    
  } else {
    
  }
  team_drive_ = team_drive;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.Target.team_drive)
}

inline bool Target::has_object() const {
  return object_case() != OBJECT_NOT_SET;
}
inline void Target::clear_has_object() {
  _oneof_case_[0] = OBJECT_NOT_SET;
}
inline Target::ObjectCase Target::object_case() const {
  return Target::ObjectCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TargetReference

// .google.apps.drive.activity.v2.DriveItemReference drive_item = 1;
inline bool TargetReference::has_drive_item() const {
  return object_case() == kDriveItem;
}
inline void TargetReference::set_has_drive_item() {
  _oneof_case_[0] = kDriveItem;
}
inline void TargetReference::clear_drive_item() {
  if (has_drive_item()) {
    delete object_.drive_item_;
    clear_has_object();
  }
}
inline ::google::apps::drive::activity::v2::DriveItemReference* TargetReference::release_drive_item() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TargetReference.drive_item)
  if (has_drive_item()) {
    clear_has_object();
      ::google::apps::drive::activity::v2::DriveItemReference* temp = object_.drive_item_;
    object_.drive_item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveItemReference& TargetReference::drive_item() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TargetReference.drive_item)
  return has_drive_item()
      ? *object_.drive_item_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveItemReference*>(&::google::apps::drive::activity::v2::_DriveItemReference_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItemReference* TargetReference::mutable_drive_item() {
  if (!has_drive_item()) {
    clear_object();
    set_has_drive_item();
    object_.drive_item_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveItemReference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TargetReference.drive_item)
  return object_.drive_item_;
}

// .google.apps.drive.activity.v2.DriveReference drive = 3;
inline bool TargetReference::has_drive() const {
  return object_case() == kDrive;
}
inline void TargetReference::set_has_drive() {
  _oneof_case_[0] = kDrive;
}
inline void TargetReference::clear_drive() {
  if (has_drive()) {
    delete object_.drive_;
    clear_has_object();
  }
}
inline ::google::apps::drive::activity::v2::DriveReference* TargetReference::release_drive() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TargetReference.drive)
  if (has_drive()) {
    clear_has_object();
      ::google::apps::drive::activity::v2::DriveReference* temp = object_.drive_;
    object_.drive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveReference& TargetReference::drive() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TargetReference.drive)
  return has_drive()
      ? *object_.drive_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveReference*>(&::google::apps::drive::activity::v2::_DriveReference_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveReference* TargetReference::mutable_drive() {
  if (!has_drive()) {
    clear_object();
    set_has_drive();
    object_.drive_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveReference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TargetReference.drive)
  return object_.drive_;
}

// .google.apps.drive.activity.v2.TeamDriveReference team_drive = 2 [deprecated = true];
inline bool TargetReference::has_team_drive() const {
  return this != internal_default_instance() && team_drive_ != nullptr;
}
inline void TargetReference::clear_team_drive() {
  if (GetArenaNoVirtual() == nullptr && team_drive_ != nullptr) {
    delete team_drive_;
  }
  team_drive_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::TeamDriveReference& TargetReference::team_drive() const {
  const ::google::apps::drive::activity::v2::TeamDriveReference* p = team_drive_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TargetReference.team_drive)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::TeamDriveReference*>(
      &::google::apps::drive::activity::v2::_TeamDriveReference_default_instance_);
}
inline ::google::apps::drive::activity::v2::TeamDriveReference* TargetReference::release_team_drive() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TargetReference.team_drive)
  
  ::google::apps::drive::activity::v2::TeamDriveReference* temp = team_drive_;
  team_drive_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::TeamDriveReference* TargetReference::mutable_team_drive() {
  
  if (team_drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::TeamDriveReference>(GetArenaNoVirtual());
    team_drive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TargetReference.team_drive)
  return team_drive_;
}
inline void TargetReference::set_allocated_team_drive(::google::apps::drive::activity::v2::TeamDriveReference* team_drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_drive_;
  }
  if (team_drive) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_drive, submessage_arena);
    }
    
  } else {
    
  }
  team_drive_ = team_drive;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.TargetReference.team_drive)
}

inline bool TargetReference::has_object() const {
  return object_case() != OBJECT_NOT_SET;
}
inline void TargetReference::clear_has_object() {
  _oneof_case_[0] = OBJECT_NOT_SET;
}
inline TargetReference::ObjectCase TargetReference::object_case() const {
  return TargetReference::ObjectCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileComment

// string legacy_comment_id = 1;
inline void FileComment::clear_legacy_comment_id() {
  legacy_comment_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileComment::legacy_comment_id() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
  return legacy_comment_id_.GetNoArena();
}
inline void FileComment::set_legacy_comment_id(const ::std::string& value) {
  
  legacy_comment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
}
#if LANG_CXX11
inline void FileComment::set_legacy_comment_id(::std::string&& value) {
  
  legacy_comment_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
}
#endif
inline void FileComment::set_legacy_comment_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  legacy_comment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
}
inline void FileComment::set_legacy_comment_id(const char* value, size_t size) {
  
  legacy_comment_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
}
inline ::std::string* FileComment::mutable_legacy_comment_id() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
  return legacy_comment_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileComment::release_legacy_comment_id() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
  
  return legacy_comment_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileComment::set_allocated_legacy_comment_id(::std::string* legacy_comment_id) {
  if (legacy_comment_id != nullptr) {
    
  } else {
    
  }
  legacy_comment_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), legacy_comment_id);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.FileComment.legacy_comment_id)
}

// string legacy_discussion_id = 2;
inline void FileComment::clear_legacy_discussion_id() {
  legacy_discussion_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileComment::legacy_discussion_id() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
  return legacy_discussion_id_.GetNoArena();
}
inline void FileComment::set_legacy_discussion_id(const ::std::string& value) {
  
  legacy_discussion_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
}
#if LANG_CXX11
inline void FileComment::set_legacy_discussion_id(::std::string&& value) {
  
  legacy_discussion_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
}
#endif
inline void FileComment::set_legacy_discussion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  legacy_discussion_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
}
inline void FileComment::set_legacy_discussion_id(const char* value, size_t size) {
  
  legacy_discussion_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
}
inline ::std::string* FileComment::mutable_legacy_discussion_id() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
  return legacy_discussion_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileComment::release_legacy_discussion_id() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
  
  return legacy_discussion_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileComment::set_allocated_legacy_discussion_id(::std::string* legacy_discussion_id) {
  if (legacy_discussion_id != nullptr) {
    
  } else {
    
  }
  legacy_discussion_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), legacy_discussion_id);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.FileComment.legacy_discussion_id)
}

// string link_to_discussion = 3;
inline void FileComment::clear_link_to_discussion() {
  link_to_discussion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileComment::link_to_discussion() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.FileComment.link_to_discussion)
  return link_to_discussion_.GetNoArena();
}
inline void FileComment::set_link_to_discussion(const ::std::string& value) {
  
  link_to_discussion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.FileComment.link_to_discussion)
}
#if LANG_CXX11
inline void FileComment::set_link_to_discussion(::std::string&& value) {
  
  link_to_discussion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.FileComment.link_to_discussion)
}
#endif
inline void FileComment::set_link_to_discussion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_to_discussion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.FileComment.link_to_discussion)
}
inline void FileComment::set_link_to_discussion(const char* value, size_t size) {
  
  link_to_discussion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.FileComment.link_to_discussion)
}
inline ::std::string* FileComment::mutable_link_to_discussion() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.FileComment.link_to_discussion)
  return link_to_discussion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileComment::release_link_to_discussion() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.FileComment.link_to_discussion)
  
  return link_to_discussion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileComment::set_allocated_link_to_discussion(::std::string* link_to_discussion) {
  if (link_to_discussion != nullptr) {
    
  } else {
    
  }
  link_to_discussion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_to_discussion);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.FileComment.link_to_discussion)
}

// .google.apps.drive.activity.v2.DriveItem parent = 4;
inline bool FileComment::has_parent() const {
  return this != internal_default_instance() && parent_ != nullptr;
}
inline void FileComment::clear_parent() {
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::DriveItem& FileComment::parent() const {
  const ::google::apps::drive::activity::v2::DriveItem* p = parent_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.FileComment.parent)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::DriveItem*>(
      &::google::apps::drive::activity::v2::_DriveItem_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem* FileComment::release_parent() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.FileComment.parent)
  
  ::google::apps::drive::activity::v2::DriveItem* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::DriveItem* FileComment::mutable_parent() {
  
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.FileComment.parent)
  return parent_;
}
inline void FileComment::set_allocated_parent(::google::apps::drive::activity::v2::DriveItem* parent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_;
  }
  if (parent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    
  } else {
    
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.FileComment.parent)
}

// -------------------------------------------------------------------

// DriveItem_File

// -------------------------------------------------------------------

// DriveItem_Folder

// .google.apps.drive.activity.v2.DriveItem.Folder.Type type = 6;
inline void DriveItem_Folder::clear_type() {
  type_ = 0;
}
inline ::google::apps::drive::activity::v2::DriveItem_Folder_Type DriveItem_Folder::type() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.Folder.type)
  return static_cast< ::google::apps::drive::activity::v2::DriveItem_Folder_Type >(type_);
}
inline void DriveItem_Folder::set_type(::google::apps::drive::activity::v2::DriveItem_Folder_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveItem.Folder.type)
}

// -------------------------------------------------------------------

// DriveItem_DriveFile

// -------------------------------------------------------------------

// DriveItem_DriveFolder

// .google.apps.drive.activity.v2.DriveItem.DriveFolder.Type type = 6;
inline void DriveItem_DriveFolder::clear_type() {
  type_ = 0;
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type DriveItem_DriveFolder::type() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.DriveFolder.type)
  return static_cast< ::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type >(type_);
}
inline void DriveItem_DriveFolder::set_type(::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveItem.DriveFolder.type)
}

// -------------------------------------------------------------------

// DriveItem

// string name = 1;
inline void DriveItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveItem::name() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.name)
  return name_.GetNoArena();
}
inline void DriveItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveItem.name)
}
#if LANG_CXX11
inline void DriveItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.DriveItem.name)
}
#endif
inline void DriveItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.DriveItem.name)
}
inline void DriveItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.DriveItem.name)
}
inline ::std::string* DriveItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveItem::release_name() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveItem::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItem.name)
}

// string title = 2;
inline void DriveItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveItem::title() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.title)
  return title_.GetNoArena();
}
inline void DriveItem::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveItem.title)
}
#if LANG_CXX11
inline void DriveItem::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.DriveItem.title)
}
#endif
inline void DriveItem::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.DriveItem.title)
}
inline void DriveItem::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.DriveItem.title)
}
inline ::std::string* DriveItem::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveItem::release_title() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveItem::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItem.title)
}

// .google.apps.drive.activity.v2.DriveItem.File file = 3 [deprecated = true];
inline bool DriveItem::has_file() const {
  return this != internal_default_instance() && file_ != nullptr;
}
inline void DriveItem::clear_file() {
  if (GetArenaNoVirtual() == nullptr && file_ != nullptr) {
    delete file_;
  }
  file_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::DriveItem_File& DriveItem::file() const {
  const ::google::apps::drive::activity::v2::DriveItem_File* p = file_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.file)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::DriveItem_File*>(
      &::google::apps::drive::activity::v2::_DriveItem_File_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_File* DriveItem::release_file() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.file)
  
  ::google::apps::drive::activity::v2::DriveItem_File* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::DriveItem_File* DriveItem::mutable_file() {
  
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_File>(GetArenaNoVirtual());
    file_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.file)
  return file_;
}
inline void DriveItem::set_allocated_file(::google::apps::drive::activity::v2::DriveItem_File* file) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_;
  }
  if (file) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItem.file)
}

// .google.apps.drive.activity.v2.DriveItem.Folder folder = 4 [deprecated = true];
inline bool DriveItem::has_folder() const {
  return this != internal_default_instance() && folder_ != nullptr;
}
inline void DriveItem::clear_folder() {
  if (GetArenaNoVirtual() == nullptr && folder_ != nullptr) {
    delete folder_;
  }
  folder_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::DriveItem_Folder& DriveItem::folder() const {
  const ::google::apps::drive::activity::v2::DriveItem_Folder* p = folder_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.folder)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::DriveItem_Folder*>(
      &::google::apps::drive::activity::v2::_DriveItem_Folder_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_Folder* DriveItem::release_folder() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.folder)
  
  ::google::apps::drive::activity::v2::DriveItem_Folder* temp = folder_;
  folder_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::DriveItem_Folder* DriveItem::mutable_folder() {
  
  if (folder_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_Folder>(GetArenaNoVirtual());
    folder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.folder)
  return folder_;
}
inline void DriveItem::set_allocated_folder(::google::apps::drive::activity::v2::DriveItem_Folder* folder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete folder_;
  }
  if (folder) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      folder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    
  } else {
    
  }
  folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItem.folder)
}

// .google.apps.drive.activity.v2.DriveItem.DriveFile drive_file = 8;
inline bool DriveItem::has_drive_file() const {
  return item_type_case() == kDriveFile;
}
inline void DriveItem::set_has_drive_file() {
  _oneof_case_[0] = kDriveFile;
}
inline void DriveItem::clear_drive_file() {
  if (has_drive_file()) {
    delete item_type_.drive_file_;
    clear_has_item_type();
  }
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFile* DriveItem::release_drive_file() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.drive_file)
  if (has_drive_file()) {
    clear_has_item_type();
      ::google::apps::drive::activity::v2::DriveItem_DriveFile* temp = item_type_.drive_file_;
    item_type_.drive_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveItem_DriveFile& DriveItem::drive_file() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.drive_file)
  return has_drive_file()
      ? *item_type_.drive_file_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveItem_DriveFile*>(&::google::apps::drive::activity::v2::_DriveItem_DriveFile_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFile* DriveItem::mutable_drive_file() {
  if (!has_drive_file()) {
    clear_item_type();
    set_has_drive_file();
    item_type_.drive_file_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveItem_DriveFile >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.drive_file)
  return item_type_.drive_file_;
}

// .google.apps.drive.activity.v2.DriveItem.DriveFolder drive_folder = 9;
inline bool DriveItem::has_drive_folder() const {
  return item_type_case() == kDriveFolder;
}
inline void DriveItem::set_has_drive_folder() {
  _oneof_case_[0] = kDriveFolder;
}
inline void DriveItem::clear_drive_folder() {
  if (has_drive_folder()) {
    delete item_type_.drive_folder_;
    clear_has_item_type();
  }
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFolder* DriveItem::release_drive_folder() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.drive_folder)
  if (has_drive_folder()) {
    clear_has_item_type();
      ::google::apps::drive::activity::v2::DriveItem_DriveFolder* temp = item_type_.drive_folder_;
    item_type_.drive_folder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveItem_DriveFolder& DriveItem::drive_folder() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.drive_folder)
  return has_drive_folder()
      ? *item_type_.drive_folder_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveItem_DriveFolder*>(&::google::apps::drive::activity::v2::_DriveItem_DriveFolder_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFolder* DriveItem::mutable_drive_folder() {
  if (!has_drive_folder()) {
    clear_item_type();
    set_has_drive_folder();
    item_type_.drive_folder_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveItem_DriveFolder >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.drive_folder)
  return item_type_.drive_folder_;
}

// string mime_type = 6;
inline void DriveItem::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveItem::mime_type() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.mime_type)
  return mime_type_.GetNoArena();
}
inline void DriveItem::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveItem.mime_type)
}
#if LANG_CXX11
inline void DriveItem::set_mime_type(::std::string&& value) {
  
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.DriveItem.mime_type)
}
#endif
inline void DriveItem::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.DriveItem.mime_type)
}
inline void DriveItem::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.DriveItem.mime_type)
}
inline ::std::string* DriveItem::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveItem::release_mime_type() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveItem::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItem.mime_type)
}

// .google.apps.drive.activity.v2.Owner owner = 7;
inline bool DriveItem::has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline void DriveItem::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::Owner& DriveItem::owner() const {
  const ::google::apps::drive::activity::v2::Owner* p = owner_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItem.owner)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::Owner*>(
      &::google::apps::drive::activity::v2::_Owner_default_instance_);
}
inline ::google::apps::drive::activity::v2::Owner* DriveItem::release_owner() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItem.owner)
  
  ::google::apps::drive::activity::v2::Owner* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::Owner* DriveItem::mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::Owner>(GetArenaNoVirtual());
    owner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItem.owner)
  return owner_;
}
inline void DriveItem::set_allocated_owner(::google::apps::drive::activity::v2::Owner* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItem.owner)
}

inline bool DriveItem::has_item_type() const {
  return item_type_case() != ITEM_TYPE_NOT_SET;
}
inline void DriveItem::clear_has_item_type() {
  _oneof_case_[0] = ITEM_TYPE_NOT_SET;
}
inline DriveItem::ItemTypeCase DriveItem::item_type_case() const {
  return DriveItem::ItemTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Owner

// .google.apps.drive.activity.v2.User user = 1;
inline bool Owner::has_user() const {
  return owner_case() == kUser;
}
inline void Owner::set_has_user() {
  _oneof_case_[0] = kUser;
}
inline ::google::apps::drive::activity::v2::User* Owner::release_user() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Owner.user)
  if (has_user()) {
    clear_has_owner();
      ::google::apps::drive::activity::v2::User* temp = owner_.user_;
    owner_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::User& Owner::user() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Owner.user)
  return has_user()
      ? *owner_.user_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::User*>(&::google::apps::drive::activity::v2::_User_default_instance_);
}
inline ::google::apps::drive::activity::v2::User* Owner::mutable_user() {
  if (!has_user()) {
    clear_owner();
    set_has_user();
    owner_.user_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::User >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Owner.user)
  return owner_.user_;
}

// .google.apps.drive.activity.v2.DriveReference drive = 4;
inline bool Owner::has_drive() const {
  return owner_case() == kDrive;
}
inline void Owner::set_has_drive() {
  _oneof_case_[0] = kDrive;
}
inline void Owner::clear_drive() {
  if (has_drive()) {
    delete owner_.drive_;
    clear_has_owner();
  }
}
inline ::google::apps::drive::activity::v2::DriveReference* Owner::release_drive() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Owner.drive)
  if (has_drive()) {
    clear_has_owner();
      ::google::apps::drive::activity::v2::DriveReference* temp = owner_.drive_;
    owner_.drive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveReference& Owner::drive() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Owner.drive)
  return has_drive()
      ? *owner_.drive_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveReference*>(&::google::apps::drive::activity::v2::_DriveReference_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveReference* Owner::mutable_drive() {
  if (!has_drive()) {
    clear_owner();
    set_has_drive();
    owner_.drive_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveReference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Owner.drive)
  return owner_.drive_;
}

// .google.apps.drive.activity.v2.TeamDriveReference team_drive = 2 [deprecated = true];
inline bool Owner::has_team_drive() const {
  return this != internal_default_instance() && team_drive_ != nullptr;
}
inline void Owner::clear_team_drive() {
  if (GetArenaNoVirtual() == nullptr && team_drive_ != nullptr) {
    delete team_drive_;
  }
  team_drive_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::TeamDriveReference& Owner::team_drive() const {
  const ::google::apps::drive::activity::v2::TeamDriveReference* p = team_drive_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Owner.team_drive)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::TeamDriveReference*>(
      &::google::apps::drive::activity::v2::_TeamDriveReference_default_instance_);
}
inline ::google::apps::drive::activity::v2::TeamDriveReference* Owner::release_team_drive() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Owner.team_drive)
  
  ::google::apps::drive::activity::v2::TeamDriveReference* temp = team_drive_;
  team_drive_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::TeamDriveReference* Owner::mutable_team_drive() {
  
  if (team_drive_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::TeamDriveReference>(GetArenaNoVirtual());
    team_drive_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Owner.team_drive)
  return team_drive_;
}
inline void Owner::set_allocated_team_drive(::google::apps::drive::activity::v2::TeamDriveReference* team_drive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_drive_;
  }
  if (team_drive) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_drive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, team_drive, submessage_arena);
    }
    
  } else {
    
  }
  team_drive_ = team_drive;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.Owner.team_drive)
}

// .google.apps.drive.activity.v2.Domain domain = 3;
inline bool Owner::has_domain() const {
  return this != internal_default_instance() && domain_ != nullptr;
}
inline const ::google::apps::drive::activity::v2::Domain& Owner::domain() const {
  const ::google::apps::drive::activity::v2::Domain* p = domain_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Owner.domain)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::Domain*>(
      &::google::apps::drive::activity::v2::_Domain_default_instance_);
}
inline ::google::apps::drive::activity::v2::Domain* Owner::release_domain() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Owner.domain)
  
  ::google::apps::drive::activity::v2::Domain* temp = domain_;
  domain_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::Domain* Owner::mutable_domain() {
  
  if (domain_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::Domain>(GetArenaNoVirtual());
    domain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Owner.domain)
  return domain_;
}
inline void Owner::set_allocated_domain(::google::apps::drive::activity::v2::Domain* domain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(domain_);
  }
  if (domain) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      domain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain, submessage_arena);
    }
    
  } else {
    
  }
  domain_ = domain;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.Owner.domain)
}

inline bool Owner::has_owner() const {
  return owner_case() != OWNER_NOT_SET;
}
inline void Owner::clear_has_owner() {
  _oneof_case_[0] = OWNER_NOT_SET;
}
inline Owner::OwnerCase Owner::owner_case() const {
  return Owner::OwnerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TeamDrive

// string name = 1;
inline void TeamDrive::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeamDrive::name() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TeamDrive.name)
  return name_.GetNoArena();
}
inline void TeamDrive::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.TeamDrive.name)
}
#if LANG_CXX11
inline void TeamDrive::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.TeamDrive.name)
}
#endif
inline void TeamDrive::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.TeamDrive.name)
}
inline void TeamDrive::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.TeamDrive.name)
}
inline ::std::string* TeamDrive::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TeamDrive.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamDrive::release_name() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TeamDrive.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamDrive::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.TeamDrive.name)
}

// string title = 2;
inline void TeamDrive::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeamDrive::title() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TeamDrive.title)
  return title_.GetNoArena();
}
inline void TeamDrive::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.TeamDrive.title)
}
#if LANG_CXX11
inline void TeamDrive::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.TeamDrive.title)
}
#endif
inline void TeamDrive::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.TeamDrive.title)
}
inline void TeamDrive::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.TeamDrive.title)
}
inline ::std::string* TeamDrive::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TeamDrive.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamDrive::release_title() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TeamDrive.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamDrive::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.TeamDrive.title)
}

// .google.apps.drive.activity.v2.DriveItem root = 3;
inline bool TeamDrive::has_root() const {
  return this != internal_default_instance() && root_ != nullptr;
}
inline void TeamDrive::clear_root() {
  if (GetArenaNoVirtual() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::DriveItem& TeamDrive::root() const {
  const ::google::apps::drive::activity::v2::DriveItem* p = root_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TeamDrive.root)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::DriveItem*>(
      &::google::apps::drive::activity::v2::_DriveItem_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem* TeamDrive::release_root() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TeamDrive.root)
  
  ::google::apps::drive::activity::v2::DriveItem* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::DriveItem* TeamDrive::mutable_root() {
  
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem>(GetArenaNoVirtual());
    root_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TeamDrive.root)
  return root_;
}
inline void TeamDrive::set_allocated_root(::google::apps::drive::activity::v2::DriveItem* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.TeamDrive.root)
}

// -------------------------------------------------------------------

// Drive

// string name = 1;
inline void Drive::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Drive::name() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Drive.name)
  return name_.GetNoArena();
}
inline void Drive::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.Drive.name)
}
#if LANG_CXX11
inline void Drive::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.Drive.name)
}
#endif
inline void Drive::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.Drive.name)
}
inline void Drive::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.Drive.name)
}
inline ::std::string* Drive::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Drive.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Drive::release_name() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Drive.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Drive::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.Drive.name)
}

// string title = 2;
inline void Drive::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Drive::title() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Drive.title)
  return title_.GetNoArena();
}
inline void Drive::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.Drive.title)
}
#if LANG_CXX11
inline void Drive::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.Drive.title)
}
#endif
inline void Drive::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.Drive.title)
}
inline void Drive::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.Drive.title)
}
inline ::std::string* Drive::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Drive.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Drive::release_title() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Drive.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Drive::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.Drive.title)
}

// .google.apps.drive.activity.v2.DriveItem root = 3;
inline bool Drive::has_root() const {
  return this != internal_default_instance() && root_ != nullptr;
}
inline void Drive::clear_root() {
  if (GetArenaNoVirtual() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::DriveItem& Drive::root() const {
  const ::google::apps::drive::activity::v2::DriveItem* p = root_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.Drive.root)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::DriveItem*>(
      &::google::apps::drive::activity::v2::_DriveItem_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem* Drive::release_root() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.Drive.root)
  
  ::google::apps::drive::activity::v2::DriveItem* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::DriveItem* Drive::mutable_root() {
  
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem>(GetArenaNoVirtual());
    root_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.Drive.root)
  return root_;
}
inline void Drive::set_allocated_root(::google::apps::drive::activity::v2::DriveItem* root) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.Drive.root)
}

// -------------------------------------------------------------------

// DriveItemReference

// string name = 1;
inline void DriveItemReference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveItemReference::name() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItemReference.name)
  return name_.GetNoArena();
}
inline void DriveItemReference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveItemReference.name)
}
#if LANG_CXX11
inline void DriveItemReference::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.DriveItemReference.name)
}
#endif
inline void DriveItemReference::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.DriveItemReference.name)
}
inline void DriveItemReference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.DriveItemReference.name)
}
inline ::std::string* DriveItemReference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItemReference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveItemReference::release_name() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItemReference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveItemReference::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItemReference.name)
}

// string title = 2;
inline void DriveItemReference::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveItemReference::title() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItemReference.title)
  return title_.GetNoArena();
}
inline void DriveItemReference::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveItemReference.title)
}
#if LANG_CXX11
inline void DriveItemReference::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.DriveItemReference.title)
}
#endif
inline void DriveItemReference::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.DriveItemReference.title)
}
inline void DriveItemReference::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.DriveItemReference.title)
}
inline ::std::string* DriveItemReference::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItemReference.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveItemReference::release_title() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItemReference.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveItemReference::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItemReference.title)
}

// .google.apps.drive.activity.v2.DriveItem.File file = 3 [deprecated = true];
inline bool DriveItemReference::has_file() const {
  return this != internal_default_instance() && file_ != nullptr;
}
inline void DriveItemReference::clear_file() {
  if (GetArenaNoVirtual() == nullptr && file_ != nullptr) {
    delete file_;
  }
  file_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::DriveItem_File& DriveItemReference::file() const {
  const ::google::apps::drive::activity::v2::DriveItem_File* p = file_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItemReference.file)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::DriveItem_File*>(
      &::google::apps::drive::activity::v2::_DriveItem_File_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_File* DriveItemReference::release_file() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItemReference.file)
  
  ::google::apps::drive::activity::v2::DriveItem_File* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::DriveItem_File* DriveItemReference::mutable_file() {
  
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_File>(GetArenaNoVirtual());
    file_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItemReference.file)
  return file_;
}
inline void DriveItemReference::set_allocated_file(::google::apps::drive::activity::v2::DriveItem_File* file) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_;
  }
  if (file) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItemReference.file)
}

// .google.apps.drive.activity.v2.DriveItem.Folder folder = 4 [deprecated = true];
inline bool DriveItemReference::has_folder() const {
  return this != internal_default_instance() && folder_ != nullptr;
}
inline void DriveItemReference::clear_folder() {
  if (GetArenaNoVirtual() == nullptr && folder_ != nullptr) {
    delete folder_;
  }
  folder_ = nullptr;
}
inline const ::google::apps::drive::activity::v2::DriveItem_Folder& DriveItemReference::folder() const {
  const ::google::apps::drive::activity::v2::DriveItem_Folder* p = folder_;
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItemReference.folder)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::apps::drive::activity::v2::DriveItem_Folder*>(
      &::google::apps::drive::activity::v2::_DriveItem_Folder_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_Folder* DriveItemReference::release_folder() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItemReference.folder)
  
  ::google::apps::drive::activity::v2::DriveItem_Folder* temp = folder_;
  folder_ = nullptr;
  return temp;
}
inline ::google::apps::drive::activity::v2::DriveItem_Folder* DriveItemReference::mutable_folder() {
  
  if (folder_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::apps::drive::activity::v2::DriveItem_Folder>(GetArenaNoVirtual());
    folder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItemReference.folder)
  return folder_;
}
inline void DriveItemReference::set_allocated_folder(::google::apps::drive::activity::v2::DriveItem_Folder* folder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete folder_;
  }
  if (folder) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      folder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, folder, submessage_arena);
    }
    
  } else {
    
  }
  folder_ = folder;
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveItemReference.folder)
}

// .google.apps.drive.activity.v2.DriveItem.DriveFile drive_file = 8;
inline bool DriveItemReference::has_drive_file() const {
  return item_type_case() == kDriveFile;
}
inline void DriveItemReference::set_has_drive_file() {
  _oneof_case_[0] = kDriveFile;
}
inline void DriveItemReference::clear_drive_file() {
  if (has_drive_file()) {
    delete item_type_.drive_file_;
    clear_has_item_type();
  }
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFile* DriveItemReference::release_drive_file() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItemReference.drive_file)
  if (has_drive_file()) {
    clear_has_item_type();
      ::google::apps::drive::activity::v2::DriveItem_DriveFile* temp = item_type_.drive_file_;
    item_type_.drive_file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveItem_DriveFile& DriveItemReference::drive_file() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItemReference.drive_file)
  return has_drive_file()
      ? *item_type_.drive_file_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveItem_DriveFile*>(&::google::apps::drive::activity::v2::_DriveItem_DriveFile_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFile* DriveItemReference::mutable_drive_file() {
  if (!has_drive_file()) {
    clear_item_type();
    set_has_drive_file();
    item_type_.drive_file_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveItem_DriveFile >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItemReference.drive_file)
  return item_type_.drive_file_;
}

// .google.apps.drive.activity.v2.DriveItem.DriveFolder drive_folder = 9;
inline bool DriveItemReference::has_drive_folder() const {
  return item_type_case() == kDriveFolder;
}
inline void DriveItemReference::set_has_drive_folder() {
  _oneof_case_[0] = kDriveFolder;
}
inline void DriveItemReference::clear_drive_folder() {
  if (has_drive_folder()) {
    delete item_type_.drive_folder_;
    clear_has_item_type();
  }
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFolder* DriveItemReference::release_drive_folder() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveItemReference.drive_folder)
  if (has_drive_folder()) {
    clear_has_item_type();
      ::google::apps::drive::activity::v2::DriveItem_DriveFolder* temp = item_type_.drive_folder_;
    item_type_.drive_folder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::apps::drive::activity::v2::DriveItem_DriveFolder& DriveItemReference::drive_folder() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveItemReference.drive_folder)
  return has_drive_folder()
      ? *item_type_.drive_folder_
      : *reinterpret_cast< ::google::apps::drive::activity::v2::DriveItem_DriveFolder*>(&::google::apps::drive::activity::v2::_DriveItem_DriveFolder_default_instance_);
}
inline ::google::apps::drive::activity::v2::DriveItem_DriveFolder* DriveItemReference::mutable_drive_folder() {
  if (!has_drive_folder()) {
    clear_item_type();
    set_has_drive_folder();
    item_type_.drive_folder_ = CreateMaybeMessage< ::google::apps::drive::activity::v2::DriveItem_DriveFolder >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveItemReference.drive_folder)
  return item_type_.drive_folder_;
}

inline bool DriveItemReference::has_item_type() const {
  return item_type_case() != ITEM_TYPE_NOT_SET;
}
inline void DriveItemReference::clear_has_item_type() {
  _oneof_case_[0] = ITEM_TYPE_NOT_SET;
}
inline DriveItemReference::ItemTypeCase DriveItemReference::item_type_case() const {
  return DriveItemReference::ItemTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TeamDriveReference

// string name = 1;
inline void TeamDriveReference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeamDriveReference::name() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TeamDriveReference.name)
  return name_.GetNoArena();
}
inline void TeamDriveReference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.TeamDriveReference.name)
}
#if LANG_CXX11
inline void TeamDriveReference::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.TeamDriveReference.name)
}
#endif
inline void TeamDriveReference::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.TeamDriveReference.name)
}
inline void TeamDriveReference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.TeamDriveReference.name)
}
inline ::std::string* TeamDriveReference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TeamDriveReference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamDriveReference::release_name() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TeamDriveReference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamDriveReference::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.TeamDriveReference.name)
}

// string title = 2;
inline void TeamDriveReference::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TeamDriveReference::title() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.TeamDriveReference.title)
  return title_.GetNoArena();
}
inline void TeamDriveReference::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.TeamDriveReference.title)
}
#if LANG_CXX11
inline void TeamDriveReference::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.TeamDriveReference.title)
}
#endif
inline void TeamDriveReference::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.TeamDriveReference.title)
}
inline void TeamDriveReference::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.TeamDriveReference.title)
}
inline ::std::string* TeamDriveReference::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.TeamDriveReference.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamDriveReference::release_title() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.TeamDriveReference.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamDriveReference::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.TeamDriveReference.title)
}

// -------------------------------------------------------------------

// DriveReference

// string name = 1;
inline void DriveReference::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveReference::name() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveReference.name)
  return name_.GetNoArena();
}
inline void DriveReference::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveReference.name)
}
#if LANG_CXX11
inline void DriveReference::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.DriveReference.name)
}
#endif
inline void DriveReference::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.DriveReference.name)
}
inline void DriveReference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.DriveReference.name)
}
inline ::std::string* DriveReference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveReference.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveReference::release_name() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveReference.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveReference::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveReference.name)
}

// string title = 2;
inline void DriveReference::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveReference::title() const {
  // @@protoc_insertion_point(field_get:google.apps.drive.activity.v2.DriveReference.title)
  return title_.GetNoArena();
}
inline void DriveReference::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.apps.drive.activity.v2.DriveReference.title)
}
#if LANG_CXX11
inline void DriveReference::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.apps.drive.activity.v2.DriveReference.title)
}
#endif
inline void DriveReference::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.apps.drive.activity.v2.DriveReference.title)
}
inline void DriveReference::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.apps.drive.activity.v2.DriveReference.title)
}
inline ::std::string* DriveReference::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.apps.drive.activity.v2.DriveReference.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveReference::release_title() {
  // @@protoc_insertion_point(field_release:google.apps.drive.activity.v2.DriveReference.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveReference::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.apps.drive.activity.v2.DriveReference.title)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace activity
}  // namespace drive
}  // namespace apps
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::apps::drive::activity::v2::DriveItem_Folder_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::apps::drive::activity::v2::DriveItem_Folder_Type>() {
  return ::google::apps::drive::activity::v2::DriveItem_Folder_Type_descriptor();
}
template <> struct is_proto_enum< ::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type>() {
  return ::google::apps::drive::activity::v2::DriveItem_DriveFolder_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fapps_2fdrive_2factivity_2fv2_2ftarget_2eproto
