// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/script/type/calendar/calendar_addon_manifest.proto

#include "google/apps/script/type/calendar/calendar_addon_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fscript_2ftype_2fextension_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HomepageExtensionPoint_google_2fapps_2fscript_2ftype_2fextension_5fpoint_2eproto;
namespace google {
namespace apps {
namespace script {
namespace type {
namespace calendar {
class CalendarAddOnManifestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalendarAddOnManifest> _instance;
} _CalendarAddOnManifest_default_instance_;
class ConferenceSolutionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConferenceSolution> _instance;
} _ConferenceSolution_default_instance_;
class CalendarExtensionPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalendarExtensionPoint> _instance;
} _CalendarExtensionPoint_default_instance_;
}  // namespace calendar
}  // namespace type
}  // namespace script
}  // namespace apps
}  // namespace google
static void InitDefaultsCalendarAddOnManifest_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::apps::script::type::calendar::_CalendarAddOnManifest_default_instance_;
    new (ptr) ::google::apps::script::type::calendar::CalendarAddOnManifest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::apps::script::type::calendar::CalendarAddOnManifest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CalendarAddOnManifest_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCalendarAddOnManifest_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto}, {
      &scc_info_HomepageExtensionPoint_google_2fapps_2fscript_2ftype_2fextension_5fpoint_2eproto.base,
      &scc_info_ConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base,
      &scc_info_CalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base,}};

static void InitDefaultsConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::apps::script::type::calendar::_ConferenceSolution_default_instance_;
    new (ptr) ::google::apps::script::type::calendar::ConferenceSolution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::apps::script::type::calendar::ConferenceSolution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto}, {}};

static void InitDefaultsCalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::apps::script::type::calendar::_CalendarExtensionPoint_default_instance_;
    new (ptr) ::google::apps::script::type::calendar::CalendarExtensionPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::apps::script::type::calendar::CalendarExtensionPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto}, {}};

void InitDefaults_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CalendarAddOnManifest_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarAddOnManifest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarAddOnManifest, homepage_trigger_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarAddOnManifest, conference_solution_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarAddOnManifest, create_settings_url_function_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarAddOnManifest, event_open_trigger_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarAddOnManifest, event_update_trigger_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarAddOnManifest, current_event_access_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::ConferenceSolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::ConferenceSolution, on_create_function_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::ConferenceSolution, id_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::ConferenceSolution, name_),
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::ConferenceSolution, logo_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarExtensionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::apps::script::type::calendar::CalendarExtensionPoint, run_function_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::apps::script::type::calendar::CalendarAddOnManifest)},
  { 11, -1, sizeof(::google::apps::script::type::calendar::ConferenceSolution)},
  { 20, -1, sizeof(::google::apps::script::type::calendar::CalendarExtensionPoint)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::apps::script::type::calendar::_CalendarAddOnManifest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::apps::script::type::calendar::_ConferenceSolution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::apps::script::type::calendar::_CalendarExtensionPoint_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto = {
  {}, AddDescriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto, "google/apps/script/type/calendar/calendar_addon_manifest.proto", schemas,
  file_default_instances, TableStruct_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto::offsets,
  file_level_metadata_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto, 3, file_level_enum_descriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto, file_level_service_descriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto,
};

const char descriptor_table_protodef_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto[] =
  "\n>google/apps/script/type/calendar/calen"
  "dar_addon_manifest.proto\022 google.apps.sc"
  "ript.type.calendar\032\037google/api/field_beh"
  "avior.proto\032-google/apps/script/type/ext"
  "ension_point.proto\"\277\004\n\025CalendarAddOnMani"
  "fest\022I\n\020homepage_trigger\030\006 \001(\0132/.google."
  "apps.script.type.HomepageExtensionPoint\022"
  "Q\n\023conference_solution\030\003 \003(\01324.google.ap"
  "ps.script.type.calendar.ConferenceSoluti"
  "on\022$\n\034create_settings_url_function\030\005 \001(\t"
  "\022T\n\022event_open_trigger\030\n \001(\01328.google.ap"
  "ps.script.type.calendar.CalendarExtensio"
  "nPoint\022V\n\024event_update_trigger\030\013 \001(\01328.g"
  "oogle.apps.script.type.calendar.Calendar"
  "ExtensionPoint\022a\n\024current_event_access\030\014"
  " \001(\0162C.google.apps.script.type.calendar."
  "CalendarAddOnManifest.EventAccess\"Q\n\013Eve"
  "ntAccess\022\017\n\013UNSPECIFIED\020\000\022\014\n\010METADATA\020\001\022"
  "\010\n\004READ\020\003\022\t\n\005WRITE\020\004\022\016\n\nREAD_WRITE\020\005\"p\n\022"
  "ConferenceSolution\022\037\n\022on_create_function"
  "\030\001 \001(\tB\003\340A\002\022\017\n\002id\030\004 \001(\tB\003\340A\002\022\021\n\004name\030\005 \001"
  "(\tB\003\340A\002\022\025\n\010logo_url\030\006 \001(\tB\003\340A\002\"3\n\026Calend"
  "arExtensionPoint\022\031\n\014run_function\030\001 \001(\tB\003"
  "\340A\002B\362\001\n$com.google.apps.script.type.cale"
  "ndarB\032CalendarAddOnManifestProtoP\001Z\?goog"
  "le.golang.org/genproto/googleapis/apps/s"
  "cript/type/calendar\252\002 Google.Apps.Script"
  ".Type.Calendar\312\002 Google\\Apps\\Script\\Type"
  "\\Calendar\352\002$Google::Apps::Script::Type::"
  "Calendarb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto = {
  false, InitDefaults_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto, 
  descriptor_table_protodef_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto,
  "google/apps/script/type/calendar/calendar_addon_manifest.proto", &assign_descriptors_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto, 1176,
};

void AddDescriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_google_2fapi_2ffield_5fbehavior_2eproto,
    ::AddDescriptors_google_2fapps_2fscript_2ftype_2fextension_5fpoint_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto = []() { AddDescriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto(); return true; }();
namespace google {
namespace apps {
namespace script {
namespace type {
namespace calendar {
const ::google::protobuf::EnumDescriptor* CalendarAddOnManifest_EventAccess_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto);
  return file_level_enum_descriptors_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto[0];
}
bool CalendarAddOnManifest_EventAccess_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest::UNSPECIFIED;
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest::METADATA;
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest::READ;
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest::WRITE;
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest::READ_WRITE;
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest::EventAccess_MIN;
const CalendarAddOnManifest_EventAccess CalendarAddOnManifest::EventAccess_MAX;
const int CalendarAddOnManifest::EventAccess_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CalendarAddOnManifest::InitAsDefaultInstance() {
  ::google::apps::script::type::calendar::_CalendarAddOnManifest_default_instance_._instance.get_mutable()->homepage_trigger_ = const_cast< ::google::apps::script::type::HomepageExtensionPoint*>(
      ::google::apps::script::type::HomepageExtensionPoint::internal_default_instance());
  ::google::apps::script::type::calendar::_CalendarAddOnManifest_default_instance_._instance.get_mutable()->event_open_trigger_ = const_cast< ::google::apps::script::type::calendar::CalendarExtensionPoint*>(
      ::google::apps::script::type::calendar::CalendarExtensionPoint::internal_default_instance());
  ::google::apps::script::type::calendar::_CalendarAddOnManifest_default_instance_._instance.get_mutable()->event_update_trigger_ = const_cast< ::google::apps::script::type::calendar::CalendarExtensionPoint*>(
      ::google::apps::script::type::calendar::CalendarExtensionPoint::internal_default_instance());
}
class CalendarAddOnManifest::HasBitSetters {
 public:
  static const ::google::apps::script::type::HomepageExtensionPoint& homepage_trigger(const CalendarAddOnManifest* msg);
  static const ::google::apps::script::type::calendar::CalendarExtensionPoint& event_open_trigger(const CalendarAddOnManifest* msg);
  static const ::google::apps::script::type::calendar::CalendarExtensionPoint& event_update_trigger(const CalendarAddOnManifest* msg);
};

const ::google::apps::script::type::HomepageExtensionPoint&
CalendarAddOnManifest::HasBitSetters::homepage_trigger(const CalendarAddOnManifest* msg) {
  return *msg->homepage_trigger_;
}
const ::google::apps::script::type::calendar::CalendarExtensionPoint&
CalendarAddOnManifest::HasBitSetters::event_open_trigger(const CalendarAddOnManifest* msg) {
  return *msg->event_open_trigger_;
}
const ::google::apps::script::type::calendar::CalendarExtensionPoint&
CalendarAddOnManifest::HasBitSetters::event_update_trigger(const CalendarAddOnManifest* msg) {
  return *msg->event_update_trigger_;
}
void CalendarAddOnManifest::clear_homepage_trigger() {
  if (GetArenaNoVirtual() == nullptr && homepage_trigger_ != nullptr) {
    delete homepage_trigger_;
  }
  homepage_trigger_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalendarAddOnManifest::kHomepageTriggerFieldNumber;
const int CalendarAddOnManifest::kConferenceSolutionFieldNumber;
const int CalendarAddOnManifest::kCreateSettingsUrlFunctionFieldNumber;
const int CalendarAddOnManifest::kEventOpenTriggerFieldNumber;
const int CalendarAddOnManifest::kEventUpdateTriggerFieldNumber;
const int CalendarAddOnManifest::kCurrentEventAccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalendarAddOnManifest::CalendarAddOnManifest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.apps.script.type.calendar.CalendarAddOnManifest)
}
CalendarAddOnManifest::CalendarAddOnManifest(const CalendarAddOnManifest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      conference_solution_(from.conference_solution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  create_settings_url_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.create_settings_url_function().size() > 0) {
    create_settings_url_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_settings_url_function_);
  }
  if (from.has_homepage_trigger()) {
    homepage_trigger_ = new ::google::apps::script::type::HomepageExtensionPoint(*from.homepage_trigger_);
  } else {
    homepage_trigger_ = nullptr;
  }
  if (from.has_event_open_trigger()) {
    event_open_trigger_ = new ::google::apps::script::type::calendar::CalendarExtensionPoint(*from.event_open_trigger_);
  } else {
    event_open_trigger_ = nullptr;
  }
  if (from.has_event_update_trigger()) {
    event_update_trigger_ = new ::google::apps::script::type::calendar::CalendarExtensionPoint(*from.event_update_trigger_);
  } else {
    event_update_trigger_ = nullptr;
  }
  current_event_access_ = from.current_event_access_;
  // @@protoc_insertion_point(copy_constructor:google.apps.script.type.calendar.CalendarAddOnManifest)
}

void CalendarAddOnManifest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CalendarAddOnManifest_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  create_settings_url_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&homepage_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_event_access_) -
      reinterpret_cast<char*>(&homepage_trigger_)) + sizeof(current_event_access_));
}

CalendarAddOnManifest::~CalendarAddOnManifest() {
  // @@protoc_insertion_point(destructor:google.apps.script.type.calendar.CalendarAddOnManifest)
  SharedDtor();
}

void CalendarAddOnManifest::SharedDtor() {
  create_settings_url_function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete homepage_trigger_;
  if (this != internal_default_instance()) delete event_open_trigger_;
  if (this != internal_default_instance()) delete event_update_trigger_;
}

void CalendarAddOnManifest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalendarAddOnManifest& CalendarAddOnManifest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CalendarAddOnManifest_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  return *internal_default_instance();
}


void CalendarAddOnManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conference_solution_.Clear();
  create_settings_url_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && homepage_trigger_ != nullptr) {
    delete homepage_trigger_;
  }
  homepage_trigger_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && event_open_trigger_ != nullptr) {
    delete event_open_trigger_;
  }
  event_open_trigger_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && event_update_trigger_ != nullptr) {
    delete event_update_trigger_;
  }
  event_update_trigger_ = nullptr;
  current_event_access_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalendarAddOnManifest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CalendarAddOnManifest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::apps::script::type::calendar::ConferenceSolution::_InternalParse;
          object = msg->add_conference_solution();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // string create_settings_url_function = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function");
        object = msg->mutable_create_settings_url_function();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::apps::script::type::HomepageExtensionPoint::_InternalParse;
        object = msg->mutable_homepage_trigger();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::apps::script::type::calendar::CalendarExtensionPoint::_InternalParse;
        object = msg->mutable_event_open_trigger();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::apps::script::type::calendar::CalendarExtensionPoint::_InternalParse;
        object = msg->mutable_event_update_trigger();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_current_event_access(static_cast<::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalendarAddOnManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_conference_solution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string create_settings_url_function = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_settings_url_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->create_settings_url_function().data(), static_cast<int>(this->create_settings_url_function().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_homepage_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_open_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_update_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_current_event_access(static_cast< ::google::apps::script::type::calendar::CalendarAddOnManifest_EventAccess >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.apps.script.type.calendar.CalendarAddOnManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.apps.script.type.calendar.CalendarAddOnManifest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalendarAddOnManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conference_solution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->conference_solution(static_cast<int>(i)),
      output);
  }

  // string create_settings_url_function = 5;
  if (this->create_settings_url_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_settings_url_function().data(), static_cast<int>(this->create_settings_url_function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->create_settings_url_function(), output);
  }

  // .google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
  if (this->has_homepage_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::homepage_trigger(this), output);
  }

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
  if (this->has_event_open_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::event_open_trigger(this), output);
  }

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
  if (this->has_event_update_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::event_update_trigger(this), output);
  }

  // .google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
  if (this->current_event_access() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->current_event_access(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.apps.script.type.calendar.CalendarAddOnManifest)
}

::google::protobuf::uint8* CalendarAddOnManifest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conference_solution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->conference_solution(static_cast<int>(i)), target);
  }

  // string create_settings_url_function = 5;
  if (this->create_settings_url_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->create_settings_url_function().data(), static_cast<int>(this->create_settings_url_function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.CalendarAddOnManifest.create_settings_url_function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->create_settings_url_function(), target);
  }

  // .google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
  if (this->has_homepage_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::homepage_trigger(this), target);
  }

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
  if (this->has_event_open_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::event_open_trigger(this), target);
  }

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
  if (this->has_event_update_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::event_update_trigger(this), target);
  }

  // .google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
  if (this->current_event_access() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->current_event_access(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.apps.script.type.calendar.CalendarAddOnManifest)
  return target;
}

size_t CalendarAddOnManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->conference_solution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->conference_solution(static_cast<int>(i)));
    }
  }

  // string create_settings_url_function = 5;
  if (this->create_settings_url_function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->create_settings_url_function());
  }

  // .google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
  if (this->has_homepage_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *homepage_trigger_);
  }

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
  if (this->has_event_open_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_open_trigger_);
  }

  // .google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
  if (this->has_event_update_trigger()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_update_trigger_);
  }

  // .google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
  if (this->current_event_access() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_event_access());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalendarAddOnManifest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  GOOGLE_DCHECK_NE(&from, this);
  const CalendarAddOnManifest* source =
      ::google::protobuf::DynamicCastToGenerated<CalendarAddOnManifest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.apps.script.type.calendar.CalendarAddOnManifest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.apps.script.type.calendar.CalendarAddOnManifest)
    MergeFrom(*source);
  }
}

void CalendarAddOnManifest::MergeFrom(const CalendarAddOnManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conference_solution_.MergeFrom(from.conference_solution_);
  if (from.create_settings_url_function().size() > 0) {

    create_settings_url_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.create_settings_url_function_);
  }
  if (from.has_homepage_trigger()) {
    mutable_homepage_trigger()->::google::apps::script::type::HomepageExtensionPoint::MergeFrom(from.homepage_trigger());
  }
  if (from.has_event_open_trigger()) {
    mutable_event_open_trigger()->::google::apps::script::type::calendar::CalendarExtensionPoint::MergeFrom(from.event_open_trigger());
  }
  if (from.has_event_update_trigger()) {
    mutable_event_update_trigger()->::google::apps::script::type::calendar::CalendarExtensionPoint::MergeFrom(from.event_update_trigger());
  }
  if (from.current_event_access() != 0) {
    set_current_event_access(from.current_event_access());
  }
}

void CalendarAddOnManifest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarAddOnManifest::CopyFrom(const CalendarAddOnManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.apps.script.type.calendar.CalendarAddOnManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarAddOnManifest::IsInitialized() const {
  return true;
}

void CalendarAddOnManifest::Swap(CalendarAddOnManifest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarAddOnManifest::InternalSwap(CalendarAddOnManifest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&conference_solution_)->InternalSwap(CastToBase(&other->conference_solution_));
  create_settings_url_function_.Swap(&other->create_settings_url_function_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(homepage_trigger_, other->homepage_trigger_);
  swap(event_open_trigger_, other->event_open_trigger_);
  swap(event_update_trigger_, other->event_update_trigger_);
  swap(current_event_access_, other->current_event_access_);
}

::google::protobuf::Metadata CalendarAddOnManifest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto);
  return ::file_level_metadata_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConferenceSolution::InitAsDefaultInstance() {
}
class ConferenceSolution::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConferenceSolution::kOnCreateFunctionFieldNumber;
const int ConferenceSolution::kIdFieldNumber;
const int ConferenceSolution::kNameFieldNumber;
const int ConferenceSolution::kLogoUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConferenceSolution::ConferenceSolution()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.apps.script.type.calendar.ConferenceSolution)
}
ConferenceSolution::ConferenceSolution(const ConferenceSolution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  on_create_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.on_create_function().size() > 0) {
    on_create_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.on_create_function_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.logo_url().size() > 0) {
    logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_url_);
  }
  // @@protoc_insertion_point(copy_constructor:google.apps.script.type.calendar.ConferenceSolution)
}

void ConferenceSolution::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  on_create_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConferenceSolution::~ConferenceSolution() {
  // @@protoc_insertion_point(destructor:google.apps.script.type.calendar.ConferenceSolution)
  SharedDtor();
}

void ConferenceSolution::SharedDtor() {
  on_create_function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConferenceSolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConferenceSolution& ConferenceSolution::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConferenceSolution_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  return *internal_default_instance();
}


void ConferenceSolution::Clear() {
// @@protoc_insertion_point(message_clear_start:google.apps.script.type.calendar.ConferenceSolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_create_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConferenceSolution::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConferenceSolution*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string on_create_function = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.apps.script.type.calendar.ConferenceSolution.on_create_function");
        object = msg->mutable_on_create_function();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string id = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.apps.script.type.calendar.ConferenceSolution.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 5 [(.google.api.field_behavior) = REQUIRED];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.apps.script.type.calendar.ConferenceSolution.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string logo_url = 6 [(.google.api.field_behavior) = REQUIRED];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.apps.script.type.calendar.ConferenceSolution.logo_url");
        object = msg->mutable_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConferenceSolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.apps.script.type.calendar.ConferenceSolution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string on_create_function = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_create_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->on_create_function().data(), static_cast<int>(this->on_create_function().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.apps.script.type.calendar.ConferenceSolution.on_create_function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 4 [(.google.api.field_behavior) = REQUIRED];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.apps.script.type.calendar.ConferenceSolution.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5 [(.google.api.field_behavior) = REQUIRED];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.apps.script.type.calendar.ConferenceSolution.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string logo_url = 6 [(.google.api.field_behavior) = REQUIRED];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logo_url().data(), static_cast<int>(this->logo_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.apps.script.type.calendar.ConferenceSolution.logo_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.apps.script.type.calendar.ConferenceSolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.apps.script.type.calendar.ConferenceSolution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConferenceSolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.apps.script.type.calendar.ConferenceSolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string on_create_function = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->on_create_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->on_create_function().data(), static_cast<int>(this->on_create_function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.on_create_function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->on_create_function(), output);
  }

  // string id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  // string name = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // string logo_url = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->logo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logo_url().data(), static_cast<int>(this->logo_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->logo_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.apps.script.type.calendar.ConferenceSolution)
}

::google::protobuf::uint8* ConferenceSolution::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.apps.script.type.calendar.ConferenceSolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string on_create_function = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->on_create_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->on_create_function().data(), static_cast<int>(this->on_create_function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.on_create_function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->on_create_function(), target);
  }

  // string id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  // string name = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // string logo_url = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->logo_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logo_url().data(), static_cast<int>(this->logo_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.ConferenceSolution.logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->logo_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.apps.script.type.calendar.ConferenceSolution)
  return target;
}

size_t ConferenceSolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.apps.script.type.calendar.ConferenceSolution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string on_create_function = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->on_create_function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->on_create_function());
  }

  // string id = 4 [(.google.api.field_behavior) = REQUIRED];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 5 [(.google.api.field_behavior) = REQUIRED];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string logo_url = 6 [(.google.api.field_behavior) = REQUIRED];
  if (this->logo_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logo_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConferenceSolution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.apps.script.type.calendar.ConferenceSolution)
  GOOGLE_DCHECK_NE(&from, this);
  const ConferenceSolution* source =
      ::google::protobuf::DynamicCastToGenerated<ConferenceSolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.apps.script.type.calendar.ConferenceSolution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.apps.script.type.calendar.ConferenceSolution)
    MergeFrom(*source);
  }
}

void ConferenceSolution::MergeFrom(const ConferenceSolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.apps.script.type.calendar.ConferenceSolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on_create_function().size() > 0) {

    on_create_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.on_create_function_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.logo_url().size() > 0) {

    logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_url_);
  }
}

void ConferenceSolution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.apps.script.type.calendar.ConferenceSolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConferenceSolution::CopyFrom(const ConferenceSolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.apps.script.type.calendar.ConferenceSolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConferenceSolution::IsInitialized() const {
  return true;
}

void ConferenceSolution::Swap(ConferenceSolution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConferenceSolution::InternalSwap(ConferenceSolution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  on_create_function_.Swap(&other->on_create_function_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logo_url_.Swap(&other->logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ConferenceSolution::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto);
  return ::file_level_metadata_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CalendarExtensionPoint::InitAsDefaultInstance() {
}
class CalendarExtensionPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalendarExtensionPoint::kRunFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalendarExtensionPoint::CalendarExtensionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.apps.script.type.calendar.CalendarExtensionPoint)
}
CalendarExtensionPoint::CalendarExtensionPoint(const CalendarExtensionPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  run_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.run_function().size() > 0) {
    run_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_function_);
  }
  // @@protoc_insertion_point(copy_constructor:google.apps.script.type.calendar.CalendarExtensionPoint)
}

void CalendarExtensionPoint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  run_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CalendarExtensionPoint::~CalendarExtensionPoint() {
  // @@protoc_insertion_point(destructor:google.apps.script.type.calendar.CalendarExtensionPoint)
  SharedDtor();
}

void CalendarExtensionPoint::SharedDtor() {
  run_function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CalendarExtensionPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalendarExtensionPoint& CalendarExtensionPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CalendarExtensionPoint_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto.base);
  return *internal_default_instance();
}


void CalendarExtensionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  run_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalendarExtensionPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CalendarExtensionPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string run_function = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.apps.script.type.calendar.CalendarExtensionPoint.run_function");
        object = msg->mutable_run_function();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalendarExtensionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string run_function = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_run_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->run_function().data(), static_cast<int>(this->run_function().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.apps.script.type.calendar.CalendarExtensionPoint.run_function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.apps.script.type.calendar.CalendarExtensionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.apps.script.type.calendar.CalendarExtensionPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalendarExtensionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_function = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->run_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->run_function().data(), static_cast<int>(this->run_function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.CalendarExtensionPoint.run_function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->run_function(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.apps.script.type.calendar.CalendarExtensionPoint)
}

::google::protobuf::uint8* CalendarExtensionPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string run_function = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->run_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->run_function().data(), static_cast<int>(this->run_function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.apps.script.type.calendar.CalendarExtensionPoint.run_function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->run_function(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.apps.script.type.calendar.CalendarExtensionPoint)
  return target;
}

size_t CalendarExtensionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string run_function = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->run_function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->run_function());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalendarExtensionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CalendarExtensionPoint* source =
      ::google::protobuf::DynamicCastToGenerated<CalendarExtensionPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.apps.script.type.calendar.CalendarExtensionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.apps.script.type.calendar.CalendarExtensionPoint)
    MergeFrom(*source);
  }
}

void CalendarExtensionPoint::MergeFrom(const CalendarExtensionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.run_function().size() > 0) {

    run_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_function_);
  }
}

void CalendarExtensionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalendarExtensionPoint::CopyFrom(const CalendarExtensionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.apps.script.type.calendar.CalendarExtensionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalendarExtensionPoint::IsInitialized() const {
  return true;
}

void CalendarExtensionPoint::Swap(CalendarExtensionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalendarExtensionPoint::InternalSwap(CalendarExtensionPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  run_function_.Swap(&other->run_function_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CalendarExtensionPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto);
  return ::file_level_metadata_google_2fapps_2fscript_2ftype_2fcalendar_2fcalendar_5faddon_5fmanifest_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace calendar
}  // namespace type
}  // namespace script
}  // namespace apps
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::apps::script::type::calendar::CalendarAddOnManifest* Arena::CreateMaybeMessage< ::google::apps::script::type::calendar::CalendarAddOnManifest >(Arena* arena) {
  return Arena::CreateInternal< ::google::apps::script::type::calendar::CalendarAddOnManifest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::apps::script::type::calendar::ConferenceSolution* Arena::CreateMaybeMessage< ::google::apps::script::type::calendar::ConferenceSolution >(Arena* arena) {
  return Arena::CreateInternal< ::google::apps::script::type::calendar::ConferenceSolution >(arena);
}
template<> PROTOBUF_NOINLINE ::google::apps::script::type::calendar::CalendarExtensionPoint* Arena::CreateMaybeMessage< ::google::apps::script::type::calendar::CalendarExtensionPoint >(Arena* arena) {
  return Arena::CreateInternal< ::google::apps::script::type::calendar::CalendarExtensionPoint >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
