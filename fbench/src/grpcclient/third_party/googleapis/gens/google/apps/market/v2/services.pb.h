// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/apps/market/v2/services.proto

#ifndef PROTOBUF_INCLUDED_google_2fapps_2fmarket_2fv2_2fservices_2eproto
#define PROTOBUF_INCLUDED_google_2fapps_2fmarket_2fv2_2fservices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/apps/market/v2/resources.pb.h"
#include "google/api/client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapps_2fmarket_2fv2_2fservices_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapps_2fmarket_2fv2_2fservices_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fapps_2fmarket_2fv2_2fservices_2eproto();
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {
class CustomerLicenseGetRequest;
class CustomerLicenseGetRequestDefaultTypeInternal;
extern CustomerLicenseGetRequestDefaultTypeInternal _CustomerLicenseGetRequest_default_instance_;
class LicenseNotificationListRequest;
class LicenseNotificationListRequestDefaultTypeInternal;
extern LicenseNotificationListRequestDefaultTypeInternal _LicenseNotificationListRequest_default_instance_;
class UserLicenseGetRequest;
class UserLicenseGetRequestDefaultTypeInternal;
extern UserLicenseGetRequestDefaultTypeInternal _UserLicenseGetRequest_default_instance_;
}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc
namespace google {
namespace protobuf {
template<> ::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::CustomerLicenseGetRequest>(Arena*);
template<> ::ccc::hosted::marketplace::v2::LicenseNotificationListRequest* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::LicenseNotificationListRequest>(Arena*);
template<> ::ccc::hosted::marketplace::v2::UserLicenseGetRequest* Arena::CreateMaybeMessage<::ccc::hosted::marketplace::v2::UserLicenseGetRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ccc {
namespace hosted {
namespace marketplace {
namespace v2 {

// ===================================================================

class CustomerLicenseGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest) */ {
 public:
  CustomerLicenseGetRequest();
  virtual ~CustomerLicenseGetRequest();

  CustomerLicenseGetRequest(const CustomerLicenseGetRequest& from);

  inline CustomerLicenseGetRequest& operator=(const CustomerLicenseGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomerLicenseGetRequest(CustomerLicenseGetRequest&& from) noexcept
    : CustomerLicenseGetRequest() {
    *this = ::std::move(from);
  }

  inline CustomerLicenseGetRequest& operator=(CustomerLicenseGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CustomerLicenseGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerLicenseGetRequest* internal_default_instance() {
    return reinterpret_cast<const CustomerLicenseGetRequest*>(
               &_CustomerLicenseGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CustomerLicenseGetRequest* other);
  friend void swap(CustomerLicenseGetRequest& a, CustomerLicenseGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomerLicenseGetRequest* New() const final {
    return CreateMaybeMessage<CustomerLicenseGetRequest>(nullptr);
  }

  CustomerLicenseGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CustomerLicenseGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CustomerLicenseGetRequest& from);
  void MergeFrom(const CustomerLicenseGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerLicenseGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string application_id = 1;
  void clear_application_id();
  static const int kApplicationIdFieldNumber = 1;
  const ::std::string& application_id() const;
  void set_application_id(const ::std::string& value);
  #if LANG_CXX11
  void set_application_id(::std::string&& value);
  #endif
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  ::std::string* mutable_application_id();
  ::std::string* release_application_id();
  void set_allocated_application_id(::std::string* application_id);

  // string customer_id = 2;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 2;
  const ::std::string& customer_id() const;
  void set_customer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_id(::std::string&& value);
  #endif
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  ::std::string* mutable_customer_id();
  ::std::string* release_customer_id();
  void set_allocated_customer_id(::std::string* customer_id);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr application_id_;
  ::google::protobuf::internal::ArenaStringPtr customer_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fservices_2eproto;
};
// -------------------------------------------------------------------

class LicenseNotificationListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.LicenseNotificationListRequest) */ {
 public:
  LicenseNotificationListRequest();
  virtual ~LicenseNotificationListRequest();

  LicenseNotificationListRequest(const LicenseNotificationListRequest& from);

  inline LicenseNotificationListRequest& operator=(const LicenseNotificationListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LicenseNotificationListRequest(LicenseNotificationListRequest&& from) noexcept
    : LicenseNotificationListRequest() {
    *this = ::std::move(from);
  }

  inline LicenseNotificationListRequest& operator=(LicenseNotificationListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LicenseNotificationListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LicenseNotificationListRequest* internal_default_instance() {
    return reinterpret_cast<const LicenseNotificationListRequest*>(
               &_LicenseNotificationListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LicenseNotificationListRequest* other);
  friend void swap(LicenseNotificationListRequest& a, LicenseNotificationListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LicenseNotificationListRequest* New() const final {
    return CreateMaybeMessage<LicenseNotificationListRequest>(nullptr);
  }

  LicenseNotificationListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LicenseNotificationListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LicenseNotificationListRequest& from);
  void MergeFrom(const LicenseNotificationListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LicenseNotificationListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string application_id = 1;
  void clear_application_id();
  static const int kApplicationIdFieldNumber = 1;
  const ::std::string& application_id() const;
  void set_application_id(const ::std::string& value);
  #if LANG_CXX11
  void set_application_id(::std::string&& value);
  #endif
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  ::std::string* mutable_application_id();
  ::std::string* release_application_id();
  void set_allocated_application_id(::std::string* application_id);

  // string start_token = 3;
  void clear_start_token();
  static const int kStartTokenFieldNumber = 3;
  const ::std::string& start_token() const;
  void set_start_token(const ::std::string& value);
  #if LANG_CXX11
  void set_start_token(::std::string&& value);
  #endif
  void set_start_token(const char* value);
  void set_start_token(const char* value, size_t size);
  ::std::string* mutable_start_token();
  ::std::string* release_start_token();
  void set_allocated_start_token(::std::string* start_token);

  // uint64 timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 max_results = 2;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 2;
  ::google::protobuf::uint32 max_results() const;
  void set_max_results(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.LicenseNotificationListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr application_id_;
  ::google::protobuf::internal::ArenaStringPtr start_token_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 max_results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fservices_2eproto;
};
// -------------------------------------------------------------------

class UserLicenseGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ccc.hosted.marketplace.v2.UserLicenseGetRequest) */ {
 public:
  UserLicenseGetRequest();
  virtual ~UserLicenseGetRequest();

  UserLicenseGetRequest(const UserLicenseGetRequest& from);

  inline UserLicenseGetRequest& operator=(const UserLicenseGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLicenseGetRequest(UserLicenseGetRequest&& from) noexcept
    : UserLicenseGetRequest() {
    *this = ::std::move(from);
  }

  inline UserLicenseGetRequest& operator=(UserLicenseGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserLicenseGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLicenseGetRequest* internal_default_instance() {
    return reinterpret_cast<const UserLicenseGetRequest*>(
               &_UserLicenseGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserLicenseGetRequest* other);
  friend void swap(UserLicenseGetRequest& a, UserLicenseGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLicenseGetRequest* New() const final {
    return CreateMaybeMessage<UserLicenseGetRequest>(nullptr);
  }

  UserLicenseGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserLicenseGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserLicenseGetRequest& from);
  void MergeFrom(const UserLicenseGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLicenseGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string application_id = 1;
  void clear_application_id();
  static const int kApplicationIdFieldNumber = 1;
  const ::std::string& application_id() const;
  void set_application_id(const ::std::string& value);
  #if LANG_CXX11
  void set_application_id(::std::string&& value);
  #endif
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  ::std::string* mutable_application_id();
  ::std::string* release_application_id();
  void set_allocated_application_id(::std::string* application_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:ccc.hosted.marketplace.v2.UserLicenseGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr application_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapps_2fmarket_2fv2_2fservices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomerLicenseGetRequest

// string application_id = 1;
inline void CustomerLicenseGetRequest::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicenseGetRequest::application_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
  return application_id_.GetNoArena();
}
inline void CustomerLicenseGetRequest::set_application_id(const ::std::string& value) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
}
#if LANG_CXX11
inline void CustomerLicenseGetRequest::set_application_id(::std::string&& value) {
  
  application_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
}
#endif
inline void CustomerLicenseGetRequest::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
}
inline void CustomerLicenseGetRequest::set_application_id(const char* value, size_t size) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
}
inline ::std::string* CustomerLicenseGetRequest::mutable_application_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
  return application_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicenseGetRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
  
  return application_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicenseGetRequest::set_allocated_application_id(::std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.application_id)
}

// string customer_id = 2;
inline void CustomerLicenseGetRequest::clear_customer_id() {
  customer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomerLicenseGetRequest::customer_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
  return customer_id_.GetNoArena();
}
inline void CustomerLicenseGetRequest::set_customer_id(const ::std::string& value) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
}
#if LANG_CXX11
inline void CustomerLicenseGetRequest::set_customer_id(::std::string&& value) {
  
  customer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
}
#endif
inline void CustomerLicenseGetRequest::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
}
inline void CustomerLicenseGetRequest::set_customer_id(const char* value, size_t size) {
  
  customer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
}
inline ::std::string* CustomerLicenseGetRequest::mutable_customer_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
  return customer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomerLicenseGetRequest::release_customer_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
  
  return customer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerLicenseGetRequest::set_allocated_customer_id(::std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.CustomerLicenseGetRequest.customer_id)
}

// -------------------------------------------------------------------

// LicenseNotificationListRequest

// string application_id = 1;
inline void LicenseNotificationListRequest::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotificationListRequest::application_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
  return application_id_.GetNoArena();
}
inline void LicenseNotificationListRequest::set_application_id(const ::std::string& value) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
}
#if LANG_CXX11
inline void LicenseNotificationListRequest::set_application_id(::std::string&& value) {
  
  application_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
}
#endif
inline void LicenseNotificationListRequest::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
}
inline void LicenseNotificationListRequest::set_application_id(const char* value, size_t size) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
}
inline ::std::string* LicenseNotificationListRequest::mutable_application_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
  return application_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotificationListRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
  
  return application_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotificationListRequest::set_allocated_application_id(::std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.application_id)
}

// uint32 max_results = 2;
inline void LicenseNotificationListRequest::clear_max_results() {
  max_results_ = 0u;
}
inline ::google::protobuf::uint32 LicenseNotificationListRequest::max_results() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.max_results)
  return max_results_;
}
inline void LicenseNotificationListRequest::set_max_results(::google::protobuf::uint32 value) {
  
  max_results_ = value;
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.max_results)
}

// string start_token = 3;
inline void LicenseNotificationListRequest::clear_start_token() {
  start_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LicenseNotificationListRequest::start_token() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
  return start_token_.GetNoArena();
}
inline void LicenseNotificationListRequest::set_start_token(const ::std::string& value) {
  
  start_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
}
#if LANG_CXX11
inline void LicenseNotificationListRequest::set_start_token(::std::string&& value) {
  
  start_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
}
#endif
inline void LicenseNotificationListRequest::set_start_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
}
inline void LicenseNotificationListRequest::set_start_token(const char* value, size_t size) {
  
  start_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
}
inline ::std::string* LicenseNotificationListRequest::mutable_start_token() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
  return start_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LicenseNotificationListRequest::release_start_token() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
  
  return start_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LicenseNotificationListRequest::set_allocated_start_token(::std::string* start_token) {
  if (start_token != nullptr) {
    
  } else {
    
  }
  start_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_token);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.start_token)
}

// uint64 timestamp = 4;
inline void LicenseNotificationListRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LicenseNotificationListRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.timestamp)
  return timestamp_;
}
inline void LicenseNotificationListRequest::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.LicenseNotificationListRequest.timestamp)
}

// -------------------------------------------------------------------

// UserLicenseGetRequest

// string application_id = 1;
inline void UserLicenseGetRequest::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicenseGetRequest::application_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
  return application_id_.GetNoArena();
}
inline void UserLicenseGetRequest::set_application_id(const ::std::string& value) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
}
#if LANG_CXX11
inline void UserLicenseGetRequest::set_application_id(::std::string&& value) {
  
  application_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
}
#endif
inline void UserLicenseGetRequest::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
}
inline void UserLicenseGetRequest::set_application_id(const char* value, size_t size) {
  
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
}
inline ::std::string* UserLicenseGetRequest::mutable_application_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
  return application_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicenseGetRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
  
  return application_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicenseGetRequest::set_allocated_application_id(::std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicenseGetRequest.application_id)
}

// string user_id = 2;
inline void UserLicenseGetRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLicenseGetRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
  return user_id_.GetNoArena();
}
inline void UserLicenseGetRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
}
#if LANG_CXX11
inline void UserLicenseGetRequest::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
}
#endif
inline void UserLicenseGetRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
}
inline void UserLicenseGetRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
}
inline ::std::string* UserLicenseGetRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLicenseGetRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLicenseGetRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ccc.hosted.marketplace.v2.UserLicenseGetRequest.user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace marketplace
}  // namespace hosted
}  // namespace ccc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fapps_2fmarket_2fv2_2fservices_2eproto
