// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/actions/sdk/v2/interactionmodel/conditional_event.proto

#ifndef PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2finteractionmodel_2fconditional_5fevent_2eproto
#define PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2finteractionmodel_2fconditional_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/actions/sdk/v2/interactionmodel/event_handler.pb.h"
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2finteractionmodel_2fconditional_5fevent_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2factions_2fsdk_2fv2_2finteractionmodel_2fconditional_5fevent_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2factions_2fsdk_2fv2_2finteractionmodel_2fconditional_5fevent_2eproto();
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace interactionmodel {
class ConditionalEvent;
class ConditionalEventDefaultTypeInternal;
extern ConditionalEventDefaultTypeInternal _ConditionalEvent_default_instance_;
}  // namespace interactionmodel
}  // namespace v2
}  // namespace sdk
}  // namespace actions
namespace protobuf {
template<> ::google::actions::sdk::v2::interactionmodel::ConditionalEvent* Arena::CreateMaybeMessage<::google::actions::sdk::v2::interactionmodel::ConditionalEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace interactionmodel {

// ===================================================================

class ConditionalEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.actions.sdk.v2.interactionmodel.ConditionalEvent) */ {
 public:
  ConditionalEvent();
  virtual ~ConditionalEvent();

  ConditionalEvent(const ConditionalEvent& from);

  inline ConditionalEvent& operator=(const ConditionalEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionalEvent(ConditionalEvent&& from) noexcept
    : ConditionalEvent() {
    *this = ::std::move(from);
  }

  inline ConditionalEvent& operator=(ConditionalEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConditionalEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionalEvent* internal_default_instance() {
    return reinterpret_cast<const ConditionalEvent*>(
               &_ConditionalEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConditionalEvent* other);
  friend void swap(ConditionalEvent& a, ConditionalEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionalEvent* New() const final {
    return CreateMaybeMessage<ConditionalEvent>(nullptr);
  }

  ConditionalEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionalEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionalEvent& from);
  void MergeFrom(const ConditionalEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionalEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string condition = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_condition();
  static const int kConditionFieldNumber = 1;
  const ::std::string& condition() const;
  void set_condition(const ::std::string& value);
  #if LANG_CXX11
  void set_condition(::std::string&& value);
  #endif
  void set_condition(const char* value);
  void set_condition(const char* value, size_t size);
  ::std::string* mutable_condition();
  ::std::string* release_condition();
  void set_allocated_condition(::std::string* condition);

  // string transition_to_scene = 2 [(.google.api.field_behavior) = OPTIONAL];
  void clear_transition_to_scene();
  static const int kTransitionToSceneFieldNumber = 2;
  const ::std::string& transition_to_scene() const;
  void set_transition_to_scene(const ::std::string& value);
  #if LANG_CXX11
  void set_transition_to_scene(::std::string&& value);
  #endif
  void set_transition_to_scene(const char* value);
  void set_transition_to_scene(const char* value, size_t size);
  ::std::string* mutable_transition_to_scene();
  ::std::string* release_transition_to_scene();
  void set_allocated_transition_to_scene(::std::string* transition_to_scene);

  // .google.actions.sdk.v2.interactionmodel.EventHandler handler = 3 [(.google.api.field_behavior) = OPTIONAL];
  bool has_handler() const;
  void clear_handler();
  static const int kHandlerFieldNumber = 3;
  const ::google::actions::sdk::v2::interactionmodel::EventHandler& handler() const;
  ::google::actions::sdk::v2::interactionmodel::EventHandler* release_handler();
  ::google::actions::sdk::v2::interactionmodel::EventHandler* mutable_handler();
  void set_allocated_handler(::google::actions::sdk::v2::interactionmodel::EventHandler* handler);

  // @@protoc_insertion_point(class_scope:google.actions.sdk.v2.interactionmodel.ConditionalEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr condition_;
  ::google::protobuf::internal::ArenaStringPtr transition_to_scene_;
  ::google::actions::sdk::v2::interactionmodel::EventHandler* handler_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2factions_2fsdk_2fv2_2finteractionmodel_2fconditional_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConditionalEvent

// string condition = 1 [(.google.api.field_behavior) = REQUIRED];
inline void ConditionalEvent::clear_condition() {
  condition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionalEvent::condition() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
  return condition_.GetNoArena();
}
inline void ConditionalEvent::set_condition(const ::std::string& value) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
}
#if LANG_CXX11
inline void ConditionalEvent::set_condition(::std::string&& value) {
  
  condition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
}
#endif
inline void ConditionalEvent::set_condition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
}
inline void ConditionalEvent::set_condition(const char* value, size_t size) {
  
  condition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
}
inline ::std::string* ConditionalEvent::mutable_condition() {
  
  // @@protoc_insertion_point(field_mutable:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
  return condition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionalEvent::release_condition() {
  // @@protoc_insertion_point(field_release:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
  
  return condition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionalEvent::set_allocated_condition(::std::string* condition) {
  if (condition != nullptr) {
    
  } else {
    
  }
  condition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), condition);
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.interactionmodel.ConditionalEvent.condition)
}

// string transition_to_scene = 2 [(.google.api.field_behavior) = OPTIONAL];
inline void ConditionalEvent::clear_transition_to_scene() {
  transition_to_scene_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionalEvent::transition_to_scene() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
  return transition_to_scene_.GetNoArena();
}
inline void ConditionalEvent::set_transition_to_scene(const ::std::string& value) {
  
  transition_to_scene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
}
#if LANG_CXX11
inline void ConditionalEvent::set_transition_to_scene(::std::string&& value) {
  
  transition_to_scene_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
}
#endif
inline void ConditionalEvent::set_transition_to_scene(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transition_to_scene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
}
inline void ConditionalEvent::set_transition_to_scene(const char* value, size_t size) {
  
  transition_to_scene_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
}
inline ::std::string* ConditionalEvent::mutable_transition_to_scene() {
  
  // @@protoc_insertion_point(field_mutable:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
  return transition_to_scene_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionalEvent::release_transition_to_scene() {
  // @@protoc_insertion_point(field_release:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
  
  return transition_to_scene_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionalEvent::set_allocated_transition_to_scene(::std::string* transition_to_scene) {
  if (transition_to_scene != nullptr) {
    
  } else {
    
  }
  transition_to_scene_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transition_to_scene);
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.interactionmodel.ConditionalEvent.transition_to_scene)
}

// .google.actions.sdk.v2.interactionmodel.EventHandler handler = 3 [(.google.api.field_behavior) = OPTIONAL];
inline bool ConditionalEvent::has_handler() const {
  return this != internal_default_instance() && handler_ != nullptr;
}
inline const ::google::actions::sdk::v2::interactionmodel::EventHandler& ConditionalEvent::handler() const {
  const ::google::actions::sdk::v2::interactionmodel::EventHandler* p = handler_;
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.interactionmodel.ConditionalEvent.handler)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::actions::sdk::v2::interactionmodel::EventHandler*>(
      &::google::actions::sdk::v2::interactionmodel::_EventHandler_default_instance_);
}
inline ::google::actions::sdk::v2::interactionmodel::EventHandler* ConditionalEvent::release_handler() {
  // @@protoc_insertion_point(field_release:google.actions.sdk.v2.interactionmodel.ConditionalEvent.handler)
  
  ::google::actions::sdk::v2::interactionmodel::EventHandler* temp = handler_;
  handler_ = nullptr;
  return temp;
}
inline ::google::actions::sdk::v2::interactionmodel::EventHandler* ConditionalEvent::mutable_handler() {
  
  if (handler_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::actions::sdk::v2::interactionmodel::EventHandler>(GetArenaNoVirtual());
    handler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.actions.sdk.v2.interactionmodel.ConditionalEvent.handler)
  return handler_;
}
inline void ConditionalEvent::set_allocated_handler(::google::actions::sdk::v2::interactionmodel::EventHandler* handler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(handler_);
  }
  if (handler) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      handler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, handler, submessage_arena);
    }
    
  } else {
    
  }
  handler_ = handler;
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.interactionmodel.ConditionalEvent.handler)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace interactionmodel
}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2finteractionmodel_2fconditional_5fevent_2eproto
