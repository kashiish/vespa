// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/actions/sdk/v2/conversation/prompt/content/image.proto

#ifndef PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto
#define PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto();
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace conversation {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
}  // namespace conversation
}  // namespace v2
}  // namespace sdk
}  // namespace actions
namespace protobuf {
template<> ::google::actions::sdk::v2::conversation::Image* Arena::CreateMaybeMessage<::google::actions::sdk::v2::conversation::Image>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace conversation {

enum Image_ImageFill {
  Image_ImageFill_UNSPECIFIED = 0,
  Image_ImageFill_GRAY = 1,
  Image_ImageFill_WHITE = 2,
  Image_ImageFill_CROPPED = 3,
  Image_ImageFill_Image_ImageFill_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Image_ImageFill_Image_ImageFill_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Image_ImageFill_IsValid(int value);
const Image_ImageFill Image_ImageFill_ImageFill_MIN = Image_ImageFill_UNSPECIFIED;
const Image_ImageFill Image_ImageFill_ImageFill_MAX = Image_ImageFill_CROPPED;
const int Image_ImageFill_ImageFill_ARRAYSIZE = Image_ImageFill_ImageFill_MAX + 1;

const ::google::protobuf::EnumDescriptor* Image_ImageFill_descriptor();
inline const ::std::string& Image_ImageFill_Name(Image_ImageFill value) {
  return ::google::protobuf::internal::NameOfEnum(
    Image_ImageFill_descriptor(), value);
}
inline bool Image_ImageFill_Parse(
    const ::std::string& name, Image_ImageFill* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Image_ImageFill>(
    Image_ImageFill_descriptor(), name, value);
}
// ===================================================================

class Image final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.actions.sdk.v2.conversation.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Image_ImageFill ImageFill;
  static const ImageFill UNSPECIFIED =
    Image_ImageFill_UNSPECIFIED;
  static const ImageFill GRAY =
    Image_ImageFill_GRAY;
  static const ImageFill WHITE =
    Image_ImageFill_WHITE;
  static const ImageFill CROPPED =
    Image_ImageFill_CROPPED;
  static inline bool ImageFill_IsValid(int value) {
    return Image_ImageFill_IsValid(value);
  }
  static const ImageFill ImageFill_MIN =
    Image_ImageFill_ImageFill_MIN;
  static const ImageFill ImageFill_MAX =
    Image_ImageFill_ImageFill_MAX;
  static const int ImageFill_ARRAYSIZE =
    Image_ImageFill_ImageFill_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ImageFill_descriptor() {
    return Image_ImageFill_descriptor();
  }
  static inline const ::std::string& ImageFill_Name(ImageFill value) {
    return Image_ImageFill_Name(value);
  }
  static inline bool ImageFill_Parse(const ::std::string& name,
      ImageFill* value) {
    return Image_ImageFill_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string alt = 2;
  void clear_alt();
  static const int kAltFieldNumber = 2;
  const ::std::string& alt() const;
  void set_alt(const ::std::string& value);
  #if LANG_CXX11
  void set_alt(::std::string&& value);
  #endif
  void set_alt(const char* value);
  void set_alt(const char* value, size_t size);
  ::std::string* mutable_alt();
  ::std::string* release_alt();
  void set_allocated_alt(::std::string* alt);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.actions.sdk.v2.conversation.Image)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr alt_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// string url = 1;
inline void Image::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::url() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.conversation.Image.url)
  return url_.GetNoArena();
}
inline void Image::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.conversation.Image.url)
}
#if LANG_CXX11
inline void Image::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.actions.sdk.v2.conversation.Image.url)
}
#endif
inline void Image::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.actions.sdk.v2.conversation.Image.url)
}
inline void Image::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.actions.sdk.v2.conversation.Image.url)
}
inline ::std::string* Image::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.actions.sdk.v2.conversation.Image.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_url() {
  // @@protoc_insertion_point(field_release:google.actions.sdk.v2.conversation.Image.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Image.url)
}

// string alt = 2;
inline void Image::clear_alt() {
  alt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::alt() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.conversation.Image.alt)
  return alt_.GetNoArena();
}
inline void Image::set_alt(const ::std::string& value) {
  
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.conversation.Image.alt)
}
#if LANG_CXX11
inline void Image::set_alt(::std::string&& value) {
  
  alt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.actions.sdk.v2.conversation.Image.alt)
}
#endif
inline void Image::set_alt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.actions.sdk.v2.conversation.Image.alt)
}
inline void Image::set_alt(const char* value, size_t size) {
  
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.actions.sdk.v2.conversation.Image.alt)
}
inline ::std::string* Image::mutable_alt() {
  
  // @@protoc_insertion_point(field_mutable:google.actions.sdk.v2.conversation.Image.alt)
  return alt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_alt() {
  // @@protoc_insertion_point(field_release:google.actions.sdk.v2.conversation.Image.alt)
  
  return alt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_alt(::std::string* alt) {
  if (alt != nullptr) {
    
  } else {
    
  }
  alt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alt);
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Image.alt)
}

// int32 height = 3;
inline void Image::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.conversation.Image.height)
  return height_;
}
inline void Image::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.conversation.Image.height)
}

// int32 width = 4;
inline void Image::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.conversation.Image.width)
  return width_;
}
inline void Image::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.conversation.Image.width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace conversation
}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::actions::sdk::v2::conversation::Image_ImageFill> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::actions::sdk::v2::conversation::Image_ImageFill>() {
  return ::google::actions::sdk::v2::conversation::Image_ImageFill_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto
