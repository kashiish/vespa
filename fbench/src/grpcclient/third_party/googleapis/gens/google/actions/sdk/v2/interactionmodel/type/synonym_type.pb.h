// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/actions/sdk/v2/interactionmodel/type/synonym_type.proto

#ifndef PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto
#define PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/actions/sdk/v2/interactionmodel/type/entity_display.pb.h"
#include "google/api/field_behavior.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto();
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace interactionmodel {
namespace type {
class SynonymType;
class SynonymTypeDefaultTypeInternal;
extern SynonymTypeDefaultTypeInternal _SynonymType_default_instance_;
class SynonymType_EntitiesEntry_DoNotUse;
class SynonymType_EntitiesEntry_DoNotUseDefaultTypeInternal;
extern SynonymType_EntitiesEntry_DoNotUseDefaultTypeInternal _SynonymType_EntitiesEntry_DoNotUse_default_instance_;
class SynonymType_Entity;
class SynonymType_EntityDefaultTypeInternal;
extern SynonymType_EntityDefaultTypeInternal _SynonymType_Entity_default_instance_;
}  // namespace type
}  // namespace interactionmodel
}  // namespace v2
}  // namespace sdk
}  // namespace actions
namespace protobuf {
template<> ::google::actions::sdk::v2::interactionmodel::type::SynonymType* Arena::CreateMaybeMessage<::google::actions::sdk::v2::interactionmodel::type::SynonymType>(Arena*);
template<> ::google::actions::sdk::v2::interactionmodel::type::SynonymType_EntitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::actions::sdk::v2::interactionmodel::type::SynonymType_EntitiesEntry_DoNotUse>(Arena*);
template<> ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity* Arena::CreateMaybeMessage<::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace interactionmodel {
namespace type {

enum SynonymType_MatchType {
  SynonymType_MatchType_UNSPECIFIED = 0,
  SynonymType_MatchType_EXACT_MATCH = 1,
  SynonymType_MatchType_FUZZY_MATCH = 2,
  SynonymType_MatchType_SynonymType_MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SynonymType_MatchType_SynonymType_MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SynonymType_MatchType_IsValid(int value);
const SynonymType_MatchType SynonymType_MatchType_MatchType_MIN = SynonymType_MatchType_UNSPECIFIED;
const SynonymType_MatchType SynonymType_MatchType_MatchType_MAX = SynonymType_MatchType_FUZZY_MATCH;
const int SynonymType_MatchType_MatchType_ARRAYSIZE = SynonymType_MatchType_MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SynonymType_MatchType_descriptor();
inline const ::std::string& SynonymType_MatchType_Name(SynonymType_MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SynonymType_MatchType_descriptor(), value);
}
inline bool SynonymType_MatchType_Parse(
    const ::std::string& name, SynonymType_MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SynonymType_MatchType>(
    SynonymType_MatchType_descriptor(), name, value);
}
// ===================================================================

class SynonymType_Entity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity) */ {
 public:
  SynonymType_Entity();
  virtual ~SynonymType_Entity();

  SynonymType_Entity(const SynonymType_Entity& from);

  inline SynonymType_Entity& operator=(const SynonymType_Entity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SynonymType_Entity(SynonymType_Entity&& from) noexcept
    : SynonymType_Entity() {
    *this = ::std::move(from);
  }

  inline SynonymType_Entity& operator=(SynonymType_Entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SynonymType_Entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynonymType_Entity* internal_default_instance() {
    return reinterpret_cast<const SynonymType_Entity*>(
               &_SynonymType_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SynonymType_Entity* other);
  friend void swap(SynonymType_Entity& a, SynonymType_Entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SynonymType_Entity* New() const final {
    return CreateMaybeMessage<SynonymType_Entity>(nullptr);
  }

  SynonymType_Entity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SynonymType_Entity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SynonymType_Entity& from);
  void MergeFrom(const SynonymType_Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynonymType_Entity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string synonyms = 2 [(.google.api.field_behavior) = OPTIONAL];
  int synonyms_size() const;
  void clear_synonyms();
  static const int kSynonymsFieldNumber = 2;
  const ::std::string& synonyms(int index) const;
  ::std::string* mutable_synonyms(int index);
  void set_synonyms(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_synonyms(int index, ::std::string&& value);
  #endif
  void set_synonyms(int index, const char* value);
  void set_synonyms(int index, const char* value, size_t size);
  ::std::string* add_synonyms();
  void add_synonyms(const ::std::string& value);
  #if LANG_CXX11
  void add_synonyms(::std::string&& value);
  #endif
  void add_synonyms(const char* value);
  void add_synonyms(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& synonyms() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_synonyms();

  // .google.actions.sdk.v2.interactionmodel.type.EntityDisplay display = 1 [(.google.api.field_behavior) = OPTIONAL];
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 1;
  const ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay& display() const;
  ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* release_display();
  ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* mutable_display();
  void set_allocated_display(::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* display);

  // @@protoc_insertion_point(class_scope:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> synonyms_;
  ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* display_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto;
};
// -------------------------------------------------------------------

class SynonymType_EntitiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SynonymType_EntitiesEntry_DoNotUse, 
    ::std::string, ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<SynonymType_EntitiesEntry_DoNotUse, 
    ::std::string, ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SynonymType_EntitiesEntry_DoNotUse();
  SynonymType_EntitiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SynonymType_EntitiesEntry_DoNotUse& other);
  static const SynonymType_EntitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SynonymType_EntitiesEntry_DoNotUse*>(&_SynonymType_EntitiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SynonymType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.actions.sdk.v2.interactionmodel.type.SynonymType) */ {
 public:
  SynonymType();
  virtual ~SynonymType();

  SynonymType(const SynonymType& from);

  inline SynonymType& operator=(const SynonymType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SynonymType(SynonymType&& from) noexcept
    : SynonymType() {
    *this = ::std::move(from);
  }

  inline SynonymType& operator=(SynonymType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SynonymType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynonymType* internal_default_instance() {
    return reinterpret_cast<const SynonymType*>(
               &_SynonymType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SynonymType* other);
  friend void swap(SynonymType& a, SynonymType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SynonymType* New() const final {
    return CreateMaybeMessage<SynonymType>(nullptr);
  }

  SynonymType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SynonymType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SynonymType& from);
  void MergeFrom(const SynonymType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynonymType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SynonymType_Entity Entity;

  typedef SynonymType_MatchType MatchType;
  static const MatchType UNSPECIFIED =
    SynonymType_MatchType_UNSPECIFIED;
  static const MatchType EXACT_MATCH =
    SynonymType_MatchType_EXACT_MATCH;
  static const MatchType FUZZY_MATCH =
    SynonymType_MatchType_FUZZY_MATCH;
  static inline bool MatchType_IsValid(int value) {
    return SynonymType_MatchType_IsValid(value);
  }
  static const MatchType MatchType_MIN =
    SynonymType_MatchType_MatchType_MIN;
  static const MatchType MatchType_MAX =
    SynonymType_MatchType_MatchType_MAX;
  static const int MatchType_ARRAYSIZE =
    SynonymType_MatchType_MatchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchType_descriptor() {
    return SynonymType_MatchType_descriptor();
  }
  static inline const ::std::string& MatchType_Name(MatchType value) {
    return SynonymType_MatchType_Name(value);
  }
  static inline bool MatchType_Parse(const ::std::string& name,
      MatchType* value) {
    return SynonymType_MatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, .google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity> entities = 2 [(.google.api.field_behavior) = REQUIRED];
  int entities_size() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity >&
      entities() const;
  ::google::protobuf::Map< ::std::string, ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity >*
      mutable_entities();

  // .google.actions.sdk.v2.interactionmodel.type.SynonymType.MatchType match_type = 1 [(.google.api.field_behavior) = OPTIONAL];
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 1;
  ::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType match_type() const;
  void set_match_type(::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType value);

  // bool accept_unknown_values = 3 [(.google.api.field_behavior) = OPTIONAL];
  void clear_accept_unknown_values();
  static const int kAcceptUnknownValuesFieldNumber = 3;
  bool accept_unknown_values() const;
  void set_accept_unknown_values(bool value);

  // @@protoc_insertion_point(class_scope:google.actions.sdk.v2.interactionmodel.type.SynonymType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SynonymType_EntitiesEntry_DoNotUse,
      ::std::string, ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > entities_;
  int match_type_;
  bool accept_unknown_values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SynonymType_Entity

// .google.actions.sdk.v2.interactionmodel.type.EntityDisplay display = 1 [(.google.api.field_behavior) = OPTIONAL];
inline bool SynonymType_Entity::has_display() const {
  return this != internal_default_instance() && display_ != nullptr;
}
inline const ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay& SynonymType_Entity::display() const {
  const ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* p = display_;
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.display)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay*>(
      &::google::actions::sdk::v2::interactionmodel::type::_EntityDisplay_default_instance_);
}
inline ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* SynonymType_Entity::release_display() {
  // @@protoc_insertion_point(field_release:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.display)
  
  ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* temp = display_;
  display_ = nullptr;
  return temp;
}
inline ::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* SynonymType_Entity::mutable_display() {
  
  if (display_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::actions::sdk::v2::interactionmodel::type::EntityDisplay>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.display)
  return display_;
}
inline void SynonymType_Entity::set_allocated_display(::google::actions::sdk::v2::interactionmodel::type::EntityDisplay* display) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(display_);
  }
  if (display) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    
  } else {
    
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.display)
}

// repeated string synonyms = 2 [(.google.api.field_behavior) = OPTIONAL];
inline int SynonymType_Entity::synonyms_size() const {
  return synonyms_.size();
}
inline void SynonymType_Entity::clear_synonyms() {
  synonyms_.Clear();
}
inline const ::std::string& SynonymType_Entity::synonyms(int index) const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
  return synonyms_.Get(index);
}
inline ::std::string* SynonymType_Entity::mutable_synonyms(int index) {
  // @@protoc_insertion_point(field_mutable:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
  return synonyms_.Mutable(index);
}
inline void SynonymType_Entity::set_synonyms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
  synonyms_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SynonymType_Entity::set_synonyms(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
  synonyms_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SynonymType_Entity::set_synonyms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  synonyms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
}
inline void SynonymType_Entity::set_synonyms(int index, const char* value, size_t size) {
  synonyms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
}
inline ::std::string* SynonymType_Entity::add_synonyms() {
  // @@protoc_insertion_point(field_add_mutable:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
  return synonyms_.Add();
}
inline void SynonymType_Entity::add_synonyms(const ::std::string& value) {
  synonyms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
}
#if LANG_CXX11
inline void SynonymType_Entity::add_synonyms(::std::string&& value) {
  synonyms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
}
#endif
inline void SynonymType_Entity::add_synonyms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  synonyms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
}
inline void SynonymType_Entity::add_synonyms(const char* value, size_t size) {
  synonyms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
SynonymType_Entity::synonyms() const {
  // @@protoc_insertion_point(field_list:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
  return synonyms_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
SynonymType_Entity::mutable_synonyms() {
  // @@protoc_insertion_point(field_mutable_list:google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity.synonyms)
  return &synonyms_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SynonymType

// .google.actions.sdk.v2.interactionmodel.type.SynonymType.MatchType match_type = 1 [(.google.api.field_behavior) = OPTIONAL];
inline void SynonymType::clear_match_type() {
  match_type_ = 0;
}
inline ::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType SynonymType::match_type() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.interactionmodel.type.SynonymType.match_type)
  return static_cast< ::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType >(match_type_);
}
inline void SynonymType::set_match_type(::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType value) {
  
  match_type_ = value;
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.interactionmodel.type.SynonymType.match_type)
}

// bool accept_unknown_values = 3 [(.google.api.field_behavior) = OPTIONAL];
inline void SynonymType::clear_accept_unknown_values() {
  accept_unknown_values_ = false;
}
inline bool SynonymType::accept_unknown_values() const {
  // @@protoc_insertion_point(field_get:google.actions.sdk.v2.interactionmodel.type.SynonymType.accept_unknown_values)
  return accept_unknown_values_;
}
inline void SynonymType::set_accept_unknown_values(bool value) {
  
  accept_unknown_values_ = value;
  // @@protoc_insertion_point(field_set:google.actions.sdk.v2.interactionmodel.type.SynonymType.accept_unknown_values)
}

// map<string, .google.actions.sdk.v2.interactionmodel.type.SynonymType.Entity> entities = 2 [(.google.api.field_behavior) = REQUIRED];
inline int SynonymType::entities_size() const {
  return entities_.size();
}
inline void SynonymType::clear_entities() {
  entities_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity >&
SynonymType::entities() const {
  // @@protoc_insertion_point(field_map:google.actions.sdk.v2.interactionmodel.type.SynonymType.entities)
  return entities_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::actions::sdk::v2::interactionmodel::type::SynonymType_Entity >*
SynonymType::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_map:google.actions.sdk.v2.interactionmodel.type.SynonymType.entities)
  return entities_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace interactionmodel
}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType>() {
  return ::google::actions::sdk::v2::interactionmodel::type::SynonymType_MatchType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2factions_2fsdk_2fv2_2finteractionmodel_2ftype_2fsynonym_5ftype_2eproto
