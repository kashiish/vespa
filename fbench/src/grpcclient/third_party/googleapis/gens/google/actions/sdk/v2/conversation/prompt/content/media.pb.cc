// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/actions/sdk/v2/conversation/prompt/content/media.proto

#include "google/actions/sdk/v2/conversation/prompt/content/media.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Image_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace conversation {
class MediaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Media> _instance;
} _Media_default_instance_;
class MediaObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaObject> _instance;
} _MediaObject_default_instance_;
class MediaImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MediaImage> _instance;
  const ::google::actions::sdk::v2::conversation::Image* large_;
  const ::google::actions::sdk::v2::conversation::Image* icon_;
} _MediaImage_default_instance_;
}  // namespace conversation
}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google
static void InitDefaultsMedia_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::actions::sdk::v2::conversation::_Media_default_instance_;
    new (ptr) ::google::actions::sdk::v2::conversation::Media();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::actions::sdk::v2::conversation::Media::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Media_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMedia_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_MediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base,}};

static void InitDefaultsMediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::actions::sdk::v2::conversation::_MediaObject_default_instance_;
    new (ptr) ::google::actions::sdk::v2::conversation::MediaObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::actions::sdk::v2::conversation::MediaObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto}, {
      &scc_info_MediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base,}};

static void InitDefaultsMediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::actions::sdk::v2::conversation::_MediaImage_default_instance_;
    new (ptr) ::google::actions::sdk::v2::conversation::MediaImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::actions::sdk::v2::conversation::MediaImage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto}, {
      &scc_info_Image_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto.base,}};

void InitDefaults_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Media_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Media, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Media, media_type_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Media, start_offset_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Media, optional_media_controls_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Media, media_objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaObject, name_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaObject, description_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaObject, url_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaObject, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaImage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaImage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::actions::sdk::v2::conversation::MediaImageDefaultTypeInternal, large_),
  offsetof(::google::actions::sdk::v2::conversation::MediaImageDefaultTypeInternal, icon_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::MediaImage, image_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::actions::sdk::v2::conversation::Media)},
  { 9, -1, sizeof(::google::actions::sdk::v2::conversation::MediaObject)},
  { 18, -1, sizeof(::google::actions::sdk::v2::conversation::MediaImage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::actions::sdk::v2::conversation::_Media_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::actions::sdk::v2::conversation::_MediaObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::actions::sdk::v2::conversation::_MediaImage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto = {
  {}, AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto, "google/actions/sdk/v2/conversation/prompt/content/media.proto", schemas,
  file_default_instances, TableStruct_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto::offsets,
  file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto, 3, file_level_enum_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto, file_level_service_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto,
};

const char descriptor_table_protodef_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[] =
  "\n=google/actions/sdk/v2/conversation/pro"
  "mpt/content/media.proto\022\"google.actions."
  "sdk.v2.conversation\032=google/actions/sdk/"
  "v2/conversation/prompt/content/image.pro"
  "to\032\036google/protobuf/duration.proto\"\320\003\n\005M"
  "edia\022G\n\nmedia_type\030\010 \001(\01623.google.action"
  "s.sdk.v2.conversation.Media.MediaType\022/\n"
  "\014start_offset\030\005 \001(\0132\031.google.protobuf.Du"
  "ration\022`\n\027optional_media_controls\030\006 \003(\0162"
  "\?.google.actions.sdk.v2.conversation.Med"
  "ia.OptionalMediaControls\022F\n\rmedia_object"
  "s\030\007 \003(\0132/.google.actions.sdk.v2.conversa"
  "tion.MediaObject\"H\n\tMediaType\022\032\n\026MEDIA_T"
  "YPE_UNSPECIFIED\020\000\022\t\n\005AUDIO\020\001\022\024\n\020MEDIA_ST"
  "ATUS_ACK\020\002\"Y\n\025OptionalMediaControls\022\'\n#O"
  "PTIONAL_MEDIA_CONTROLS_UNSPECIFIED\020\000\022\n\n\006"
  "PAUSED\020\001\022\013\n\007STOPPED\020\002\"|\n\013MediaObject\022\014\n\004"
  "name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\013\n\003url\030\003"
  " \001(\t\022=\n\005image\030\004 \001(\0132..google.actions.sdk"
  ".v2.conversation.MediaImage\"\214\001\n\nMediaIma"
  "ge\022:\n\005large\030\001 \001(\0132).google.actions.sdk.v"
  "2.conversation.ImageH\000\0229\n\004icon\030\002 \001(\0132).g"
  "oogle.actions.sdk.v2.conversation.ImageH"
  "\000B\007\n\005imageB\206\001\n&com.google.actions.sdk.v2"
  ".conversationB\nMediaProtoP\001ZNgoogle.gola"
  "ng.org/genproto/googleapis/actions/sdk/v"
  "2/conversation;conversationb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto = {
  false, InitDefaults_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto, 
  descriptor_table_protodef_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto,
  "google/actions/sdk/v2/conversation/prompt/content/media.proto", &assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto, 1075,
};

void AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fduration_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto = []() { AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto(); return true; }();
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace conversation {
const ::google::protobuf::EnumDescriptor* Media_MediaType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto);
  return file_level_enum_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[0];
}
bool Media_MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Media_MediaType Media::MEDIA_TYPE_UNSPECIFIED;
const Media_MediaType Media::AUDIO;
const Media_MediaType Media::MEDIA_STATUS_ACK;
const Media_MediaType Media::MediaType_MIN;
const Media_MediaType Media::MediaType_MAX;
const int Media::MediaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Media_OptionalMediaControls_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto);
  return file_level_enum_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[1];
}
bool Media_OptionalMediaControls_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Media_OptionalMediaControls Media::OPTIONAL_MEDIA_CONTROLS_UNSPECIFIED;
const Media_OptionalMediaControls Media::PAUSED;
const Media_OptionalMediaControls Media::STOPPED;
const Media_OptionalMediaControls Media::OptionalMediaControls_MIN;
const Media_OptionalMediaControls Media::OptionalMediaControls_MAX;
const int Media::OptionalMediaControls_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Media::InitAsDefaultInstance() {
  ::google::actions::sdk::v2::conversation::_Media_default_instance_._instance.get_mutable()->start_offset_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
class Media::HasBitSetters {
 public:
  static const ::google::protobuf::Duration& start_offset(const Media* msg);
};

const ::google::protobuf::Duration&
Media::HasBitSetters::start_offset(const Media* msg) {
  return *msg->start_offset_;
}
void Media::clear_start_offset() {
  if (GetArenaNoVirtual() == nullptr && start_offset_ != nullptr) {
    delete start_offset_;
  }
  start_offset_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Media::kMediaTypeFieldNumber;
const int Media::kStartOffsetFieldNumber;
const int Media::kOptionalMediaControlsFieldNumber;
const int Media::kMediaObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Media::Media()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.actions.sdk.v2.conversation.Media)
}
Media::Media(const Media& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      optional_media_controls_(from.optional_media_controls_),
      media_objects_(from.media_objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_offset()) {
    start_offset_ = new ::google::protobuf::Duration(*from.start_offset_);
  } else {
    start_offset_ = nullptr;
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:google.actions.sdk.v2.conversation.Media)
}

void Media::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Media_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  ::memset(&start_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&media_type_) -
      reinterpret_cast<char*>(&start_offset_)) + sizeof(media_type_));
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:google.actions.sdk.v2.conversation.Media)
  SharedDtor();
}

void Media::SharedDtor() {
  if (this != internal_default_instance()) delete start_offset_;
}

void Media::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Media& Media::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Media_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:google.actions.sdk.v2.conversation.Media)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optional_media_controls_.Clear();
  media_objects_.Clear();
  if (GetArenaNoVirtual() == nullptr && start_offset_ != nullptr) {
    delete start_offset_;
  }
  start_offset_ = nullptr;
  media_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Media::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Media*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration start_offset = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Duration::_InternalParse;
        object = msg->mutable_start_offset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .google.actions.sdk.v2.conversation.Media.OptionalMediaControls optional_media_controls = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_optional_media_controls();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_optional_media_controls(static_cast<::google::actions::sdk::v2::conversation::Media_OptionalMediaControls>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
        break;
      }
      // repeated .google.actions.sdk.v2.conversation.MediaObject media_objects = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::actions::sdk::v2::conversation::MediaObject::_InternalParse;
          object = msg->add_media_objects();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .google.actions.sdk.v2.conversation.Media.MediaType media_type = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_media_type(static_cast<::google::actions::sdk::v2::conversation::Media_MediaType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Media::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.actions.sdk.v2.conversation.Media)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Duration start_offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.actions.sdk.v2.conversation.Media.OptionalMediaControls optional_media_controls = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_optional_media_controls(static_cast< ::google::actions::sdk::v2::conversation::Media_OptionalMediaControls >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_optional_media_controls(static_cast< ::google::actions::sdk::v2::conversation::Media_OptionalMediaControls >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.actions.sdk.v2.conversation.MediaObject media_objects = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_media_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.Media.MediaType media_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_media_type(static_cast< ::google::actions::sdk::v2::conversation::Media_MediaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.actions.sdk.v2.conversation.Media)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.actions.sdk.v2.conversation.Media)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Media::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.actions.sdk.v2.conversation.Media)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_offset = 5;
  if (this->has_start_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::start_offset(this), output);
  }

  // repeated .google.actions.sdk.v2.conversation.Media.OptionalMediaControls optional_media_controls = 6;
  if (this->optional_media_controls_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_optional_media_controls_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->optional_media_controls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->optional_media_controls(i), output);
  }

  // repeated .google.actions.sdk.v2.conversation.MediaObject media_objects = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->media_objects(static_cast<int>(i)),
      output);
  }

  // .google.actions.sdk.v2.conversation.Media.MediaType media_type = 8;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->media_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.actions.sdk.v2.conversation.Media)
}

::google::protobuf::uint8* Media::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.actions.sdk.v2.conversation.Media)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration start_offset = 5;
  if (this->has_start_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::start_offset(this), target);
  }

  // repeated .google.actions.sdk.v2.conversation.Media.OptionalMediaControls optional_media_controls = 6;
  if (this->optional_media_controls_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _optional_media_controls_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->optional_media_controls_, target);
  }

  // repeated .google.actions.sdk.v2.conversation.MediaObject media_objects = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->media_objects(static_cast<int>(i)), target);
  }

  // .google.actions.sdk.v2.conversation.Media.MediaType media_type = 8;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->media_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.actions.sdk.v2.conversation.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.actions.sdk.v2.conversation.Media)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.actions.sdk.v2.conversation.Media.OptionalMediaControls optional_media_controls = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->optional_media_controls_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->optional_media_controls(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _optional_media_controls_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.actions.sdk.v2.conversation.MediaObject media_objects = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->media_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->media_objects(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Duration start_offset = 5;
  if (this->has_start_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_offset_);
  }

  // .google.actions.sdk.v2.conversation.Media.MediaType media_type = 8;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.actions.sdk.v2.conversation.Media)
  GOOGLE_DCHECK_NE(&from, this);
  const Media* source =
      ::google::protobuf::DynamicCastToGenerated<Media>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.actions.sdk.v2.conversation.Media)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.actions.sdk.v2.conversation.Media)
    MergeFrom(*source);
  }
}

void Media::MergeFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.actions.sdk.v2.conversation.Media)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optional_media_controls_.MergeFrom(from.optional_media_controls_);
  media_objects_.MergeFrom(from.media_objects_);
  if (from.has_start_offset()) {
    mutable_start_offset()->::google::protobuf::Duration::MergeFrom(from.start_offset());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void Media::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.actions.sdk.v2.conversation.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.actions.sdk.v2.conversation.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  return true;
}

void Media::Swap(Media* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Media::InternalSwap(Media* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  optional_media_controls_.InternalSwap(&other->optional_media_controls_);
  CastToBase(&media_objects_)->InternalSwap(CastToBase(&other->media_objects_));
  swap(start_offset_, other->start_offset_);
  swap(media_type_, other->media_type_);
}

::google::protobuf::Metadata Media::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto);
  return ::file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MediaObject::InitAsDefaultInstance() {
  ::google::actions::sdk::v2::conversation::_MediaObject_default_instance_._instance.get_mutable()->image_ = const_cast< ::google::actions::sdk::v2::conversation::MediaImage*>(
      ::google::actions::sdk::v2::conversation::MediaImage::internal_default_instance());
}
class MediaObject::HasBitSetters {
 public:
  static const ::google::actions::sdk::v2::conversation::MediaImage& image(const MediaObject* msg);
};

const ::google::actions::sdk::v2::conversation::MediaImage&
MediaObject::HasBitSetters::image(const MediaObject* msg) {
  return *msg->image_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaObject::kNameFieldNumber;
const int MediaObject::kDescriptionFieldNumber;
const int MediaObject::kUrlFieldNumber;
const int MediaObject::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaObject::MediaObject()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.actions.sdk.v2.conversation.MediaObject)
}
MediaObject::MediaObject(const MediaObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_image()) {
    image_ = new ::google::actions::sdk::v2::conversation::MediaImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.actions.sdk.v2.conversation.MediaObject)
}

void MediaObject::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = nullptr;
}

MediaObject::~MediaObject() {
  // @@protoc_insertion_point(destructor:google.actions.sdk.v2.conversation.MediaObject)
  SharedDtor();
}

void MediaObject::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
}

void MediaObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaObject& MediaObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MediaObject_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void MediaObject::Clear() {
// @@protoc_insertion_point(message_clear_start:google.actions.sdk.v2.conversation.MediaObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MediaObject::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MediaObject*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.actions.sdk.v2.conversation.MediaObject.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.actions.sdk.v2.conversation.MediaObject.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.actions.sdk.v2.conversation.MediaObject.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.actions.sdk.v2.conversation.MediaImage image = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::MediaImage::_InternalParse;
        object = msg->mutable_image();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MediaObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.actions.sdk.v2.conversation.MediaObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.actions.sdk.v2.conversation.MediaObject.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.actions.sdk.v2.conversation.MediaObject.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.actions.sdk.v2.conversation.MediaObject.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.MediaImage image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.actions.sdk.v2.conversation.MediaObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.actions.sdk.v2.conversation.MediaObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MediaObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.actions.sdk.v2.conversation.MediaObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.actions.sdk.v2.conversation.MediaObject.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.actions.sdk.v2.conversation.MediaObject.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.actions.sdk.v2.conversation.MediaObject.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // .google.actions.sdk.v2.conversation.MediaImage image = 4;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::image(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.actions.sdk.v2.conversation.MediaObject)
}

::google::protobuf::uint8* MediaObject::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.actions.sdk.v2.conversation.MediaObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.actions.sdk.v2.conversation.MediaObject.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.actions.sdk.v2.conversation.MediaObject.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string url = 3;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.actions.sdk.v2.conversation.MediaObject.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // .google.actions.sdk.v2.conversation.MediaImage image = 4;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::image(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.actions.sdk.v2.conversation.MediaObject)
  return target;
}

size_t MediaObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.actions.sdk.v2.conversation.MediaObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string url = 3;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // .google.actions.sdk.v2.conversation.MediaImage image = 4;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.actions.sdk.v2.conversation.MediaObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaObject* source =
      ::google::protobuf::DynamicCastToGenerated<MediaObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.actions.sdk.v2.conversation.MediaObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.actions.sdk.v2.conversation.MediaObject)
    MergeFrom(*source);
  }
}

void MediaObject::MergeFrom(const MediaObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.actions.sdk.v2.conversation.MediaObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_image()) {
    mutable_image()->::google::actions::sdk::v2::conversation::MediaImage::MergeFrom(from.image());
  }
}

void MediaObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.actions.sdk.v2.conversation.MediaObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaObject::CopyFrom(const MediaObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.actions.sdk.v2.conversation.MediaObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaObject::IsInitialized() const {
  return true;
}

void MediaObject::Swap(MediaObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaObject::InternalSwap(MediaObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_, other->image_);
}

::google::protobuf::Metadata MediaObject::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto);
  return ::file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MediaImage::InitAsDefaultInstance() {
  ::google::actions::sdk::v2::conversation::_MediaImage_default_instance_.large_ = const_cast< ::google::actions::sdk::v2::conversation::Image*>(
      ::google::actions::sdk::v2::conversation::Image::internal_default_instance());
  ::google::actions::sdk::v2::conversation::_MediaImage_default_instance_.icon_ = const_cast< ::google::actions::sdk::v2::conversation::Image*>(
      ::google::actions::sdk::v2::conversation::Image::internal_default_instance());
}
class MediaImage::HasBitSetters {
 public:
  static const ::google::actions::sdk::v2::conversation::Image& large(const MediaImage* msg);
  static const ::google::actions::sdk::v2::conversation::Image& icon(const MediaImage* msg);
};

const ::google::actions::sdk::v2::conversation::Image&
MediaImage::HasBitSetters::large(const MediaImage* msg) {
  return *msg->image_.large_;
}
const ::google::actions::sdk::v2::conversation::Image&
MediaImage::HasBitSetters::icon(const MediaImage* msg) {
  return *msg->image_.icon_;
}
void MediaImage::set_allocated_large(::google::actions::sdk::v2::conversation::Image* large) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_image();
  if (large) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      large = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, large, submessage_arena);
    }
    set_has_large();
    image_.large_ = large;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.MediaImage.large)
}
void MediaImage::clear_large() {
  if (has_large()) {
    delete image_.large_;
    clear_has_image();
  }
}
void MediaImage::set_allocated_icon(::google::actions::sdk::v2::conversation::Image* icon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_image();
  if (icon) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      icon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, icon, submessage_arena);
    }
    set_has_icon();
    image_.icon_ = icon;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.MediaImage.icon)
}
void MediaImage::clear_icon() {
  if (has_icon()) {
    delete image_.icon_;
    clear_has_image();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaImage::kLargeFieldNumber;
const int MediaImage::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaImage::MediaImage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.actions.sdk.v2.conversation.MediaImage)
}
MediaImage::MediaImage(const MediaImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_image();
  switch (from.image_case()) {
    case kLarge: {
      mutable_large()->::google::actions::sdk::v2::conversation::Image::MergeFrom(from.large());
      break;
    }
    case kIcon: {
      mutable_icon()->::google::actions::sdk::v2::conversation::Image::MergeFrom(from.icon());
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.actions.sdk.v2.conversation.MediaImage)
}

void MediaImage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  clear_has_image();
}

MediaImage::~MediaImage() {
  // @@protoc_insertion_point(destructor:google.actions.sdk.v2.conversation.MediaImage)
  SharedDtor();
}

void MediaImage::SharedDtor() {
  if (has_image()) {
    clear_image();
  }
}

void MediaImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaImage& MediaImage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MediaImage_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void MediaImage::clear_image() {
// @@protoc_insertion_point(one_of_clear_start:google.actions.sdk.v2.conversation.MediaImage)
  switch (image_case()) {
    case kLarge: {
      delete image_.large_;
      break;
    }
    case kIcon: {
      delete image_.icon_;
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IMAGE_NOT_SET;
}


void MediaImage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.actions.sdk.v2.conversation.MediaImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_image();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MediaImage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MediaImage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.actions.sdk.v2.conversation.Image large = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Image::_InternalParse;
        object = msg->mutable_large();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.actions.sdk.v2.conversation.Image icon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Image::_InternalParse;
        object = msg->mutable_icon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MediaImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.actions.sdk.v2.conversation.MediaImage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.actions.sdk.v2.conversation.Image large = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_large()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.Image icon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.actions.sdk.v2.conversation.MediaImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.actions.sdk.v2.conversation.MediaImage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MediaImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.actions.sdk.v2.conversation.MediaImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.actions.sdk.v2.conversation.Image large = 1;
  if (has_large()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::large(this), output);
  }

  // .google.actions.sdk.v2.conversation.Image icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::icon(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.actions.sdk.v2.conversation.MediaImage)
}

::google::protobuf::uint8* MediaImage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.actions.sdk.v2.conversation.MediaImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.actions.sdk.v2.conversation.Image large = 1;
  if (has_large()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::large(this), target);
  }

  // .google.actions.sdk.v2.conversation.Image icon = 2;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::icon(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.actions.sdk.v2.conversation.MediaImage)
  return target;
}

size_t MediaImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.actions.sdk.v2.conversation.MediaImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (image_case()) {
    // .google.actions.sdk.v2.conversation.Image large = 1;
    case kLarge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *image_.large_);
      break;
    }
    // .google.actions.sdk.v2.conversation.Image icon = 2;
    case kIcon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *image_.icon_);
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.actions.sdk.v2.conversation.MediaImage)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaImage* source =
      ::google::protobuf::DynamicCastToGenerated<MediaImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.actions.sdk.v2.conversation.MediaImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.actions.sdk.v2.conversation.MediaImage)
    MergeFrom(*source);
  }
}

void MediaImage::MergeFrom(const MediaImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.actions.sdk.v2.conversation.MediaImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.image_case()) {
    case kLarge: {
      mutable_large()->::google::actions::sdk::v2::conversation::Image::MergeFrom(from.large());
      break;
    }
    case kIcon: {
      mutable_icon()->::google::actions::sdk::v2::conversation::Image::MergeFrom(from.icon());
      break;
    }
    case IMAGE_NOT_SET: {
      break;
    }
  }
}

void MediaImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.actions.sdk.v2.conversation.MediaImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaImage::CopyFrom(const MediaImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.actions.sdk.v2.conversation.MediaImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaImage::IsInitialized() const {
  return true;
}

void MediaImage::Swap(MediaImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaImage::InternalSwap(MediaImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(image_, other->image_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata MediaImage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto);
  return ::file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace conversation
}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::actions::sdk::v2::conversation::Media* Arena::CreateMaybeMessage< ::google::actions::sdk::v2::conversation::Media >(Arena* arena) {
  return Arena::CreateInternal< ::google::actions::sdk::v2::conversation::Media >(arena);
}
template<> PROTOBUF_NOINLINE ::google::actions::sdk::v2::conversation::MediaObject* Arena::CreateMaybeMessage< ::google::actions::sdk::v2::conversation::MediaObject >(Arena* arena) {
  return Arena::CreateInternal< ::google::actions::sdk::v2::conversation::MediaObject >(arena);
}
template<> PROTOBUF_NOINLINE ::google::actions::sdk::v2::conversation::MediaImage* Arena::CreateMaybeMessage< ::google::actions::sdk::v2::conversation::MediaImage >(Arena* arena) {
  return Arena::CreateInternal< ::google::actions::sdk::v2::conversation::MediaImage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
