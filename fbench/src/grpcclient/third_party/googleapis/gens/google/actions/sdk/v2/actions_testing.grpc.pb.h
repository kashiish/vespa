// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/actions/sdk/v2/actions_testing.proto
// Original file comments:
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2factions_2fsdk_2fv2_2factions_5ftesting_2eproto__INCLUDED
#define GRPC_google_2factions_2fsdk_2fv2_2factions_5ftesting_2eproto__INCLUDED

#include "google/actions/sdk/v2/actions_testing.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace actions {
namespace sdk {
namespace v2 {

// Actions Testing API which allows developers to run automated tests.
class ActionsTesting final {
 public:
  static constexpr char const* service_full_name() {
    return "google.actions.sdk.v2.ActionsTesting";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Plays one round of the conversation.
    virtual ::grpc::Status SendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::google::actions::sdk::v2::SendInteractionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::SendInteractionResponse>> AsyncSendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::SendInteractionResponse>>(AsyncSendInteractionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::SendInteractionResponse>> PrepareAsyncSendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::SendInteractionResponse>>(PrepareAsyncSendInteractionRaw(context, request, cq));
    }
    // Finds the intents that match a given query.
    virtual ::grpc::Status MatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::google::actions::sdk::v2::MatchIntentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::MatchIntentsResponse>> AsyncMatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::MatchIntentsResponse>>(AsyncMatchIntentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::MatchIntentsResponse>> PrepareAsyncMatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::MatchIntentsResponse>>(PrepareAsyncMatchIntentsRaw(context, request, cq));
    }
    // Sets the Web & App Activity control on a service account.
    //
    // It is necessary to have this setting enabled in order to use call Actions.
    // The setting is originally disabled for service accounts, and it is
    // preserved until set to a different value. This means it only needs to be
    // enabled once per account (and not necessarily once per test), unless it is
    // later disabled.
    //
    // Returns an error if the caller is not a service account. User accounts can
    // change this setting via the Activity Controls page. See
    // https://support.google.com/websearch/answer/54068.
    virtual ::grpc::Status SetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetWebAndAppActivityControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetWebAndAppActivityControlRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Plays one round of the conversation.
      virtual void SendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest* request, ::google::actions::sdk::v2::SendInteractionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest* request, ::google::actions::sdk::v2::SendInteractionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Finds the intents that match a given query.
      virtual void MatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest* request, ::google::actions::sdk::v2::MatchIntentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest* request, ::google::actions::sdk::v2::MatchIntentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the Web & App Activity control on a service account.
      //
      // It is necessary to have this setting enabled in order to use call Actions.
      // The setting is originally disabled for service accounts, and it is
      // preserved until set to a different value. This means it only needs to be
      // enabled once per account (and not necessarily once per test), unless it is
      // later disabled.
      //
      // Returns an error if the caller is not a service account. User accounts can
      // change this setting via the Activity Controls page. See
      // https://support.google.com/websearch/answer/54068.
      virtual void SetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::SendInteractionResponse>* AsyncSendInteractionRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::SendInteractionResponse>* PrepareAsyncSendInteractionRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::MatchIntentsResponse>* AsyncMatchIntentsRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::actions::sdk::v2::MatchIntentsResponse>* PrepareAsyncMatchIntentsRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetWebAndAppActivityControlRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetWebAndAppActivityControlRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::google::actions::sdk::v2::SendInteractionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::SendInteractionResponse>> AsyncSendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::SendInteractionResponse>>(AsyncSendInteractionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::SendInteractionResponse>> PrepareAsyncSendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::SendInteractionResponse>>(PrepareAsyncSendInteractionRaw(context, request, cq));
    }
    ::grpc::Status MatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::google::actions::sdk::v2::MatchIntentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::MatchIntentsResponse>> AsyncMatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::MatchIntentsResponse>>(AsyncMatchIntentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::MatchIntentsResponse>> PrepareAsyncMatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::MatchIntentsResponse>>(PrepareAsyncMatchIntentsRaw(context, request, cq));
    }
    ::grpc::Status SetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetWebAndAppActivityControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetWebAndAppActivityControlRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest* request, ::google::actions::sdk::v2::SendInteractionResponse* response, std::function<void(::grpc::Status)>) override;
      void SendInteraction(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest* request, ::google::actions::sdk::v2::SendInteractionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest* request, ::google::actions::sdk::v2::MatchIntentsResponse* response, std::function<void(::grpc::Status)>) override;
      void MatchIntents(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest* request, ::google::actions::sdk::v2::MatchIntentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetWebAndAppActivityControl(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::SendInteractionResponse>* AsyncSendInteractionRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::SendInteractionResponse>* PrepareAsyncSendInteractionRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SendInteractionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::MatchIntentsResponse>* AsyncMatchIntentsRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::actions::sdk::v2::MatchIntentsResponse>* PrepareAsyncMatchIntentsRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetWebAndAppActivityControlRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetWebAndAppActivityControlRaw(::grpc::ClientContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendInteraction_;
    const ::grpc::internal::RpcMethod rpcmethod_MatchIntents_;
    const ::grpc::internal::RpcMethod rpcmethod_SetWebAndAppActivityControl_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Plays one round of the conversation.
    virtual ::grpc::Status SendInteraction(::grpc::ServerContext* context, const ::google::actions::sdk::v2::SendInteractionRequest* request, ::google::actions::sdk::v2::SendInteractionResponse* response);
    // Finds the intents that match a given query.
    virtual ::grpc::Status MatchIntents(::grpc::ServerContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest* request, ::google::actions::sdk::v2::MatchIntentsResponse* response);
    // Sets the Web & App Activity control on a service account.
    //
    // It is necessary to have this setting enabled in order to use call Actions.
    // The setting is originally disabled for service accounts, and it is
    // preserved until set to a different value. This means it only needs to be
    // enabled once per account (and not necessarily once per test), unless it is
    // later disabled.
    //
    // Returns an error if the caller is not a service account. User accounts can
    // change this setting via the Activity Controls page. See
    // https://support.google.com/websearch/answer/54068.
    virtual ::grpc::Status SetWebAndAppActivityControl(::grpc::ServerContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendInteraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendInteraction() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendInteraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInteraction(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SendInteractionRequest* /*request*/, ::google::actions::sdk::v2::SendInteractionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendInteraction(::grpc::ServerContext* context, ::google::actions::sdk::v2::SendInteractionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::actions::sdk::v2::SendInteractionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MatchIntents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MatchIntents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MatchIntents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MatchIntents(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::MatchIntentsRequest* /*request*/, ::google::actions::sdk::v2::MatchIntentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMatchIntents(::grpc::ServerContext* context, ::google::actions::sdk::v2::MatchIntentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::actions::sdk::v2::MatchIntentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetWebAndAppActivityControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetWebAndAppActivityControl() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetWebAndAppActivityControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWebAndAppActivityControl(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWebAndAppActivityControl(::grpc::ServerContext* context, ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendInteraction<WithAsyncMethod_MatchIntents<WithAsyncMethod_SetWebAndAppActivityControl<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendInteraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendInteraction() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::actions::sdk::v2::SendInteractionRequest, ::google::actions::sdk::v2::SendInteractionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::actions::sdk::v2::SendInteractionRequest* request, ::google::actions::sdk::v2::SendInteractionResponse* response) { return this->SendInteraction(context, request, response); }));}
    void SetMessageAllocatorFor_SendInteraction(
        ::grpc::MessageAllocator< ::google::actions::sdk::v2::SendInteractionRequest, ::google::actions::sdk::v2::SendInteractionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::actions::sdk::v2::SendInteractionRequest, ::google::actions::sdk::v2::SendInteractionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendInteraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInteraction(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SendInteractionRequest* /*request*/, ::google::actions::sdk::v2::SendInteractionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendInteraction(
      ::grpc::CallbackServerContext* /*context*/, const ::google::actions::sdk::v2::SendInteractionRequest* /*request*/, ::google::actions::sdk::v2::SendInteractionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MatchIntents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MatchIntents() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::actions::sdk::v2::MatchIntentsRequest, ::google::actions::sdk::v2::MatchIntentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::actions::sdk::v2::MatchIntentsRequest* request, ::google::actions::sdk::v2::MatchIntentsResponse* response) { return this->MatchIntents(context, request, response); }));}
    void SetMessageAllocatorFor_MatchIntents(
        ::grpc::MessageAllocator< ::google::actions::sdk::v2::MatchIntentsRequest, ::google::actions::sdk::v2::MatchIntentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::actions::sdk::v2::MatchIntentsRequest, ::google::actions::sdk::v2::MatchIntentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MatchIntents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MatchIntents(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::MatchIntentsRequest* /*request*/, ::google::actions::sdk::v2::MatchIntentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MatchIntents(
      ::grpc::CallbackServerContext* /*context*/, const ::google::actions::sdk::v2::MatchIntentsRequest* /*request*/, ::google::actions::sdk::v2::MatchIntentsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetWebAndAppActivityControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetWebAndAppActivityControl() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* request, ::google::protobuf::Empty* response) { return this->SetWebAndAppActivityControl(context, request, response); }));}
    void SetMessageAllocatorFor_SetWebAndAppActivityControl(
        ::grpc::MessageAllocator< ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetWebAndAppActivityControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWebAndAppActivityControl(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetWebAndAppActivityControl(
      ::grpc::CallbackServerContext* /*context*/, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendInteraction<WithCallbackMethod_MatchIntents<WithCallbackMethod_SetWebAndAppActivityControl<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendInteraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendInteraction() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendInteraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInteraction(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SendInteractionRequest* /*request*/, ::google::actions::sdk::v2::SendInteractionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MatchIntents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MatchIntents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MatchIntents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MatchIntents(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::MatchIntentsRequest* /*request*/, ::google::actions::sdk::v2::MatchIntentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetWebAndAppActivityControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetWebAndAppActivityControl() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetWebAndAppActivityControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWebAndAppActivityControl(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendInteraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendInteraction() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendInteraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInteraction(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SendInteractionRequest* /*request*/, ::google::actions::sdk::v2::SendInteractionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendInteraction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MatchIntents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MatchIntents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MatchIntents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MatchIntents(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::MatchIntentsRequest* /*request*/, ::google::actions::sdk::v2::MatchIntentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMatchIntents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetWebAndAppActivityControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetWebAndAppActivityControl() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetWebAndAppActivityControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWebAndAppActivityControl(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWebAndAppActivityControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendInteraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendInteraction() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendInteraction(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendInteraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendInteraction(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SendInteractionRequest* /*request*/, ::google::actions::sdk::v2::SendInteractionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendInteraction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MatchIntents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MatchIntents() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MatchIntents(context, request, response); }));
    }
    ~WithRawCallbackMethod_MatchIntents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MatchIntents(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::MatchIntentsRequest* /*request*/, ::google::actions::sdk::v2::MatchIntentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MatchIntents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetWebAndAppActivityControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetWebAndAppActivityControl() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetWebAndAppActivityControl(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetWebAndAppActivityControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWebAndAppActivityControl(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetWebAndAppActivityControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendInteraction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendInteraction() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::actions::sdk::v2::SendInteractionRequest, ::google::actions::sdk::v2::SendInteractionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::actions::sdk::v2::SendInteractionRequest, ::google::actions::sdk::v2::SendInteractionResponse>* streamer) {
                       return this->StreamedSendInteraction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendInteraction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendInteraction(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SendInteractionRequest* /*request*/, ::google::actions::sdk::v2::SendInteractionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendInteraction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::actions::sdk::v2::SendInteractionRequest,::google::actions::sdk::v2::SendInteractionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MatchIntents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MatchIntents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::actions::sdk::v2::MatchIntentsRequest, ::google::actions::sdk::v2::MatchIntentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::actions::sdk::v2::MatchIntentsRequest, ::google::actions::sdk::v2::MatchIntentsResponse>* streamer) {
                       return this->StreamedMatchIntents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MatchIntents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MatchIntents(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::MatchIntentsRequest* /*request*/, ::google::actions::sdk::v2::MatchIntentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMatchIntents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::actions::sdk::v2::MatchIntentsRequest,::google::actions::sdk::v2::MatchIntentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetWebAndAppActivityControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetWebAndAppActivityControl() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSetWebAndAppActivityControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetWebAndAppActivityControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetWebAndAppActivityControl(::grpc::ServerContext* /*context*/, const ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetWebAndAppActivityControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::actions::sdk::v2::SetWebAndAppActivityControlRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendInteraction<WithStreamedUnaryMethod_MatchIntents<WithStreamedUnaryMethod_SetWebAndAppActivityControl<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendInteraction<WithStreamedUnaryMethod_MatchIntents<WithStreamedUnaryMethod_SetWebAndAppActivityControl<Service > > > StreamedService;
};

}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google


#endif  // GRPC_google_2factions_2fsdk_2fv2_2factions_5ftesting_2eproto__INCLUDED
