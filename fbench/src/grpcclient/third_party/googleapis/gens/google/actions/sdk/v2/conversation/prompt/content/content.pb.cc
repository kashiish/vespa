// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/actions/sdk/v2/conversation/prompt/content/content.proto

#include "google/actions/sdk/v2/conversation/prompt/content/content.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcanvas_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Canvas_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcanvas_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcard_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Card_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcard_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcollection_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Collection_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcollection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Image_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2flist_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_List_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2flist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Media_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2ftable_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2ftable_2eproto;
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace conversation {
class ContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Content> _instance;
  const ::google::actions::sdk::v2::conversation::Card* card_;
  const ::google::actions::sdk::v2::conversation::Image* image_;
  const ::google::actions::sdk::v2::conversation::Table* table_;
  const ::google::actions::sdk::v2::conversation::Media* media_;
  const ::google::actions::sdk::v2::conversation::Canvas* canvas_;
  const ::google::actions::sdk::v2::conversation::Collection* collection_;
  const ::google::actions::sdk::v2::conversation::List* list_;
} _Content_default_instance_;
}  // namespace conversation
}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google
static void InitDefaultsContent_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::actions::sdk::v2::conversation::_Content_default_instance_;
    new (ptr) ::google::actions::sdk::v2::conversation::Content();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::actions::sdk::v2::conversation::Content::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Content_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsContent_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto}, {
      &scc_info_Card_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcard_2eproto.base,
      &scc_info_Image_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto.base,
      &scc_info_Table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2ftable_2eproto.base,
      &scc_info_Media_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto.base,
      &scc_info_Canvas_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcanvas_2eproto.base,
      &scc_info_Collection_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcollection_2eproto.base,
      &scc_info_List_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2flist_2eproto.base,}};

void InitDefaults_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Content_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Content, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Content, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::actions::sdk::v2::conversation::ContentDefaultTypeInternal, card_),
  offsetof(::google::actions::sdk::v2::conversation::ContentDefaultTypeInternal, image_),
  offsetof(::google::actions::sdk::v2::conversation::ContentDefaultTypeInternal, table_),
  offsetof(::google::actions::sdk::v2::conversation::ContentDefaultTypeInternal, media_),
  offsetof(::google::actions::sdk::v2::conversation::ContentDefaultTypeInternal, canvas_),
  offsetof(::google::actions::sdk::v2::conversation::ContentDefaultTypeInternal, collection_),
  offsetof(::google::actions::sdk::v2::conversation::ContentDefaultTypeInternal, list_),
  PROTOBUF_FIELD_OFFSET(::google::actions::sdk::v2::conversation::Content, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::actions::sdk::v2::conversation::Content)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::actions::sdk::v2::conversation::_Content_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto = {
  {}, AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto, "google/actions/sdk/v2/conversation/prompt/content/content.proto", schemas,
  file_default_instances, TableStruct_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto::offsets,
  file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto, 1, file_level_enum_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto, file_level_service_descriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto,
};

const char descriptor_table_protodef_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto[] =
  "\n\?google/actions/sdk/v2/conversation/pro"
  "mpt/content/content.proto\022\"google.action"
  "s.sdk.v2.conversation\032>google/actions/sd"
  "k/v2/conversation/prompt/content/canvas."
  "proto\032<google/actions/sdk/v2/conversatio"
  "n/prompt/content/card.proto\032Bgoogle/acti"
  "ons/sdk/v2/conversation/prompt/content/c"
  "ollection.proto\032=google/actions/sdk/v2/c"
  "onversation/prompt/content/image.proto\032<"
  "google/actions/sdk/v2/conversation/promp"
  "t/content/list.proto\032=google/actions/sdk"
  "/v2/conversation/prompt/content/media.pr"
  "oto\032=google/actions/sdk/v2/conversation/"
  "prompt/content/table.proto\"\304\003\n\007Content\0228"
  "\n\004card\030\001 \001(\0132(.google.actions.sdk.v2.con"
  "versation.CardH\000\022:\n\005image\030\002 \001(\0132).google"
  ".actions.sdk.v2.conversation.ImageH\000\022:\n\005"
  "table\030\003 \001(\0132).google.actions.sdk.v2.conv"
  "ersation.TableH\000\022:\n\005media\030\004 \001(\0132).google"
  ".actions.sdk.v2.conversation.MediaH\000\022@\n\006"
  "canvas\030\005 \001(\0132*.google.actions.sdk.v2.con"
  "versation.CanvasB\002\030\001H\000\022D\n\ncollection\030\006 \001"
  "(\0132..google.actions.sdk.v2.conversation."
  "CollectionH\000\0228\n\004list\030\007 \001(\0132(.google.acti"
  "ons.sdk.v2.conversation.ListH\000B\t\n\007conten"
  "tB\210\001\n&com.google.actions.sdk.v2.conversa"
  "tionB\014ContentProtoP\001ZNgoogle.golang.org/"
  "genproto/googleapis/actions/sdk/v2/conve"
  "rsation;conversationb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto = {
  false, InitDefaults_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto, 
  descriptor_table_protodef_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto,
  "google/actions/sdk/v2/conversation/prompt/content/content.proto", &assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto, 1148,
};

void AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[7] =
  {
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcanvas_2eproto,
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcard_2eproto,
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcollection_2eproto,
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fimage_2eproto,
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2flist_2eproto,
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fmedia_2eproto,
    ::AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2ftable_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto, deps, 7);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto = []() { AddDescriptors_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto(); return true; }();
namespace google {
namespace actions {
namespace sdk {
namespace v2 {
namespace conversation {

// ===================================================================

void Content::InitAsDefaultInstance() {
  ::google::actions::sdk::v2::conversation::_Content_default_instance_.card_ = const_cast< ::google::actions::sdk::v2::conversation::Card*>(
      ::google::actions::sdk::v2::conversation::Card::internal_default_instance());
  ::google::actions::sdk::v2::conversation::_Content_default_instance_.image_ = const_cast< ::google::actions::sdk::v2::conversation::Image*>(
      ::google::actions::sdk::v2::conversation::Image::internal_default_instance());
  ::google::actions::sdk::v2::conversation::_Content_default_instance_.table_ = const_cast< ::google::actions::sdk::v2::conversation::Table*>(
      ::google::actions::sdk::v2::conversation::Table::internal_default_instance());
  ::google::actions::sdk::v2::conversation::_Content_default_instance_.media_ = const_cast< ::google::actions::sdk::v2::conversation::Media*>(
      ::google::actions::sdk::v2::conversation::Media::internal_default_instance());
  ::google::actions::sdk::v2::conversation::_Content_default_instance_.canvas_ = const_cast< ::google::actions::sdk::v2::conversation::Canvas*>(
      ::google::actions::sdk::v2::conversation::Canvas::internal_default_instance());
  ::google::actions::sdk::v2::conversation::_Content_default_instance_.collection_ = const_cast< ::google::actions::sdk::v2::conversation::Collection*>(
      ::google::actions::sdk::v2::conversation::Collection::internal_default_instance());
  ::google::actions::sdk::v2::conversation::_Content_default_instance_.list_ = const_cast< ::google::actions::sdk::v2::conversation::List*>(
      ::google::actions::sdk::v2::conversation::List::internal_default_instance());
}
class Content::HasBitSetters {
 public:
  static const ::google::actions::sdk::v2::conversation::Card& card(const Content* msg);
  static const ::google::actions::sdk::v2::conversation::Image& image(const Content* msg);
  static const ::google::actions::sdk::v2::conversation::Table& table(const Content* msg);
  static const ::google::actions::sdk::v2::conversation::Media& media(const Content* msg);
  static const ::google::actions::sdk::v2::conversation::Canvas& canvas(const Content* msg);
  static const ::google::actions::sdk::v2::conversation::Collection& collection(const Content* msg);
  static const ::google::actions::sdk::v2::conversation::List& list(const Content* msg);
};

const ::google::actions::sdk::v2::conversation::Card&
Content::HasBitSetters::card(const Content* msg) {
  return *msg->content_.card_;
}
const ::google::actions::sdk::v2::conversation::Image&
Content::HasBitSetters::image(const Content* msg) {
  return *msg->content_.image_;
}
const ::google::actions::sdk::v2::conversation::Table&
Content::HasBitSetters::table(const Content* msg) {
  return *msg->content_.table_;
}
const ::google::actions::sdk::v2::conversation::Media&
Content::HasBitSetters::media(const Content* msg) {
  return *msg->content_.media_;
}
const ::google::actions::sdk::v2::conversation::Canvas&
Content::HasBitSetters::canvas(const Content* msg) {
  return *msg->content_.canvas_;
}
const ::google::actions::sdk::v2::conversation::Collection&
Content::HasBitSetters::collection(const Content* msg) {
  return *msg->content_.collection_;
}
const ::google::actions::sdk::v2::conversation::List&
Content::HasBitSetters::list(const Content* msg) {
  return *msg->content_.list_;
}
void Content::set_allocated_card(::google::actions::sdk::v2::conversation::Card* card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (card) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    set_has_card();
    content_.card_ = card;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Content.card)
}
void Content::clear_card() {
  if (has_card()) {
    delete content_.card_;
    clear_has_content();
  }
}
void Content::set_allocated_image(::google::actions::sdk::v2::conversation::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (image) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    content_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Content.image)
}
void Content::clear_image() {
  if (has_image()) {
    delete content_.image_;
    clear_has_content();
  }
}
void Content::set_allocated_table(::google::actions::sdk::v2::conversation::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (table) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    content_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Content.table)
}
void Content::clear_table() {
  if (has_table()) {
    delete content_.table_;
    clear_has_content();
  }
}
void Content::set_allocated_media(::google::actions::sdk::v2::conversation::Media* media) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (media) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      media = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, media, submessage_arena);
    }
    set_has_media();
    content_.media_ = media;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Content.media)
}
void Content::clear_media() {
  if (has_media()) {
    delete content_.media_;
    clear_has_content();
  }
}
void Content::set_allocated_canvas(::google::actions::sdk::v2::conversation::Canvas* canvas) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (canvas) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      canvas = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, canvas, submessage_arena);
    }
    set_has_canvas();
    content_.canvas_ = canvas;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Content.canvas)
}
void Content::clear_canvas() {
  if (has_canvas()) {
    delete content_.canvas_;
    clear_has_content();
  }
}
void Content::set_allocated_collection(::google::actions::sdk::v2::conversation::Collection* collection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (collection) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    set_has_collection();
    content_.collection_ = collection;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Content.collection)
}
void Content::clear_collection() {
  if (has_collection()) {
    delete content_.collection_;
    clear_has_content();
  }
}
void Content::set_allocated_list(::google::actions::sdk::v2::conversation::List* list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (list) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    content_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:google.actions.sdk.v2.conversation.Content.list)
}
void Content::clear_list() {
  if (has_list()) {
    delete content_.list_;
    clear_has_content();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Content::kCardFieldNumber;
const int Content::kImageFieldNumber;
const int Content::kTableFieldNumber;
const int Content::kMediaFieldNumber;
const int Content::kCanvasFieldNumber;
const int Content::kCollectionFieldNumber;
const int Content::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Content::Content()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.actions.sdk.v2.conversation.Content)
}
Content::Content(const Content& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kCard: {
      mutable_card()->::google::actions::sdk::v2::conversation::Card::MergeFrom(from.card());
      break;
    }
    case kImage: {
      mutable_image()->::google::actions::sdk::v2::conversation::Image::MergeFrom(from.image());
      break;
    }
    case kTable: {
      mutable_table()->::google::actions::sdk::v2::conversation::Table::MergeFrom(from.table());
      break;
    }
    case kMedia: {
      mutable_media()->::google::actions::sdk::v2::conversation::Media::MergeFrom(from.media());
      break;
    }
    case kCanvas: {
      mutable_canvas()->::google::actions::sdk::v2::conversation::Canvas::MergeFrom(from.canvas());
      break;
    }
    case kCollection: {
      mutable_collection()->::google::actions::sdk::v2::conversation::Collection::MergeFrom(from.collection());
      break;
    }
    case kList: {
      mutable_list()->::google::actions::sdk::v2::conversation::List::MergeFrom(from.list());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.actions.sdk.v2.conversation.Content)
}

void Content::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Content_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto.base);
  clear_has_content();
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:google.actions.sdk.v2.conversation.Content)
  SharedDtor();
}

void Content::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void Content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Content& Content::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Content_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto.base);
  return *internal_default_instance();
}


void Content::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:google.actions.sdk.v2.conversation.Content)
  switch (content_case()) {
    case kCard: {
      delete content_.card_;
      break;
    }
    case kImage: {
      delete content_.image_;
      break;
    }
    case kTable: {
      delete content_.table_;
      break;
    }
    case kMedia: {
      delete content_.media_;
      break;
    }
    case kCanvas: {
      delete content_.canvas_;
      break;
    }
    case kCollection: {
      delete content_.collection_;
      break;
    }
    case kList: {
      delete content_.list_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:google.actions.sdk.v2.conversation.Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Content::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Content*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.actions.sdk.v2.conversation.Card card = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Card::_InternalParse;
        object = msg->mutable_card();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.actions.sdk.v2.conversation.Image image = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Image::_InternalParse;
        object = msg->mutable_image();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.actions.sdk.v2.conversation.Table table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Table::_InternalParse;
        object = msg->mutable_table();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.actions.sdk.v2.conversation.Media media = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Media::_InternalParse;
        object = msg->mutable_media();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.actions.sdk.v2.conversation.Canvas canvas = 5 [deprecated = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Canvas::_InternalParse;
        object = msg->mutable_canvas();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.actions.sdk.v2.conversation.Collection collection = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::Collection::_InternalParse;
        object = msg->mutable_collection();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.actions.sdk.v2.conversation.List list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::actions::sdk::v2::conversation::List::_InternalParse;
        object = msg->mutable_list();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.actions.sdk.v2.conversation.Content)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.actions.sdk.v2.conversation.Card card = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.Image image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.Table table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.Media media = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.Canvas canvas = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_canvas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.Collection collection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_collection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.actions.sdk.v2.conversation.List list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.actions.sdk.v2.conversation.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.actions.sdk.v2.conversation.Content)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.actions.sdk.v2.conversation.Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.actions.sdk.v2.conversation.Card card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::card(this), output);
  }

  // .google.actions.sdk.v2.conversation.Image image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::image(this), output);
  }

  // .google.actions.sdk.v2.conversation.Table table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::table(this), output);
  }

  // .google.actions.sdk.v2.conversation.Media media = 4;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::media(this), output);
  }

  // .google.actions.sdk.v2.conversation.Canvas canvas = 5 [deprecated = true];
  if (has_canvas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::canvas(this), output);
  }

  // .google.actions.sdk.v2.conversation.Collection collection = 6;
  if (has_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::collection(this), output);
  }

  // .google.actions.sdk.v2.conversation.List list = 7;
  if (has_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.actions.sdk.v2.conversation.Content)
}

::google::protobuf::uint8* Content::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.actions.sdk.v2.conversation.Content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.actions.sdk.v2.conversation.Card card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::card(this), target);
  }

  // .google.actions.sdk.v2.conversation.Image image = 2;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::image(this), target);
  }

  // .google.actions.sdk.v2.conversation.Table table = 3;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::table(this), target);
  }

  // .google.actions.sdk.v2.conversation.Media media = 4;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::media(this), target);
  }

  // .google.actions.sdk.v2.conversation.Canvas canvas = 5 [deprecated = true];
  if (has_canvas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::canvas(this), target);
  }

  // .google.actions.sdk.v2.conversation.Collection collection = 6;
  if (has_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::collection(this), target);
  }

  // .google.actions.sdk.v2.conversation.List list = 7;
  if (has_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.actions.sdk.v2.conversation.Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.actions.sdk.v2.conversation.Content)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .google.actions.sdk.v2.conversation.Card card = 1;
    case kCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.card_);
      break;
    }
    // .google.actions.sdk.v2.conversation.Image image = 2;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.image_);
      break;
    }
    // .google.actions.sdk.v2.conversation.Table table = 3;
    case kTable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.table_);
      break;
    }
    // .google.actions.sdk.v2.conversation.Media media = 4;
    case kMedia: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.media_);
      break;
    }
    // .google.actions.sdk.v2.conversation.Canvas canvas = 5 [deprecated = true];
    case kCanvas: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.canvas_);
      break;
    }
    // .google.actions.sdk.v2.conversation.Collection collection = 6;
    case kCollection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.collection_);
      break;
    }
    // .google.actions.sdk.v2.conversation.List list = 7;
    case kList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.list_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.actions.sdk.v2.conversation.Content)
  GOOGLE_DCHECK_NE(&from, this);
  const Content* source =
      ::google::protobuf::DynamicCastToGenerated<Content>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.actions.sdk.v2.conversation.Content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.actions.sdk.v2.conversation.Content)
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.actions.sdk.v2.conversation.Content)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kCard: {
      mutable_card()->::google::actions::sdk::v2::conversation::Card::MergeFrom(from.card());
      break;
    }
    case kImage: {
      mutable_image()->::google::actions::sdk::v2::conversation::Image::MergeFrom(from.image());
      break;
    }
    case kTable: {
      mutable_table()->::google::actions::sdk::v2::conversation::Table::MergeFrom(from.table());
      break;
    }
    case kMedia: {
      mutable_media()->::google::actions::sdk::v2::conversation::Media::MergeFrom(from.media());
      break;
    }
    case kCanvas: {
      mutable_canvas()->::google::actions::sdk::v2::conversation::Canvas::MergeFrom(from.canvas());
      break;
    }
    case kCollection: {
      mutable_collection()->::google::actions::sdk::v2::conversation::Collection::MergeFrom(from.collection());
      break;
    }
    case kList: {
      mutable_list()->::google::actions::sdk::v2::conversation::List::MergeFrom(from.list());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.actions.sdk.v2.conversation.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.actions.sdk.v2.conversation.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  return true;
}

void Content::Swap(Content* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Content::InternalSwap(Content* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Content::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto);
  return ::file_level_metadata_google_2factions_2fsdk_2fv2_2fconversation_2fprompt_2fcontent_2fcontent_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace conversation
}  // namespace v2
}  // namespace sdk
}  // namespace actions
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::actions::sdk::v2::conversation::Content* Arena::CreateMaybeMessage< ::google::actions::sdk::v2::conversation::Content >(Arena* arena) {
  return Arena::CreateInternal< ::google::actions::sdk::v2::conversation::Content >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
