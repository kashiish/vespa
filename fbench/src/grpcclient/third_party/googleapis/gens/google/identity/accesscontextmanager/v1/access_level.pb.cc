// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/identity/accesscontextmanager/v1/access_level.proto

#include "google/identity/accesscontextmanager/v1/access_level.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Condition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ftype_2fexpr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Expr_google_2ftype_2fexpr_2eproto;
namespace google {
namespace identity {
namespace accesscontextmanager {
namespace v1 {
class AccessLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AccessLevel> _instance;
  const ::google::identity::accesscontextmanager::v1::BasicLevel* basic_;
  const ::google::identity::accesscontextmanager::v1::CustomLevel* custom_;
} _AccessLevel_default_instance_;
class BasicLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicLevel> _instance;
} _BasicLevel_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class CustomLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CustomLevel> _instance;
} _CustomLevel_default_instance_;
class DevicePolicyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DevicePolicy> _instance;
} _DevicePolicy_default_instance_;
class OsConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OsConstraint> _instance;
} _OsConstraint_default_instance_;
}  // namespace v1
}  // namespace accesscontextmanager
}  // namespace identity
}  // namespace google
static void InitDefaultsAccessLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::identity::accesscontextmanager::v1::_AccessLevel_default_instance_;
    new (ptr) ::google::identity::accesscontextmanager::v1::AccessLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::identity::accesscontextmanager::v1::AccessLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_AccessLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAccessLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto}, {
      &scc_info_BasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base,
      &scc_info_CustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsBasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::identity::accesscontextmanager::v1::_BasicLevel_default_instance_;
    new (ptr) ::google::identity::accesscontextmanager::v1::BasicLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::identity::accesscontextmanager::v1::BasicLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto}, {
      &scc_info_Condition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base,}};

static void InitDefaultsCondition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::identity::accesscontextmanager::v1::_Condition_default_instance_;
    new (ptr) ::google::identity::accesscontextmanager::v1::Condition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::identity::accesscontextmanager::v1::Condition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Condition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCondition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto}, {
      &scc_info_DevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base,}};

static void InitDefaultsCustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::identity::accesscontextmanager::v1::_CustomLevel_default_instance_;
    new (ptr) ::google::identity::accesscontextmanager::v1::CustomLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::identity::accesscontextmanager::v1::CustomLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto}, {
      &scc_info_Expr_google_2ftype_2fexpr_2eproto.base,}};

static void InitDefaultsDevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::identity::accesscontextmanager::v1::_DevicePolicy_default_instance_;
    new (ptr) ::google::identity::accesscontextmanager::v1::DevicePolicy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::identity::accesscontextmanager::v1::DevicePolicy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto}, {
      &scc_info_OsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base,}};

static void InitDefaultsOsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::identity::accesscontextmanager::v1::_OsConstraint_default_instance_;
    new (ptr) ::google::identity::accesscontextmanager::v1::OsConstraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::identity::accesscontextmanager::v1::OsConstraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto}, {}};

void InitDefaults_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AccessLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Condition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, name_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, title_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, description_),
  offsetof(::google::identity::accesscontextmanager::v1::AccessLevelDefaultTypeInternal, basic_),
  offsetof(::google::identity::accesscontextmanager::v1::AccessLevelDefaultTypeInternal, custom_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, update_time_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::AccessLevel, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::BasicLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::BasicLevel, conditions_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::BasicLevel, combining_function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::Condition, ip_subnetworks_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::Condition, device_policy_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::Condition, required_access_levels_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::Condition, negate_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::Condition, members_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::Condition, regions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::CustomLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::CustomLevel, expr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::DevicePolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::DevicePolicy, require_screenlock_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::DevicePolicy, allowed_encryption_statuses_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::DevicePolicy, os_constraints_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::DevicePolicy, allowed_device_management_levels_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::DevicePolicy, require_admin_approval_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::DevicePolicy, require_corp_owned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::OsConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::OsConstraint, os_type_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::OsConstraint, minimum_version_),
  PROTOBUF_FIELD_OFFSET(::google::identity::accesscontextmanager::v1::OsConstraint, require_verified_chrome_os_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::identity::accesscontextmanager::v1::AccessLevel)},
  { 13, -1, sizeof(::google::identity::accesscontextmanager::v1::BasicLevel)},
  { 20, -1, sizeof(::google::identity::accesscontextmanager::v1::Condition)},
  { 31, -1, sizeof(::google::identity::accesscontextmanager::v1::CustomLevel)},
  { 37, -1, sizeof(::google::identity::accesscontextmanager::v1::DevicePolicy)},
  { 48, -1, sizeof(::google::identity::accesscontextmanager::v1::OsConstraint)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::identity::accesscontextmanager::v1::_AccessLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::identity::accesscontextmanager::v1::_BasicLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::identity::accesscontextmanager::v1::_Condition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::identity::accesscontextmanager::v1::_CustomLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::identity::accesscontextmanager::v1::_DevicePolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::identity::accesscontextmanager::v1::_OsConstraint_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto = {
  {}, AddDescriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto, "google/identity/accesscontextmanager/v1/access_level.proto", schemas,
  file_default_instances, TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto::offsets,
  file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto, 6, file_level_enum_descriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto, file_level_service_descriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto,
};

const char descriptor_table_protodef_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[] =
  "\n:google/identity/accesscontextmanager/v"
  "1/access_level.proto\022\'google.identity.ac"
  "cesscontextmanager.v1\032@google/identity/a"
  "ccesscontextmanager/type/device_resource"
  "s.proto\032\037google/protobuf/timestamp.proto"
  "\032\026google/type/expr.proto\032\034google/api/ann"
  "otations.proto\"\270\002\n\013AccessLevel\022\014\n\004name\030\001"
  " \001(\t\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t"
  "\022D\n\005basic\030\004 \001(\01323.google.identity.access"
  "contextmanager.v1.BasicLevelH\000\022F\n\006custom"
  "\030\005 \001(\01324.google.identity.accesscontextma"
  "nager.v1.CustomLevelH\000\022/\n\013create_time\030\006 "
  "\001(\0132\032.google.protobuf.Timestamp\022/\n\013updat"
  "e_time\030\007 \001(\0132\032.google.protobuf.Timestamp"
  "B\007\n\005level\"\357\001\n\nBasicLevel\022F\n\nconditions\030\001"
  " \003(\01322.google.identity.accesscontextmana"
  "ger.v1.Condition\022j\n\022combining_function\030\002"
  " \001(\0162N.google.identity.accesscontextmana"
  "ger.v1.BasicLevel.ConditionCombiningFunc"
  "tion\"-\n\032ConditionCombiningFunction\022\007\n\003AN"
  "D\020\000\022\006\n\002OR\020\001\"\303\001\n\tCondition\022\026\n\016ip_subnetwo"
  "rks\030\001 \003(\t\022L\n\rdevice_policy\030\002 \001(\01325.googl"
  "e.identity.accesscontextmanager.v1.Devic"
  "ePolicy\022\036\n\026required_access_levels\030\003 \003(\t\022"
  "\016\n\006negate\030\005 \001(\010\022\017\n\007members\030\006 \003(\t\022\017\n\007regi"
  "ons\030\007 \003(\t\".\n\013CustomLevel\022\037\n\004expr\030\001 \001(\0132\021"
  ".google.type.Expr\"\211\003\n\014DevicePolicy\022\032\n\022re"
  "quire_screenlock\030\001 \001(\010\022f\n\033allowed_encryp"
  "tion_statuses\030\002 \003(\0162A.google.identity.ac"
  "cesscontextmanager.type.DeviceEncryption"
  "Status\022M\n\016os_constraints\030\003 \003(\01325.google."
  "identity.accesscontextmanager.v1.OsConst"
  "raint\022j\n allowed_device_management_level"
  "s\030\006 \003(\0162@.google.identity.accesscontextm"
  "anager.type.DeviceManagementLevel\022\036\n\026req"
  "uire_admin_approval\030\007 \001(\010\022\032\n\022require_cor"
  "p_owned\030\010 \001(\010\"\217\001\n\014OsConstraint\022B\n\007os_typ"
  "e\030\001 \001(\01621.google.identity.accesscontextm"
  "anager.type.OsType\022\027\n\017minimum_version\030\002 "
  "\001(\t\022\"\n\032require_verified_chrome_os\030\003 \001(\010B"
  "\246\002\n+com.google.identity.accesscontextman"
  "ager.v1B\020AccessLevelProtoP\001Z[google.gola"
  "ng.org/genproto/googleapis/identity/acce"
  "sscontextmanager/v1;accesscontextmanager"
  "\242\002\004GACM\252\002\'Google.Identity.AccessContextM"
  "anager.V1\312\002\'Google\\Identity\\AccessContex"
  "tManager\\V1\352\002*Google::Identity::AccessCo"
  "ntextManager::V1b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto = {
  false, InitDefaults_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto, 
  descriptor_table_protodef_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto,
  "google/identity/accesscontextmanager/v1/access_level.proto", &assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto, 1904,
};

void AddDescriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_google_2fidentity_2faccesscontextmanager_2ftype_2fdevice_5fresources_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2ftype_2fexpr_2eproto,
    ::AddDescriptors_google_2fapi_2fannotations_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto = []() { AddDescriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto(); return true; }();
namespace google {
namespace identity {
namespace accesscontextmanager {
namespace v1 {
const ::google::protobuf::EnumDescriptor* BasicLevel_ConditionCombiningFunction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto);
  return file_level_enum_descriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[0];
}
bool BasicLevel_ConditionCombiningFunction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BasicLevel_ConditionCombiningFunction BasicLevel::AND;
const BasicLevel_ConditionCombiningFunction BasicLevel::OR;
const BasicLevel_ConditionCombiningFunction BasicLevel::ConditionCombiningFunction_MIN;
const BasicLevel_ConditionCombiningFunction BasicLevel::ConditionCombiningFunction_MAX;
const int BasicLevel::ConditionCombiningFunction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void AccessLevel::InitAsDefaultInstance() {
  ::google::identity::accesscontextmanager::v1::_AccessLevel_default_instance_.basic_ = const_cast< ::google::identity::accesscontextmanager::v1::BasicLevel*>(
      ::google::identity::accesscontextmanager::v1::BasicLevel::internal_default_instance());
  ::google::identity::accesscontextmanager::v1::_AccessLevel_default_instance_.custom_ = const_cast< ::google::identity::accesscontextmanager::v1::CustomLevel*>(
      ::google::identity::accesscontextmanager::v1::CustomLevel::internal_default_instance());
  ::google::identity::accesscontextmanager::v1::_AccessLevel_default_instance_._instance.get_mutable()->create_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::identity::accesscontextmanager::v1::_AccessLevel_default_instance_._instance.get_mutable()->update_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class AccessLevel::HasBitSetters {
 public:
  static const ::google::identity::accesscontextmanager::v1::BasicLevel& basic(const AccessLevel* msg);
  static const ::google::identity::accesscontextmanager::v1::CustomLevel& custom(const AccessLevel* msg);
  static const ::google::protobuf::Timestamp& create_time(const AccessLevel* msg);
  static const ::google::protobuf::Timestamp& update_time(const AccessLevel* msg);
};

const ::google::identity::accesscontextmanager::v1::BasicLevel&
AccessLevel::HasBitSetters::basic(const AccessLevel* msg) {
  return *msg->level_.basic_;
}
const ::google::identity::accesscontextmanager::v1::CustomLevel&
AccessLevel::HasBitSetters::custom(const AccessLevel* msg) {
  return *msg->level_.custom_;
}
const ::google::protobuf::Timestamp&
AccessLevel::HasBitSetters::create_time(const AccessLevel* msg) {
  return *msg->create_time_;
}
const ::google::protobuf::Timestamp&
AccessLevel::HasBitSetters::update_time(const AccessLevel* msg) {
  return *msg->update_time_;
}
void AccessLevel::set_allocated_basic(::google::identity::accesscontextmanager::v1::BasicLevel* basic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (basic) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      basic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    set_has_basic();
    level_.basic_ = basic;
  }
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessLevel.basic)
}
void AccessLevel::set_allocated_custom(::google::identity::accesscontextmanager::v1::CustomLevel* custom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (custom) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    level_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessLevel.custom)
}
void AccessLevel::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void AccessLevel::clear_update_time() {
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessLevel::kNameFieldNumber;
const int AccessLevel::kTitleFieldNumber;
const int AccessLevel::kDescriptionFieldNumber;
const int AccessLevel::kBasicFieldNumber;
const int AccessLevel::kCustomFieldNumber;
const int AccessLevel::kCreateTimeFieldNumber;
const int AccessLevel::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessLevel::AccessLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.identity.accesscontextmanager.v1.AccessLevel)
}
AccessLevel::AccessLevel(const AccessLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    create_time_ = new ::google::protobuf::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from.has_update_time()) {
    update_time_ = new ::google::protobuf::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  clear_has_level();
  switch (from.level_case()) {
    case kBasic: {
      mutable_basic()->::google::identity::accesscontextmanager::v1::BasicLevel::MergeFrom(from.basic());
      break;
    }
    case kCustom: {
      mutable_custom()->::google::identity::accesscontextmanager::v1::CustomLevel::MergeFrom(from.custom());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.identity.accesscontextmanager.v1.AccessLevel)
}

void AccessLevel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AccessLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(update_time_));
  clear_has_level();
}

AccessLevel::~AccessLevel() {
  // @@protoc_insertion_point(destructor:google.identity.accesscontextmanager.v1.AccessLevel)
  SharedDtor();
}

void AccessLevel::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (has_level()) {
    clear_level();
  }
}

void AccessLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessLevel& AccessLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AccessLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  return *internal_default_instance();
}


void AccessLevel::clear_level() {
// @@protoc_insertion_point(one_of_clear_start:google.identity.accesscontextmanager.v1.AccessLevel)
  switch (level_case()) {
    case kBasic: {
      delete level_.basic_;
      break;
    }
    case kCustom: {
      delete level_.custom_;
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEVEL_NOT_SET;
}


void AccessLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:google.identity.accesscontextmanager.v1.AccessLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  clear_level();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccessLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AccessLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.AccessLevel.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.AccessLevel.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.AccessLevel.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.identity.accesscontextmanager.v1.BasicLevel basic = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::identity::accesscontextmanager::v1::BasicLevel::_InternalParse;
        object = msg->mutable_basic();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.identity.accesscontextmanager.v1.CustomLevel custom = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::identity::accesscontextmanager::v1::CustomLevel::_InternalParse;
        object = msg->mutable_custom();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_create_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp update_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_update_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccessLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.identity.accesscontextmanager.v1.AccessLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.AccessLevel.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.AccessLevel.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.AccessLevel.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.identity.accesscontextmanager.v1.BasicLevel basic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.identity.accesscontextmanager.v1.CustomLevel custom = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp create_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp update_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.identity.accesscontextmanager.v1.AccessLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.identity.accesscontextmanager.v1.AccessLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccessLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.identity.accesscontextmanager.v1.AccessLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.AccessLevel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.AccessLevel.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.AccessLevel.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // .google.identity.accesscontextmanager.v1.BasicLevel basic = 4;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::basic(this), output);
  }

  // .google.identity.accesscontextmanager.v1.CustomLevel custom = 5;
  if (has_custom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::custom(this), output);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::create_time(this), output);
  }

  // .google.protobuf.Timestamp update_time = 7;
  if (this->has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::update_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.identity.accesscontextmanager.v1.AccessLevel)
}

::google::protobuf::uint8* AccessLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.identity.accesscontextmanager.v1.AccessLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.AccessLevel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.AccessLevel.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.AccessLevel.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // .google.identity.accesscontextmanager.v1.BasicLevel basic = 4;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::basic(this), target);
  }

  // .google.identity.accesscontextmanager.v1.CustomLevel custom = 5;
  if (has_custom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::custom(this), target);
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::create_time(this), target);
  }

  // .google.protobuf.Timestamp update_time = 7;
  if (this->has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::update_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.identity.accesscontextmanager.v1.AccessLevel)
  return target;
}

size_t AccessLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.identity.accesscontextmanager.v1.AccessLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .google.protobuf.Timestamp create_time = 6;
  if (this->has_create_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 7;
  if (this->has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  switch (level_case()) {
    // .google.identity.accesscontextmanager.v1.BasicLevel basic = 4;
    case kBasic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.basic_);
      break;
    }
    // .google.identity.accesscontextmanager.v1.CustomLevel custom = 5;
    case kCustom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.custom_);
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.identity.accesscontextmanager.v1.AccessLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessLevel* source =
      ::google::protobuf::DynamicCastToGenerated<AccessLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.identity.accesscontextmanager.v1.AccessLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.identity.accesscontextmanager.v1.AccessLevel)
    MergeFrom(*source);
  }
}

void AccessLevel::MergeFrom(const AccessLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.identity.accesscontextmanager.v1.AccessLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_create_time()) {
    mutable_create_time()->::google::protobuf::Timestamp::MergeFrom(from.create_time());
  }
  if (from.has_update_time()) {
    mutable_update_time()->::google::protobuf::Timestamp::MergeFrom(from.update_time());
  }
  switch (from.level_case()) {
    case kBasic: {
      mutable_basic()->::google::identity::accesscontextmanager::v1::BasicLevel::MergeFrom(from.basic());
      break;
    }
    case kCustom: {
      mutable_custom()->::google::identity::accesscontextmanager::v1::CustomLevel::MergeFrom(from.custom());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
}

void AccessLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.identity.accesscontextmanager.v1.AccessLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessLevel::CopyFrom(const AccessLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.identity.accesscontextmanager.v1.AccessLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessLevel::IsInitialized() const {
  return true;
}

void AccessLevel::Swap(AccessLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessLevel::InternalSwap(AccessLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(level_, other->level_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AccessLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto);
  return ::file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BasicLevel::InitAsDefaultInstance() {
}
class BasicLevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicLevel::kConditionsFieldNumber;
const int BasicLevel::kCombiningFunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicLevel::BasicLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.identity.accesscontextmanager.v1.BasicLevel)
}
BasicLevel::BasicLevel(const BasicLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  combining_function_ = from.combining_function_;
  // @@protoc_insertion_point(copy_constructor:google.identity.accesscontextmanager.v1.BasicLevel)
}

void BasicLevel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  combining_function_ = 0;
}

BasicLevel::~BasicLevel() {
  // @@protoc_insertion_point(destructor:google.identity.accesscontextmanager.v1.BasicLevel)
  SharedDtor();
}

void BasicLevel::SharedDtor() {
}

void BasicLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicLevel& BasicLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BasicLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  return *internal_default_instance();
}


void BasicLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:google.identity.accesscontextmanager.v1.BasicLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  combining_function_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BasicLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BasicLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::identity::accesscontextmanager::v1::Condition::_InternalParse;
          object = msg->add_conditions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_combining_function(static_cast<::google::identity::accesscontextmanager::v1::BasicLevel_ConditionCombiningFunction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BasicLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.identity.accesscontextmanager.v1.BasicLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_combining_function(static_cast< ::google::identity::accesscontextmanager::v1::BasicLevel_ConditionCombiningFunction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.identity.accesscontextmanager.v1.BasicLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.identity.accesscontextmanager.v1.BasicLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BasicLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.identity.accesscontextmanager.v1.BasicLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->conditions(static_cast<int>(i)),
      output);
  }

  // .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
  if (this->combining_function() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->combining_function(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.identity.accesscontextmanager.v1.BasicLevel)
}

::google::protobuf::uint8* BasicLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.identity.accesscontextmanager.v1.BasicLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->conditions(static_cast<int>(i)), target);
  }

  // .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
  if (this->combining_function() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->combining_function(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.identity.accesscontextmanager.v1.BasicLevel)
  return target;
}

size_t BasicLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.identity.accesscontextmanager.v1.BasicLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.identity.accesscontextmanager.v1.Condition conditions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->conditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->conditions(static_cast<int>(i)));
    }
  }

  // .google.identity.accesscontextmanager.v1.BasicLevel.ConditionCombiningFunction combining_function = 2;
  if (this->combining_function() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->combining_function());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.identity.accesscontextmanager.v1.BasicLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicLevel* source =
      ::google::protobuf::DynamicCastToGenerated<BasicLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.identity.accesscontextmanager.v1.BasicLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.identity.accesscontextmanager.v1.BasicLevel)
    MergeFrom(*source);
  }
}

void BasicLevel::MergeFrom(const BasicLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.identity.accesscontextmanager.v1.BasicLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  if (from.combining_function() != 0) {
    set_combining_function(from.combining_function());
  }
}

void BasicLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.identity.accesscontextmanager.v1.BasicLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicLevel::CopyFrom(const BasicLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.identity.accesscontextmanager.v1.BasicLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicLevel::IsInitialized() const {
  return true;
}

void BasicLevel::Swap(BasicLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicLevel::InternalSwap(BasicLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&conditions_)->InternalSwap(CastToBase(&other->conditions_));
  swap(combining_function_, other->combining_function_);
}

::google::protobuf::Metadata BasicLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto);
  return ::file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
  ::google::identity::accesscontextmanager::v1::_Condition_default_instance_._instance.get_mutable()->device_policy_ = const_cast< ::google::identity::accesscontextmanager::v1::DevicePolicy*>(
      ::google::identity::accesscontextmanager::v1::DevicePolicy::internal_default_instance());
}
class Condition::HasBitSetters {
 public:
  static const ::google::identity::accesscontextmanager::v1::DevicePolicy& device_policy(const Condition* msg);
};

const ::google::identity::accesscontextmanager::v1::DevicePolicy&
Condition::HasBitSetters::device_policy(const Condition* msg) {
  return *msg->device_policy_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Condition::kIpSubnetworksFieldNumber;
const int Condition::kDevicePolicyFieldNumber;
const int Condition::kRequiredAccessLevelsFieldNumber;
const int Condition::kNegateFieldNumber;
const int Condition::kMembersFieldNumber;
const int Condition::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Condition::Condition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.identity.accesscontextmanager.v1.Condition)
}
Condition::Condition(const Condition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      ip_subnetworks_(from.ip_subnetworks_),
      required_access_levels_(from.required_access_levels_),
      members_(from.members_),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device_policy()) {
    device_policy_ = new ::google::identity::accesscontextmanager::v1::DevicePolicy(*from.device_policy_);
  } else {
    device_policy_ = nullptr;
  }
  negate_ = from.negate_;
  // @@protoc_insertion_point(copy_constructor:google.identity.accesscontextmanager.v1.Condition)
}

void Condition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Condition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  ::memset(&device_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negate_) -
      reinterpret_cast<char*>(&device_policy_)) + sizeof(negate_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:google.identity.accesscontextmanager.v1.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
  if (this != internal_default_instance()) delete device_policy_;
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Condition_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.identity.accesscontextmanager.v1.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_subnetworks_.Clear();
  required_access_levels_.Clear();
  members_.Clear();
  regions_.Clear();
  if (GetArenaNoVirtual() == nullptr && device_policy_ != nullptr) {
    delete device_policy_;
  }
  device_policy_ = nullptr;
  negate_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Condition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Condition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string ip_subnetworks = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.Condition.ip_subnetworks");
          object = msg->add_ip_subnetworks();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .google.identity.accesscontextmanager.v1.DevicePolicy device_policy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::identity::accesscontextmanager::v1::DevicePolicy::_InternalParse;
        object = msg->mutable_device_policy();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated string required_access_levels = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.Condition.required_access_levels");
          object = msg->add_required_access_levels();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // bool negate = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_negate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string members = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.Condition.members");
          object = msg->add_members();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated string regions = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.Condition.regions");
          object = msg->add_regions();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.identity.accesscontextmanager.v1.Condition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ip_subnetworks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_subnetworks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_subnetworks(this->ip_subnetworks_size() - 1).data(),
            static_cast<int>(this->ip_subnetworks(this->ip_subnetworks_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.Condition.ip_subnetworks"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.identity.accesscontextmanager.v1.DevicePolicy device_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string required_access_levels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_access_levels()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->required_access_levels(this->required_access_levels_size() - 1).data(),
            static_cast<int>(this->required_access_levels(this->required_access_levels_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.Condition.required_access_levels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool negate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string members = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_members()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->members(this->members_size() - 1).data(),
            static_cast<int>(this->members(this->members_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.Condition.members"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string regions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regions(this->regions_size() - 1).data(),
            static_cast<int>(this->regions(this->regions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.Condition.regions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.identity.accesscontextmanager.v1.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.identity.accesscontextmanager.v1.Condition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.identity.accesscontextmanager.v1.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_subnetworks = 1;
  for (int i = 0, n = this->ip_subnetworks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_subnetworks(i).data(), static_cast<int>(this->ip_subnetworks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.ip_subnetworks");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip_subnetworks(i), output);
  }

  // .google.identity.accesscontextmanager.v1.DevicePolicy device_policy = 2;
  if (this->has_device_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::device_policy(this), output);
  }

  // repeated string required_access_levels = 3;
  for (int i = 0, n = this->required_access_levels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->required_access_levels(i).data(), static_cast<int>(this->required_access_levels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.required_access_levels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->required_access_levels(i), output);
  }

  // bool negate = 5;
  if (this->negate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->negate(), output);
  }

  // repeated string members = 6;
  for (int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->members(i).data(), static_cast<int>(this->members(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.members");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->members(i), output);
  }

  // repeated string regions = 7;
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regions(i).data(), static_cast<int>(this->regions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.regions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->regions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.identity.accesscontextmanager.v1.Condition)
}

::google::protobuf::uint8* Condition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.identity.accesscontextmanager.v1.Condition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ip_subnetworks = 1;
  for (int i = 0, n = this->ip_subnetworks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_subnetworks(i).data(), static_cast<int>(this->ip_subnetworks(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.ip_subnetworks");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ip_subnetworks(i), target);
  }

  // .google.identity.accesscontextmanager.v1.DevicePolicy device_policy = 2;
  if (this->has_device_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::device_policy(this), target);
  }

  // repeated string required_access_levels = 3;
  for (int i = 0, n = this->required_access_levels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->required_access_levels(i).data(), static_cast<int>(this->required_access_levels(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.required_access_levels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->required_access_levels(i), target);
  }

  // bool negate = 5;
  if (this->negate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->negate(), target);
  }

  // repeated string members = 6;
  for (int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->members(i).data(), static_cast<int>(this->members(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.members");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->members(i), target);
  }

  // repeated string regions = 7;
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regions(i).data(), static_cast<int>(this->regions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.Condition.regions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->regions(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.identity.accesscontextmanager.v1.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.identity.accesscontextmanager.v1.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ip_subnetworks = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ip_subnetworks_size());
  for (int i = 0, n = this->ip_subnetworks_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_subnetworks(i));
  }

  // repeated string required_access_levels = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->required_access_levels_size());
  for (int i = 0, n = this->required_access_levels_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_access_levels(i));
  }

  // repeated string members = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->members_size());
  for (int i = 0, n = this->members_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->members(i));
  }

  // repeated string regions = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->regions_size());
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regions(i));
  }

  // .google.identity.accesscontextmanager.v1.DevicePolicy device_policy = 2;
  if (this->has_device_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *device_policy_);
  }

  // bool negate = 5;
  if (this->negate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.identity.accesscontextmanager.v1.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::google::protobuf::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.identity.accesscontextmanager.v1.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.identity.accesscontextmanager.v1.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.identity.accesscontextmanager.v1.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_subnetworks_.MergeFrom(from.ip_subnetworks_);
  required_access_levels_.MergeFrom(from.required_access_levels_);
  members_.MergeFrom(from.members_);
  regions_.MergeFrom(from.regions_);
  if (from.has_device_policy()) {
    mutable_device_policy()->::google::identity::accesscontextmanager::v1::DevicePolicy::MergeFrom(from.device_policy());
  }
  if (from.negate() != 0) {
    set_negate(from.negate());
  }
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.identity.accesscontextmanager.v1.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.identity.accesscontextmanager.v1.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::Swap(Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_subnetworks_.InternalSwap(CastToBase(&other->ip_subnetworks_));
  required_access_levels_.InternalSwap(CastToBase(&other->required_access_levels_));
  members_.InternalSwap(CastToBase(&other->members_));
  regions_.InternalSwap(CastToBase(&other->regions_));
  swap(device_policy_, other->device_policy_);
  swap(negate_, other->negate_);
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto);
  return ::file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CustomLevel::InitAsDefaultInstance() {
  ::google::identity::accesscontextmanager::v1::_CustomLevel_default_instance_._instance.get_mutable()->expr_ = const_cast< ::google::type::Expr*>(
      ::google::type::Expr::internal_default_instance());
}
class CustomLevel::HasBitSetters {
 public:
  static const ::google::type::Expr& expr(const CustomLevel* msg);
};

const ::google::type::Expr&
CustomLevel::HasBitSetters::expr(const CustomLevel* msg) {
  return *msg->expr_;
}
void CustomLevel::clear_expr() {
  if (GetArenaNoVirtual() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomLevel::kExprFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomLevel::CustomLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.identity.accesscontextmanager.v1.CustomLevel)
}
CustomLevel::CustomLevel(const CustomLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expr()) {
    expr_ = new ::google::type::Expr(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.identity.accesscontextmanager.v1.CustomLevel)
}

void CustomLevel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  expr_ = nullptr;
}

CustomLevel::~CustomLevel() {
  // @@protoc_insertion_point(destructor:google.identity.accesscontextmanager.v1.CustomLevel)
  SharedDtor();
}

void CustomLevel::SharedDtor() {
  if (this != internal_default_instance()) delete expr_;
}

void CustomLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomLevel& CustomLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CustomLevel_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  return *internal_default_instance();
}


void CustomLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:google.identity.accesscontextmanager.v1.CustomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CustomLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CustomLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.type.Expr expr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::type::Expr::_InternalParse;
        object = msg->mutable_expr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CustomLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.identity.accesscontextmanager.v1.CustomLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.type.Expr expr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.identity.accesscontextmanager.v1.CustomLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.identity.accesscontextmanager.v1.CustomLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CustomLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.identity.accesscontextmanager.v1.CustomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.Expr expr = 1;
  if (this->has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::expr(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.identity.accesscontextmanager.v1.CustomLevel)
}

::google::protobuf::uint8* CustomLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.identity.accesscontextmanager.v1.CustomLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.type.Expr expr = 1;
  if (this->has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::expr(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.identity.accesscontextmanager.v1.CustomLevel)
  return target;
}

size_t CustomLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.identity.accesscontextmanager.v1.CustomLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.type.Expr expr = 1;
  if (this->has_expr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.identity.accesscontextmanager.v1.CustomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomLevel* source =
      ::google::protobuf::DynamicCastToGenerated<CustomLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.identity.accesscontextmanager.v1.CustomLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.identity.accesscontextmanager.v1.CustomLevel)
    MergeFrom(*source);
  }
}

void CustomLevel::MergeFrom(const CustomLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.identity.accesscontextmanager.v1.CustomLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expr()) {
    mutable_expr()->::google::type::Expr::MergeFrom(from.expr());
  }
}

void CustomLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.identity.accesscontextmanager.v1.CustomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomLevel::CopyFrom(const CustomLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.identity.accesscontextmanager.v1.CustomLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomLevel::IsInitialized() const {
  return true;
}

void CustomLevel::Swap(CustomLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomLevel::InternalSwap(CustomLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expr_, other->expr_);
}

::google::protobuf::Metadata CustomLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto);
  return ::file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DevicePolicy::InitAsDefaultInstance() {
}
class DevicePolicy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicePolicy::kRequireScreenlockFieldNumber;
const int DevicePolicy::kAllowedEncryptionStatusesFieldNumber;
const int DevicePolicy::kOsConstraintsFieldNumber;
const int DevicePolicy::kAllowedDeviceManagementLevelsFieldNumber;
const int DevicePolicy::kRequireAdminApprovalFieldNumber;
const int DevicePolicy::kRequireCorpOwnedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicePolicy::DevicePolicy()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.identity.accesscontextmanager.v1.DevicePolicy)
}
DevicePolicy::DevicePolicy(const DevicePolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      allowed_encryption_statuses_(from.allowed_encryption_statuses_),
      os_constraints_(from.os_constraints_),
      allowed_device_management_levels_(from.allowed_device_management_levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&require_screenlock_, &from.require_screenlock_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_corp_owned_) -
    reinterpret_cast<char*>(&require_screenlock_)) + sizeof(require_corp_owned_));
  // @@protoc_insertion_point(copy_constructor:google.identity.accesscontextmanager.v1.DevicePolicy)
}

void DevicePolicy::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  ::memset(&require_screenlock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_corp_owned_) -
      reinterpret_cast<char*>(&require_screenlock_)) + sizeof(require_corp_owned_));
}

DevicePolicy::~DevicePolicy() {
  // @@protoc_insertion_point(destructor:google.identity.accesscontextmanager.v1.DevicePolicy)
  SharedDtor();
}

void DevicePolicy::SharedDtor() {
}

void DevicePolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevicePolicy& DevicePolicy::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DevicePolicy_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  return *internal_default_instance();
}


void DevicePolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_encryption_statuses_.Clear();
  os_constraints_.Clear();
  allowed_device_management_levels_.Clear();
  ::memset(&require_screenlock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_corp_owned_) -
      reinterpret_cast<char*>(&require_screenlock_)) + sizeof(require_corp_owned_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DevicePolicy::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DevicePolicy*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool require_screenlock = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_require_screenlock(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .google.identity.accesscontextmanager.type.DeviceEncryptionStatus allowed_encryption_statuses = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_allowed_encryption_statuses();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_allowed_encryption_statuses(static_cast<::google::identity::accesscontextmanager::type::DeviceEncryptionStatus>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated .google.identity.accesscontextmanager.v1.OsConstraint os_constraints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::identity::accesscontextmanager::v1::OsConstraint::_InternalParse;
          object = msg->add_os_constraints();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .google.identity.accesscontextmanager.type.DeviceManagementLevel allowed_device_management_levels = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_allowed_device_management_levels();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_allowed_device_management_levels(static_cast<::google::identity::accesscontextmanager::type::DeviceManagementLevel>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
        break;
      }
      // bool require_admin_approval = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_require_admin_approval(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool require_corp_owned = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_require_corp_owned(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DevicePolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool require_screenlock = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_screenlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.identity.accesscontextmanager.type.DeviceEncryptionStatus allowed_encryption_statuses = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_allowed_encryption_statuses(static_cast< ::google::identity::accesscontextmanager::type::DeviceEncryptionStatus >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_allowed_encryption_statuses(static_cast< ::google::identity::accesscontextmanager::type::DeviceEncryptionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.identity.accesscontextmanager.v1.OsConstraint os_constraints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_os_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.identity.accesscontextmanager.type.DeviceManagementLevel allowed_device_management_levels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_allowed_device_management_levels(static_cast< ::google::identity::accesscontextmanager::type::DeviceManagementLevel >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_allowed_device_management_levels(static_cast< ::google::identity::accesscontextmanager::type::DeviceManagementLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool require_admin_approval = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_admin_approval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool require_corp_owned = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_corp_owned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.identity.accesscontextmanager.v1.DevicePolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.identity.accesscontextmanager.v1.DevicePolicy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DevicePolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool require_screenlock = 1;
  if (this->require_screenlock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->require_screenlock(), output);
  }

  // repeated .google.identity.accesscontextmanager.type.DeviceEncryptionStatus allowed_encryption_statuses = 2;
  if (this->allowed_encryption_statuses_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_allowed_encryption_statuses_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->allowed_encryption_statuses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->allowed_encryption_statuses(i), output);
  }

  // repeated .google.identity.accesscontextmanager.v1.OsConstraint os_constraints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->os_constraints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->os_constraints(static_cast<int>(i)),
      output);
  }

  // repeated .google.identity.accesscontextmanager.type.DeviceManagementLevel allowed_device_management_levels = 6;
  if (this->allowed_device_management_levels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_allowed_device_management_levels_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->allowed_device_management_levels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->allowed_device_management_levels(i), output);
  }

  // bool require_admin_approval = 7;
  if (this->require_admin_approval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->require_admin_approval(), output);
  }

  // bool require_corp_owned = 8;
  if (this->require_corp_owned() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->require_corp_owned(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.identity.accesscontextmanager.v1.DevicePolicy)
}

::google::protobuf::uint8* DevicePolicy::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool require_screenlock = 1;
  if (this->require_screenlock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->require_screenlock(), target);
  }

  // repeated .google.identity.accesscontextmanager.type.DeviceEncryptionStatus allowed_encryption_statuses = 2;
  if (this->allowed_encryption_statuses_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _allowed_encryption_statuses_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->allowed_encryption_statuses_, target);
  }

  // repeated .google.identity.accesscontextmanager.v1.OsConstraint os_constraints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->os_constraints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->os_constraints(static_cast<int>(i)), target);
  }

  // repeated .google.identity.accesscontextmanager.type.DeviceManagementLevel allowed_device_management_levels = 6;
  if (this->allowed_device_management_levels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _allowed_device_management_levels_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->allowed_device_management_levels_, target);
  }

  // bool require_admin_approval = 7;
  if (this->require_admin_approval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->require_admin_approval(), target);
  }

  // bool require_corp_owned = 8;
  if (this->require_corp_owned() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->require_corp_owned(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.identity.accesscontextmanager.v1.DevicePolicy)
  return target;
}

size_t DevicePolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.identity.accesscontextmanager.type.DeviceEncryptionStatus allowed_encryption_statuses = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->allowed_encryption_statuses_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->allowed_encryption_statuses(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _allowed_encryption_statuses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.identity.accesscontextmanager.v1.OsConstraint os_constraints = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->os_constraints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->os_constraints(static_cast<int>(i)));
    }
  }

  // repeated .google.identity.accesscontextmanager.type.DeviceManagementLevel allowed_device_management_levels = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->allowed_device_management_levels_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->allowed_device_management_levels(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _allowed_device_management_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool require_screenlock = 1;
  if (this->require_screenlock() != 0) {
    total_size += 1 + 1;
  }

  // bool require_admin_approval = 7;
  if (this->require_admin_approval() != 0) {
    total_size += 1 + 1;
  }

  // bool require_corp_owned = 8;
  if (this->require_corp_owned() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicePolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const DevicePolicy* source =
      ::google::protobuf::DynamicCastToGenerated<DevicePolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.identity.accesscontextmanager.v1.DevicePolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.identity.accesscontextmanager.v1.DevicePolicy)
    MergeFrom(*source);
  }
}

void DevicePolicy::MergeFrom(const DevicePolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_encryption_statuses_.MergeFrom(from.allowed_encryption_statuses_);
  os_constraints_.MergeFrom(from.os_constraints_);
  allowed_device_management_levels_.MergeFrom(from.allowed_device_management_levels_);
  if (from.require_screenlock() != 0) {
    set_require_screenlock(from.require_screenlock());
  }
  if (from.require_admin_approval() != 0) {
    set_require_admin_approval(from.require_admin_approval());
  }
  if (from.require_corp_owned() != 0) {
    set_require_corp_owned(from.require_corp_owned());
  }
}

void DevicePolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevicePolicy::CopyFrom(const DevicePolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.identity.accesscontextmanager.v1.DevicePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevicePolicy::IsInitialized() const {
  return true;
}

void DevicePolicy::Swap(DevicePolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DevicePolicy::InternalSwap(DevicePolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allowed_encryption_statuses_.InternalSwap(&other->allowed_encryption_statuses_);
  CastToBase(&os_constraints_)->InternalSwap(CastToBase(&other->os_constraints_));
  allowed_device_management_levels_.InternalSwap(&other->allowed_device_management_levels_);
  swap(require_screenlock_, other->require_screenlock_);
  swap(require_admin_approval_, other->require_admin_approval_);
  swap(require_corp_owned_, other->require_corp_owned_);
}

::google::protobuf::Metadata DevicePolicy::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto);
  return ::file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OsConstraint::InitAsDefaultInstance() {
}
class OsConstraint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OsConstraint::kOsTypeFieldNumber;
const int OsConstraint::kMinimumVersionFieldNumber;
const int OsConstraint::kRequireVerifiedChromeOsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OsConstraint::OsConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.identity.accesscontextmanager.v1.OsConstraint)
}
OsConstraint::OsConstraint(const OsConstraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  minimum_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.minimum_version().size() > 0) {
    minimum_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minimum_version_);
  }
  ::memcpy(&os_type_, &from.os_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_verified_chrome_os_) -
    reinterpret_cast<char*>(&os_type_)) + sizeof(require_verified_chrome_os_));
  // @@protoc_insertion_point(copy_constructor:google.identity.accesscontextmanager.v1.OsConstraint)
}

void OsConstraint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  minimum_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&os_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_verified_chrome_os_) -
      reinterpret_cast<char*>(&os_type_)) + sizeof(require_verified_chrome_os_));
}

OsConstraint::~OsConstraint() {
  // @@protoc_insertion_point(destructor:google.identity.accesscontextmanager.v1.OsConstraint)
  SharedDtor();
}

void OsConstraint::SharedDtor() {
  minimum_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OsConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OsConstraint& OsConstraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OsConstraint_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto.base);
  return *internal_default_instance();
}


void OsConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:google.identity.accesscontextmanager.v1.OsConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minimum_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&os_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_verified_chrome_os_) -
      reinterpret_cast<char*>(&os_type_)) + sizeof(require_verified_chrome_os_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OsConstraint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OsConstraint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.identity.accesscontextmanager.type.OsType os_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_os_type(static_cast<::google::identity::accesscontextmanager::type::OsType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string minimum_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("google.identity.accesscontextmanager.v1.OsConstraint.minimum_version");
        object = msg->mutable_minimum_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool require_verified_chrome_os = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_require_verified_chrome_os(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OsConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.identity.accesscontextmanager.v1.OsConstraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.identity.accesscontextmanager.type.OsType os_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os_type(static_cast< ::google::identity::accesscontextmanager::type::OsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string minimum_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minimum_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->minimum_version().data(), static_cast<int>(this->minimum_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.identity.accesscontextmanager.v1.OsConstraint.minimum_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool require_verified_chrome_os = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_verified_chrome_os_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.identity.accesscontextmanager.v1.OsConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.identity.accesscontextmanager.v1.OsConstraint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OsConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.identity.accesscontextmanager.v1.OsConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.identity.accesscontextmanager.type.OsType os_type = 1;
  if (this->os_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->os_type(), output);
  }

  // string minimum_version = 2;
  if (this->minimum_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->minimum_version().data(), static_cast<int>(this->minimum_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.OsConstraint.minimum_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->minimum_version(), output);
  }

  // bool require_verified_chrome_os = 3;
  if (this->require_verified_chrome_os() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->require_verified_chrome_os(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.identity.accesscontextmanager.v1.OsConstraint)
}

::google::protobuf::uint8* OsConstraint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.identity.accesscontextmanager.v1.OsConstraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.identity.accesscontextmanager.type.OsType os_type = 1;
  if (this->os_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->os_type(), target);
  }

  // string minimum_version = 2;
  if (this->minimum_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->minimum_version().data(), static_cast<int>(this->minimum_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.identity.accesscontextmanager.v1.OsConstraint.minimum_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->minimum_version(), target);
  }

  // bool require_verified_chrome_os = 3;
  if (this->require_verified_chrome_os() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->require_verified_chrome_os(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.identity.accesscontextmanager.v1.OsConstraint)
  return target;
}

size_t OsConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.identity.accesscontextmanager.v1.OsConstraint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string minimum_version = 2;
  if (this->minimum_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->minimum_version());
  }

  // .google.identity.accesscontextmanager.type.OsType os_type = 1;
  if (this->os_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os_type());
  }

  // bool require_verified_chrome_os = 3;
  if (this->require_verified_chrome_os() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OsConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.identity.accesscontextmanager.v1.OsConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const OsConstraint* source =
      ::google::protobuf::DynamicCastToGenerated<OsConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.identity.accesscontextmanager.v1.OsConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.identity.accesscontextmanager.v1.OsConstraint)
    MergeFrom(*source);
  }
}

void OsConstraint::MergeFrom(const OsConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.identity.accesscontextmanager.v1.OsConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minimum_version().size() > 0) {

    minimum_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.minimum_version_);
  }
  if (from.os_type() != 0) {
    set_os_type(from.os_type());
  }
  if (from.require_verified_chrome_os() != 0) {
    set_require_verified_chrome_os(from.require_verified_chrome_os());
  }
}

void OsConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.identity.accesscontextmanager.v1.OsConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OsConstraint::CopyFrom(const OsConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.identity.accesscontextmanager.v1.OsConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsConstraint::IsInitialized() const {
  return true;
}

void OsConstraint::Swap(OsConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OsConstraint::InternalSwap(OsConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  minimum_version_.Swap(&other->minimum_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(os_type_, other->os_type_);
  swap(require_verified_chrome_os_, other->require_verified_chrome_os_);
}

::google::protobuf::Metadata OsConstraint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto);
  return ::file_level_metadata_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5flevel_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace accesscontextmanager
}  // namespace identity
}  // namespace google
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::google::identity::accesscontextmanager::v1::AccessLevel* Arena::CreateMaybeMessage< ::google::identity::accesscontextmanager::v1::AccessLevel >(Arena* arena) {
  return Arena::CreateInternal< ::google::identity::accesscontextmanager::v1::AccessLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::google::identity::accesscontextmanager::v1::BasicLevel* Arena::CreateMaybeMessage< ::google::identity::accesscontextmanager::v1::BasicLevel >(Arena* arena) {
  return Arena::CreateInternal< ::google::identity::accesscontextmanager::v1::BasicLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::google::identity::accesscontextmanager::v1::Condition* Arena::CreateMaybeMessage< ::google::identity::accesscontextmanager::v1::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::google::identity::accesscontextmanager::v1::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::google::identity::accesscontextmanager::v1::CustomLevel* Arena::CreateMaybeMessage< ::google::identity::accesscontextmanager::v1::CustomLevel >(Arena* arena) {
  return Arena::CreateInternal< ::google::identity::accesscontextmanager::v1::CustomLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::google::identity::accesscontextmanager::v1::DevicePolicy* Arena::CreateMaybeMessage< ::google::identity::accesscontextmanager::v1::DevicePolicy >(Arena* arena) {
  return Arena::CreateInternal< ::google::identity::accesscontextmanager::v1::DevicePolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::identity::accesscontextmanager::v1::OsConstraint* Arena::CreateMaybeMessage< ::google::identity::accesscontextmanager::v1::OsConstraint >(Arena* arena) {
  return Arena::CreateInternal< ::google::identity::accesscontextmanager::v1::OsConstraint >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
