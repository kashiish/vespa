// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/identity/accesscontextmanager/v1/service_perimeter.proto

#ifndef PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto
#define PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto();
namespace google {
namespace identity {
namespace accesscontextmanager {
namespace v1 {
class ServicePerimeter;
class ServicePerimeterDefaultTypeInternal;
extern ServicePerimeterDefaultTypeInternal _ServicePerimeter_default_instance_;
class ServicePerimeterConfig;
class ServicePerimeterConfigDefaultTypeInternal;
extern ServicePerimeterConfigDefaultTypeInternal _ServicePerimeterConfig_default_instance_;
class ServicePerimeterConfig_VpcAccessibleServices;
class ServicePerimeterConfig_VpcAccessibleServicesDefaultTypeInternal;
extern ServicePerimeterConfig_VpcAccessibleServicesDefaultTypeInternal _ServicePerimeterConfig_VpcAccessibleServices_default_instance_;
}  // namespace v1
}  // namespace accesscontextmanager
}  // namespace identity
namespace protobuf {
template<> ::google::identity::accesscontextmanager::v1::ServicePerimeter* Arena::CreateMaybeMessage<::google::identity::accesscontextmanager::v1::ServicePerimeter>(Arena*);
template<> ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* Arena::CreateMaybeMessage<::google::identity::accesscontextmanager::v1::ServicePerimeterConfig>(Arena*);
template<> ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* Arena::CreateMaybeMessage<::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace identity {
namespace accesscontextmanager {
namespace v1 {

enum ServicePerimeter_PerimeterType {
  ServicePerimeter_PerimeterType_PERIMETER_TYPE_REGULAR = 0,
  ServicePerimeter_PerimeterType_PERIMETER_TYPE_BRIDGE = 1,
  ServicePerimeter_PerimeterType_ServicePerimeter_PerimeterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ServicePerimeter_PerimeterType_ServicePerimeter_PerimeterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ServicePerimeter_PerimeterType_IsValid(int value);
const ServicePerimeter_PerimeterType ServicePerimeter_PerimeterType_PerimeterType_MIN = ServicePerimeter_PerimeterType_PERIMETER_TYPE_REGULAR;
const ServicePerimeter_PerimeterType ServicePerimeter_PerimeterType_PerimeterType_MAX = ServicePerimeter_PerimeterType_PERIMETER_TYPE_BRIDGE;
const int ServicePerimeter_PerimeterType_PerimeterType_ARRAYSIZE = ServicePerimeter_PerimeterType_PerimeterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServicePerimeter_PerimeterType_descriptor();
inline const ::std::string& ServicePerimeter_PerimeterType_Name(ServicePerimeter_PerimeterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServicePerimeter_PerimeterType_descriptor(), value);
}
inline bool ServicePerimeter_PerimeterType_Parse(
    const ::std::string& name, ServicePerimeter_PerimeterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServicePerimeter_PerimeterType>(
    ServicePerimeter_PerimeterType_descriptor(), name, value);
}
// ===================================================================

class ServicePerimeter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.identity.accesscontextmanager.v1.ServicePerimeter) */ {
 public:
  ServicePerimeter();
  virtual ~ServicePerimeter();

  ServicePerimeter(const ServicePerimeter& from);

  inline ServicePerimeter& operator=(const ServicePerimeter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServicePerimeter(ServicePerimeter&& from) noexcept
    : ServicePerimeter() {
    *this = ::std::move(from);
  }

  inline ServicePerimeter& operator=(ServicePerimeter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServicePerimeter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServicePerimeter* internal_default_instance() {
    return reinterpret_cast<const ServicePerimeter*>(
               &_ServicePerimeter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServicePerimeter* other);
  friend void swap(ServicePerimeter& a, ServicePerimeter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServicePerimeter* New() const final {
    return CreateMaybeMessage<ServicePerimeter>(nullptr);
  }

  ServicePerimeter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServicePerimeter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServicePerimeter& from);
  void MergeFrom(const ServicePerimeter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServicePerimeter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServicePerimeter_PerimeterType PerimeterType;
  static const PerimeterType PERIMETER_TYPE_REGULAR =
    ServicePerimeter_PerimeterType_PERIMETER_TYPE_REGULAR;
  static const PerimeterType PERIMETER_TYPE_BRIDGE =
    ServicePerimeter_PerimeterType_PERIMETER_TYPE_BRIDGE;
  static inline bool PerimeterType_IsValid(int value) {
    return ServicePerimeter_PerimeterType_IsValid(value);
  }
  static const PerimeterType PerimeterType_MIN =
    ServicePerimeter_PerimeterType_PerimeterType_MIN;
  static const PerimeterType PerimeterType_MAX =
    ServicePerimeter_PerimeterType_PerimeterType_MAX;
  static const int PerimeterType_ARRAYSIZE =
    ServicePerimeter_PerimeterType_PerimeterType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PerimeterType_descriptor() {
    return ServicePerimeter_PerimeterType_descriptor();
  }
  static inline const ::std::string& PerimeterType_Name(PerimeterType value) {
    return ServicePerimeter_PerimeterType_Name(value);
  }
  static inline bool PerimeterType_Parse(const ::std::string& name,
      PerimeterType* value) {
    return ServicePerimeter_PerimeterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 5;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // .google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig& status() const;
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* release_status();
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* mutable_status();
  void set_allocated_status(::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* status);

  // .google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 8;
  const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig& spec() const;
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* release_spec();
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* mutable_spec();
  void set_allocated_spec(::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* spec);

  // .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
  void clear_perimeter_type();
  static const int kPerimeterTypeFieldNumber = 6;
  ::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType perimeter_type() const;
  void set_perimeter_type(::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType value);

  // bool use_explicit_dry_run_spec = 9;
  void clear_use_explicit_dry_run_spec();
  static const int kUseExplicitDryRunSpecFieldNumber = 9;
  bool use_explicit_dry_run_spec() const;
  void set_use_explicit_dry_run_spec(bool value);

  // @@protoc_insertion_point(class_scope:google.identity.accesscontextmanager.v1.ServicePerimeter)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* status_;
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* spec_;
  int perimeter_type_;
  bool use_explicit_dry_run_spec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto;
};
// -------------------------------------------------------------------

class ServicePerimeterConfig_VpcAccessibleServices final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices) */ {
 public:
  ServicePerimeterConfig_VpcAccessibleServices();
  virtual ~ServicePerimeterConfig_VpcAccessibleServices();

  ServicePerimeterConfig_VpcAccessibleServices(const ServicePerimeterConfig_VpcAccessibleServices& from);

  inline ServicePerimeterConfig_VpcAccessibleServices& operator=(const ServicePerimeterConfig_VpcAccessibleServices& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServicePerimeterConfig_VpcAccessibleServices(ServicePerimeterConfig_VpcAccessibleServices&& from) noexcept
    : ServicePerimeterConfig_VpcAccessibleServices() {
    *this = ::std::move(from);
  }

  inline ServicePerimeterConfig_VpcAccessibleServices& operator=(ServicePerimeterConfig_VpcAccessibleServices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServicePerimeterConfig_VpcAccessibleServices& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServicePerimeterConfig_VpcAccessibleServices* internal_default_instance() {
    return reinterpret_cast<const ServicePerimeterConfig_VpcAccessibleServices*>(
               &_ServicePerimeterConfig_VpcAccessibleServices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServicePerimeterConfig_VpcAccessibleServices* other);
  friend void swap(ServicePerimeterConfig_VpcAccessibleServices& a, ServicePerimeterConfig_VpcAccessibleServices& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServicePerimeterConfig_VpcAccessibleServices* New() const final {
    return CreateMaybeMessage<ServicePerimeterConfig_VpcAccessibleServices>(nullptr);
  }

  ServicePerimeterConfig_VpcAccessibleServices* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServicePerimeterConfig_VpcAccessibleServices>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServicePerimeterConfig_VpcAccessibleServices& from);
  void MergeFrom(const ServicePerimeterConfig_VpcAccessibleServices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServicePerimeterConfig_VpcAccessibleServices* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string allowed_services = 2;
  int allowed_services_size() const;
  void clear_allowed_services();
  static const int kAllowedServicesFieldNumber = 2;
  const ::std::string& allowed_services(int index) const;
  ::std::string* mutable_allowed_services(int index);
  void set_allowed_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allowed_services(int index, ::std::string&& value);
  #endif
  void set_allowed_services(int index, const char* value);
  void set_allowed_services(int index, const char* value, size_t size);
  ::std::string* add_allowed_services();
  void add_allowed_services(const ::std::string& value);
  #if LANG_CXX11
  void add_allowed_services(::std::string&& value);
  #endif
  void add_allowed_services(const char* value);
  void add_allowed_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allowed_services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allowed_services();

  // bool enable_restriction = 1;
  void clear_enable_restriction();
  static const int kEnableRestrictionFieldNumber = 1;
  bool enable_restriction() const;
  void set_enable_restriction(bool value);

  // @@protoc_insertion_point(class_scope:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> allowed_services_;
  bool enable_restriction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto;
};
// -------------------------------------------------------------------

class ServicePerimeterConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.identity.accesscontextmanager.v1.ServicePerimeterConfig) */ {
 public:
  ServicePerimeterConfig();
  virtual ~ServicePerimeterConfig();

  ServicePerimeterConfig(const ServicePerimeterConfig& from);

  inline ServicePerimeterConfig& operator=(const ServicePerimeterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServicePerimeterConfig(ServicePerimeterConfig&& from) noexcept
    : ServicePerimeterConfig() {
    *this = ::std::move(from);
  }

  inline ServicePerimeterConfig& operator=(ServicePerimeterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServicePerimeterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServicePerimeterConfig* internal_default_instance() {
    return reinterpret_cast<const ServicePerimeterConfig*>(
               &_ServicePerimeterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServicePerimeterConfig* other);
  friend void swap(ServicePerimeterConfig& a, ServicePerimeterConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServicePerimeterConfig* New() const final {
    return CreateMaybeMessage<ServicePerimeterConfig>(nullptr);
  }

  ServicePerimeterConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServicePerimeterConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServicePerimeterConfig& from);
  void MergeFrom(const ServicePerimeterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServicePerimeterConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServicePerimeterConfig_VpcAccessibleServices VpcAccessibleServices;

  // accessors -------------------------------------------------------

  // repeated string resources = 1;
  int resources_size() const;
  void clear_resources();
  static const int kResourcesFieldNumber = 1;
  const ::std::string& resources(int index) const;
  ::std::string* mutable_resources(int index);
  void set_resources(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_resources(int index, ::std::string&& value);
  #endif
  void set_resources(int index, const char* value);
  void set_resources(int index, const char* value, size_t size);
  ::std::string* add_resources();
  void add_resources(const ::std::string& value);
  #if LANG_CXX11
  void add_resources(::std::string&& value);
  #endif
  void add_resources(const char* value);
  void add_resources(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& resources() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_resources();

  // repeated string access_levels = 2;
  int access_levels_size() const;
  void clear_access_levels();
  static const int kAccessLevelsFieldNumber = 2;
  const ::std::string& access_levels(int index) const;
  ::std::string* mutable_access_levels(int index);
  void set_access_levels(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_access_levels(int index, ::std::string&& value);
  #endif
  void set_access_levels(int index, const char* value);
  void set_access_levels(int index, const char* value, size_t size);
  ::std::string* add_access_levels();
  void add_access_levels(const ::std::string& value);
  #if LANG_CXX11
  void add_access_levels(::std::string&& value);
  #endif
  void add_access_levels(const char* value);
  void add_access_levels(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& access_levels() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_access_levels();

  // repeated string restricted_services = 4;
  int restricted_services_size() const;
  void clear_restricted_services();
  static const int kRestrictedServicesFieldNumber = 4;
  const ::std::string& restricted_services(int index) const;
  ::std::string* mutable_restricted_services(int index);
  void set_restricted_services(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_restricted_services(int index, ::std::string&& value);
  #endif
  void set_restricted_services(int index, const char* value);
  void set_restricted_services(int index, const char* value, size_t size);
  ::std::string* add_restricted_services();
  void add_restricted_services(const ::std::string& value);
  #if LANG_CXX11
  void add_restricted_services(::std::string&& value);
  #endif
  void add_restricted_services(const char* value);
  void add_restricted_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& restricted_services() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_restricted_services();

  // .google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices vpc_accessible_services = 10;
  bool has_vpc_accessible_services() const;
  void clear_vpc_accessible_services();
  static const int kVpcAccessibleServicesFieldNumber = 10;
  const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices& vpc_accessible_services() const;
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* release_vpc_accessible_services();
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* mutable_vpc_accessible_services();
  void set_allocated_vpc_accessible_services(::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* vpc_accessible_services);

  // @@protoc_insertion_point(class_scope:google.identity.accesscontextmanager.v1.ServicePerimeterConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> resources_;
  ::google::protobuf::RepeatedPtrField<::std::string> access_levels_;
  ::google::protobuf::RepeatedPtrField<::std::string> restricted_services_;
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* vpc_accessible_services_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServicePerimeter

// string name = 1;
inline void ServicePerimeter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServicePerimeter::name() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
  return name_.GetNoArena();
}
inline void ServicePerimeter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
}
#if LANG_CXX11
inline void ServicePerimeter::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
}
#endif
inline void ServicePerimeter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
}
inline void ServicePerimeter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
}
inline ::std::string* ServicePerimeter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServicePerimeter::release_name() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServicePerimeter::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeter.name)
}

// string title = 2;
inline void ServicePerimeter::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServicePerimeter::title() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
  return title_.GetNoArena();
}
inline void ServicePerimeter::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
}
#if LANG_CXX11
inline void ServicePerimeter::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
}
#endif
inline void ServicePerimeter::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
}
inline void ServicePerimeter::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
}
inline ::std::string* ServicePerimeter::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServicePerimeter::release_title() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServicePerimeter::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeter.title)
}

// string description = 3;
inline void ServicePerimeter::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServicePerimeter::description() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
  return description_.GetNoArena();
}
inline void ServicePerimeter::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
}
#if LANG_CXX11
inline void ServicePerimeter::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
}
#endif
inline void ServicePerimeter::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
}
inline void ServicePerimeter::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
}
inline ::std::string* ServicePerimeter::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServicePerimeter::release_description() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServicePerimeter::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeter.description)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool ServicePerimeter::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ServicePerimeter::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ServicePerimeter::release_create_time() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeter.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ServicePerimeter::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeter.create_time)
  return create_time_;
}
inline void ServicePerimeter::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeter.create_time)
}

// .google.protobuf.Timestamp update_time = 5;
inline bool ServicePerimeter::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& ServicePerimeter::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ServicePerimeter::release_update_time() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeter.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ServicePerimeter::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeter.update_time)
  return update_time_;
}
inline void ServicePerimeter::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeter.update_time)
}

// .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
inline void ServicePerimeter::clear_perimeter_type() {
  perimeter_type_ = 0;
}
inline ::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType ServicePerimeter::perimeter_type() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.perimeter_type)
  return static_cast< ::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType >(perimeter_type_);
}
inline void ServicePerimeter::set_perimeter_type(::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType value) {
  
  perimeter_type_ = value;
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeter.perimeter_type)
}

// .google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;
inline bool ServicePerimeter::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline void ServicePerimeter::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig& ServicePerimeter::status() const {
  const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* p = status_;
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig*>(
      &::google::identity::accesscontextmanager::v1::_ServicePerimeterConfig_default_instance_);
}
inline ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* ServicePerimeter::release_status() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeter.status)
  
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* ServicePerimeter::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::identity::accesscontextmanager::v1::ServicePerimeterConfig>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeter.status)
  return status_;
}
inline void ServicePerimeter::set_allocated_status(::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeter.status)
}

// .google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;
inline bool ServicePerimeter::has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline void ServicePerimeter::clear_spec() {
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig& ServicePerimeter::spec() const {
  const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* p = spec_;
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.spec)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig*>(
      &::google::identity::accesscontextmanager::v1::_ServicePerimeterConfig_default_instance_);
}
inline ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* ServicePerimeter::release_spec() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeter.spec)
  
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* ServicePerimeter::mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::identity::accesscontextmanager::v1::ServicePerimeterConfig>(GetArenaNoVirtual());
    spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeter.spec)
  return spec_;
}
inline void ServicePerimeter::set_allocated_spec(::google::identity::accesscontextmanager::v1::ServicePerimeterConfig* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeter.spec)
}

// bool use_explicit_dry_run_spec = 9;
inline void ServicePerimeter::clear_use_explicit_dry_run_spec() {
  use_explicit_dry_run_spec_ = false;
}
inline bool ServicePerimeter::use_explicit_dry_run_spec() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeter.use_explicit_dry_run_spec)
  return use_explicit_dry_run_spec_;
}
inline void ServicePerimeter::set_use_explicit_dry_run_spec(bool value) {
  
  use_explicit_dry_run_spec_ = value;
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeter.use_explicit_dry_run_spec)
}

// -------------------------------------------------------------------

// ServicePerimeterConfig_VpcAccessibleServices

// bool enable_restriction = 1;
inline void ServicePerimeterConfig_VpcAccessibleServices::clear_enable_restriction() {
  enable_restriction_ = false;
}
inline bool ServicePerimeterConfig_VpcAccessibleServices::enable_restriction() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.enable_restriction)
  return enable_restriction_;
}
inline void ServicePerimeterConfig_VpcAccessibleServices::set_enable_restriction(bool value) {
  
  enable_restriction_ = value;
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.enable_restriction)
}

// repeated string allowed_services = 2;
inline int ServicePerimeterConfig_VpcAccessibleServices::allowed_services_size() const {
  return allowed_services_.size();
}
inline void ServicePerimeterConfig_VpcAccessibleServices::clear_allowed_services() {
  allowed_services_.Clear();
}
inline const ::std::string& ServicePerimeterConfig_VpcAccessibleServices::allowed_services(int index) const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
  return allowed_services_.Get(index);
}
inline ::std::string* ServicePerimeterConfig_VpcAccessibleServices::mutable_allowed_services(int index) {
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
  return allowed_services_.Mutable(index);
}
inline void ServicePerimeterConfig_VpcAccessibleServices::set_allowed_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
  allowed_services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServicePerimeterConfig_VpcAccessibleServices::set_allowed_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
  allowed_services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServicePerimeterConfig_VpcAccessibleServices::set_allowed_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
}
inline void ServicePerimeterConfig_VpcAccessibleServices::set_allowed_services(int index, const char* value, size_t size) {
  allowed_services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
}
inline ::std::string* ServicePerimeterConfig_VpcAccessibleServices::add_allowed_services() {
  // @@protoc_insertion_point(field_add_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
  return allowed_services_.Add();
}
inline void ServicePerimeterConfig_VpcAccessibleServices::add_allowed_services(const ::std::string& value) {
  allowed_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
}
#if LANG_CXX11
inline void ServicePerimeterConfig_VpcAccessibleServices::add_allowed_services(::std::string&& value) {
  allowed_services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
}
#endif
inline void ServicePerimeterConfig_VpcAccessibleServices::add_allowed_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
}
inline void ServicePerimeterConfig_VpcAccessibleServices::add_allowed_services(const char* value, size_t size) {
  allowed_services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServicePerimeterConfig_VpcAccessibleServices::allowed_services() const {
  // @@protoc_insertion_point(field_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
  return allowed_services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServicePerimeterConfig_VpcAccessibleServices::mutable_allowed_services() {
  // @@protoc_insertion_point(field_mutable_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices.allowed_services)
  return &allowed_services_;
}

// -------------------------------------------------------------------

// ServicePerimeterConfig

// repeated string resources = 1;
inline int ServicePerimeterConfig::resources_size() const {
  return resources_.size();
}
inline void ServicePerimeterConfig::clear_resources() {
  resources_.Clear();
}
inline const ::std::string& ServicePerimeterConfig::resources(int index) const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
  return resources_.Get(index);
}
inline ::std::string* ServicePerimeterConfig::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
  return resources_.Mutable(index);
}
inline void ServicePerimeterConfig::set_resources(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
  resources_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServicePerimeterConfig::set_resources(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
  resources_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServicePerimeterConfig::set_resources(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
}
inline void ServicePerimeterConfig::set_resources(int index, const char* value, size_t size) {
  resources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
}
inline ::std::string* ServicePerimeterConfig::add_resources() {
  // @@protoc_insertion_point(field_add_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
  return resources_.Add();
}
inline void ServicePerimeterConfig::add_resources(const ::std::string& value) {
  resources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
}
#if LANG_CXX11
inline void ServicePerimeterConfig::add_resources(::std::string&& value) {
  resources_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
}
#endif
inline void ServicePerimeterConfig::add_resources(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
}
inline void ServicePerimeterConfig::add_resources(const char* value, size_t size) {
  resources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServicePerimeterConfig::resources() const {
  // @@protoc_insertion_point(field_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServicePerimeterConfig::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.resources)
  return &resources_;
}

// repeated string access_levels = 2;
inline int ServicePerimeterConfig::access_levels_size() const {
  return access_levels_.size();
}
inline void ServicePerimeterConfig::clear_access_levels() {
  access_levels_.Clear();
}
inline const ::std::string& ServicePerimeterConfig::access_levels(int index) const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
  return access_levels_.Get(index);
}
inline ::std::string* ServicePerimeterConfig::mutable_access_levels(int index) {
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
  return access_levels_.Mutable(index);
}
inline void ServicePerimeterConfig::set_access_levels(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
  access_levels_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServicePerimeterConfig::set_access_levels(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
  access_levels_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServicePerimeterConfig::set_access_levels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  access_levels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
}
inline void ServicePerimeterConfig::set_access_levels(int index, const char* value, size_t size) {
  access_levels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
}
inline ::std::string* ServicePerimeterConfig::add_access_levels() {
  // @@protoc_insertion_point(field_add_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
  return access_levels_.Add();
}
inline void ServicePerimeterConfig::add_access_levels(const ::std::string& value) {
  access_levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
}
#if LANG_CXX11
inline void ServicePerimeterConfig::add_access_levels(::std::string&& value) {
  access_levels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
}
#endif
inline void ServicePerimeterConfig::add_access_levels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  access_levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
}
inline void ServicePerimeterConfig::add_access_levels(const char* value, size_t size) {
  access_levels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServicePerimeterConfig::access_levels() const {
  // @@protoc_insertion_point(field_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
  return access_levels_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServicePerimeterConfig::mutable_access_levels() {
  // @@protoc_insertion_point(field_mutable_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.access_levels)
  return &access_levels_;
}

// repeated string restricted_services = 4;
inline int ServicePerimeterConfig::restricted_services_size() const {
  return restricted_services_.size();
}
inline void ServicePerimeterConfig::clear_restricted_services() {
  restricted_services_.Clear();
}
inline const ::std::string& ServicePerimeterConfig::restricted_services(int index) const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
  return restricted_services_.Get(index);
}
inline ::std::string* ServicePerimeterConfig::mutable_restricted_services(int index) {
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
  return restricted_services_.Mutable(index);
}
inline void ServicePerimeterConfig::set_restricted_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
  restricted_services_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServicePerimeterConfig::set_restricted_services(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
  restricted_services_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServicePerimeterConfig::set_restricted_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  restricted_services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
}
inline void ServicePerimeterConfig::set_restricted_services(int index, const char* value, size_t size) {
  restricted_services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
}
inline ::std::string* ServicePerimeterConfig::add_restricted_services() {
  // @@protoc_insertion_point(field_add_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
  return restricted_services_.Add();
}
inline void ServicePerimeterConfig::add_restricted_services(const ::std::string& value) {
  restricted_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
}
#if LANG_CXX11
inline void ServicePerimeterConfig::add_restricted_services(::std::string&& value) {
  restricted_services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
}
#endif
inline void ServicePerimeterConfig::add_restricted_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  restricted_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
}
inline void ServicePerimeterConfig::add_restricted_services(const char* value, size_t size) {
  restricted_services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServicePerimeterConfig::restricted_services() const {
  // @@protoc_insertion_point(field_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
  return restricted_services_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServicePerimeterConfig::mutable_restricted_services() {
  // @@protoc_insertion_point(field_mutable_list:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.restricted_services)
  return &restricted_services_;
}

// .google.identity.accesscontextmanager.v1.ServicePerimeterConfig.VpcAccessibleServices vpc_accessible_services = 10;
inline bool ServicePerimeterConfig::has_vpc_accessible_services() const {
  return this != internal_default_instance() && vpc_accessible_services_ != nullptr;
}
inline void ServicePerimeterConfig::clear_vpc_accessible_services() {
  if (GetArenaNoVirtual() == nullptr && vpc_accessible_services_ != nullptr) {
    delete vpc_accessible_services_;
  }
  vpc_accessible_services_ = nullptr;
}
inline const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices& ServicePerimeterConfig::vpc_accessible_services() const {
  const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* p = vpc_accessible_services_;
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.vpc_accessible_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices*>(
      &::google::identity::accesscontextmanager::v1::_ServicePerimeterConfig_VpcAccessibleServices_default_instance_);
}
inline ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* ServicePerimeterConfig::release_vpc_accessible_services() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.vpc_accessible_services)
  
  ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* temp = vpc_accessible_services_;
  vpc_accessible_services_ = nullptr;
  return temp;
}
inline ::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* ServicePerimeterConfig::mutable_vpc_accessible_services() {
  
  if (vpc_accessible_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices>(GetArenaNoVirtual());
    vpc_accessible_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.vpc_accessible_services)
  return vpc_accessible_services_;
}
inline void ServicePerimeterConfig::set_allocated_vpc_accessible_services(::google::identity::accesscontextmanager::v1::ServicePerimeterConfig_VpcAccessibleServices* vpc_accessible_services) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vpc_accessible_services_;
  }
  if (vpc_accessible_services) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vpc_accessible_services = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vpc_accessible_services, submessage_arena);
    }
    
  } else {
    
  }
  vpc_accessible_services_ = vpc_accessible_services;
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.ServicePerimeterConfig.vpc_accessible_services)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace accesscontextmanager
}  // namespace identity
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType>() {
  return ::google::identity::accesscontextmanager::v1::ServicePerimeter_PerimeterType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2fv1_2fservice_5fperimeter_2eproto
