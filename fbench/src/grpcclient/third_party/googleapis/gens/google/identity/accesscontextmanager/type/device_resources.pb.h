// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/identity/accesscontextmanager/type/device_resources.proto

#ifndef PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2ftype_2fdevice_5fresources_2eproto
#define PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2ftype_2fdevice_5fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2ftype_2fdevice_5fresources_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fidentity_2faccesscontextmanager_2ftype_2fdevice_5fresources_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fidentity_2faccesscontextmanager_2ftype_2fdevice_5fresources_2eproto();
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
namespace google {
namespace identity {
namespace accesscontextmanager {
namespace type {

enum DeviceEncryptionStatus {
  ENCRYPTION_UNSPECIFIED = 0,
  ENCRYPTION_UNSUPPORTED = 1,
  UNENCRYPTED = 2,
  ENCRYPTED = 3,
  DeviceEncryptionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DeviceEncryptionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DeviceEncryptionStatus_IsValid(int value);
const DeviceEncryptionStatus DeviceEncryptionStatus_MIN = ENCRYPTION_UNSPECIFIED;
const DeviceEncryptionStatus DeviceEncryptionStatus_MAX = ENCRYPTED;
const int DeviceEncryptionStatus_ARRAYSIZE = DeviceEncryptionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceEncryptionStatus_descriptor();
inline const ::std::string& DeviceEncryptionStatus_Name(DeviceEncryptionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceEncryptionStatus_descriptor(), value);
}
inline bool DeviceEncryptionStatus_Parse(
    const ::std::string& name, DeviceEncryptionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceEncryptionStatus>(
    DeviceEncryptionStatus_descriptor(), name, value);
}
enum OsType {
  OS_UNSPECIFIED = 0,
  DESKTOP_MAC = 1,
  DESKTOP_WINDOWS = 2,
  DESKTOP_LINUX = 3,
  DESKTOP_CHROME_OS = 6,
  ANDROID = 4,
  IOS = 5,
  OsType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OsType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OsType_IsValid(int value);
const OsType OsType_MIN = OS_UNSPECIFIED;
const OsType OsType_MAX = DESKTOP_CHROME_OS;
const int OsType_ARRAYSIZE = OsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OsType_descriptor();
inline const ::std::string& OsType_Name(OsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OsType_descriptor(), value);
}
inline bool OsType_Parse(
    const ::std::string& name, OsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OsType>(
    OsType_descriptor(), name, value);
}
enum DeviceManagementLevel {
  MANAGEMENT_UNSPECIFIED = 0,
  NONE = 1,
  BASIC = 2,
  COMPLETE = 3,
  DeviceManagementLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DeviceManagementLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DeviceManagementLevel_IsValid(int value);
const DeviceManagementLevel DeviceManagementLevel_MIN = MANAGEMENT_UNSPECIFIED;
const DeviceManagementLevel DeviceManagementLevel_MAX = COMPLETE;
const int DeviceManagementLevel_ARRAYSIZE = DeviceManagementLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceManagementLevel_descriptor();
inline const ::std::string& DeviceManagementLevel_Name(DeviceManagementLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceManagementLevel_descriptor(), value);
}
inline bool DeviceManagementLevel_Parse(
    const ::std::string& name, DeviceManagementLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceManagementLevel>(
    DeviceManagementLevel_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace accesscontextmanager
}  // namespace identity
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::identity::accesscontextmanager::type::DeviceEncryptionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::identity::accesscontextmanager::type::DeviceEncryptionStatus>() {
  return ::google::identity::accesscontextmanager::type::DeviceEncryptionStatus_descriptor();
}
template <> struct is_proto_enum< ::google::identity::accesscontextmanager::type::OsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::identity::accesscontextmanager::type::OsType>() {
  return ::google::identity::accesscontextmanager::type::OsType_descriptor();
}
template <> struct is_proto_enum< ::google::identity::accesscontextmanager::type::DeviceManagementLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::identity::accesscontextmanager::type::DeviceManagementLevel>() {
  return ::google::identity::accesscontextmanager::type::DeviceManagementLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2ftype_2fdevice_5fresources_2eproto
