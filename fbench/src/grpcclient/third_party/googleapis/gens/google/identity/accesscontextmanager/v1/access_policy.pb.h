// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/identity/accesscontextmanager/v1/access_policy.proto

#ifndef PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5fpolicy_2eproto
#define PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5fpolicy_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5fpolicy_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5fpolicy_2eproto();
namespace google {
namespace identity {
namespace accesscontextmanager {
namespace v1 {
class AccessPolicy;
class AccessPolicyDefaultTypeInternal;
extern AccessPolicyDefaultTypeInternal _AccessPolicy_default_instance_;
}  // namespace v1
}  // namespace accesscontextmanager
}  // namespace identity
namespace protobuf {
template<> ::google::identity::accesscontextmanager::v1::AccessPolicy* Arena::CreateMaybeMessage<::google::identity::accesscontextmanager::v1::AccessPolicy>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace identity {
namespace accesscontextmanager {
namespace v1 {

// ===================================================================

class AccessPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.identity.accesscontextmanager.v1.AccessPolicy) */ {
 public:
  AccessPolicy();
  virtual ~AccessPolicy();

  AccessPolicy(const AccessPolicy& from);

  inline AccessPolicy& operator=(const AccessPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccessPolicy(AccessPolicy&& from) noexcept
    : AccessPolicy() {
    *this = ::std::move(from);
  }

  inline AccessPolicy& operator=(AccessPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AccessPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessPolicy* internal_default_instance() {
    return reinterpret_cast<const AccessPolicy*>(
               &_AccessPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AccessPolicy* other);
  friend void swap(AccessPolicy& a, AccessPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessPolicy* New() const final {
    return CreateMaybeMessage<AccessPolicy>(nullptr);
  }

  AccessPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccessPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccessPolicy& from);
  void MergeFrom(const AccessPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string parent = 2;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string etag = 6;
  void clear_etag();
  static const int kEtagFieldNumber = 6;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  #if LANG_CXX11
  void set_etag(::std::string&& value);
  #endif
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);

  // .google.protobuf.Timestamp create_time = 4;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 5;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // @@protoc_insertion_point(class_scope:google.identity.accesscontextmanager.v1.AccessPolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccessPolicy

// string name = 1;
inline void AccessPolicy::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessPolicy::name() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.AccessPolicy.name)
  return name_.GetNoArena();
}
inline void AccessPolicy::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.AccessPolicy.name)
}
#if LANG_CXX11
inline void AccessPolicy::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.identity.accesscontextmanager.v1.AccessPolicy.name)
}
#endif
inline void AccessPolicy::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.AccessPolicy.name)
}
inline void AccessPolicy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.AccessPolicy.name)
}
inline ::std::string* AccessPolicy::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.AccessPolicy.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessPolicy::release_name() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.AccessPolicy.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessPolicy::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessPolicy.name)
}

// string parent = 2;
inline void AccessPolicy::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessPolicy::parent() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
  return parent_.GetNoArena();
}
inline void AccessPolicy::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
}
#if LANG_CXX11
inline void AccessPolicy::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
}
#endif
inline void AccessPolicy::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
}
inline void AccessPolicy::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
}
inline ::std::string* AccessPolicy::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessPolicy::release_parent() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessPolicy::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessPolicy.parent)
}

// string title = 3;
inline void AccessPolicy::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessPolicy::title() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.AccessPolicy.title)
  return title_.GetNoArena();
}
inline void AccessPolicy::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.AccessPolicy.title)
}
#if LANG_CXX11
inline void AccessPolicy::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.identity.accesscontextmanager.v1.AccessPolicy.title)
}
#endif
inline void AccessPolicy::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.AccessPolicy.title)
}
inline void AccessPolicy::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.AccessPolicy.title)
}
inline ::std::string* AccessPolicy::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.AccessPolicy.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessPolicy::release_title() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.AccessPolicy.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessPolicy::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessPolicy.title)
}

// .google.protobuf.Timestamp create_time = 4;
inline bool AccessPolicy::has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& AccessPolicy::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.AccessPolicy.create_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AccessPolicy::release_create_time() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.AccessPolicy.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AccessPolicy::mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.AccessPolicy.create_time)
  return create_time_;
}
inline void AccessPolicy::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessPolicy.create_time)
}

// .google.protobuf.Timestamp update_time = 5;
inline bool AccessPolicy::has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& AccessPolicy::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.AccessPolicy.update_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* AccessPolicy::release_update_time() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.AccessPolicy.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AccessPolicy::mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.AccessPolicy.update_time)
  return update_time_;
}
inline void AccessPolicy::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessPolicy.update_time)
}

// string etag = 6;
inline void AccessPolicy::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccessPolicy::etag() const {
  // @@protoc_insertion_point(field_get:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
  return etag_.GetNoArena();
}
inline void AccessPolicy::set_etag(const ::std::string& value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
}
#if LANG_CXX11
inline void AccessPolicy::set_etag(::std::string&& value) {
  
  etag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
}
#endif
inline void AccessPolicy::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
}
inline void AccessPolicy::set_etag(const char* value, size_t size) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
}
inline ::std::string* AccessPolicy::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccessPolicy::release_etag() {
  // @@protoc_insertion_point(field_release:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
  
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccessPolicy::set_allocated_etag(::std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:google.identity.accesscontextmanager.v1.AccessPolicy.etag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace accesscontextmanager
}  // namespace identity
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fidentity_2faccesscontextmanager_2fv1_2faccess_5fpolicy_2eproto
